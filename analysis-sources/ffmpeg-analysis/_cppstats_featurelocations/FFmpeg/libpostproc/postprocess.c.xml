<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libpostproc\postprocess.c">










































































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avutil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postprocess.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postprocess_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/util_altivec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ffversion.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>postproc_ffversion</name><index>[]</index></name> <init>= <expr><literal type="string">"FFmpeg version "</literal> <name>FFMPEG_VERSION</name></expr></init></decl>;</decl_stmt>

<function><type><name>unsigned</name></type> <name>postproc_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>LIBPOSTPROC_VERSION_MICRO</name> <operator>&gt;=</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LIBPOSTPROC_VERSION_INT</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>postproc_configuration</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>FFMPEG_CONFIGURATION</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>postproc_license</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LICENSE_PREFIX</name></cpp:macro> <cpp:value>"libpostproc license: "</cpp:value></cpp:define>
<return>return <expr><operator>&amp;</operator><name>LICENSE_PREFIX</name> <name><name>FFMPEG_LICENSE</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>LICENSE_PREFIX</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_MODE_BUFFER_SIZE</name></cpp:macro> <cpp:value>500</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPTIONS_ARRAY_SIZE</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_SIZE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMP_STRIDE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86</name> <operator>&amp;&amp;</operator> <name>HAVE_INLINE_ASM</name></expr></cpp:if>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>w05</name></expr></argument>)</argument_list></call><operator>=</operator> <literal type="number">0x0005000500050005LL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>w04</name></expr></argument>)</argument_list></call><operator>=</operator> <literal type="number">0x0004000400040004LL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>w20</name></expr></argument>)</argument_list></call><operator>=</operator> <literal type="number">0x0020002000200020LL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>b00</name></expr></argument>)</argument_list></call><operator>=</operator> <literal type="number">0x0000000000000000LL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>b01</name></expr></argument>)</argument_list></call><operator>=</operator> <literal type="number">0x0101010101010101LL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>b02</name></expr></argument>)</argument_list></call><operator>=</operator> <literal type="number">0x0202020202020202LL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>b08</name></expr></argument>)</argument_list></call><operator>=</operator> <literal type="number">0x0808080808080808LL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>b80</name></expr></argument>)</argument_list></call><operator>=</operator> <literal type="number">0x8080808080808080LL</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>deringThreshold</name></expr></argument>)</argument_list></call><operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>PPFilter</name></name></type> <name><name>filters</name><index>[]</index></name><init>=
<expr><block>{
<expr><block>{<expr><literal type="string">"hb"</literal></expr>, <expr><literal type="string">"hdeblock"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>H_DEBLOCK</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"vb"</literal></expr>, <expr><literal type="string">"vdeblock"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>V_DEBLOCK</name></expr>}</block></expr>,


<expr><block>{<expr><literal type="string">"h1"</literal></expr>, <expr><literal type="string">"x1hdeblock"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>H_X1_FILTER</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"v1"</literal></expr>, <expr><literal type="string">"x1vdeblock"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>V_X1_FILTER</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ha"</literal></expr>, <expr><literal type="string">"ahdeblock"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>H_A_DEBLOCK</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"va"</literal></expr>, <expr><literal type="string">"avdeblock"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>V_A_DEBLOCK</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"dr"</literal></expr>, <expr><literal type="string">"dering"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name>DERING</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"al"</literal></expr>, <expr><literal type="string">"autolevels"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>LEVEL_FIX</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"lb"</literal></expr>, <expr><literal type="string">"linblenddeint"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>LINEAR_BLEND_DEINT_FILTER</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"li"</literal></expr>, <expr><literal type="string">"linipoldeint"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>LINEAR_IPOL_DEINT_FILTER</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ci"</literal></expr>, <expr><literal type="string">"cubicipoldeint"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>CUBIC_IPOL_DEINT_FILTER</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"md"</literal></expr>, <expr><literal type="string">"mediandeint"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>MEDIAN_DEINT_FILTER</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"fd"</literal></expr>, <expr><literal type="string">"ffmpegdeint"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>FFMPEG_DEINT_FILTER</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"l5"</literal></expr>, <expr><literal type="string">"lowpass5"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>LOWPASS5_DEINT_FILTER</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"tn"</literal></expr>, <expr><literal type="string">"tmpnoise"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><name>TEMP_NOISE_FILTER</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"fq"</literal></expr>, <expr><literal type="string">"forcequant"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FORCE_QUANT</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"be"</literal></expr>, <expr><literal type="string">"bitexact"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>BITEXACT</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"vi"</literal></expr>, <expr><literal type="string">"visualize"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VISUALIZE</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr> 
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>replaceTable</name><index>[]</index></name><init>=
<expr><block>{
<expr><literal type="string">"default"</literal></expr>, <expr><literal type="string">"hb:a,vb:a,dr:a"</literal></expr>,
<expr><literal type="string">"de"</literal></expr>, <expr><literal type="string">"hb:a,vb:a,dr:a"</literal></expr>,
<expr><literal type="string">"fast"</literal></expr>, <expr><literal type="string">"h1:a,v1:a,dr:a"</literal></expr>,
<expr><literal type="string">"fa"</literal></expr>, <expr><literal type="string">"h1:a,v1:a,dr:a"</literal></expr>,
<expr><literal type="string">"ac"</literal></expr>, <expr><literal type="string">"ha:a:128:7,va:a,dr:a"</literal></expr>,
<expr><name>NULL</name></expr> 
}</block></expr></init></decl>;</decl_stmt>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>isHorizDC_C</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>src</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>numEq</name><init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dcOffset</name><init>= <expr><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>nonBQP</name></name><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>ppMode</name><operator>.</operator><name>baseDcDiff</name></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dcThreshold</name><init>= <expr><name>dcOffset</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>BLOCK_SIZE</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name>numEq</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>dcOffset</name><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <name>dcThreshold</name></expr>;</expr_stmt>
<expr_stmt><expr><name>numEq</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>dcOffset</name><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <name>dcThreshold</name></expr>;</expr_stmt>
<expr_stmt><expr><name>numEq</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>dcOffset</name><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <name>dcThreshold</name></expr>;</expr_stmt>
<expr_stmt><expr><name>numEq</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name>dcOffset</name><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <name>dcThreshold</name></expr>;</expr_stmt>
<expr_stmt><expr><name>numEq</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name>dcOffset</name><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <name>dcThreshold</name></expr>;</expr_stmt>
<expr_stmt><expr><name>numEq</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name>dcOffset</name><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <name>dcThreshold</name></expr>;</expr_stmt>
<expr_stmt><expr><name>numEq</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <name>dcOffset</name><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <name>dcThreshold</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name><operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>numEq</name> <operator>&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>ppMode</name><operator>.</operator><name>flatnessThreshold</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>isVertDC_C</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>src</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>numEq</name><init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dcOffset</name><init>= <expr><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>nonBQP</name></name><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>ppMode</name><operator>.</operator><name>baseDcDiff</name></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dcThreshold</name><init>= <expr><name>dcOffset</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name><operator>+=</operator> <name>stride</name><operator>*</operator><literal type="number">4</literal></expr>;</expr_stmt> 
<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>BLOCK_SIZE</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name>numEq</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <name>dcOffset</name><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <name>dcThreshold</name></expr>;</expr_stmt>
<expr_stmt><expr><name>numEq</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <name>dcOffset</name><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <name>dcThreshold</name></expr>;</expr_stmt>
<expr_stmt><expr><name>numEq</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <name>dcOffset</name><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <name>dcThreshold</name></expr>;</expr_stmt>
<expr_stmt><expr><name>numEq</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <name>dcOffset</name><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <name>dcThreshold</name></expr>;</expr_stmt>
<expr_stmt><expr><name>numEq</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">4</literal><operator>+</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <name>dcOffset</name><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <name>dcThreshold</name></expr>;</expr_stmt>
<expr_stmt><expr><name>numEq</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">5</literal><operator>+</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <name>dcOffset</name><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <name>dcThreshold</name></expr>;</expr_stmt>
<expr_stmt><expr><name>numEq</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">6</literal><operator>+</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <name>dcOffset</name><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <name>dcThreshold</name></expr>;</expr_stmt>
<expr_stmt><expr><name>numEq</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">7</literal><operator>+</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <name>dcOffset</name><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <name>dcThreshold</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name><operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>numEq</name> <operator>&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>ppMode</name><operator>.</operator><name>flatnessThreshold</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>isHorizMinMaxOk_C</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>src</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>QP</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>QP</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">4</literal><operator>*</operator><name>QP</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>QP</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">4</literal><operator>*</operator><name>QP</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>QP</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">4</literal><operator>*</operator><name>QP</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>QP</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">4</literal><operator>*</operator><name>QP</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>isVertMinMaxOk_C</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>src</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>QP</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<expr_stmt><expr><name>src</name><operator>+=</operator> <name>stride</name><operator>*</operator><literal type="number">4</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>BLOCK_SIZE</name></expr>;</condition> <incr><expr><name>x</name><operator>+=</operator><literal type="number">4</literal></expr></incr>)</control><block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>src</name><index>[ <expr><name>x</name> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[ <expr><name>x</name> <operator>+</operator> <literal type="number">5</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>QP</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">4</literal><operator>*</operator><name>QP</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><name>x</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><name>x</name> <operator>+</operator> <literal type="number">7</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>QP</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">4</literal><operator>*</operator><name>QP</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name>x</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>QP</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">4</literal><operator>*</operator><name>QP</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><name>x</name> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><name>x</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>QP</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">4</literal><operator>*</operator><name>QP</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>horizClassify_C</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>src</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>isHorizDC_C</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
<return>return <expr><call><name>isHorizMinMaxOk_C</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>QP</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if><else>else<block>{<block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vertClassify_C</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>src</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>( <expr><call><name>isVertDC_C</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
<return>return <expr><call><name>isVertMinMaxOk_C</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>QP</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if><else>else<block>{<block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>doHorizDefFilter_C</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name><name>dst</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>BLOCK_SIZE</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>middleEnergy</name><init>= <expr><literal type="number">5</literal><operator>*</operator><operator>(</operator><name><name>dst</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>dst</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name>middleEnergy</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">8</literal><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>QP</name></name></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>q</name><init>=<expr><operator>(</operator><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>dst</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>leftEnergy</name><init>= <expr><literal type="number">5</literal><operator>*</operator><operator>(</operator><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>rightEnergy</name><init>= <expr><literal type="number">5</literal><operator>*</operator><operator>(</operator><name><name>dst</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>-</operator> <name><name>dst</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><name><name>dst</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>dst</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>d</name><init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>middleEnergy</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>FFMIN</name><argument_list>( <argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name>leftEnergy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name>rightEnergy</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>d</name><operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name><operator>=</operator> <operator>(</operator><literal type="number">5</literal><operator>*</operator><name>d</name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name><operator>*=</operator> <call><name>FFSIGN</name><argument_list>(<argument><expr><operator>-</operator><name>middleEnergy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>q</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>+=</operator> <name>d</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dst</name><operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>doHorizLowPass_C</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name><name>dst</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>BLOCK_SIZE</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>first</name><init>= <expr><ternary><condition><expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>QP</name></name></expr> ?</condition><then> <expr><name><name>dst</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>last</name><init>= <expr><ternary><condition><expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <name><name>dst</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>QP</name></name></expr> ?</condition><then> <expr><name><name>dst</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>dst</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>sums</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sums</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal><operator>*</operator><name>first</name> <operator>+</operator> <name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sums</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sums</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>first</name> <operator>+</operator> <name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sums</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>sums</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>first</name> <operator>+</operator> <name><name>dst</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sums</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>sums</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name>first</name> <operator>+</operator> <name><name>dst</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sums</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>sums</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name>first</name> <operator>+</operator> <name><name>dst</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sums</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>sums</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dst</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sums</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>sums</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>last</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sums</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>sums</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>-</operator> <name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>last</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sums</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>sums</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>-</operator> <name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>last</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sums</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>sums</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <name><name>dst</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name>last</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>sums</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>sums</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>sums</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>sums</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>sums</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>sums</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>sums</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>sums</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>sums</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>sums</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>dst</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>sums</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name><name>sums</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>dst</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>sums</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name><name>sums</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>dst</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>sums</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <name><name>sums</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>dst</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name><operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>horizX1Filter</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>QP</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name><name>lut</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>lut</name><index>[<expr><literal type="number">255</literal></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name><init>= <expr><ternary><condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">128</literal></expr> ?</condition><then> <expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr> </then><else>: <expr><literal type="number">2</literal><operator>*</operator><operator>(</operator><name>i</name><operator>-</operator><literal type="number">256</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>








<decl_stmt><decl><type><name>uint64_t</name></type> <name>a</name><init>= <expr><operator>(</operator><name>v</name><operator>/</operator><literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>b</name><init>= <expr><operator>(</operator><name>v</name><operator>*</operator><literal type="number">3</literal><operator>/</operator><literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>c</name><init>= <expr><operator>(</operator><name>v</name><operator>*</operator><literal type="number">5</literal><operator>/</operator><literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>d</name><init>= <expr><operator>(</operator><literal type="number">7</literal><operator>*</operator><name>v</name><operator>/</operator><literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>A</name><init>= <expr><operator>(</operator><literal type="number">0x100</literal> <operator>-</operator> <name>a</name><operator>)</operator><operator>&amp;</operator><literal type="number">0xFF</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>B</name><init>= <expr><operator>(</operator><literal type="number">0x100</literal> <operator>-</operator> <name>b</name><operator>)</operator><operator>&amp;</operator><literal type="number">0xFF</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>C</name><init>= <expr><operator>(</operator><literal type="number">0x100</literal> <operator>-</operator> <name>c</name><operator>)</operator><operator>&amp;</operator><literal type="number">0xFF</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>D</name><init>= <expr><operator>(</operator><literal type="number">0x100</literal> <operator>-</operator> <name>c</name><operator>)</operator><operator>&amp;</operator><literal type="number">0xFF</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>lut</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a</name><operator>&lt;&lt;</operator><literal type="number">56</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>b</name><operator>&lt;&lt;</operator><literal type="number">48</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>c</name><operator>&lt;&lt;</operator><literal type="number">40</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>d</name><operator>&lt;&lt;</operator><literal type="number">32</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name>D</name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>C</name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>B</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>A</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>BLOCK_SIZE</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a</name><init>= <expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name><init>= <expr><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name><init>= <expr><name><name>src</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>d</name><init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>d</name> <operator>&lt;</operator> <name>QP</name></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name>d</name> <operator>*</operator> <call><name>FFSIGN</name><argument_list>(<argument><expr><operator>-</operator><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator><name>v</name><operator>/</operator><literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator><name>v</name><operator>/</operator><literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator><literal type="number">3</literal><operator>*</operator><name>v</name><operator>/</operator><literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-=</operator><literal type="number">3</literal><operator>*</operator><name>v</name><operator>/</operator><literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>-=</operator><name>v</name><operator>/</operator><literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>-=</operator><name>v</name><operator>/</operator><literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>src</name><operator>+=</operator><name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>do_a_deblock_C</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>step</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>QP</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>QP</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dcOffset</name><init>= <expr><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>nonBQP</name></name><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>ppMode</name><operator>.</operator><name>baseDcDiff</name></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dcThreshold</name><init>= <expr><name>dcOffset</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name><operator>+=</operator> <name>step</name><operator>*</operator><literal type="number">4</literal></expr>;</expr_stmt> 
<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>numEq</name><init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>numEq</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator> <name>dcOffset</name><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <name>dcThreshold</name></expr>;</expr_stmt>
<expr_stmt><expr><name>numEq</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>src</name><index>[ <expr><literal type="number">0</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator> <name>dcOffset</name><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <name>dcThreshold</name></expr>;</expr_stmt>
<expr_stmt><expr><name>numEq</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>src</name><index>[ <expr><literal type="number">1</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator> <name>dcOffset</name><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <name>dcThreshold</name></expr>;</expr_stmt>
<expr_stmt><expr><name>numEq</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>src</name><index>[ <expr><literal type="number">2</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator> <name>dcOffset</name><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <name>dcThreshold</name></expr>;</expr_stmt>
<expr_stmt><expr><name>numEq</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>src</name><index>[ <expr><literal type="number">3</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator> <name>dcOffset</name><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <name>dcThreshold</name></expr>;</expr_stmt>
<expr_stmt><expr><name>numEq</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>src</name><index>[ <expr><literal type="number">4</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">5</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator> <name>dcOffset</name><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <name>dcThreshold</name></expr>;</expr_stmt>
<expr_stmt><expr><name>numEq</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>src</name><index>[ <expr><literal type="number">5</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">6</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator> <name>dcOffset</name><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <name>dcThreshold</name></expr>;</expr_stmt>
<expr_stmt><expr><name>numEq</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>src</name><index>[ <expr><literal type="number">6</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">7</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator> <name>dcOffset</name><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <name>dcThreshold</name></expr>;</expr_stmt>
<expr_stmt><expr><name>numEq</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>src</name><index>[ <expr><literal type="number">7</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator> <name>dcOffset</name><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <name>dcThreshold</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>numEq</name> <operator>&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>ppMode</name><operator>.</operator><name>flatnessThreshold</name></name></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>min</name></decl>, <decl><type ref="prev"/><name>max</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>src</name><index>[<expr><name>step</name></expr>]</index></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>max</name><operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>min</name><operator>=</operator> <name><name>src</name><index>[<expr><name>step</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if><else>else<block>{<block_content>
<expr_stmt><expr><name>max</name><operator>=</operator> <name><name>src</name><index>[<expr><name>step</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>min</name><operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control><block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>src</name><index>[<expr><name>x</name><operator>*</operator><name>step</name></expr>]</index></name> <operator>&gt;</operator> <name><name>src</name><index>[<expr><operator>(</operator><name>x</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>step</name></expr>]</index></name></expr>)</condition><block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>src</name><index>[<expr><name>x</name> <operator>*</operator><name>step</name></expr>]</index></name> <operator>&gt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>max</name><operator>=</operator> <name><name>src</name><index>[ <expr><name>x</name> <operator>*</operator><name>step</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>src</name><index>[<expr><operator>(</operator><name>x</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>step</name></expr>]</index></name> <operator>&lt;</operator> <name>min</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>min</name><operator>=</operator> <name><name>src</name><index>[<expr><operator>(</operator><name>x</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>step</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if><else>else<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>src</name><index>[<expr><operator>(</operator><name>x</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>step</name></expr>]</index></name> <operator>&gt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>max</name><operator>=</operator> <name><name>src</name><index>[<expr><operator>(</operator><name>x</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>step</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>src</name><index>[ <expr><name>x</name> <operator>*</operator><name>step</name></expr>]</index></name> <operator>&lt;</operator> <name>min</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>min</name><operator>=</operator> <name><name>src</name><index>[ <expr><name>x</name> <operator>*</operator><name>step</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>(<expr><name>max</name><operator>-</operator><name>min</name> <operator>&lt;</operator> <literal type="number">2</literal><operator>*</operator><name>QP</name></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>first</name><init>= <expr><ternary><condition><expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>QP</name></expr> ?</condition><then> <expr><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>*</operator><name>step</name></expr>]</index></name></expr> </then><else>: <expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>last</name><init>= <expr><ternary><condition><expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">7</literal><operator>*</operator><name>step</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>QP</name></expr> ?</condition><then> <expr><name><name>src</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>step</name></expr>]</index></name></expr> </then><else>: <expr><name><name>src</name><index>[<expr><literal type="number">7</literal><operator>*</operator><name>step</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>sums</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sums</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal><operator>*</operator><name>first</name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sums</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sums</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>first</name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>step</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sums</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>sums</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>first</name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>step</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sums</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>sums</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name>first</name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">5</literal><operator>*</operator><name>step</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sums</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>sums</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name>first</name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">6</literal><operator>*</operator><name>step</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sums</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>sums</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">7</literal><operator>*</operator><name>step</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sums</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>sums</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator> <name>last</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sums</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>sums</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator> <name>last</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sums</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>sums</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator> <name>last</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sums</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>sums</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator> <name>last</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>VISUALIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">0</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>=</operator>
<name><name>src</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>=</operator>
<name><name>src</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>=</operator>
<name><name>src</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>=</operator>
<name><name>src</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>=</operator>
<name><name>src</name><index>[<expr><literal type="number">5</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>=</operator>
<name><name>src</name><index>[<expr><literal type="number">6</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>=</operator>
<name><name>src</name><index>[<expr><literal type="number">7</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">0</literal><operator>*</operator><name>step</name></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>sums</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>sums</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>src</name><index>[<expr><literal type="number">0</literal><operator>*</operator><name>step</name></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>step</name></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>sums</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>sums</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>src</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>step</name></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>step</name></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>sums</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>sums</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>src</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>step</name></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>step</name></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>sums</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>sums</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>step</name></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>step</name></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>sums</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>sums</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>src</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>step</name></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">5</literal><operator>*</operator><name>step</name></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>sums</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name><name>sums</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>src</name><index>[<expr><literal type="number">5</literal><operator>*</operator><name>step</name></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">6</literal><operator>*</operator><name>step</name></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>sums</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name><name>sums</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>src</name><index>[<expr><literal type="number">6</literal><operator>*</operator><name>step</name></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">7</literal><operator>*</operator><name>step</name></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>sums</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <name><name>sums</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>src</name><index>[<expr><literal type="number">7</literal><operator>*</operator><name>step</name></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if><else>else<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>middleEnergy</name><init>= <expr><literal type="number">5</literal><operator>*</operator><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>step</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">5</literal><operator>*</operator><name>step</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name>middleEnergy</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">8</literal><operator>*</operator><name>QP</name></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>q</name><init>=<expr><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>step</name></expr>]</index></name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>leftEnergy</name><init>= <expr><literal type="number">5</literal><operator>*</operator><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>step</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">0</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>step</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>rightEnergy</name><init>= <expr><literal type="number">5</literal><operator>*</operator><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">6</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">5</literal><operator>*</operator><name>step</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">7</literal><operator>*</operator><name>step</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>d</name><init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>middleEnergy</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>FFMIN</name><argument_list>( <argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name>leftEnergy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name>rightEnergy</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>d</name><operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name><operator>=</operator> <operator>(</operator><literal type="number">5</literal><operator>*</operator><name>d</name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name><operator>*=</operator> <call><name>FFSIGN</name><argument_list>(<argument><expr><operator>-</operator><name>middleEnergy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>q</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if><else>else<block>{<block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>VISUALIZE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>d</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>d</name><operator>=</operator> <ternary><condition><expr><operator>(</operator><name>d</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">32</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">32</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>step</name></expr>]</index></name><operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>-</operator> <name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>step</name></expr>]</index></name><operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>step</name></expr>]</index></name> <operator>+</operator> <name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>step</name></expr>]</index></name><operator>-=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>step</name></expr>]</index></name><operator>+=</operator> <name>d</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMPLATE_PP_C</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postprocess_template.c"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMPLATE_PP_ALTIVEC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postprocess_altivec_template.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postprocess_template.c"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86</name> <operator>&amp;&amp;</operator> <name>HAVE_INLINE_ASM</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_RUNTIME_CPUDETECT</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMPLATE_PP_MMX</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postprocess_template.c"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMPLATE_PP_MMXEXT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postprocess_template.c"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMPLATE_PP_3DNOW</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postprocess_template.c"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMPLATE_PP_SSE2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postprocess_template.c"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SSE2_INLINE</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMPLATE_PP_SSE2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postprocess_template.c"</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_MMXEXT_INLINE</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMPLATE_PP_MMXEXT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postprocess_template.c"</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_AMD3DNOW_INLINE</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMPLATE_PP_3DNOW</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postprocess_template.c"</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_MMX_INLINE</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMPLATE_PP_MMX</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postprocess_template.c"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pp_fn</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>src</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name><name>dst</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int8_t</name></type> <name><name>QPs</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>QPStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>isColor</name></decl></parameter>, <parameter><decl><type><name>PPContext</name> <modifier>*</modifier></type><name>c2</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>postProcess</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>src</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name><name>dst</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int8_t</name></type> <name><name>QPs</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>QPStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>isColor</name></decl></parameter>, <parameter><decl><type><name>pp_mode</name> <modifier>*</modifier></type><name>vm</name></decl></parameter>, <parameter><decl><type><name>pp_context</name> <modifier>*</modifier></type><name>vc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pp_fn</name></type> <name>pp</name> <init>= <expr><name>postProcess_C</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PPContext</name> <modifier>*</modifier></type><name>c</name><init>= <expr><operator>(</operator><name>PPContext</name> <operator>*</operator><operator>)</operator><name>vc</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PPMode</name> <modifier>*</modifier></type><name>ppMode</name><init>= <expr><operator>(</operator><name>PPMode</name> <operator>*</operator><operator>)</operator><name>vm</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ppMode</name></name><operator>=</operator> <operator>*</operator><name>ppMode</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ppMode</name><operator>-&gt;</operator><name>lumMode</name></name> <operator>&amp;</operator> <name>BITEXACT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_RUNTIME_CPUDETECT</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86</name> <operator>&amp;&amp;</operator> <name>HAVE_INLINE_ASM</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>cpuCaps</name></name> <operator>&amp;</operator> <name>AV_CPU_FLAG_SSE2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pp</name> <operator>=</operator> <name>postProcess_SSE2</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>cpuCaps</name></name> <operator>&amp;</operator> <name>AV_CPU_FLAG_MMXEXT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pp</name> <operator>=</operator> <name>postProcess_MMX2</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>cpuCaps</name></name> <operator>&amp;</operator> <name>AV_CPU_FLAG_3DNOW</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pp</name> <operator>=</operator> <name>postProcess_3DNow</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>cpuCaps</name></name> <operator>&amp;</operator> <name>AV_CPU_FLAG_MMX</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pp</name> <operator>=</operator> <name>postProcess_MMX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:elif>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>cpuCaps</name></name> <operator>&amp;</operator> <name>AV_CPU_FLAG_ALTIVEC</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pp</name> <operator>=</operator> <name>postProcess_altivec</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SSE2_INLINE</name></expr></cpp:if>
<expr_stmt><expr><name>pp</name> <operator>=</operator> <name>postProcess_SSE2</name></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_MMXEXT_INLINE</name></expr></cpp:elif>
<expr_stmt><expr><name>pp</name> <operator>=</operator> <name>postProcess_MMX2</name></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_AMD3DNOW_INLINE</name></expr></cpp:elif>
<expr_stmt><expr><name>pp</name> <operator>=</operator> <name>postProcess_3DNow</name></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_MMX_INLINE</name></expr></cpp:elif>
<expr_stmt><expr><name>pp</name> <operator>=</operator> <name>postProcess_MMX</name></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:elif>
<expr_stmt><expr><name>pp</name> <operator>=</operator> <name>postProcess_altivec</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pp</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcStride</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstStride</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>QPs</name></expr></argument>, <argument><expr><name>QPStride</name></expr></argument>, <argument><expr><name>isColor</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>pp_help</name><index>[]</index></name> <init>=
<expr><literal type="string">"Available postprocessing filters:\n"</literal>
<literal type="string">"Filters Options\n"</literal>
<literal type="string">"short long name short long option Description\n"</literal>
<literal type="string">"* * a autoq CPU power dependent enabler\n"</literal>
<literal type="string">" c chrom chrominance filtering enabled\n"</literal>
<literal type="string">" y nochrom chrominance filtering disabled\n"</literal>
<literal type="string">" n noluma luma filtering disabled\n"</literal>
<literal type="string">"hb hdeblock (2 threshold) horizontal deblocking filter\n"</literal>
<literal type="string">" 1. difference factor: default=32, higher -&gt; more deblocking\n"</literal>
<literal type="string">" 2. flatness threshold: default=39, lower -&gt; more deblocking\n"</literal>
<literal type="string">" the h &amp; v deblocking filters share these\n"</literal>
<literal type="string">" so you can't set different thresholds for h / v\n"</literal>
<literal type="string">"vb vdeblock (2 threshold) vertical deblocking filter\n"</literal>
<literal type="string">"ha hadeblock (2 threshold) horizontal deblocking filter\n"</literal>
<literal type="string">"va vadeblock (2 threshold) vertical deblocking filter\n"</literal>
<literal type="string">"h1 x1hdeblock experimental h deblock filter 1\n"</literal>
<literal type="string">"v1 x1vdeblock experimental v deblock filter 1\n"</literal>
<literal type="string">"dr dering deringing filter\n"</literal>
<literal type="string">"al autolevels automatic brightness / contrast\n"</literal>
<literal type="string">" f fullyrange stretch luminance to (0..255)\n"</literal>
<literal type="string">"lb linblenddeint linear blend deinterlacer\n"</literal>
<literal type="string">"li linipoldeint linear interpolating deinterlace\n"</literal>
<literal type="string">"ci cubicipoldeint cubic interpolating deinterlacer\n"</literal>
<literal type="string">"md mediandeint median deinterlacer\n"</literal>
<literal type="string">"fd ffmpegdeint ffmpeg deinterlacer\n"</literal>
<literal type="string">"l5 lowpass5 FIR lowpass deinterlacer\n"</literal>
<literal type="string">"de default hb:a,vb:a,dr:a\n"</literal>
<literal type="string">"fa fast h1:a,v1:a,dr:a\n"</literal>
<literal type="string">"ac ha:a:128:7,va:a,dr:a\n"</literal>
<literal type="string">"tn tmpnoise (3 threshold) temporal noise reducer\n"</literal>
<literal type="string">" 1. &lt;= 2. &lt;= 3. larger -&gt; stronger filtering\n"</literal>
<literal type="string">"fq forceQuant &lt;quantizer&gt; force quantizer\n"</literal>
<literal type="string">"Usage:\n"</literal>
<literal type="string">"&lt;filterName&gt;[:&lt;option&gt;[:&lt;option&gt;...]][[,|/][-]&lt;filterName&gt;[:&lt;option&gt;...]]...\n"</literal>
<literal type="string">"long form example:\n"</literal>
<literal type="string">"vdeblock:autoq/hdeblock:autoq/linblenddeint default,-vdeblock\n"</literal>
<literal type="string">"short form example:\n"</literal>
<literal type="string">"vb:a/hb:a/lb de,-vb\n"</literal>
<literal type="string">"more examples:\n"</literal>
<literal type="string">"tn:64:128:256\n"</literal>
<literal type="string">"\n"</literal></expr></init></decl>
;</decl_stmt>

<function><type><name>pp_mode</name> <modifier>*</modifier></type><name>pp_get_mode_by_name_and_quality</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>quality</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>temp</name><index>[<expr><name>GET_MODE_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name><init>= <expr><name>temp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>filterDelimiters</name><index>[]</index></name> <init>= <expr><literal type="string">",/"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>optionDelimiters</name><index>[]</index></name> <init>= <expr><literal type="string">":|"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>PPMode</name></name> <modifier>*</modifier></type><name>ppMode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filterToken</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"pp: Missing argument\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>pp_help</name></expr>;</init> <condition><expr><call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ppMode</name><operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PPMode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ppMode</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ppMode</name><operator>-&gt;</operator><name>lumMode</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ppMode</name><operator>-&gt;</operator><name>chromMode</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ppMode</name><operator>-&gt;</operator><name>maxTmpNoise</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <literal type="number">700</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ppMode</name><operator>-&gt;</operator><name>maxTmpNoise</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <literal type="number">1500</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ppMode</name><operator>-&gt;</operator><name>maxTmpNoise</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator> <literal type="number">3000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ppMode</name><operator>-&gt;</operator><name>maxAllowedY</name></name><operator>=</operator> <literal type="number">234</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ppMode</name><operator>-&gt;</operator><name>minAllowedY</name></name><operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ppMode</name><operator>-&gt;</operator><name>baseDcDiff</name></name><operator>=</operator> <literal type="number">256</literal><operator>/</operator><literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ppMode</name><operator>-&gt;</operator><name>flatnessThreshold</name></name><operator>=</operator> <literal type="number">56</literal><operator>-</operator><literal type="number">16</literal><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ppMode</name><operator>-&gt;</operator><name>maxClippedThreshold</name></name><operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">100</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ppMode</name><operator>-&gt;</operator><name>error</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GET_MODE_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>GET_MODE_BUFFER_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"pp: %s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filterName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>q</name><init>= <expr><literal type="number">1000000</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>chrom</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>luma</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>options</name><index>[<expr><name>OPTIONS_ARRAY_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>filterNameOk</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>numOfUnknownOptions</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>enable</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tokstate</name></decl>;</decl_stmt>

<expr_stmt><expr><name>filterToken</name><operator>=</operator> <call><name>av_strtok</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>filterDelimiters</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tokstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>filterToken</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>filterToken</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>filterName</name><operator>=</operator> <call><name>av_strtok</name><argument_list>(<argument><expr><name>filterToken</name></expr></argument>, <argument><expr><name>optionDelimiters</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tokstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filterName</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ppMode</name><operator>-&gt;</operator><name>error</name></name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"pp: %s::%s\n"</literal></expr></argument>, <argument><expr><name>filterToken</name></expr></argument>, <argument><expr><name>filterName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>filterName</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>enable</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>filterName</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content> 
<expr_stmt><expr><name>option</name><operator>=</operator> <call><name>av_strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>optionDelimiters</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tokstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>option</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"pp: option: %s\n"</literal></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"autoq"</literal></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>q</name><operator>=</operator> <name>quality</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"nochrom"</literal></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"y"</literal></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>chrom</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"chrom"</literal></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"c"</literal></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>chrom</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"noluma"</literal></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"n"</literal></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>luma</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block>{<block_content>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>numOfUnknownOptions</name></expr>]</index></name> <operator>=</operator> <name>option</name></expr>;</expr_stmt>
<expr_stmt><expr><name>numOfUnknownOptions</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><name>numOfUnknownOptions</name> <operator>&gt;=</operator> <name>OPTIONS_ARRAY_SIZE</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>numOfUnknownOptions</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>replaceTable</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>replaceTable</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>filterName</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>newlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>replaceTable</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>plen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>spaceLeft</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name><operator>--</operator></expr><operator>,</operator> <expr><operator>*</operator><name>p</name><operator>=</operator><literal type="char">','</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>plen</name><operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>spaceLeft</name><operator>=</operator> <name>p</name> <operator>-</operator> <name>temp</name> <operator>+</operator> <name>plen</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>spaceLeft</name> <operator>+</operator> <name>newlen</name> <operator>&gt;=</operator> <name>GET_MODE_BUFFER_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>ppMode</name><operator>-&gt;</operator><name>error</name></name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>newlen</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>plen</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>replaceTable</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>newlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>filterNameOk</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>shortName</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>longName</name></expr></argument>, <argument><expr><name>filterName</name></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>shortName</name></expr></argument>, <argument><expr><name>filterName</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>ppMode</name><operator>-&gt;</operator><name>lumMode</name></name> <operator>&amp;=</operator> <operator>~</operator><name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mask</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ppMode</name><operator>-&gt;</operator><name>chromMode</name></name> <operator>&amp;=</operator> <operator>~</operator><name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>filterNameOk</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>enable</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><name>q</name> <operator>&gt;=</operator> <name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>minLumQuality</name> <operator>&amp;&amp;</operator> <name>luma</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ppMode</name><operator>-&gt;</operator><name>lumMode</name></name><operator>|=</operator> <name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mask</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>chrom</name><operator>==</operator><literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>chrom</name><operator>==</operator><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>chromDefault</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><name>q</name> <operator>&gt;=</operator> <name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>minChromQuality</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ppMode</name><operator>-&gt;</operator><name>chromMode</name></name><operator>|=</operator> <name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mask</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>==</operator> <name>LEVEL_FIX</name></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>o</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ppMode</name><operator>-&gt;</operator><name>minAllowedY</name></name><operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ppMode</name><operator>-&gt;</operator><name>maxAllowedY</name></name><operator>=</operator> <literal type="number">234</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>o</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>options</name><index>[<expr><name>o</name></expr>]</index></name></expr>;</condition> <incr><expr><name>o</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><name>o</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"fullyrange"</literal></expr></argument>)</argument_list></call>
<operator>||</operator><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><name>o</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"f"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>ppMode</name><operator>-&gt;</operator><name>minAllowedY</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ppMode</name><operator>-&gt;</operator><name>maxAllowedY</name></name><operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>numOfUnknownOptions</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>==</operator> <name>TEMP_NOISE_FILTER</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>o</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>numOfNoises</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>o</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>options</name><index>[<expr><name>o</name></expr>]</index></name></expr>;</condition> <incr><expr><name>o</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ppMode</name><operator>-&gt;</operator><name>maxTmpNoise</name><index>[<expr><name>numOfNoises</name></expr>]</index></name><operator>=</operator>
<call><name>strtol</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><name>o</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tail</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>tail</name><operator>!=</operator><name><name>options</name><index>[<expr><name>o</name></expr>]</index></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>numOfNoises</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>numOfUnknownOptions</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>numOfNoises</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>==</operator> <name>V_DEBLOCK</name> <operator>||</operator> <name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>==</operator> <name>H_DEBLOCK</name>
<operator>||</operator> <name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>==</operator> <name>V_A_DEBLOCK</name> <operator>||</operator> <name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>==</operator> <name>H_A_DEBLOCK</name></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>o</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>o</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>options</name><index>[<expr><name>o</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>o</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>o</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>val</name><init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><name>o</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tail</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>tail</name><operator>==</operator><name><name>options</name><index>[<expr><name>o</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>numOfUnknownOptions</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>o</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ppMode</name><operator>-&gt;</operator><name>baseDcDiff</name></name><operator>=</operator> <name>val</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>ppMode</name><operator>-&gt;</operator><name>flatnessThreshold</name></name><operator>=</operator> <name>val</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>==</operator> <name>FORCE_QUANT</name></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>o</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ppMode</name><operator>-&gt;</operator><name>forcedQuant</name></name><operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>o</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>options</name><index>[<expr><name>o</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>o</name><operator>&lt;</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>o</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>val</name><init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><name>o</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tail</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>tail</name><operator>==</operator><name><name>options</name><index>[<expr><name>o</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>numOfUnknownOptions</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ppMode</name><operator>-&gt;</operator><name>forcedQuant</name></name><operator>=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>filterNameOk</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ppMode</name><operator>-&gt;</operator><name>error</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ppMode</name><operator>-&gt;</operator><name>error</name></name> <operator>+=</operator> <name>numOfUnknownOptions</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"pp: lumMode=%X, chromMode=%X\n"</literal></expr></argument>, <argument><expr><name><name>ppMode</name><operator>-&gt;</operator><name>lumMode</name></name></expr></argument>, <argument><expr><name><name>ppMode</name><operator>-&gt;</operator><name>chromMode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ppMode</name><operator>-&gt;</operator><name>error</name></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%d errors in postprocess string \"%s\"\n"</literal></expr></argument>, <argument><expr><name><name>ppMode</name><operator>-&gt;</operator><name>error</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>ppMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ppMode</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>pp_free_mode</name><parameter_list>(<parameter><decl><type><name>pp_mode</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list><block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reallocAlign</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list><block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reallocBuffers</name><parameter_list>(<parameter><decl><type><name>PPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qpStride</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mbWidth</name> <init>= <expr><operator>(</operator><name>width</name><operator>+</operator><literal type="number">15</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mbHeight</name><init>= <expr><operator>(</operator><name>height</name><operator>+</operator><literal type="number">15</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>stride</name></name><operator>=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>qpStride</name></name><operator>=</operator> <name>qpStride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reallocAlign</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>tempDst</name></name></expr></argument>, <argument><expr><name>stride</name><operator>*</operator><literal type="number">24</literal><operator>+</operator><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reallocAlign</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>tempSrc</name></name></expr></argument>, <argument><expr><name>stride</name><operator>*</operator><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reallocAlign</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>tempBlocks</name></name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><literal type="number">16</literal><operator>*</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reallocAlign</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>yHistogram</name></name></expr></argument>, <argument><expr><literal type="number">256</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yHistogram</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <name>width</name><operator>*</operator><name>height</name><operator>/</operator><literal type="number">64</literal><operator>*</operator><literal type="number">15</literal><operator>/</operator><literal type="number">256</literal></expr>;</expr_stmt></block_content></block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>reallocAlign</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>tempBlurred</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>stride</name><operator>*</operator><name>mbHeight</name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <literal type="number">17</literal><operator>*</operator><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reallocAlign</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>tempBlurredPast</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">256</literal><operator>*</operator><operator>(</operator><operator>(</operator><name>height</name><operator>+</operator><literal type="number">7</literal><operator>)</operator><operator>&amp;</operator><operator>(</operator><operator>~</operator><literal type="number">7</literal><operator>)</operator><operator>)</operator><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">17</literal><operator>*</operator><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>reallocAlign</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>deintTemp</name></name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>width</name><operator>+</operator><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reallocAlign</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>nonBQPTable</name></name></expr></argument>, <argument><expr><name>qpStride</name><operator>*</operator><name>mbHeight</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reallocAlign</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>stdQPTable</name></name></expr></argument>, <argument><expr><name>qpStride</name><operator>*</operator><name>mbHeight</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reallocAlign</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>forcedQPTable</name></name></expr></argument>, <argument><expr><name>mbWidth</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>context_to_name</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><literal type="string">"postproc"</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>av_codec_context_class</name> <init>= <expr><block>{ <expr><literal type="string">"Postproc"</literal></expr>, <expr><name>context_to_name</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><name>av_cold</name> <name>pp_context</name> <modifier>*</modifier></type><name>pp_get_context</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cpuCaps</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>PPContext</name> <modifier>*</modifier></type><name>c</name><init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PPContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stride</name><init>= <expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>qpStride</name><init>= <expr><operator>(</operator><name>width</name><operator>+</operator><literal type="number">15</literal><operator>)</operator><operator>/</operator><literal type="number">16</literal> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>av_class</name></name> <operator>=</operator> <operator>&amp;</operator><name>av_codec_context_class</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>cpuCaps</name><operator>&amp;</operator><name>PP_FORMAT</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hChromaSubSample</name></name><operator>=</operator> <name>cpuCaps</name><operator>&amp;</operator><literal type="number">0x3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vChromaSubSample</name></name><operator>=</operator> <operator>(</operator><name>cpuCaps</name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x3</literal></expr>;</expr_stmt>
</block_content>}</block></if><else>else<block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hChromaSubSample</name></name><operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vChromaSubSample</name></name><operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cpuCaps</name> <operator>&amp;</operator> <name>PP_CPU_CAPS_AUTO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cpuCaps</name></name> <operator>=</operator> <call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cpuCaps</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cpuCaps</name> <operator>&amp;</operator> <name>PP_CPU_CAPS_MMX</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cpuCaps</name></name> <operator>|=</operator> <name>AV_CPU_FLAG_MMX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cpuCaps</name> <operator>&amp;</operator> <name>PP_CPU_CAPS_MMX2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cpuCaps</name></name> <operator>|=</operator> <name>AV_CPU_FLAG_MMXEXT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cpuCaps</name> <operator>&amp;</operator> <name>PP_CPU_CAPS_3DNOW</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cpuCaps</name></name> <operator>|=</operator> <name>AV_CPU_FLAG_3DNOW</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cpuCaps</name> <operator>&amp;</operator> <name>PP_CPU_CAPS_ALTIVEC</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cpuCaps</name></name> <operator>|=</operator> <name>AV_CPU_FLAG_ALTIVEC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>reallocBuffers</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>qpStride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frameNum</name></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>pp_free_context</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vc</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>PPContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>(</operator><name>PPContext</name><operator>*</operator><operator>)</operator><name>vc</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>tempBlurred</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>tempBlurred</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>tempBlurredPast</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>tempBlurredPast</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>tempBlocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>yHistogram</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>tempDst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>tempSrc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>deintTemp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>stdQPTable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>nonBQPTable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>forcedQPTable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PPContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>pp_postprocess</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>srcStride</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>dstStride</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>QP_store</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>QPStride</name></decl></parameter>,
<parameter><decl><type><name>pp_mode</name> <modifier>*</modifier></type><name>vm</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pict_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mbWidth</name> <init>= <expr><operator>(</operator><name>width</name><operator>+</operator><literal type="number">15</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mbHeight</name><init>= <expr><operator>(</operator><name>height</name><operator>+</operator><literal type="number">15</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PPMode</name> <modifier>*</modifier></type><name>mode</name> <init>= <expr><name>vm</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PPContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>vc</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>minStride</name><init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>absQPStride</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>QPStride</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>stride</name></name> <operator>&lt;</operator> <name>minStride</name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>qpStride</name></name> <operator>&lt;</operator> <name>absQPStride</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reallocBuffers</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>,
<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>minStride</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>stride</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>qpStride</name></name></expr></argument>, <argument><expr><name>absQPStride</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>QP_store</name> <operator>||</operator> <operator>(</operator><name><name>mode</name><operator>-&gt;</operator><name>lumMode</name></name> <operator>&amp;</operator> <name>FORCE_QUANT</name><operator>)</operator></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>QP_store</name><operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>forcedQPTable</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>absQPStride</name> <operator>=</operator> <name>QPStride</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>mode</name><operator>-&gt;</operator><name>lumMode</name></name> <operator>&amp;</operator> <name>FORCE_QUANT</name></expr>)</condition><block type="pseudo"><block_content>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>mbWidth</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>forcedQPTable</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <name><name>mode</name><operator>-&gt;</operator><name>forcedQuant</name></name></expr>;</expr_stmt></block_content></block></for></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>mbWidth</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>forcedQPTable</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>pict_type</name> <operator>&amp;</operator> <name>PP_PICT_TYPE_QP2</name></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>count</name><init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>mbHeight</name> <operator>*</operator> <name>absQPStride</name></expr></argument>, <argument><expr><name>mbWidth</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><operator>(</operator><name>count</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><call><name>AV_WN32</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>stdQPTable</name></name> <operator>+</operator> <operator>(</operator><name>i</name><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>AV_RN32</name><argument_list>(<argument><expr><name>QP_store</name> <operator>+</operator> <operator>(</operator><name>i</name><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">1</literal> <operator>&amp;</operator> <literal type="number">0x7F7F7F7F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for<control>(<init><expr><name>i</name><operator>&lt;&lt;=</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>stdQPTable</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>QP_store</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>QP_store</name><operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>stdQPTable</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>QPStride</name><operator>=</operator> <name>absQPStride</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><literal type="number">0</literal></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>mbHeight</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>mbWidth</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%2d "</literal></expr></argument>, <argument><expr><name><name>QP_store</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>QPStride</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>pict_type</name><operator>&amp;</operator><literal type="number">7</literal><operator>)</operator><operator>!=</operator><literal type="number">3</literal></expr>)</condition><block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>QPStride</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>count</name><init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>mbHeight</name> <operator>*</operator> <name>QPStride</name></expr></argument>, <argument><expr><name>mbWidth</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><operator>(</operator><name>count</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><call><name>AV_WN32</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>nonBQPTable</name></name> <operator>+</operator> <operator>(</operator><name>i</name><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>AV_RN32</name><argument_list>(<argument><expr><name>QP_store</name> <operator>+</operator> <operator>(</operator><name>i</name><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x3F3F3F3F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for<control>(<init><expr><name>i</name><operator>&lt;&lt;=</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>nonBQPTable</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>QP_store</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>mbHeight</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>absQPStride</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>nonBQPTable</name><index>[<expr><name>i</name><operator>*</operator><name>absQPStride</name><operator>+</operator><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>QP_store</name><index>[<expr><name>i</name><operator>*</operator><name>QPStride</name><operator>+</operator><name>j</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"using npp filters 0x%X/0x%X\n"</literal></expr></argument>,
<argument><expr><name><name>mode</name><operator>-&gt;</operator><name>lumMode</name></name></expr></argument>, <argument><expr><name><name>mode</name><operator>-&gt;</operator><name>chromMode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>postProcess</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>QP_store</name></expr></argument>, <argument><expr><name>QPStride</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <operator>(</operator><name>width</name> <operator>)</operator><operator>&gt;&gt;</operator><name><name>c</name><operator>-&gt;</operator><name>hChromaSubSample</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>=</operator> <operator>(</operator><name>height</name><operator>)</operator><operator>&gt;&gt;</operator><name><name>c</name><operator>-&gt;</operator><name>vChromaSubSample</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>mode</name><operator>-&gt;</operator><name>chromMode</name></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>postProcess</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>QP_store</name></expr></argument>, <argument><expr><name>QPStride</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>postProcess</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>QP_store</name></expr></argument>, <argument><expr><name>QPStride</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>srcStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>srcStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name><name>dstStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>linecpy</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>linecpy</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if><else>else<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>y</name><operator>*</operator><name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>y</name><operator>*</operator><name><name>srcStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>y</name><operator>*</operator><name><name>dstStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>y</name><operator>*</operator><name><name>srcStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
