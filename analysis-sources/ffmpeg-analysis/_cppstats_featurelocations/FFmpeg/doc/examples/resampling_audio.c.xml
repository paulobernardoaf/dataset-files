<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\doc\examples\resampling_audio.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavutil/opt.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavutil/channel_layout.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavutil/samplefmt.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libswresample/swresample.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_format_from_sample_fmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>fmt</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>sample_fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<struct>struct <name>sample_fmt_entry</name> <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>sample_fmt</name></decl>;</decl_stmt> <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt_be</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>fmt_le</name></decl>;</decl_stmt>
}</block> <decl><name><name>sample_fmt_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>AV_SAMPLE_FMT_U8</name></expr>, <expr><literal type="string">"u8"</literal></expr>, <expr><literal type="string">"u8"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_SAMPLE_FMT_S16</name></expr>, <expr><literal type="string">"s16be"</literal></expr>, <expr><literal type="string">"s16le"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_SAMPLE_FMT_S32</name></expr>, <expr><literal type="string">"s32be"</literal></expr>, <expr><literal type="string">"s32le"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_SAMPLE_FMT_FLT</name></expr>, <expr><literal type="string">"f32be"</literal></expr>, <expr><literal type="string">"f32le"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_SAMPLE_FMT_DBL</name></expr>, <expr><literal type="string">"f64be"</literal></expr>, <expr><literal type="string">"f64le"</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>
<expr_stmt><expr><operator>*</operator><name>fmt</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>sample_fmt_entries</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sample_fmt_entry</name></name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>&amp;</operator><name><name>sample_fmt_entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sample_fmt</name> <operator>==</operator> <name><name>entry</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>fmt</name> <operator>=</operator> <call><name>AV_NE</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>fmt_be</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>fmt_le</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"Sample format %s not supported as output format\n"</literal></expr></argument>,
<argument><expr><call><name>av_get_sample_fmt_name</name><argument_list>(<argument><expr><name>sample_fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_samples</name><parameter_list>(<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sample_rate</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>tincr</name> <init>= <expr><literal type="number">1.0</literal> <operator>/</operator> <name>sample_rate</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstp</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>c</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <literal type="number">440.0</literal></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dstp</name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><name>c</name> <operator>*</operator> <operator>*</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nb_channels</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dstp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>dstp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>dstp</name> <operator>+=</operator> <name>nb_channels</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>t</name> <operator>+=</operator> <name>tincr</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>src_ch_layout</name> <init>= <expr><name>AV_CH_LAYOUT_STEREO</name></expr></init></decl>, <decl><type ref="prev"/><name>dst_ch_layout</name> <init>= <expr><name>AV_CH_LAYOUT_SURROUND</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_rate</name> <init>= <expr><literal type="number">48000</literal></expr></init></decl>, <decl><type ref="prev"/><name>dst_rate</name> <init>= <expr><literal type="number">44100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src_data</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>dst_data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_nb_channels</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>dst_nb_channels</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_linesize</name></decl>, <decl><type ref="prev"/><name>dst_linesize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_nb_samples</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>, <decl><type ref="prev"/><name>dst_nb_samples</name></decl>, <decl><type ref="prev"/><name>max_dst_nb_samples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>src_sample_fmt</name> <init>= <expr><name>AV_SAMPLE_FMT_DBL</name></expr></init></decl>, <decl><type ref="prev"/><name>dst_sample_fmt</name> <init>= <expr><name>AV_SAMPLE_FMT_S16</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dst_filename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>dst_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_bufsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>swr_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Usage: %s output_file\n"</literal>
<literal type="string">"API example program to show how to resample an audio stream with libswresample.\n"</literal>
<literal type="string">"This program generates a series of audio frames, resamples them to a specified "</literal>
<literal type="string">"output format and rate and saves them to an output file named output_file.\n"</literal></expr></argument>,
<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dst_filename</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_file</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>dst_filename</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst_file</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Could not open destination file %s\n"</literal></expr></argument>, <argument><expr><name>dst_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>swr_ctx</name> <operator>=</operator> <call><name>swr_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>swr_ctx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Could not allocate resampler context\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>av_opt_set_int</name><argument_list>(<argument><expr><name>swr_ctx</name></expr></argument>, <argument><expr><literal type="string">"in_channel_layout"</literal></expr></argument>, <argument><expr><name>src_ch_layout</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_opt_set_int</name><argument_list>(<argument><expr><name>swr_ctx</name></expr></argument>, <argument><expr><literal type="string">"in_sample_rate"</literal></expr></argument>, <argument><expr><name>src_rate</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_opt_set_sample_fmt</name><argument_list>(<argument><expr><name>swr_ctx</name></expr></argument>, <argument><expr><literal type="string">"in_sample_fmt"</literal></expr></argument>, <argument><expr><name>src_sample_fmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_opt_set_int</name><argument_list>(<argument><expr><name>swr_ctx</name></expr></argument>, <argument><expr><literal type="string">"out_channel_layout"</literal></expr></argument>, <argument><expr><name>dst_ch_layout</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_opt_set_int</name><argument_list>(<argument><expr><name>swr_ctx</name></expr></argument>, <argument><expr><literal type="string">"out_sample_rate"</literal></expr></argument>, <argument><expr><name>dst_rate</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_opt_set_sample_fmt</name><argument_list>(<argument><expr><name>swr_ctx</name></expr></argument>, <argument><expr><literal type="string">"out_sample_fmt"</literal></expr></argument>, <argument><expr><name>dst_sample_fmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>swr_init</name><argument_list>(<argument><expr><name>swr_ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to initialize the resampling context\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>src_nb_channels</name> <operator>=</operator> <call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name>src_ch_layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_samples_alloc_array_and_samples</name><argument_list>(<argument><expr><operator>&amp;</operator><name>src_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src_linesize</name></expr></argument>, <argument><expr><name>src_nb_channels</name></expr></argument>,
<argument><expr><name>src_nb_samples</name></expr></argument>, <argument><expr><name>src_sample_fmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Could not allocate source samples\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>max_dst_nb_samples</name> <operator>=</operator> <name>dst_nb_samples</name> <operator>=</operator>
<call><name>av_rescale_rnd</name><argument_list>(<argument><expr><name>src_nb_samples</name></expr></argument>, <argument><expr><name>dst_rate</name></expr></argument>, <argument><expr><name>src_rate</name></expr></argument>, <argument><expr><name>AV_ROUND_UP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>dst_nb_channels</name> <operator>=</operator> <call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name>dst_ch_layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_samples_alloc_array_and_samples</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dst_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst_linesize</name></expr></argument>, <argument><expr><name>dst_nb_channels</name></expr></argument>,
<argument><expr><name>dst_nb_samples</name></expr></argument>, <argument><expr><name>dst_sample_fmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Could not allocate destination samples\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>

<expr_stmt><expr><call><name>fill_samples</name><argument_list>(<argument><expr><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name><name>src_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>src_nb_samples</name></expr></argument>, <argument><expr><name>src_nb_channels</name></expr></argument>, <argument><expr><name>src_rate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>dst_nb_samples</name> <operator>=</operator> <call><name>av_rescale_rnd</name><argument_list>(<argument><expr><call><name>swr_get_delay</name><argument_list>(<argument><expr><name>swr_ctx</name></expr></argument>, <argument><expr><name>src_rate</name></expr></argument>)</argument_list></call> <operator>+</operator>
<name>src_nb_samples</name></expr></argument>, <argument><expr><name>dst_rate</name></expr></argument>, <argument><expr><name>src_rate</name></expr></argument>, <argument><expr><name>AV_ROUND_UP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dst_nb_samples</name> <operator>&gt;</operator> <name>max_dst_nb_samples</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_samples_alloc</name><argument_list>(<argument><expr><name>dst_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst_linesize</name></expr></argument>, <argument><expr><name>dst_nb_channels</name></expr></argument>,
<argument><expr><name>dst_nb_samples</name></expr></argument>, <argument><expr><name>dst_sample_fmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>max_dst_nb_samples</name> <operator>=</operator> <name>dst_nb_samples</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>swr_convert</name><argument_list>(<argument><expr><name>swr_ctx</name></expr></argument>, <argument><expr><name>dst_data</name></expr></argument>, <argument><expr><name>dst_nb_samples</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>src_data</name></expr></argument>, <argument><expr><name>src_nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error while converting\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dst_bufsize</name> <operator>=</operator> <call><name>av_samples_get_buffer_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dst_linesize</name></expr></argument>, <argument><expr><name>dst_nb_channels</name></expr></argument>,
<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>dst_sample_fmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dst_bufsize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Could not get sample buffer size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"t:%f in:%d out:%d\n"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>src_nb_samples</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name><name>dst_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst_bufsize</name></expr></argument>, <argument><expr><name>dst_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>t</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>get_format_from_sample_fmt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>dst_sample_fmt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Resampling succeeded. Play the output file with the command:\n"</literal>
<literal type="string">"ffplay -f %s -channel_layout %"</literal><name>PRId64</name><literal type="string">" -channels %d -ar %d %s\n"</literal></expr></argument>,
<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>dst_ch_layout</name></expr></argument>, <argument><expr><name>dst_nb_channels</name></expr></argument>, <argument><expr><name>dst_rate</name></expr></argument>, <argument><expr><name>dst_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>dst_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>src_data</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>src_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dst_data</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dst_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>swr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>swr_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
