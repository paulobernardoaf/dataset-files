<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\compat\avisynth\avxsynth_c.h">
































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__AVXSYNTH_C__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__AVXSYNTH_C__</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"windowsPorts/windows2linux.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTERN_C</name></cpp:macro> <cpp:value>extern "C"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTERN_C</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVSC_USE_STDCALL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVSC_USE_STDCALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVSC_CC</name></cpp:macro> <cpp:value>__cdecl</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVSC_CC</name></cpp:macro> <cpp:value>__stdcall</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVSC_INLINE</name></cpp:macro> <cpp:value>static __inline</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AVISYNTH_C_EXPORTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVSC_EXPORT</name></cpp:macro> <cpp:value>EXTERN_C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVSC_API</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EXTERN_C __declspec(dllexport) ret AVSC_CC name</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVSC_EXPORT</name></cpp:macro> <cpp:value>EXTERN_C __declspec(dllexport)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVSC_NO_DECLSPEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVSC_API</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EXTERN_C __declspec(dllimport) ret AVSC_CC name</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVSC_API</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typedef ret (AVSC_CC *name##_func)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>INT64</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>__int64</name></type> <name>INT64</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__AVXSYNTH_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<enum>enum <block>{ <decl><name>AVISYNTH_INTERFACE_VERSION</name> <init>= <expr><literal type="number">3</literal></expr></init></decl> }</block>;</enum>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<enum>enum <block>{<decl><name>AVS_SAMPLE_INT8</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">0</literal></expr></init></decl>,
<decl><name>AVS_SAMPLE_INT16</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">1</literal></expr></init></decl>,
<decl><name>AVS_SAMPLE_INT24</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">2</literal></expr></init></decl>,
<decl><name>AVS_SAMPLE_INT32</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">3</literal></expr></init></decl>,
<decl><name>AVS_SAMPLE_FLOAT</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">4</literal></expr></init></decl>}</block>;</enum>

<enum>enum <block>{<decl><name>AVS_PLANAR_Y</name><init>=<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">0</literal></expr></init></decl>,
<decl><name>AVS_PLANAR_U</name><init>=<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">1</literal></expr></init></decl>,
<decl><name>AVS_PLANAR_V</name><init>=<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">2</literal></expr></init></decl>,
<decl><name>AVS_PLANAR_ALIGNED</name><init>=<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">3</literal></expr></init></decl>,
<decl><name>AVS_PLANAR_Y_ALIGNED</name><init>=<expr><name>AVS_PLANAR_Y</name><operator>|</operator><name>AVS_PLANAR_ALIGNED</name></expr></init></decl>,
<decl><name>AVS_PLANAR_U_ALIGNED</name><init>=<expr><name>AVS_PLANAR_U</name><operator>|</operator><name>AVS_PLANAR_ALIGNED</name></expr></init></decl>,
<decl><name>AVS_PLANAR_V_ALIGNED</name><init>=<expr><name>AVS_PLANAR_V</name><operator>|</operator><name>AVS_PLANAR_ALIGNED</name></expr></init></decl>}</block>;</enum>


<enum>enum <block>{<decl><name>AVS_CS_BGR</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">28</literal></expr></init></decl>,
<decl><name>AVS_CS_YUV</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">29</literal></expr></init></decl>,
<decl><name>AVS_CS_INTERLEAVED</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">30</literal></expr></init></decl>,
<decl><name>AVS_CS_PLANAR</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">31</literal></expr></init></decl>}</block>;</enum>


<enum>enum <block>{
<decl><name>AVS_CS_UNKNOWN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>AVS_CS_BGR24</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">0</literal> <operator>|</operator> <name>AVS_CS_BGR</name> <operator>|</operator> <name>AVS_CS_INTERLEAVED</name></expr></init></decl>,
<decl><name>AVS_CS_BGR32</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">1</literal> <operator>|</operator> <name>AVS_CS_BGR</name> <operator>|</operator> <name>AVS_CS_INTERLEAVED</name></expr></init></decl>,
<decl><name>AVS_CS_YUY2</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">2</literal> <operator>|</operator> <name>AVS_CS_YUV</name> <operator>|</operator> <name>AVS_CS_INTERLEAVED</name></expr></init></decl>,
<decl><name>AVS_CS_YV12</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">3</literal> <operator>|</operator> <name>AVS_CS_YUV</name> <operator>|</operator> <name>AVS_CS_PLANAR</name></expr></init></decl>, 
<decl><name>AVS_CS_I420</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">4</literal> <operator>|</operator> <name>AVS_CS_YUV</name> <operator>|</operator> <name>AVS_CS_PLANAR</name></expr></init></decl>, 
<decl><name>AVS_CS_IYUV</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">4</literal> <operator>|</operator> <name>AVS_CS_YUV</name> <operator>|</operator> <name>AVS_CS_PLANAR</name></expr></init></decl> 
}</block>;</enum>

<enum>enum <block>{
<decl><name>AVS_IT_BFF</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">0</literal></expr></init></decl>,
<decl><name>AVS_IT_TFF</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">1</literal></expr></init></decl>,
<decl><name>AVS_IT_FIELDBASED</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">2</literal></expr></init></decl>}</block>;</enum>

<enum>enum <block>{
<decl><name>AVS_FILTER_TYPE</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>AVS_FILTER_INPUT_COLORSPACE</name><init>=<expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>AVS_FILTER_OUTPUT_TYPE</name><init>=<expr><literal type="number">9</literal></expr></init></decl>,
<decl><name>AVS_FILTER_NAME</name><init>=<expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>AVS_FILTER_AUTHOR</name><init>=<expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>AVS_FILTER_VERSION</name><init>=<expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>AVS_FILTER_ARGS</name><init>=<expr><literal type="number">7</literal></expr></init></decl>,
<decl><name>AVS_FILTER_ARGS_INFO</name><init>=<expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>AVS_FILTER_ARGS_DESCRIPTION</name><init>=<expr><literal type="number">10</literal></expr></init></decl>,
<decl><name>AVS_FILTER_DESCRIPTION</name><init>=<expr><literal type="number">11</literal></expr></init></decl>}</block>;</enum>

<enum>enum <block>{ 
<decl><name>AVS_FILTER_TYPE_AUDIO</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>AVS_FILTER_TYPE_VIDEO</name><init>=<expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>AVS_FILTER_OUTPUT_TYPE_SAME</name><init>=<expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>AVS_FILTER_OUTPUT_TYPE_DIFFERENT</name><init>=<expr><literal type="number">4</literal></expr></init></decl>}</block>;</enum>

<enum>enum <block>{
<decl><name>AVS_CACHE_NOTHING</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>AVS_CACHE_RANGE</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>AVS_CACHE_ALL</name><init>=<expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>AVS_CACHE_AUDIO</name><init>=<expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>AVS_CACHE_AUDIO_NONE</name><init>=<expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>AVS_CACHE_AUDIO_AUTO</name><init>=<expr><literal type="number">5</literal></expr></init></decl>
}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVS_FRAME_ALIGN</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>AVS_Clip</name></name></type> <name>AVS_Clip</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>AVS_ScriptEnvironment</name></name></type> <name>AVS_ScriptEnvironment</name>;</typedef>







<typedef>typedef <type><struct>struct <name>AVS_VideoInfo</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <name>height</name>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name></type> <name>fps_numerator</name></decl>, <name>fps_denominator</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_frames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pixel_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>audio_samples_per_second</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>sample_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>INT64</name></type> <name>num_audio_samples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nchannels</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>image_type</name></decl>;</decl_stmt>
}</block></struct></type> <name>AVS_VideoInfo</name>;</typedef>


<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_has_video</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>width</name></name><operator>!=</operator><literal type="number">0</literal><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_has_audio</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>audio_samples_per_second</name></name><operator>!=</operator><literal type="number">0</literal><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_is_rgb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>pixel_type</name></name><operator>&amp;</operator><name>AVS_CS_BGR</name><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_is_rgb24</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>pixel_type</name></name><operator>&amp;</operator><name>AVS_CS_BGR24</name><operator>)</operator><operator>==</operator><name>AVS_CS_BGR24</name></expr>;</return> </block_content>}</block></function> 

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_is_rgb32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>pixel_type</name></name> <operator>&amp;</operator> <name>AVS_CS_BGR32</name><operator>)</operator> <operator>==</operator> <name>AVS_CS_BGR32</name></expr> ;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_is_yuv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>pixel_type</name></name><operator>&amp;</operator><name>AVS_CS_YUV</name> <operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_is_yuy2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>pixel_type</name></name> <operator>&amp;</operator> <name>AVS_CS_YUY2</name><operator>)</operator> <operator>==</operator> <name>AVS_CS_YUY2</name></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_is_yv12</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>pixel_type</name></name> <operator>&amp;</operator> <name>AVS_CS_YV12</name><operator>)</operator> <operator>==</operator> <name>AVS_CS_YV12</name><operator>)</operator><operator>||</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>pixel_type</name></name> <operator>&amp;</operator> <name>AVS_CS_I420</name><operator>)</operator> <operator>==</operator> <name>AVS_CS_I420</name><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_is_color_space</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c_space</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>pixel_type</name></name> <operator>&amp;</operator> <name>c_space</name><operator>)</operator> <operator>==</operator> <name>c_space</name><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_is_property</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>property</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>pixel_type</name></name> <operator>&amp;</operator> <name>property</name><operator>)</operator><operator>==</operator><name>property</name> <operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_is_planar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>pixel_type</name></name> <operator>&amp;</operator> <name>AVS_CS_PLANAR</name><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_is_field_based</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>image_type</name></name> <operator>&amp;</operator> <name>AVS_IT_FIELDBASED</name><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_is_parity_known</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>image_type</name></name> <operator>&amp;</operator> <name>AVS_IT_FIELDBASED</name><operator>)</operator><operator>&amp;&amp;</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>image_type</name></name> <operator>&amp;</operator> <operator>(</operator><name>AVS_IT_BFF</name> <operator>|</operator> <name>AVS_IT_TFF</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_is_bff</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>image_type</name></name> <operator>&amp;</operator> <name>AVS_IT_BFF</name><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_is_tff</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>image_type</name></name> <operator>&amp;</operator> <name>AVS_IT_TFF</name><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_bits_per_pixel</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>pixel_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVS_CS_BGR24</name></expr>:</case> <return>return <expr><literal type="number">24</literal></expr>;</return>
<case>case <expr><name>AVS_CS_BGR32</name></expr>:</case> <return>return <expr><literal type="number">32</literal></expr>;</return>
<case>case <expr><name>AVS_CS_YUY2</name></expr>:</case> <return>return <expr><literal type="number">16</literal></expr>;</return>
<case>case <expr><name>AVS_CS_YV12</name></expr>:</case>
<case>case <expr><name>AVS_CS_I420</name></expr>:</case> <return>return <expr><literal type="number">12</literal></expr>;</return>
<default>default:</default> <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>
<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_bytes_from_pixels</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pixels</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><name>pixels</name> <operator>*</operator> <operator>(</operator><call><name>avs_bits_per_pixel</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator></expr>;</return> </block_content>}</block></function> 

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_row_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><call><name>avs_bytes_from_pixels</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name><name>p</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function> 

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_bmp_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>vi</name></decl></parameter>)</parameter_list>
<block>{<block_content> <if_stmt><if>if <condition>(<expr><call><name>avs_is_planar</name><argument_list>(<argument><expr><name>vi</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content><decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><name><name>vi</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <operator>(</operator><operator>(</operator><call><name>avs_row_size</name><argument_list>(<argument><expr><name>vi</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal><operator>)</operator></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>p</name><operator>+=</operator><name>p</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt> <return>return <expr><name>p</name></expr>;</return> </block_content>}</block></if></if_stmt> <return>return <expr><name><name>vi</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <operator>(</operator><operator>(</operator><call><name>avs_row_size</name><argument_list>(<argument><expr><name>vi</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_samples_per_second</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>audio_samples_per_second</name></name></expr>;</return> </block_content>}</block></function>


<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_bytes_per_channel_sample</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>sample_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVS_SAMPLE_INT8</name></expr>:</case> <return>return <expr>sizeof<operator>(</operator><name>signed</name> <name>char</name><operator>)</operator></expr>;</return>
<case>case <expr><name>AVS_SAMPLE_INT16</name></expr>:</case> <return>return <expr>sizeof<operator>(</operator><name>signed</name> <name>short</name><operator>)</operator></expr>;</return>
<case>case <expr><name>AVS_SAMPLE_INT24</name></expr>:</case> <return>return <expr><literal type="number">3</literal></expr>;</return>
<case>case <expr><name>AVS_SAMPLE_INT32</name></expr>:</case> <return>return <expr>sizeof<operator>(</operator><name>signed</name> <name>int</name><operator>)</operator></expr>;</return>
<case>case <expr><name>AVS_SAMPLE_FLOAT</name></expr>:</case> <return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</return>
<default>default:</default> <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>
<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_bytes_per_audio_sample</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>nchannels</name></name><operator>*</operator><call><name>avs_bytes_per_channel_sample</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>INT64</name></type> <name>avs_audio_samples_from_frames</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>INT64</name></type> <name>frames</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><operator>(</operator><operator>(</operator><name>INT64</name><operator>)</operator><operator>(</operator><name>frames</name><operator>)</operator> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>audio_samples_per_second</name></name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>fps_denominator</name></name> <operator>/</operator> <name><name>p</name><operator>-&gt;</operator><name>fps_numerator</name></name><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_frames_from_audio_samples</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>INT64</name></type> <name>samples</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>samples</name> <operator>*</operator> <operator>(</operator><name>INT64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>fps_numerator</name></name> <operator>/</operator> <operator>(</operator><name>INT64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>fps_denominator</name></name> <operator>/</operator> <operator>(</operator><name>INT64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>audio_samples_per_second</name></name><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>INT64</name></type> <name>avs_audio_samples_from_bytes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>INT64</name></type> <name>bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><name>bytes</name> <operator>/</operator> <call><name>avs_bytes_per_audio_sample</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>INT64</name></type> <name>avs_bytes_from_audio_samples</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>INT64</name></type> <name>samples</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><name>samples</name> <operator>*</operator> <call><name>avs_bytes_per_audio_sample</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_audio_channels</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>nchannels</name></name></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_sample_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>sample_type</name></name></expr>;</return></block_content>}</block></function>


<function><type><name>AVSC_INLINE</name> <name>void</name></type> <name>avs_set_property</name><parameter_list>(<parameter><decl><type><name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>property</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>image_type</name></name><operator>|=</operator><name>property</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>void</name></type> <name>avs_clear_property</name><parameter_list>(<parameter><decl><type><name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>property</name></decl></parameter>)</parameter_list>
<block>{<block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>image_type</name></name><operator>&amp;=</operator><operator>~</operator><name>property</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>void</name></type> <name>avs_set_field_based</name><parameter_list>(<parameter><decl><type><name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>isfieldbased</name></decl></parameter>)</parameter_list>
<block>{<block_content> <if_stmt><if>if <condition>(<expr><name>isfieldbased</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>image_type</name></name><operator>|=</operator><name>AVS_IT_FIELDBASED</name></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>image_type</name></name><operator>&amp;=</operator><operator>~</operator><name>AVS_IT_FIELDBASED</name></expr>;</expr_stmt></block_content></block></else></if_stmt> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>void</name></type> <name>avs_set_fps</name><parameter_list>(<parameter><decl><type><name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>numerator</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>denominator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>x</name><init>=<expr><name>numerator</name></expr></init></decl>, <decl><type ref="prev"/><name>y</name><init>=<expr><name>denominator</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>y</name></expr>)</condition> <block>{<block_content> 
<decl_stmt><decl><type><name>unsigned</name></type> <name>t</name> <init>= <expr><name>x</name><operator>%</operator><name>y</name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>x</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt> <expr_stmt><expr><name>y</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>fps_numerator</name></name> <operator>=</operator> <name>numerator</name><operator>/</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>fps_denominator</name></name> <operator>=</operator> <name>denominator</name><operator>/</operator><name>x</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_is_same_colorspace</name><parameter_list>(<parameter><decl><type><name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>x</name><operator>-&gt;</operator><name>pixel_type</name></name> <operator>==</operator> <name><name>y</name><operator>-&gt;</operator><name>pixel_type</name></name><operator>)</operator>
<operator>||</operator> <operator>(</operator><call><name>avs_is_yv12</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>avs_is_yv12</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>














<typedef>typedef <type><struct>struct <name>AVS_VideoFrameBuffer</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>data_size</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>long</name></type> <name>sequence_number</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>refcount</name></decl>;</decl_stmt>
}</block></struct></type> <name>AVS_VideoFrameBuffer</name>;</typedef>





<typedef>typedef <type><struct>struct <name>AVS_VideoFrame</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>refcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVS_VideoFrameBuffer</name> <modifier>*</modifier></type> <name>vfb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>, <name>pitch</name>, <name>row_size</name>, <name>height</name>, <name>offsetU</name>, <name>offsetV</name>, <name>pitchUV</name>;</decl_stmt> 
}</block></struct></type> <name>AVS_VideoFrame</name>;</typedef>


<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_get_pitch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoFrame</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>pitch</name></name></expr>;</return></block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_get_pitch_p</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoFrame</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>plane</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVS_PLANAR_U</name></expr>:</case> <case>case <expr><name>AVS_PLANAR_V</name></expr>:</case> <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>pitchUV</name></name></expr>;</return></block_content>}</block></switch>
<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>pitch</name></name></expr>;</return></block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_get_row_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoFrame</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>row_size</name></name></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_get_row_size_p</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoFrame</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>plane</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVS_PLANAR_U</name></expr>:</case> <case>case <expr><name>AVS_PLANAR_V</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>pitchUV</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>row_size</name></name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
<case>case <expr><name>AVS_PLANAR_U_ALIGNED</name></expr>:</case> <case>case <expr><name>AVS_PLANAR_V_ALIGNED</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>pitchUV</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>row_size</name></name><operator>+</operator><name>AVS_FRAME_ALIGN</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>&amp;</operator><operator>(</operator><operator>~</operator><operator>(</operator><name>AVS_FRAME_ALIGN</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>pitchUV</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>row_size</name></name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
<case>case <expr><name>AVS_PLANAR_Y_ALIGNED</name></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>row_size</name></name><operator>+</operator><name>AVS_FRAME_ALIGN</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>&amp;</operator><operator>(</operator><operator>~</operator><operator>(</operator><name>AVS_FRAME_ALIGN</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;=</operator> <name><name>p</name><operator>-&gt;</operator><name>pitch</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>row_size</name></name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>row_size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_get_height</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoFrame</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>height</name></name></expr>;</return></block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_get_height_p</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoFrame</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>plane</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVS_PLANAR_U</name></expr>:</case> <case>case <expr><name>AVS_PLANAR_V</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>pitchUV</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>height</name></name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>height</name></name></expr>;</return></block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>avs_get_read_ptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoFrame</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>vfb</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>offset</name></name></expr>;</return></block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>avs_get_read_ptr_p</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoFrame</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>plane</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVS_PLANAR_U</name></expr>:</case> <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>vfb</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>offsetU</name></name></expr>;</return>
<case>case <expr><name>AVS_PLANAR_V</name></expr>:</case> <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>vfb</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>offsetV</name></name></expr>;</return>
<default>default:</default> <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>vfb</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>offset</name></name></expr>;</return></block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_is_writable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoFrame</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>refcount</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>vfb</name><operator>-&gt;</operator><name>refcount</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return></block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>avs_get_write_ptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoFrame</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>avs_is_writable</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>p</name><operator>-&gt;</operator><name>vfb</name><operator>-&gt;</operator><name>sequence_number</name></name></expr>;</expr_stmt>
<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>vfb</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>offset</name></name></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>avs_get_write_ptr_p</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoFrame</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>plane</name><operator>==</operator><name>AVS_PLANAR_Y</name> <operator>&amp;&amp;</operator> <call><name>avs_is_writable</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>p</name><operator>-&gt;</operator><name>vfb</name><operator>-&gt;</operator><name>sequence_number</name></name></expr>;</expr_stmt>
<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>vfb</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>offset</name></name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>plane</name><operator>==</operator><name>AVS_PLANAR_Y</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<switch>switch <condition>(<expr><name>plane</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVS_PLANAR_U</name></expr>:</case> <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>vfb</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>offsetU</name></name></expr>;</return>
<case>case <expr><name>AVS_PLANAR_V</name></expr>:</case> <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>vfb</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>offsetV</name></name></expr>;</return>
<default>default:</default> <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>vfb</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>offset</name></name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__cplusplus</name></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal>
<block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>avs_release_video_frame</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>AVS_VideoFrame</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>AVS_VideoFrame</name> <operator>*</operator></expr></argument>, <argument><expr><name>avs_copy_video_frame</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>AVS_VideoFrame</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__cplusplus</name></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVSC_NO_DECLSPEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>AVSC_INLINE</name> <name>void</name></type> <name>avs_release_frame</name><parameter_list>(<parameter><decl><type><name>AVS_VideoFrame</name> <modifier>*</modifier></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content><expr_stmt><expr><call><name>avs_release_video_frame</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></function>
<function><type><name>AVSC_INLINE</name> <name>AVS_VideoFrame</name> <modifier>*</modifier></type> <name>avs_copy_frame</name><parameter_list>(<parameter><decl><type><name>AVS_VideoFrame</name> <modifier>*</modifier></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content><return>return <expr><call><name>avs_copy_video_frame</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>















<typedef>typedef <type><name><name>struct</name> <name>AVS_Value</name></name></type> <name>AVS_Value</name>;</typedef>
<struct>struct <name>AVS_Value</name> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>short</name></type> <name>array_size</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>clip</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name>boolean</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>integer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>INT64</name></type> <name>integer64</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>floating_pt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVS_Value</name> <modifier>*</modifier></type> <name>array</name></decl>;</decl_stmt>
}</block> <decl><name>d</name></decl>;</union>
}</block>;</struct>





<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVS_Value</name></type> <name>avs_void</name> <init>= <expr><block>{<expr><literal type="char">'v'</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<macro><name>AVSC_API</name><argument_list>(<argument>void</argument>, <argument>avs_copy_value</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>AVS_Value</name> <operator>*</operator> <name>dest</name><operator>,</operator> <name>AVS_Value</name> <name>src</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>avs_release_value</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>AVS_Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_defined</name><parameter_list>(<parameter><decl><type><name>AVS_Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>v</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <literal type="char">'v'</literal></expr>;</return> </block_content>}</block></function>
<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_is_clip</name><parameter_list>(<parameter><decl><type><name>AVS_Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>v</name><operator>.</operator><name>type</name></name> <operator>==</operator> <literal type="char">'c'</literal></expr>;</return> </block_content>}</block></function>
<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_is_bool</name><parameter_list>(<parameter><decl><type><name>AVS_Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>v</name><operator>.</operator><name>type</name></name> <operator>==</operator> <literal type="char">'b'</literal></expr>;</return> </block_content>}</block></function>
<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_is_int</name><parameter_list>(<parameter><decl><type><name>AVS_Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>v</name><operator>.</operator><name>type</name></name> <operator>==</operator> <literal type="char">'i'</literal></expr>;</return> </block_content>}</block></function>
<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_is_float</name><parameter_list>(<parameter><decl><type><name>AVS_Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>v</name><operator>.</operator><name>type</name></name> <operator>==</operator> <literal type="char">'f'</literal> <operator>||</operator> <name><name>v</name><operator>.</operator><name>type</name></name> <operator>==</operator> <literal type="char">'i'</literal></expr>;</return> </block_content>}</block></function>
<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_is_string</name><parameter_list>(<parameter><decl><type><name>AVS_Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>v</name><operator>.</operator><name>type</name></name> <operator>==</operator> <literal type="char">'s'</literal></expr>;</return> </block_content>}</block></function>
<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_is_array</name><parameter_list>(<parameter><decl><type><name>AVS_Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>v</name><operator>.</operator><name>type</name></name> <operator>==</operator> <literal type="char">'a'</literal></expr>;</return> </block_content>}</block></function>
<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_is_error</name><parameter_list>(<parameter><decl><type><name>AVS_Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>v</name><operator>.</operator><name>type</name></name> <operator>==</operator> <literal type="char">'e'</literal></expr>;</return> </block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__cplusplus</name></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal>
<block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>AVS_Clip</name> <operator>*</operator></expr></argument>, <argument><expr><name>avs_take_clip</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>AVS_Value</name></expr></argument>, <argument><expr><name>AVS_ScriptEnvironment</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>avs_set_to_clip</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>AVS_Value</name> <operator>*</operator></expr></argument>, <argument><expr><name>AVS_Clip</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__cplusplus</name></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_as_bool</name><parameter_list>(<parameter><decl><type><name>AVS_Value</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><name><name>v</name><operator>.</operator><name>d</name><operator>.</operator><name>boolean</name></name></expr>;</return> </block_content>}</block></function>
<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_as_int</name><parameter_list>(<parameter><decl><type><name>AVS_Value</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><name><name>v</name><operator>.</operator><name>d</name><operator>.</operator><name>integer</name></name></expr>;</return> </block_content>}</block></function>
<function><type><name>AVSC_INLINE</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>avs_as_string</name><parameter_list>(<parameter><decl><type><name>AVS_Value</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><ternary><condition><expr><call><name>avs_is_error</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>avs_is_string</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>v</name><operator>.</operator><name>d</name><operator>.</operator><name>string</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return> </block_content>}</block></function>
<function><type><name>AVSC_INLINE</name> <name>double</name></type> <name>avs_as_float</name><parameter_list>(<parameter><decl><type><name>AVS_Value</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><ternary><condition><expr><call><name>avs_is_int</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>v</name><operator>.</operator><name>d</name><operator>.</operator><name>integer</name></name></expr> </then><else>: <expr><name><name>v</name><operator>.</operator><name>d</name><operator>.</operator><name>floating_pt</name></name></expr></else></ternary></expr>;</return> </block_content>}</block></function>
<function><type><name>AVSC_INLINE</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>avs_as_error</name><parameter_list>(<parameter><decl><type><name>AVS_Value</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><ternary><condition><expr><call><name>avs_is_error</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>v</name><operator>.</operator><name>d</name><operator>.</operator><name>string</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return> </block_content>}</block></function>
<function><type><name>AVSC_INLINE</name> <specifier>const</specifier> <name>AVS_Value</name> <modifier>*</modifier></type> <name>avs_as_array</name><parameter_list>(<parameter><decl><type><name>AVS_Value</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><name><name>v</name><operator>.</operator><name>d</name><operator>.</operator><name>array</name></name></expr>;</return> </block_content>}</block></function>
<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_array_size</name><parameter_list>(<parameter><decl><type><name>AVS_Value</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><ternary><condition><expr><call><name>avs_is_array</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>v</name><operator>.</operator><name>array_size</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return> </block_content>}</block></function>
<function><type><name>AVSC_INLINE</name> <name>AVS_Value</name></type> <name>avs_array_elt</name><parameter_list>(<parameter><decl><type><name>AVS_Value</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content> <return>return <expr><ternary><condition><expr><call><name>avs_is_array</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>v</name><operator>.</operator><name>d</name><operator>.</operator><name>array</name><index>[<expr><name>index</name></expr>]</index></name></expr> </then><else>: <expr><name>v</name></expr></else></ternary></expr>;</return> </block_content>}</block></function>



<function><type><name>AVSC_INLINE</name> <name>AVS_Value</name></type> <name>avs_new_value_bool</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v0</name></decl></parameter>)</parameter_list>
<block>{<block_content> <decl_stmt><decl><type><name>AVS_Value</name></type> <name>v</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name><name>v</name><operator>.</operator><name>type</name></name> <operator>=</operator> <literal type="char">'b'</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>v</name><operator>.</operator><name>d</name><operator>.</operator><name>boolean</name></name> <operator>=</operator> <ternary><condition><expr><name>v0</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt> <return>return <expr><name>v</name></expr>;</return> </block_content>}</block></function>
<function><type><name>AVSC_INLINE</name> <name>AVS_Value</name></type> <name>avs_new_value_int</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v0</name></decl></parameter>)</parameter_list>
<block>{<block_content> <decl_stmt><decl><type><name>AVS_Value</name></type> <name>v</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name><name>v</name><operator>.</operator><name>type</name></name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>v</name><operator>.</operator><name>d</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name>v0</name></expr>;</expr_stmt> <return>return <expr><name>v</name></expr>;</return> </block_content>}</block></function>
<function><type><name>AVSC_INLINE</name> <name>AVS_Value</name></type> <name>avs_new_value_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>v0</name></decl></parameter>)</parameter_list>
<block>{<block_content> <decl_stmt><decl><type><name>AVS_Value</name></type> <name>v</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name><name>v</name><operator>.</operator><name>type</name></name> <operator>=</operator> <literal type="char">'s'</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>v</name><operator>.</operator><name>d</name><operator>.</operator><name>string</name></name> <operator>=</operator> <name>v0</name></expr>;</expr_stmt> <return>return <expr><name>v</name></expr>;</return> </block_content>}</block></function>
<function><type><name>AVSC_INLINE</name> <name>AVS_Value</name></type> <name>avs_new_value_float</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>v0</name></decl></parameter>)</parameter_list>
<block>{<block_content> <decl_stmt><decl><type><name>AVS_Value</name></type> <name>v</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name><name>v</name><operator>.</operator><name>type</name></name> <operator>=</operator> <literal type="char">'f'</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>v</name><operator>.</operator><name>d</name><operator>.</operator><name>floating_pt</name></name> <operator>=</operator> <name>v0</name></expr>;</expr_stmt> <return>return <expr><name>v</name></expr>;</return></block_content>}</block></function>
<function><type><name>AVSC_INLINE</name> <name>AVS_Value</name></type> <name>avs_new_value_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>v0</name></decl></parameter>)</parameter_list>
<block>{<block_content> <decl_stmt><decl><type><name>AVS_Value</name></type> <name>v</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name><name>v</name><operator>.</operator><name>type</name></name> <operator>=</operator> <literal type="char">'e'</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>v</name><operator>.</operator><name>d</name><operator>.</operator><name>string</name></name> <operator>=</operator> <name>v0</name></expr>;</expr_stmt> <return>return <expr><name>v</name></expr>;</return> </block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVSC_NO_DECLSPEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>AVSC_INLINE</name> <name>AVS_Value</name></type> <name>avs_new_value_clip</name><parameter_list>(<parameter><decl><type><name>AVS_Clip</name> <modifier>*</modifier></type> <name>v0</name></decl></parameter>)</parameter_list>
<block>{<block_content> <decl_stmt><decl><type><name>AVS_Value</name></type> <name>v</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt> <expr_stmt><expr><call><name>avs_set_to_clip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>v</name></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>AVSC_INLINE</name> <name>AVS_Value</name></type> <name>avs_new_value_array</name><parameter_list>(<parameter><decl><type><name>AVS_Value</name> <modifier>*</modifier></type> <name>v0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content> <decl_stmt><decl><type><name>AVS_Value</name></type> <name>v</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name><name>v</name><operator>.</operator><name>type</name></name> <operator>=</operator> <literal type="char">'a'</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>v</name><operator>.</operator><name>d</name><operator>.</operator><name>array</name></name> <operator>=</operator> <name>v0</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>v</name><operator>.</operator><name>array_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt> <return>return <expr><name>v</name></expr>;</return> </block_content>}</block></function>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__cplusplus</name></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal>
<block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>avs_release_clip</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>AVS_Clip</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>AVS_Clip</name> <operator>*</operator></expr></argument>, <argument><expr><name>avs_copy_clip</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>AVS_Clip</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>avs_clip_get_error</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>AVS_Clip</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><specifier>const</specifier> <name>AVS_VideoInfo</name> <operator>*</operator></expr></argument>, <argument><expr><name>avs_get_video_info</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>AVS_Clip</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>avs_get_version</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>AVS_Clip</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>AVSC_API</name><argument_list>(<argument>AVS_VideoFrame *</argument>, <argument>avs_get_frame</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>AVS_Clip</name> <operator>*</operator><operator>,</operator> <name>int</name> <name>n</name><operator>)</operator></expr>;</expr_stmt>


<macro><name>AVSC_API</name><argument_list>(<argument>int</argument>, <argument>avs_get_parity</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>AVS_Clip</name> <operator>*</operator><operator>,</operator> <name>int</name> <name>n</name><operator>)</operator></expr>;</expr_stmt>


<macro><name>AVSC_API</name><argument_list>(<argument>int</argument>, <argument>avs_get_audio</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>AVS_Clip</name> <operator>*</operator><operator>,</operator> <name>void</name> <operator>*</operator> <name>buf</name><operator>,</operator>
<name>INT64</name> <name>start</name><operator>,</operator> <name>INT64</name> <name>count</name><operator>)</operator></expr>;</expr_stmt>


<macro><name>AVSC_API</name><argument_list>(<argument>int</argument>, <argument>avs_set_cache_hints</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>AVS_Clip</name> <operator>*</operator><operator>,</operator>
<name>int</name> <name>cachehints</name><operator>,</operator> <name>size_t</name> <name>frame_range</name><operator>)</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__cplusplus</name></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<typedef>typedef <function_decl><type><name>AVS_Value</name></type> (<name>AVSC_CC</name> <modifier>*</modifier> <name>AVS_ApplyFunc</name>)
<parameter_list>(<parameter><decl><type><name>AVS_ScriptEnvironment</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>AVS_Value</name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>user_data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><name><name>struct</name> <name>AVS_FilterInfo</name></name></type> <name>AVS_FilterInfo</name>;</typedef>
<struct>struct <name>AVS_FilterInfo</name>
<block>{

<decl_stmt><decl><type><name>AVS_Clip</name> <modifier>*</modifier></type> <name>child</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVS_VideoInfo</name></type> <name>vi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVS_ScriptEnvironment</name> <modifier>*</modifier></type> <name>env</name></decl>;</decl_stmt>
<function_decl><type><name>AVS_VideoFrame</name> <modifier>*</modifier></type> (<name>AVSC_CC</name> <modifier>*</modifier> <name>get_frame</name>)<parameter_list>(<parameter><decl><type><name>AVS_FilterInfo</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<name>AVSC_CC</name> <modifier>*</modifier> <name>get_parity</name>)<parameter_list>(<parameter><decl><type><name>AVS_FilterInfo</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<name>AVSC_CC</name> <modifier>*</modifier> <name>get_audio</name>)<parameter_list>(<parameter><decl><type><name>AVS_FilterInfo</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>,
<parameter><decl><type><name>INT64</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>INT64</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<name>AVSC_CC</name> <modifier>*</modifier> <name>set_cache_hints</name>)<parameter_list>(<parameter><decl><type><name>AVS_FilterInfo</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cachehints</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>frame_range</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<name>AVSC_CC</name> <modifier>*</modifier> <name>free_filter</name>)<parameter_list>(<parameter><decl><type><name>AVS_FilterInfo</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>



<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>user_data</name></decl>;</decl_stmt>
}</block>;</struct>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__cplusplus</name></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal>
<block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<macro><name>AVSC_API</name><argument_list>(<argument>AVS_Clip *</argument>, <argument>avs_new_c_filter</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>AVS_ScriptEnvironment</name> <operator>*</operator> <name>e</name><operator>,</operator>
<name>AVS_FilterInfo</name> <operator>*</operator> <operator>*</operator> <name>fi</name><operator>,</operator>
<name>AVS_Value</name> <name>child</name><operator>,</operator> <name>int</name> <name>store_child</name><operator>)</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__cplusplus</name></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 








<enum>enum <block>{

<decl><name>AVS_CPU_FORCE</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>, 
<decl><name>AVS_CPU_FPU</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>, 
<decl><name>AVS_CPU_MMX</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>, 
<decl><name>AVS_CPU_INTEGER_SSE</name> <init>= <expr><literal type="number">0x08</literal></expr></init></decl>, 
<decl><name>AVS_CPU_SSE</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>, 
<decl><name>AVS_CPU_SSE2</name> <init>= <expr><literal type="number">0x20</literal></expr></init></decl>, 
<decl><name>AVS_CPU_3DNOW</name> <init>= <expr><literal type="number">0x40</literal></expr></init></decl>, 
<decl><name>AVS_CPU_3DNOW_EXT</name> <init>= <expr><literal type="number">0x80</literal></expr></init></decl>, 
<decl><name>AVS_CPU_X86_64</name> <init>= <expr><literal type="number">0xA0</literal></expr></init></decl>, 

}</block>;</enum>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__cplusplus</name></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal>
<block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>avs_get_error</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>AVS_ScriptEnvironment</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>long</name></expr></argument>, <argument><expr><name>avs_get_cpu_flags</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>AVS_ScriptEnvironment</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AVSC_API</name><argument_list>(<argument>int</argument>, <argument>avs_check_version</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>AVS_ScriptEnvironment</name> <operator>*</operator><operator>,</operator> <name>int</name> <name>version</name><operator>)</operator></expr>;</expr_stmt>

<macro><name>AVSC_API</name><argument_list>(<argument>char *</argument>, <argument>avs_save_string</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>AVS_ScriptEnvironment</name> <operator>*</operator><operator>,</operator> <specifier>const</specifier> <name>char</name><operator>*</operator> <name>s</name><operator>,</operator> <name>int</name> <name>length</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>avs_sprintf</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>AVS_ScriptEnvironment</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator> <name>fmt</name></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>AVSC_API</name><argument_list>(<argument>char *</argument>, <argument>avs_vsprintf</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>AVS_ScriptEnvironment</name> <operator>*</operator><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator> <name>fmt</name><operator>,</operator> <name>va_list</name> <name>val</name><operator>)</operator></expr>;</expr_stmt>


<macro><name>AVSC_API</name><argument_list>(<argument>int</argument>, <argument>avs_add_function</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>AVS_ScriptEnvironment</name> <operator>*</operator><operator>,</operator>
<specifier>const</specifier> <name>char</name> <operator>*</operator> <name>name</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator> <name>params</name><operator>,</operator>
<name>AVS_ApplyFunc</name> <name>apply</name><operator>,</operator> <name>void</name> <operator>*</operator> <name>user_data</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>avs_function_exists</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>AVS_ScriptEnvironment</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator> <name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>AVSC_API</name><argument_list>(<argument>AVS_Value</argument>, <argument>avs_invoke</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>AVS_ScriptEnvironment</name> <operator>*</operator><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator> <name>name</name><operator>,</operator>
<name>AVS_Value</name> <name>args</name><operator>,</operator> <specifier>const</specifier> <name>char</name><operator>*</operator><operator>*</operator> <name>arg_names</name><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>AVS_Value</name></expr></argument>, <argument><expr><name>avs_get_var</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>AVS_ScriptEnvironment</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<macro><name>AVSC_API</name><argument_list>(<argument>int</argument>, <argument>avs_set_var</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>AVS_ScriptEnvironment</name> <operator>*</operator><operator>,</operator> <specifier>const</specifier> <name>char</name><operator>*</operator> <name>name</name><operator>,</operator> <name>AVS_Value</name> <name>val</name><operator>)</operator></expr>;</expr_stmt>

<macro><name>AVSC_API</name><argument_list>(<argument>int</argument>, <argument>avs_set_global_var</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>AVS_ScriptEnvironment</name> <operator>*</operator><operator>,</operator> <specifier>const</specifier> <name>char</name><operator>*</operator> <name>name</name><operator>,</operator> <specifier>const</specifier> <name>AVS_Value</name> <name>val</name><operator>)</operator></expr>;</expr_stmt>




<macro><name>AVSC_API</name><argument_list>(<argument>AVS_VideoFrame *</argument>, <argument>avs_new_video_frame_a</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>AVS_ScriptEnvironment</name> <operator>*</operator><operator>,</operator>
<specifier>const</specifier> <name>AVS_VideoInfo</name> <operator>*</operator> <name>vi</name><operator>,</operator> <name>int</name> <name>align</name><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__cplusplus</name></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVSC_NO_DECLSPEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>AVSC_INLINE</name>
<name>AVS_VideoFrame</name> <modifier>*</modifier></type> <name>avs_new_video_frame</name><parameter_list>(<parameter><decl><type><name>AVS_ScriptEnvironment</name> <modifier>*</modifier></type> <name>env</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>vi</name></decl></parameter>)</parameter_list>
<block>{<block_content><return>return <expr><call><name>avs_new_video_frame_a</name><argument_list>(<argument><expr><name>env</name></expr></argument>,<argument><expr><name>vi</name></expr></argument>,<argument><expr><name>AVS_FRAME_ALIGN</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><name>AVSC_INLINE</name>
<name>AVS_VideoFrame</name> <modifier>*</modifier></type> <name>avs_new_frame</name><parameter_list>(<parameter><decl><type><name>AVS_ScriptEnvironment</name> <modifier>*</modifier></type> <name>env</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>vi</name></decl></parameter>)</parameter_list>
<block>{<block_content><return>return <expr><call><name>avs_new_video_frame_a</name><argument_list>(<argument><expr><name>env</name></expr></argument>,<argument><expr><name>vi</name></expr></argument>,<argument><expr><name>AVS_FRAME_ALIGN</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__cplusplus</name></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal>
<block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>avs_make_writable</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>AVS_ScriptEnvironment</name> <operator>*</operator></expr></argument>, <argument><expr><name>AVS_VideoFrame</name> <operator>*</operator> <operator>*</operator> <name>pvf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>AVSC_API</name><argument_list>(<argument>void</argument>, <argument>avs_bit_blt</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>AVS_ScriptEnvironment</name> <operator>*</operator><operator>,</operator> <name>unsigned</name> <name>char</name><operator>*</operator> <name>dstp</name><operator>,</operator> <name>int</name> <name>dst_pitch</name><operator>,</operator> <specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator> <name>srcp</name><operator>,</operator> <name>int</name> <name>src_pitch</name><operator>,</operator> <name>int</name> <name>row_size</name><operator>,</operator> <name>int</name> <name>height</name><operator>)</operator></expr>;</expr_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>AVSC_CC</name> <modifier>*</modifier><name>AVS_ShutdownFunc</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>user_data</name></decl></parameter>, <parameter><decl><type><name>AVS_ScriptEnvironment</name> <modifier>*</modifier></type> <name>env</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<macro><name>AVSC_API</name><argument_list>(<argument>void</argument>, <argument>avs_at_exit</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>AVS_ScriptEnvironment</name> <operator>*</operator><operator>,</operator> <name>AVS_ShutdownFunc</name> <name>function</name><operator>,</operator> <name>void</name> <operator>*</operator> <name>user_data</name><operator>)</operator></expr>;</expr_stmt>

<macro><name>AVSC_API</name><argument_list>(<argument>AVS_VideoFrame *</argument>, <argument>avs_subframe</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>AVS_ScriptEnvironment</name> <operator>*</operator><operator>,</operator> <name>AVS_VideoFrame</name> <operator>*</operator> <name>src</name><operator>,</operator> <name>int</name> <name>rel_offset</name><operator>,</operator> <name>int</name> <name>new_pitch</name><operator>,</operator> <name>int</name> <name>new_row_size</name><operator>,</operator> <name>int</name> <name>new_height</name><operator>)</operator></expr>;</expr_stmt>


<macro><name>AVSC_API</name><argument_list>(<argument>int</argument>, <argument>avs_set_memory_max</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>AVS_ScriptEnvironment</name> <operator>*</operator><operator>,</operator> <name>int</name> <name>mem</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>avs_set_working_dir</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>AVS_ScriptEnvironment</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator> <name>newdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<macro><name>AVSC_API</name><argument_list>(<argument>AVS_ScriptEnvironment *</argument>, <argument>avs_create_script_environment</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>int</name> <name>version</name><operator>)</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__cplusplus</name></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 



<function_decl><type><name>AVSC_EXPORT</name>
<specifier>const</specifier> <name>char</name> <modifier>*</modifier> <name>AVSC_CC</name></type> <name>avisynth_c_plugin_init</name><parameter_list>(<parameter><decl><type><name>AVS_ScriptEnvironment</name><modifier>*</modifier></type> <name>env</name></decl></parameter>)</parameter_list>;</function_decl>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__cplusplus</name></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal>
<block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>avs_delete_script_environment</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>AVS_ScriptEnvironment</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<macro><name>AVSC_API</name><argument_list>(<argument>AVS_VideoFrame *</argument>, <argument>avs_subframe_planar</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>AVS_ScriptEnvironment</name> <operator>*</operator><operator>,</operator> <name>AVS_VideoFrame</name> <operator>*</operator> <name>src</name><operator>,</operator> <name>int</name> <name>rel_offset</name><operator>,</operator> <name>int</name> <name>new_pitch</name><operator>,</operator> <name>int</name> <name>new_row_size</name><operator>,</operator> <name>int</name> <name>new_height</name><operator>,</operator> <name>int</name> <name>rel_offsetU</name><operator>,</operator> <name>int</name> <name>rel_offsetV</name><operator>,</operator> <name>int</name> <name>new_pitchUV</name><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__cplusplus</name></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
