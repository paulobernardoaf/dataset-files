<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\compat\atomics\suncc\stdatomic.h">

















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>COMPAT_ATOMICS_SUNCC_STDATOMIC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPAT_ATOMICS_SUNCC_STDATOMIC_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;atomic.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbarrier.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_FLAG_INIT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_VAR_INIT</name><parameter_list>(<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(value)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_init</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { *(obj) = (value); } while(0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kill_dependency</name><parameter_list>(<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_thread_fence</name><parameter_list>(<parameter><type><name>order</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__machine_rw_barrier();</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_signal_fence</name><parameter_list>(<parameter><type><name>order</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)0)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_is_lock_free</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<typedef>typedef <type><name>intptr_t</name></type> <name>atomic_flag</name>;</typedef>
<typedef>typedef <type><name>intptr_t</name></type> <name>atomic_bool</name>;</typedef>
<typedef>typedef <type><name>intptr_t</name></type> <name>atomic_char</name>;</typedef>
<typedef>typedef <type><name>intptr_t</name></type> <name>atomic_schar</name>;</typedef>
<typedef>typedef <type><name>intptr_t</name></type> <name>atomic_uchar</name>;</typedef>
<typedef>typedef <type><name>intptr_t</name></type> <name>atomic_short</name>;</typedef>
<typedef>typedef <type><name>intptr_t</name></type> <name>atomic_ushort</name>;</typedef>
<typedef>typedef <type><name>intptr_t</name></type> <name>atomic_int</name>;</typedef>
<typedef>typedef <type><name>intptr_t</name></type> <name>atomic_uint</name>;</typedef>
<typedef>typedef <type><name>intptr_t</name></type> <name>atomic_long</name>;</typedef>
<typedef>typedef <type><name>intptr_t</name></type> <name>atomic_ulong</name>;</typedef>
<typedef>typedef <type><name>intptr_t</name></type> <name>atomic_llong</name>;</typedef>
<typedef>typedef <type><name>intptr_t</name></type> <name>atomic_ullong</name>;</typedef>
<typedef>typedef <type><name>intptr_t</name></type> <name>atomic_wchar_t</name>;</typedef>
<typedef>typedef <type><name>intptr_t</name></type> <name>atomic_int_least8_t</name>;</typedef>
<typedef>typedef <type><name>intptr_t</name></type> <name>atomic_uint_least8_t</name>;</typedef>
<typedef>typedef <type><name>intptr_t</name></type> <name>atomic_int_least16_t</name>;</typedef>
<typedef>typedef <type><name>intptr_t</name></type> <name>atomic_uint_least16_t</name>;</typedef>
<typedef>typedef <type><name>intptr_t</name></type> <name>atomic_int_least32_t</name>;</typedef>
<typedef>typedef <type><name>intptr_t</name></type> <name>atomic_uint_least32_t</name>;</typedef>
<typedef>typedef <type><name>intptr_t</name></type> <name>atomic_int_least64_t</name>;</typedef>
<typedef>typedef <type><name>intptr_t</name></type> <name>atomic_uint_least64_t</name>;</typedef>
<typedef>typedef <type><name>intptr_t</name></type> <name>atomic_int_fast8_t</name>;</typedef>
<typedef>typedef <type><name>intptr_t</name></type> <name>atomic_uint_fast8_t</name>;</typedef>
<typedef>typedef <type><name>intptr_t</name></type> <name>atomic_int_fast16_t</name>;</typedef>
<typedef>typedef <type><name>intptr_t</name></type> <name>atomic_uint_fast16_t</name>;</typedef>
<typedef>typedef <type><name>intptr_t</name></type> <name>atomic_int_fast32_t</name>;</typedef>
<typedef>typedef <type><name>intptr_t</name></type> <name>atomic_uint_fast32_t</name>;</typedef>
<typedef>typedef <type><name>intptr_t</name></type> <name>atomic_int_fast64_t</name>;</typedef>
<typedef>typedef <type><name>intptr_t</name></type> <name>atomic_uint_fast64_t</name>;</typedef>
<typedef>typedef <type><name>intptr_t</name></type> <name>atomic_intptr_t</name>;</typedef>
<typedef>typedef <type><name>intptr_t</name></type> <name>atomic_uintptr_t</name>;</typedef>
<typedef>typedef <type><name>intptr_t</name></type> <name>atomic_size_t</name>;</typedef>
<typedef>typedef <type><name>intptr_t</name></type> <name>atomic_ptrdiff_t</name>;</typedef>
<typedef>typedef <type><name>intptr_t</name></type> <name>atomic_intmax_t</name>;</typedef>
<typedef>typedef <type><name>intptr_t</name></type> <name>atomic_uintmax_t</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>atomic_store</name><parameter_list>(<parameter><decl><type><name>intptr_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>desired</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>object</name> <operator>=</operator> <name>desired</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__machine_rw_barrier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_store_explicit</name><parameter_list>(<parameter><type><name>object</name></type></parameter>, <parameter><type><name>desired</name></type></parameter>, <parameter><type><name>order</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atomic_store(object, desired)</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>intptr_t</name></type> <name>atomic_load</name><parameter_list>(<parameter><decl><type><name>intptr_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>__machine_rw_barrier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>object</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_load_explicit</name><parameter_list>(<parameter><type><name>object</name></type></parameter>, <parameter><type><name>order</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atomic_load(object)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_exchange</name><parameter_list>(<parameter><type><name>object</name></type></parameter>, <parameter><type><name>desired</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atomic_swap_ptr(object, desired)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_exchange_explicit</name><parameter_list>(<parameter><type><name>object</name></type></parameter>, <parameter><type><name>desired</name></type></parameter>, <parameter><type><name>order</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atomic_exchange(object, desired)</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>atomic_compare_exchange_strong</name><parameter_list>(<parameter><decl><type><name>intptr_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name> <modifier>*</modifier></type><name>expected</name></decl></parameter>,
<parameter><decl><type><name>intptr_t</name></type> <name>desired</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>intptr_t</name></type> <name>old</name> <init>= <expr><operator>*</operator><name>expected</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>expected</name> <operator>=</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator><call><name>atomic_cas_ptr</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>old</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>desired</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>expected</name> <operator>==</operator> <name>old</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_compare_exchange_strong_explicit</name><parameter_list>(<parameter><type><name>object</name></type></parameter>, <parameter><type><name>expected</name></type></parameter>, <parameter><type><name>desired</name></type></parameter>, <parameter><type><name>success</name></type></parameter>, <parameter><type><name>failure</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atomic_compare_exchange_strong(object, expected, desired)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_compare_exchange_weak</name><parameter_list>(<parameter><type><name>object</name></type></parameter>, <parameter><type><name>expected</name></type></parameter>, <parameter><type><name>desired</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atomic_compare_exchange_strong(object, expected, desired)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_compare_exchange_weak_explicit</name><parameter_list>(<parameter><type><name>object</name></type></parameter>, <parameter><type><name>expected</name></type></parameter>, <parameter><type><name>desired</name></type></parameter>, <parameter><type><name>success</name></type></parameter>, <parameter><type><name>failure</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atomic_compare_exchange_weak(object, expected, desired)</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>intptr_t</name></type> <name>atomic_fetch_add</name><parameter_list>(<parameter><decl><type><name>intptr_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>operand</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>atomic_add_ptr_nv</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>operand</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>operand</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_fetch_sub</name><parameter_list>(<parameter><type><name>object</name></type></parameter>, <parameter><type><name>operand</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atomic_fetch_add(object, -(operand))</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>intptr_t</name></type> <name>atomic_fetch_or</name><parameter_list>(<parameter><decl><type><name>intptr_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>operand</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>intptr_t</name></type> <name>old</name></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>old</name> <operator>=</operator> <call><name>atomic_load</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>!</operator><call><name>atomic_compare_exchange_strong</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>old</name></expr></argument>, <argument><expr><name>old</name> <operator>|</operator> <name>operand</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<return>return <expr><name>old</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>intptr_t</name></type> <name>atomic_fetch_xor</name><parameter_list>(<parameter><decl><type><name>intptr_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>operand</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>intptr_t</name></type> <name>old</name></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>old</name> <operator>=</operator> <call><name>atomic_load</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>!</operator><call><name>atomic_compare_exchange_strong</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>old</name></expr></argument>, <argument><expr><name>old</name> <operator>^</operator> <name>operand</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<return>return <expr><name>old</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>intptr_t</name></type> <name>atomic_fetch_and</name><parameter_list>(<parameter><decl><type><name>intptr_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>operand</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>intptr_t</name></type> <name>old</name></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>old</name> <operator>=</operator> <call><name>atomic_load</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>!</operator><call><name>atomic_compare_exchange_strong</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>old</name></expr></argument>, <argument><expr><name>old</name> <operator>&amp;</operator> <name>operand</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<return>return <expr><name>old</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_fetch_add_explicit</name><parameter_list>(<parameter><type><name>object</name></type></parameter>, <parameter><type><name>operand</name></type></parameter>, <parameter><type><name>order</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atomic_fetch_add(object, operand)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_fetch_sub_explicit</name><parameter_list>(<parameter><type><name>object</name></type></parameter>, <parameter><type><name>operand</name></type></parameter>, <parameter><type><name>order</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atomic_fetch_sub(object, operand)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_fetch_or_explicit</name><parameter_list>(<parameter><type><name>object</name></type></parameter>, <parameter><type><name>operand</name></type></parameter>, <parameter><type><name>order</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atomic_fetch_or(object, operand)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_fetch_xor_explicit</name><parameter_list>(<parameter><type><name>object</name></type></parameter>, <parameter><type><name>operand</name></type></parameter>, <parameter><type><name>order</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atomic_fetch_xor(object, operand)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_fetch_and_explicit</name><parameter_list>(<parameter><type><name>object</name></type></parameter>, <parameter><type><name>operand</name></type></parameter>, <parameter><type><name>order</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atomic_fetch_and(object, operand)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_flag_test_and_set</name><parameter_list>(<parameter><type><name>object</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atomic_exchange(object, 1)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_flag_test_and_set_explicit</name><parameter_list>(<parameter><type><name>object</name></type></parameter>, <parameter><type><name>order</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atomic_flag_test_and_set(object)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_flag_clear</name><parameter_list>(<parameter><type><name>object</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atomic_store(object, 0)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_flag_clear_explicit</name><parameter_list>(<parameter><type><name>object</name></type></parameter>, <parameter><type><name>order</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atomic_flag_clear(object)</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
