<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\compat\dispatch_semaphore\semaphore.h">

















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>COMPAT_DISPATCH_SEMAPHORE_SEMAPHORE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPAT_DISPATCH_SEMAPHORE_SEMAPHORE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dispatch/dispatch.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sem_t</name></cpp:macro> <cpp:value>dispatch_semaphore_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sem_post</name><parameter_list>(<parameter><type><name>psem</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dispatch_semaphore_signal(*psem)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sem_wait</name><parameter_list>(<parameter><type><name>psem</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dispatch_semaphore_wait(*psem, DISPATCH_TIME_FOREVER)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sem_timedwait</name><parameter_list>(<parameter><type><name>psem</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dispatch_semaphore_wait(*psem, dispatch_walltime(val, 0))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sem_destroy</name><parameter_list>(<parameter><type><name>psem</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dispatch_release(*psem)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>compat_sem_init</name><parameter_list>(<parameter><decl><type><name>dispatch_semaphore_t</name> <modifier>*</modifier></type><name>psem</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>unused</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>!</operator><operator>!</operator><operator>(</operator><operator>*</operator><name>psem</name> <operator>=</operator> <call><name>dispatch_semaphore_create</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sem_init</name></cpp:macro> <cpp:value>compat_sem_init</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
