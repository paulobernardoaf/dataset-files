<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\compat\cuda\cuda_runtime.h">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>COMPAT_CUDA_CUDA_RUNTIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPAT_CUDA_CUDA_RUNTIME_H</name></cpp:macro></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__global__</name></cpp:macro> <cpp:value>__attribute__((global))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__device__</name></cpp:macro> <cpp:value>__attribute__((device))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__device_builtin__</name></cpp:macro> <cpp:value>__attribute__((device_builtin))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__align__</name><parameter_list>(<parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((aligned(N)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__inline__</name></cpp:macro> <cpp:value>__inline__ __attribute__((always_inline))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>max</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &gt; (b) ? (a) : (b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>min</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &lt; (b) ? (a) : (b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>abs</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &lt; 0 ? -(x) : (x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomicAdd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__atomic_fetch_add(a, b, __ATOMIC_SEQ_CST))</cpp:value></cpp:define>


<typedef>typedef <type><name>__device_builtin__</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>cudaTextureObject_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>__device_builtin__</name></name></type> <name>__align__</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list> <name>uchar2</name>
<block>{<block_content>
<type><name>unsigned</name> <name>char</name></type> <name>x</name>, <name>y</name>;
</block_content>}</block></typedef> <expr_stmt><expr><name>uchar2</name></expr>;</expr_stmt>

<typedef>typedef <type><name><name>struct</name> <name>__device_builtin__</name></name></type> <name>__align__</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list> <name>ushort2</name>
<block>{<block_content>
<type><name>unsigned</name> <name>short</name></type> <name>x</name>, <name>y</name>;
</block_content>}</block></typedef> <expr_stmt><expr><name>ushort2</name></expr>;</expr_stmt>

<typedef>typedef <type><struct>struct <macro><name>__device_builtin__</name></macro> <name>uint3</name>
<block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name></decl>, <name>y</name>, <name>z</name>;</decl_stmt>
}</block></struct></type> <name>uint3</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>uint3</name></name></type> <name>dim3</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>__device_builtin__</name></name></type> <name>__align__</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list> <name>int2</name>
<block>{<block_content>
<type><name>int</name></type> <name>x</name>, <name>y</name>;
</block_content>}</block></typedef> <expr_stmt><expr><name>int2</name></expr>;</expr_stmt>

<typedef>typedef <type><name><name>struct</name> <name>__device_builtin__</name></name></type> <name>__align__</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list> <name>uchar4</name>
<block>{<block_content>
<type><name>unsigned</name> <name>char</name></type> <name>x</name>, <name>y</name>, <name>z</name>, <name>w</name>;
</block_content>}</block></typedef> <expr_stmt><expr><name>uchar4</name></expr>;</expr_stmt>

<typedef>typedef <type><name><name>struct</name> <name>__device_builtin__</name></name></type> <name>__align__</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list> <name>ushort4</name>
<block>{<block_content>
<type><name>unsigned</name> <name>char</name></type> <name>x</name>, <name>y</name>, <name>z</name>, <name>w</name>;
</block_content>}</block></typedef> <expr_stmt><expr><name>ushort4</name></expr>;</expr_stmt>

<typedef>typedef <type><name><name>struct</name> <name>__device_builtin__</name></name></type> <name>__align__</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list> <name>int4</name>
<block>{<block_content>
<type><name>int</name></type> <name>x</name>, <name>y</name>, <name>z</name>, <name>w</name>;
</block_content>}</block></typedef> <expr_stmt><expr><name>int4</name></expr>;</expr_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETCOMP</name><parameter_list>(<parameter><type><name>reg</name></type></parameter>, <parameter><type><name>comp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>asm("mov.u32 %0, %%" #reg "." #comp ";" : "=r"(tmp)); ret.comp = tmp;</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>reg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static inline __device__ uint3 name() {uint3 ret; unsigned tmp; GETCOMP(reg, x) GETCOMP(reg, y) GETCOMP(reg, z) return ret; }</cpp:value></cpp:define>








<macro><name>GET</name><argument_list>(<argument>getBlockIdx</argument>, <argument>ctaid</argument>)</argument_list></macro>
<macro><name>GET</name><argument_list>(<argument>getBlockDim</argument>, <argument>ntid</argument>)</argument_list></macro>
<macro><name>GET</name><argument_list>(<argument>getThreadIdx</argument>, <argument>tid</argument>)</argument_list></macro>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>blockIdx</name></cpp:macro> <cpp:value>(getBlockIdx())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>blockDim</name></cpp:macro> <cpp:value>(getBlockDim())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>threadIdx</name></cpp:macro> <cpp:value>(getThreadIdx())</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>make_uchar2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uchar2){.x = a, .y = b})</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>make_ushort2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ushort2){.x = a, .y = b})</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>make_uchar4</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uchar4){.x = a, .y = b, .z = c, .w = d})</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>make_ushort4</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ushort4){.x = a, .y = b, .z = c, .w = d})</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEX2D</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>ret</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static inline __device__ void conv(type* out, unsigned a, unsigned b, unsigned c, unsigned d) {*out = (ret);}</cpp:value></cpp:define>

<macro><name>TEX2D</name><argument_list>(<argument>unsigned char</argument>, <argument>a &amp; <literal type="number">0xFF</literal></argument>)</argument_list></macro>
<macro><name>TEX2D</name><argument_list>(<argument>unsigned short</argument>, <argument>a &amp; <literal type="number">0xFFFF</literal></argument>)</argument_list></macro>
<macro><name>TEX2D</name><argument_list>(<argument>uchar2</argument>, <argument>make_uchar2(a &amp; <literal type="number">0xFF</literal>, b &amp; <literal type="number">0xFF</literal>)</argument>)</argument_list></macro>
<macro><name>TEX2D</name><argument_list>(<argument>ushort2</argument>, <argument>make_ushort2(a &amp; <literal type="number">0xFFFF</literal>, b &amp; <literal type="number">0xFFFF</literal>)</argument>)</argument_list></macro>
<macro><name>TEX2D</name><argument_list>(<argument>uchar4</argument>, <argument>make_uchar4(a &amp; <literal type="number">0xFF</literal>, b &amp; <literal type="number">0xFF</literal>, c &amp; <literal type="number">0xFF</literal>, d &amp; <literal type="number">0xFF</literal>)</argument>)</argument_list></macro>
<macro><name>TEX2D</name><argument_list>(<argument>ushort4</argument>, <argument>make_ushort4(a &amp; <literal type="number">0xFFFF</literal>, b &amp; <literal type="number">0xFFFF</literal>, c &amp; <literal type="number">0xFFFF</literal>, d &amp; <literal type="number">0xFFFF</literal>)</argument>)</argument_list></macro>


<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <specifier>inline</specifier> <name>__device__</name> <name>T</name></type> <name>tex2D</name><parameter_list>(<parameter><decl><type><name>cudaTextureObject_t</name></type> <name>texObject</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>T</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>ret1</name></decl>, <decl><type ref="prev"/><name>ret2</name></decl>, <decl><type ref="prev"/><name>ret3</name></decl>, <decl><type ref="prev"/><name>ret4</name></decl>;</decl_stmt>
<asm>asm("tex.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" :
"=r"(ret1), "=r"(ret2), "=r"(ret3), "=r"(ret4) :
"l"(texObject), "f"(x), "f"(y));</asm>
<expr_stmt><expr><call><name>conv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><name>ret1</name></expr></argument>, <argument><expr><name>ret2</name></expr></argument>, <argument><expr><name>ret3</name></expr></argument>, <argument><expr><name>ret4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
