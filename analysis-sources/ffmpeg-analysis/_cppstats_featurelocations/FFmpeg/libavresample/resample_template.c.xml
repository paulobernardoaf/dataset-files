<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavresample\resample_template.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CONFIG_RESAMPLE_DBL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_TYPE</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>func ##_dbl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FELEM</name></cpp:macro> <cpp:value>double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FELEM2</name></cpp:macro> <cpp:value>double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FELEML</name></cpp:macro> <cpp:value>double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUT</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>d = v</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_TO_FELEM</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>d = v</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CONFIG_RESAMPLE_FLT</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_TYPE</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>func ##_flt</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FELEM</name></cpp:macro> <cpp:value>float</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FELEM2</name></cpp:macro> <cpp:value>float</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FELEML</name></cpp:macro> <cpp:value>float</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUT</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>d = v</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_TO_FELEM</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>d = v</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CONFIG_RESAMPLE_S32</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_TYPE</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>func ##_s32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FELEM</name></cpp:macro> <cpp:value>int32_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FELEM2</name></cpp:macro> <cpp:value>int64_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FELEML</name></cpp:macro> <cpp:value>int64_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUT</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>d = av_clipl_int32((v + (1 &lt;&lt; 29)) &gt;&gt; 30)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_TO_FELEM</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>d = av_clipl_int32(llrint(v * (1 &lt;&lt; 30)));</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_TYPE</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>func ##_s16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FELEM</name></cpp:macro> <cpp:value>int16_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FELEM2</name></cpp:macro> <cpp:value>int32_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FELEML</name></cpp:macro> <cpp:value>int64_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUT</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>d = av_clip_int16((v + (1 &lt;&lt; 14)) &gt;&gt; 15)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_TO_FELEM</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>d = av_clip_int16(lrint(v * (1 &lt;&lt; 15)))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name> <name>SET_TYPE</name></type>(<name>resample_nearest</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src0</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FELEM</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>dst0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>FELEM</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>src0</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>dst_index</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>SET_TYPE</name></type>(<name>resample_linear</name>)<parameter_list>(<parameter><decl><type><name>ResampleContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_index</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src0</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>frac</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FELEM</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>dst0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>FELEM</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>src0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sample_index</name> <init>= <expr><name>index</name> <operator>&gt;&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>phase_shift</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FELEM2</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FELEM</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><operator>(</operator><operator>(</operator><name>FELEM</name> <operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>filter_bank</name></name><operator>)</operator> <operator>+</operator>
<name><name>c</name><operator>-&gt;</operator><name>filter_length</name></name> <operator>*</operator> <operator>(</operator><name>index</name> <operator>&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>phase_mask</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FELEM2</name></type> <name>v2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>filter_length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>+=</operator> <name><name>src</name><index>[<expr><name>sample_index</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>FELEM2</name><operator>)</operator><name><name>filter</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>v2</name> <operator>+=</operator> <name><name>src</name><index>[<expr><name>sample_index</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>FELEM2</name><operator>)</operator><name><name>filter</name><index>[<expr><name>i</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>filter_length</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><name>v2</name> <operator>-</operator> <name>val</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>FELEML</name><operator>)</operator><name>frac</name> <operator>/</operator> <name><name>c</name><operator>-&gt;</operator><name>src_incr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OUT</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><name>dst_index</name></expr>]</index></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>SET_TYPE</name></type>(<name>resample_one</name>)<parameter_list>(<parameter><decl><type><name>ResampleContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src0</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>frac</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FELEM</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>dst0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>FELEM</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>src0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sample_index</name> <init>= <expr><name>index</name> <operator>&gt;&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>phase_shift</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FELEM2</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FELEM</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><operator>(</operator><operator>(</operator><name>FELEM</name> <operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>filter_bank</name></name><operator>)</operator> <operator>+</operator>
<name><name>c</name><operator>-&gt;</operator><name>filter_length</name></name> <operator>*</operator> <operator>(</operator><name>index</name> <operator>&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>phase_mask</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>filter_length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>+=</operator> <name><name>src</name><index>[<expr><name>sample_index</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>FELEM2</name><operator>)</operator><name><name>filter</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>OUT</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><name>dst_index</name></expr>]</index></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>SET_TYPE</name></type>(<name>set_filter</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>filter0</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>tab</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>phase</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>tap_count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FELEM</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><operator>(</operator><operator>(</operator><name>FELEM</name> <operator>*</operator><operator>)</operator><name>filter0</name><operator>)</operator> <operator>+</operator> <name>phase</name> <operator>*</operator> <name>tap_count</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tap_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>DBL_TO_FELEM</name><argument_list>(<argument><expr><name><name>filter</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SET_TYPE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FELEM</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FELEM2</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FELEML</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OUT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DBL_TO_FELEM</name></cpp:undef>
</unit>
