<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavresample\audio_convert.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/libm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/samplefmt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio_convert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio_data.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dither.h"</cpp:file></cpp:include>

<enum>enum <name>ConvFuncType</name> <block>{
<decl><name>CONV_FUNC_TYPE_FLAT</name></decl>,
<decl><name>CONV_FUNC_TYPE_INTERLEAVE</name></decl>,
<decl><name>CONV_FUNC_TYPE_DEINTERLEAVE</name></decl>,
}</block>;</enum>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>conv_func_flat</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>conv_func_interleave</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>in</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>conv_func_deinterleave</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct>struct <name>AudioConvert</name> <block>{
<decl_stmt><decl><type><name>AVAudioResampleContext</name> <modifier>*</modifier></type><name>avr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DitherContext</name> <modifier>*</modifier></type><name>dc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>in_fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>out_fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>apply_map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>channels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>planes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ptr_align</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>samples_align</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>has_optimized_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func_descr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func_descr_generic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>ConvFuncType</name></name></type> <name>func_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conv_func_flat</name> <modifier>*</modifier></type><name>conv_flat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conv_func_flat</name> <modifier>*</modifier></type><name>conv_flat_generic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conv_func_interleave</name> <modifier>*</modifier></type><name>conv_interleave</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conv_func_interleave</name> <modifier>*</modifier></type><name>conv_interleave_generic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conv_func_deinterleave</name> <modifier>*</modifier></type><name>conv_deinterleave</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conv_func_deinterleave</name> <modifier>*</modifier></type><name>conv_deinterleave_generic</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>void</name></type> <name>ff_audio_convert_set_func</name><parameter_list>(<parameter><decl><type><name>AudioConvert</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>out_fmt</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>in_fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>ptr_align</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>samples_align</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>conv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>func_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CONV_FUNC_TYPE_FLAT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>av_get_packed_sample_fmt</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>in_fmt</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>in_fmt</name> <operator>&amp;&amp;</operator>
<call><name>av_get_packed_sample_fmt</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>out_fmt</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>out_fmt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>conv_flat</name></name> <operator>=</operator> <name>conv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>func_descr</name></name> <operator>=</operator> <name>descr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ptr_align</name></name> <operator>=</operator> <name>ptr_align</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>samples_align</name></name> <operator>=</operator> <name>samples_align</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr_align</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>samples_align</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>conv_flat_generic</name></name> <operator>=</operator> <name>conv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>func_descr_generic</name></name> <operator>=</operator> <name>descr</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>has_optimized_func</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>CONV_FUNC_TYPE_INTERLEAVE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>in_fmt</name></name> <operator>==</operator> <name>in_fmt</name> <operator>&amp;&amp;</operator> <name><name>ac</name><operator>-&gt;</operator><name>out_fmt</name></name> <operator>==</operator> <name>out_fmt</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><name>channels</name> <operator>||</operator> <name><name>ac</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <name>channels</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>conv_interleave</name></name> <operator>=</operator> <name>conv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>func_descr</name></name> <operator>=</operator> <name>descr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ptr_align</name></name> <operator>=</operator> <name>ptr_align</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>samples_align</name></name> <operator>=</operator> <name>samples_align</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr_align</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>samples_align</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>conv_interleave_generic</name></name> <operator>=</operator> <name>conv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>func_descr_generic</name></name> <operator>=</operator> <name>descr</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>has_optimized_func</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>CONV_FUNC_TYPE_DEINTERLEAVE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>in_fmt</name></name> <operator>==</operator> <name>in_fmt</name> <operator>&amp;&amp;</operator> <name><name>ac</name><operator>-&gt;</operator><name>out_fmt</name></name> <operator>==</operator> <name>out_fmt</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><name>channels</name> <operator>||</operator> <name><name>ac</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <name>channels</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>conv_deinterleave</name></name> <operator>=</operator> <name>conv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>func_descr</name></name> <operator>=</operator> <name>descr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>ptr_align</name></name> <operator>=</operator> <name>ptr_align</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>samples_align</name></name> <operator>=</operator> <name>samples_align</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr_align</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>samples_align</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>conv_deinterleave_generic</name></name> <operator>=</operator> <name>conv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>func_descr_generic</name></name> <operator>=</operator> <name>descr</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>has_optimized_func</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avr</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"audio_convert: found function: %-4s "</literal>
<literal type="string">"to %-4s (%s)\n"</literal></expr></argument>, <argument><expr><call><name>av_get_sample_fmt_name</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>in_fmt</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>av_get_sample_fmt_name</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>out_fmt</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONV_FUNC_NAME</name><parameter_list>(<parameter><type><name>dst_fmt</name></type></parameter>, <parameter><type><name>src_fmt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>conv_ ##src_fmt ##_to_ ##dst_fmt</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONV_LOOP</name><parameter_list>(<parameter><type><name>otype</name></type></parameter>, <parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { *(otype *)po = expr; pi += is; po += os; } while (po &lt; end);</cpp:value></cpp:define> 






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONV_FUNC_FLAT</name><parameter_list>(<parameter><type><name>ofmt</name></type></parameter>, <parameter><type><name>otype</name></type></parameter>, <parameter><type><name>ifmt</name></type></parameter>, <parameter><type><name>itype</name></type></parameter>, <parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void CONV_FUNC_NAME(ofmt, ifmt)(uint8_t *out, const uint8_t *in, int len) { int is = sizeof(itype); int os = sizeof(otype); const uint8_t *pi = in; uint8_t *po = out; uint8_t *end = out + os * len; CONV_LOOP(otype, expr) }</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONV_FUNC_INTERLEAVE</name><parameter_list>(<parameter><type><name>ofmt</name></type></parameter>, <parameter><type><name>otype</name></type></parameter>, <parameter><type><name>ifmt</name></type></parameter>, <parameter><type><name>itype</name></type></parameter>, <parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void CONV_FUNC_NAME(ofmt, ifmt)(uint8_t *out, const uint8_t **in, int len, int channels) { int ch; int out_bps = sizeof(otype); int is = sizeof(itype); int os = channels * out_bps; for (ch = 0; ch &lt; channels; ch++) { const uint8_t *pi = in[ch]; uint8_t *po = out + ch * out_bps; uint8_t *end = po + os * len; CONV_LOOP(otype, expr) } }</cpp:value></cpp:define>















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONV_FUNC_DEINTERLEAVE</name><parameter_list>(<parameter><type><name>ofmt</name></type></parameter>, <parameter><type><name>otype</name></type></parameter>, <parameter><type><name>ifmt</name></type></parameter>, <parameter><type><name>itype</name></type></parameter>, <parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void CONV_FUNC_NAME(ofmt, ifmt)(uint8_t **out, const uint8_t *in, int len, int channels) { int ch; int in_bps = sizeof(itype); int is = channels * in_bps; int os = sizeof(otype); for (ch = 0; ch &lt; channels; ch++) { const uint8_t *pi = in + ch * in_bps; uint8_t *po = out[ch]; uint8_t *end = po + os * len; CONV_LOOP(otype, expr) } }</cpp:value></cpp:define>















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONV_FUNC_GROUP</name><parameter_list>(<parameter><type><name>ofmt</name></type></parameter>, <parameter><type><name>otype</name></type></parameter>, <parameter><type><name>ifmt</name></type></parameter>, <parameter><type><name>itype</name></type></parameter>, <parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CONV_FUNC_FLAT( ofmt, otype, ifmt, itype, expr) CONV_FUNC_INTERLEAVE( ofmt, otype, ifmt ##P, itype, expr) CONV_FUNC_DEINTERLEAVE(ofmt ##P, otype, ifmt, itype, expr)</cpp:value></cpp:define>




<macro><name>CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_U8</argument>, <argument>uint8_t</argument>, <argument>AV_SAMPLE_FMT_U8</argument>, <argument>uint8_t</argument>, <argument>*(const uint8_t *)pi</argument>)</argument_list></macro>
<macro><name>CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_S16</argument>, <argument>int16_t</argument>, <argument>AV_SAMPLE_FMT_U8</argument>, <argument>uint8_t</argument>, <argument>(*(const uint8_t *)pi - <literal type="number">0x80</literal>) &lt;&lt; <literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_S32</argument>, <argument>int32_t</argument>, <argument>AV_SAMPLE_FMT_U8</argument>, <argument>uint8_t</argument>, <argument>(*(const uint8_t *)pi - <literal type="number">0x80</literal>) &lt;&lt; <literal type="number">24</literal></argument>)</argument_list></macro>
<macro><name>CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_FLT</argument>, <argument>float</argument>, <argument>AV_SAMPLE_FMT_U8</argument>, <argument>uint8_t</argument>, <argument>(*(const uint8_t *)pi - <literal type="number">0x80</literal>) * (<literal type="number">1.0f</literal> / (<literal type="number">1</literal> &lt;&lt; <literal type="number">7</literal>))</argument>)</argument_list></macro>
<macro><name>CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_DBL</argument>, <argument>double</argument>, <argument>AV_SAMPLE_FMT_U8</argument>, <argument>uint8_t</argument>, <argument>(*(const uint8_t *)pi - <literal type="number">0x80</literal>) * (<literal type="number">1.0</literal> / (<literal type="number">1</literal> &lt;&lt; <literal type="number">7</literal>))</argument>)</argument_list></macro>
<macro><name>CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_U8</argument>, <argument>uint8_t</argument>, <argument>AV_SAMPLE_FMT_S16</argument>, <argument>int16_t</argument>, <argument>(*(const int16_t *)pi &gt;&gt; <literal type="number">8</literal>) + <literal type="number">0x80</literal></argument>)</argument_list></macro>
<macro><name>CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_S16</argument>, <argument>int16_t</argument>, <argument>AV_SAMPLE_FMT_S16</argument>, <argument>int16_t</argument>, <argument>*(const int16_t *)pi</argument>)</argument_list></macro>
<macro><name>CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_S32</argument>, <argument>int32_t</argument>, <argument>AV_SAMPLE_FMT_S16</argument>, <argument>int16_t</argument>, <argument>*(const int16_t *)pi &lt;&lt; <literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_FLT</argument>, <argument>float</argument>, <argument>AV_SAMPLE_FMT_S16</argument>, <argument>int16_t</argument>, <argument>*(const int16_t *)pi * (<literal type="number">1.0f</literal> / (<literal type="number">1</literal> &lt;&lt; <literal type="number">15</literal>))</argument>)</argument_list></macro>
<macro><name>CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_DBL</argument>, <argument>double</argument>, <argument>AV_SAMPLE_FMT_S16</argument>, <argument>int16_t</argument>, <argument>*(const int16_t *)pi * (<literal type="number">1.0</literal> / (<literal type="number">1</literal> &lt;&lt; <literal type="number">15</literal>))</argument>)</argument_list></macro>
<macro><name>CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_U8</argument>, <argument>uint8_t</argument>, <argument>AV_SAMPLE_FMT_S32</argument>, <argument>int32_t</argument>, <argument>(*(const int32_t *)pi &gt;&gt; <literal type="number">24</literal>) + <literal type="number">0x80</literal></argument>)</argument_list></macro>
<macro><name>CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_S16</argument>, <argument>int16_t</argument>, <argument>AV_SAMPLE_FMT_S32</argument>, <argument>int32_t</argument>, <argument>*(const int32_t *)pi &gt;&gt; <literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_S32</argument>, <argument>int32_t</argument>, <argument>AV_SAMPLE_FMT_S32</argument>, <argument>int32_t</argument>, <argument>*(const int32_t *)pi</argument>)</argument_list></macro>
<macro><name>CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_FLT</argument>, <argument>float</argument>, <argument>AV_SAMPLE_FMT_S32</argument>, <argument>int32_t</argument>, <argument>*(const int32_t *)pi * (<literal type="number">1.0f</literal> / (<literal type="number">1U</literal> &lt;&lt; <literal type="number">31</literal>))</argument>)</argument_list></macro>
<macro><name>CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_DBL</argument>, <argument>double</argument>, <argument>AV_SAMPLE_FMT_S32</argument>, <argument>int32_t</argument>, <argument>*(const int32_t *)pi * (<literal type="number">1.0</literal> / (<literal type="number">1U</literal> &lt;&lt; <literal type="number">31</literal>))</argument>)</argument_list></macro>
<macro><name>CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_U8</argument>, <argument>uint8_t</argument>, <argument>AV_SAMPLE_FMT_FLT</argument>, <argument>float</argument>, <argument>av_clip_uint8( lrintf(*(const float *)pi * (<literal type="number">1</literal> &lt;&lt; <literal type="number">7</literal>)) + <literal type="number">0x80</literal>)</argument>)</argument_list></macro>
<macro><name>CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_S16</argument>, <argument>int16_t</argument>, <argument>AV_SAMPLE_FMT_FLT</argument>, <argument>float</argument>, <argument>av_clip_int16( lrintf(*(const float *)pi * (<literal type="number">1</literal> &lt;&lt; <literal type="number">15</literal>)))</argument>)</argument_list></macro>
<macro><name>CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_S32</argument>, <argument>int32_t</argument>, <argument>AV_SAMPLE_FMT_FLT</argument>, <argument>float</argument>, <argument>av_clipl_int32(llrintf(*(const float *)pi * (<literal type="number">1U</literal> &lt;&lt; <literal type="number">31</literal>)))</argument>)</argument_list></macro>
<macro><name>CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_FLT</argument>, <argument>float</argument>, <argument>AV_SAMPLE_FMT_FLT</argument>, <argument>float</argument>, <argument>*(const float *)pi</argument>)</argument_list></macro>
<macro><name>CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_DBL</argument>, <argument>double</argument>, <argument>AV_SAMPLE_FMT_FLT</argument>, <argument>float</argument>, <argument>*(const float *)pi</argument>)</argument_list></macro>
<macro><name>CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_U8</argument>, <argument>uint8_t</argument>, <argument>AV_SAMPLE_FMT_DBL</argument>, <argument>double</argument>, <argument>av_clip_uint8( lrint(*(const double *)pi * (<literal type="number">1</literal> &lt;&lt; <literal type="number">7</literal>)) + <literal type="number">0x80</literal>)</argument>)</argument_list></macro>
<macro><name>CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_S16</argument>, <argument>int16_t</argument>, <argument>AV_SAMPLE_FMT_DBL</argument>, <argument>double</argument>, <argument>av_clip_int16( lrint(*(const double *)pi * (<literal type="number">1</literal> &lt;&lt; <literal type="number">15</literal>)))</argument>)</argument_list></macro>
<macro><name>CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_S32</argument>, <argument>int32_t</argument>, <argument>AV_SAMPLE_FMT_DBL</argument>, <argument>double</argument>, <argument>av_clipl_int32(llrint(*(const double *)pi * (<literal type="number">1U</literal> &lt;&lt; <literal type="number">31</literal>)))</argument>)</argument_list></macro>
<macro><name>CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_FLT</argument>, <argument>float</argument>, <argument>AV_SAMPLE_FMT_DBL</argument>, <argument>double</argument>, <argument>*(const double *)pi</argument>)</argument_list></macro>
<macro><name>CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_DBL</argument>, <argument>double</argument>, <argument>AV_SAMPLE_FMT_DBL</argument>, <argument>double</argument>, <argument>*(const double *)pi</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_CONV_FUNC_GROUP</name><parameter_list>(<parameter><type><name>ofmt</name></type></parameter>, <parameter><type><name>ifmt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ff_audio_convert_set_func(ac, ofmt, ifmt, 0, 1, 1, "C", CONV_FUNC_NAME(ofmt, ifmt)); ff_audio_convert_set_func(ac, ofmt ##P, ifmt, 0, 1, 1, "C", CONV_FUNC_NAME(ofmt ##P, ifmt)); ff_audio_convert_set_func(ac, ofmt, ifmt ##P, 0, 1, 1, "C", CONV_FUNC_NAME(ofmt, ifmt ##P));</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>void</name></type> <name>set_generic_function</name><parameter_list>(<parameter><decl><type><name>AudioConvert</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>SET_CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_U8</argument>, <argument>AV_SAMPLE_FMT_U8</argument>)</argument_list></macro>
<macro><name>SET_CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_S16</argument>, <argument>AV_SAMPLE_FMT_U8</argument>)</argument_list></macro>
<macro><name>SET_CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_S32</argument>, <argument>AV_SAMPLE_FMT_U8</argument>)</argument_list></macro>
<macro><name>SET_CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_FLT</argument>, <argument>AV_SAMPLE_FMT_U8</argument>)</argument_list></macro>
<macro><name>SET_CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_DBL</argument>, <argument>AV_SAMPLE_FMT_U8</argument>)</argument_list></macro>
<macro><name>SET_CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_U8</argument>, <argument>AV_SAMPLE_FMT_S16</argument>)</argument_list></macro>
<macro><name>SET_CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_S16</argument>, <argument>AV_SAMPLE_FMT_S16</argument>)</argument_list></macro>
<macro><name>SET_CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_S32</argument>, <argument>AV_SAMPLE_FMT_S16</argument>)</argument_list></macro>
<macro><name>SET_CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_FLT</argument>, <argument>AV_SAMPLE_FMT_S16</argument>)</argument_list></macro>
<macro><name>SET_CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_DBL</argument>, <argument>AV_SAMPLE_FMT_S16</argument>)</argument_list></macro>
<macro><name>SET_CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_U8</argument>, <argument>AV_SAMPLE_FMT_S32</argument>)</argument_list></macro>
<macro><name>SET_CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_S16</argument>, <argument>AV_SAMPLE_FMT_S32</argument>)</argument_list></macro>
<macro><name>SET_CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_S32</argument>, <argument>AV_SAMPLE_FMT_S32</argument>)</argument_list></macro>
<macro><name>SET_CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_FLT</argument>, <argument>AV_SAMPLE_FMT_S32</argument>)</argument_list></macro>
<macro><name>SET_CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_DBL</argument>, <argument>AV_SAMPLE_FMT_S32</argument>)</argument_list></macro>
<macro><name>SET_CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_U8</argument>, <argument>AV_SAMPLE_FMT_FLT</argument>)</argument_list></macro>
<macro><name>SET_CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_S16</argument>, <argument>AV_SAMPLE_FMT_FLT</argument>)</argument_list></macro>
<macro><name>SET_CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_S32</argument>, <argument>AV_SAMPLE_FMT_FLT</argument>)</argument_list></macro>
<macro><name>SET_CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_FLT</argument>, <argument>AV_SAMPLE_FMT_FLT</argument>)</argument_list></macro>
<macro><name>SET_CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_DBL</argument>, <argument>AV_SAMPLE_FMT_FLT</argument>)</argument_list></macro>
<macro><name>SET_CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_U8</argument>, <argument>AV_SAMPLE_FMT_DBL</argument>)</argument_list></macro>
<macro><name>SET_CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_S16</argument>, <argument>AV_SAMPLE_FMT_DBL</argument>)</argument_list></macro>
<macro><name>SET_CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_S32</argument>, <argument>AV_SAMPLE_FMT_DBL</argument>)</argument_list></macro>
<macro><name>SET_CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_FLT</argument>, <argument>AV_SAMPLE_FMT_DBL</argument>)</argument_list></macro>
<macro><name>SET_CONV_FUNC_GROUP</name><argument_list>(<argument>AV_SAMPLE_FMT_DBL</argument>, <argument>AV_SAMPLE_FMT_DBL</argument>)</argument_list></macro>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_audio_convert_free</name><parameter_list>(<parameter><decl><type><name>AudioConvert</name> <modifier>*</modifier><modifier>*</modifier></type><name>ac</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>ac</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ff_dither_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>ac</name><operator>)</operator><operator>-&gt;</operator><name>dc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>AudioConvert</name> <modifier>*</modifier></type><name>ff_audio_convert_alloc</name><parameter_list>(<parameter><decl><type><name>AVAudioResampleContext</name> <modifier>*</modifier></type><name>avr</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>out_fmt</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>in_fmt</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sample_rate</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>apply_map</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AudioConvert</name> <modifier>*</modifier></type><name>ac</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>in_planar</name></decl>, <decl><type ref="prev"/><name>out_planar</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ac</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ac</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ac</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>avr</name></name> <operator>=</operator> <name>avr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>out_fmt</name></name> <operator>=</operator> <name>out_fmt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>in_fmt</name></name> <operator>=</operator> <name>in_fmt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>apply_map</name></name> <operator>=</operator> <name>apply_map</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>dither_method</name></name> <operator>!=</operator> <name>AV_RESAMPLE_DITHER_NONE</name> <operator>&amp;&amp;</operator>
<call><name>av_get_packed_sample_fmt</name><argument_list>(<argument><expr><name>out_fmt</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AV_SAMPLE_FMT_S16</name> <operator>&amp;&amp;</operator>
<call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name>in_fmt</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>dc</name></name> <operator>=</operator> <call><name>ff_dither_alloc</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>out_fmt</name></expr></argument>, <argument><expr><name>in_fmt</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>,
<argument><expr><name>apply_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ac</name><operator>-&gt;</operator><name>dc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ac</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>in_planar</name> <operator>=</operator> <call><name>ff_sample_fmt_is_planar</name><argument_list>(<argument><expr><name>in_fmt</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out_planar</name> <operator>=</operator> <call><name>ff_sample_fmt_is_planar</name><argument_list>(<argument><expr><name>out_fmt</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>in_planar</name> <operator>==</operator> <name>out_planar</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>func_type</name></name> <operator>=</operator> <name>CONV_FUNC_TYPE_FLAT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>planes</name></name> <operator>=</operator> <ternary><condition><expr><name>in_planar</name></expr> ?</condition><then> <expr><name><name>ac</name><operator>-&gt;</operator><name>channels</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>in_planar</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>func_type</name></name> <operator>=</operator> <name>CONV_FUNC_TYPE_INTERLEAVE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>func_type</name></name> <operator>=</operator> <name>CONV_FUNC_TYPE_DEINTERLEAVE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>set_generic_function</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_AARCH64</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_audio_convert_init_aarch64</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_ARM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_audio_convert_init_arm</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_audio_convert_init_x86</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ac</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_audio_convert</name><parameter_list>(<parameter><decl><type><name>AudioConvert</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>use_generic</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>dc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avr</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"%d samples - audio_convert: %s to %s (dithered)\n"</literal></expr></argument>,
<argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>av_get_sample_fmt_name</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>in_fmt</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>av_get_sample_fmt_name</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>out_fmt</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_convert_dither</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>dc</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>has_optimized_func</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ptr_align</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>ptr_align</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>ptr_align</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>samples_align</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>samples_align</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>samples_align</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aligned_len</name> <init>= <expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>ac</name><operator>-&gt;</operator><name>samples_align</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ptr_align</name> <operator>%</operator> <name><name>ac</name><operator>-&gt;</operator><name>ptr_align</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name>samples_align</name> <operator>&gt;=</operator> <name>aligned_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>aligned_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>use_generic</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avr</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"%d samples - audio_convert: %s to %s (%s)\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>,
<argument><expr><call><name>av_get_sample_fmt_name</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>in_fmt</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>av_get_sample_fmt_name</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>out_fmt</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name>use_generic</name></expr> ?</condition><then> <expr><name><name>ac</name><operator>-&gt;</operator><name>func_descr_generic</name></name></expr> </then><else>: <expr><name><name>ac</name><operator>-&gt;</operator><name>func_descr</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>apply_map</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ChannelMapInfo</name> <modifier>*</modifier></type><name>map</name> <init>= <expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>avr</name><operator>-&gt;</operator><name>ch_map_info</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ff_sample_fmt_is_planar</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>out_fmt</name></name></expr></argument>, <argument><expr><name><name>ac</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avr</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot remap packed format during conversion\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>do_remap</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ff_sample_fmt_is_planar</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>in_fmt</name></name></expr></argument>, <argument><expr><name><name>ac</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>conv_func_flat</name> <modifier>*</modifier></type><name>convert</name> <init>= <expr><ternary><condition><expr><name>use_generic</name></expr> ?</condition><then> <expr><name><name>ac</name><operator>-&gt;</operator><name>conv_flat_generic</name></name></expr> </then><else>:
<expr><name><name>ac</name><operator>-&gt;</operator><name>conv_flat</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>ac</name><operator>-&gt;</operator><name>planes</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>channel_map</name><index>[<expr><name>p</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>convert</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>map</name><operator>-&gt;</operator><name>channel_map</name><index>[<expr><name>p</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>data</name><index>[<expr><name>AVRESAMPLE_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conv_func_deinterleave</name> <modifier>*</modifier></type><name>convert</name> <init>= <expr><ternary><condition><expr><name>use_generic</name></expr> ?</condition><then>
<expr><name><name>ac</name><operator>-&gt;</operator><name>conv_deinterleave_generic</name></name></expr> </then><else>:
<expr><name><name>ac</name><operator>-&gt;</operator><name>conv_deinterleave</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>ac</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><index>[<expr><name><name>map</name><operator>-&gt;</operator><name>input_map</name><index>[<expr><name>p</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>convert</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>ac</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>do_copy</name></name> <operator>||</operator> <name><name>map</name><operator>-&gt;</operator><name>do_zero</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>ac</name><operator>-&gt;</operator><name>planes</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>channel_copy</name><index>[<expr><name>p</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>map</name><operator>-&gt;</operator><name>channel_copy</name><index>[<expr><name>p</name></expr>]</index></name></expr>]</index></name></expr></argument>,
<argument><expr><name>len</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>stride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>channel_zero</name><index>[<expr><name>p</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_samples_set_silence</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ac</name><operator>-&gt;</operator><name>out_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<switch>switch <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>func_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CONV_FUNC_TYPE_FLAT</name></expr>:</case> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>in</name><operator>-&gt;</operator><name>is_planar</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>*=</operator> <name><name>in</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>use_generic</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>ac</name><operator>-&gt;</operator><name>planes</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>conv_flat_generic</name></name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>ac</name><operator>-&gt;</operator><name>planes</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>conv_flat</name></name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>CONV_FUNC_TYPE_INTERLEAVE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>use_generic</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>conv_interleave_generic</name></name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>conv_interleave</name></name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>ac</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>CONV_FUNC_TYPE_DEINTERLEAVE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>use_generic</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>conv_deinterleave_generic</name></name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>conv_deinterleave</name></name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
