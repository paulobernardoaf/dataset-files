<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavresample\audio_mix.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/libm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/samplefmt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avresample.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio_data.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio_mix.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>coeff_type_names</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"q8"</literal></expr>, <expr><literal type="string">"q15"</literal></expr>, <expr><literal type="string">"flt"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>AudioMix</name> <block>{
<decl_stmt><decl><type><name>AVAudioResampleContext</name> <modifier>*</modifier></type><name>avr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVMixCoeffType</name></name></type> <name>coeff_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>in_layout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>out_layout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>in_channels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>out_channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ptr_align</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>samples_align</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>has_optimized_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func_descr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func_descr_generic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mix_func</name> <modifier>*</modifier></type><name>mix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mix_func</name> <modifier>*</modifier></type><name>mix_generic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>in_matrix_channels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>out_matrix_channels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>output_zero</name><index>[<expr><name>AVRESAMPLE_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>input_skip</name><index>[<expr><name>AVRESAMPLE_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>output_skip</name><index>[<expr><name>AVRESAMPLE_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name><name>matrix_q8</name><index>[<expr><name>AVRESAMPLE_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name><name>matrix_q15</name><index>[<expr><name>AVRESAMPLE_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name><name>matrix_flt</name><index>[<expr><name>AVRESAMPLE_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>matrix</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>void</name></type> <name>ff_audio_mix_set_func</name><parameter_list>(<parameter><decl><type><name>AudioMix</name> <modifier>*</modifier></type><name>am</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>fmt</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVMixCoeffType</name></name></type> <name>coeff_type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_channels</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>out_channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ptr_align</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>samples_align</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>mix_func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>==</operator> <name><name>am</name><operator>-&gt;</operator><name>fmt</name></name> <operator>&amp;&amp;</operator> <name>coeff_type</name> <operator>==</operator> <name><name>am</name><operator>-&gt;</operator><name>coeff_type</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator> <name>in_channels</name> <operator>==</operator> <name><name>am</name><operator>-&gt;</operator><name>in_matrix_channels</name></name> <operator>||</operator> <name>in_channels</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>out_channels</name> <operator>==</operator> <name><name>am</name><operator>-&gt;</operator><name>out_matrix_channels</name></name> <operator>||</operator> <name>out_channels</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>chan_str</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>am</name><operator>-&gt;</operator><name>mix</name></name> <operator>=</operator> <name>mix_func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>am</name><operator>-&gt;</operator><name>func_descr</name></name> <operator>=</operator> <name>descr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>am</name><operator>-&gt;</operator><name>ptr_align</name></name> <operator>=</operator> <name>ptr_align</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>am</name><operator>-&gt;</operator><name>samples_align</name></name> <operator>=</operator> <name>samples_align</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr_align</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>samples_align</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>am</name><operator>-&gt;</operator><name>mix_generic</name></name> <operator>=</operator> <name>mix_func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>am</name><operator>-&gt;</operator><name>func_descr_generic</name></name> <operator>=</operator> <name>descr</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>am</name><operator>-&gt;</operator><name>has_optimized_func</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>in_channels</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>out_channels</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>chan_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>chan_str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"[%d to %d] "</literal></expr></argument>,
<argument><expr><name>in_channels</name></expr></argument>, <argument><expr><name>out_channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>chan_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>chan_str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"[%d to any] "</literal></expr></argument>,
<argument><expr><name>in_channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>out_channels</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>chan_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>chan_str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"[any to %d] "</literal></expr></argument>,
<argument><expr><name>out_channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>chan_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>chan_str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"[any to any] "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>am</name><operator>-&gt;</operator><name>avr</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"audio_mix: found function: [fmt=%s] "</literal>
<literal type="string">"[c=%s] %s(%s)\n"</literal></expr></argument>, <argument><expr><call><name>av_get_sample_fmt_name</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>coeff_type_names</name><index>[<expr><name>coeff_type</name></expr>]</index></name></expr></argument>, <argument><expr><name>chan_str</name></expr></argument>, <argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIX_FUNC_NAME</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>cfmt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mix_any_ ##fmt ##_##cfmt ##_c</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIX_FUNC_GENERIC</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>cfmt</name></type></parameter>, <parameter><type><name>stype</name></type></parameter>, <parameter><type><name>ctype</name></type></parameter>, <parameter><type><name>sumtype</name></type></parameter>, <parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void MIX_FUNC_NAME(fmt, cfmt)(stype **samples, ctype **matrix, int len, int out_ch, int in_ch) { int i, in, out; stype temp[AVRESAMPLE_MAX_CHANNELS]; for (i = 0; i &lt; len; i++) { for (out = 0; out &lt; out_ch; out++) { sumtype sum = 0; for (in = 0; in &lt; in_ch; in++) sum += samples[in][i] * matrix[out][in]; temp[out] = expr; } for (out = 0; out &lt; out_ch; out++) samples[out][i] = temp[out]; } }</cpp:value></cpp:define>

















<macro><name>MIX_FUNC_GENERIC</name><argument_list>(<argument>FLTP</argument>, <argument>FLT</argument>, <argument>float</argument>, <argument>float</argument>, <argument>float</argument>, <argument>sum</argument>)</argument_list></macro>
<macro><name>MIX_FUNC_GENERIC</name><argument_list>(<argument>S16P</argument>, <argument>FLT</argument>, <argument>int16_t</argument>, <argument>float</argument>, <argument>float</argument>, <argument>av_clip_int16(lrintf(sum))</argument>)</argument_list></macro>
<macro><name>MIX_FUNC_GENERIC</name><argument_list>(<argument>S16P</argument>, <argument>Q15</argument>, <argument>int16_t</argument>, <argument>int32_t</argument>, <argument>int64_t</argument>, <argument>av_clip_int16(sum &gt;&gt; <literal type="number">15</literal>)</argument>)</argument_list></macro>
<macro><name>MIX_FUNC_GENERIC</name><argument_list>(<argument>S16P</argument>, <argument>Q8</argument>, <argument>int16_t</argument>, <argument>int16_t</argument>, <argument>int32_t</argument>, <argument>av_clip_int16(sum &gt;&gt; <literal type="number">8</literal>)</argument>)</argument_list></macro>



<function><type><specifier>static</specifier> <name>void</name></type> <name>mix_2_to_1_fltp_flt_c</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>samples</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>matrix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>out_ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>src0</name> <init>= <expr><name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>src1</name> <init>= <expr><name><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>src0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>m0</name> <init>= <expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>m1</name> <init>= <expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>src0</name><operator>++</operator> <operator>*</operator> <name>m0</name> <operator>+</operator> <operator>*</operator><name>src1</name><operator>++</operator> <operator>*</operator> <name>m1</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>src0</name><operator>++</operator> <operator>*</operator> <name>m0</name> <operator>+</operator> <operator>*</operator><name>src1</name><operator>++</operator> <operator>*</operator> <name>m1</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>src0</name><operator>++</operator> <operator>*</operator> <name>m0</name> <operator>+</operator> <operator>*</operator><name>src1</name><operator>++</operator> <operator>*</operator> <name>m1</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>src0</name><operator>++</operator> <operator>*</operator> <name>m0</name> <operator>+</operator> <operator>*</operator><name>src1</name><operator>++</operator> <operator>*</operator> <name>m1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>src0</name><operator>++</operator> <operator>*</operator> <name>m0</name> <operator>+</operator> <operator>*</operator><name>src1</name><operator>++</operator> <operator>*</operator> <name>m1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mix_2_to_1_s16p_flt_c</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>samples</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>matrix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>out_ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src0</name> <init>= <expr><name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src1</name> <init>= <expr><name><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>src0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>m0</name> <init>= <expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>m1</name> <init>= <expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><call><name>lrintf</name><argument_list>(<argument><expr><operator>*</operator><name>src0</name><operator>++</operator> <operator>*</operator> <name>m0</name> <operator>+</operator> <operator>*</operator><name>src1</name><operator>++</operator> <operator>*</operator> <name>m1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><call><name>lrintf</name><argument_list>(<argument><expr><operator>*</operator><name>src0</name><operator>++</operator> <operator>*</operator> <name>m0</name> <operator>+</operator> <operator>*</operator><name>src1</name><operator>++</operator> <operator>*</operator> <name>m1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><call><name>lrintf</name><argument_list>(<argument><expr><operator>*</operator><name>src0</name><operator>++</operator> <operator>*</operator> <name>m0</name> <operator>+</operator> <operator>*</operator><name>src1</name><operator>++</operator> <operator>*</operator> <name>m1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><call><name>lrintf</name><argument_list>(<argument><expr><operator>*</operator><name>src0</name><operator>++</operator> <operator>*</operator> <name>m0</name> <operator>+</operator> <operator>*</operator><name>src1</name><operator>++</operator> <operator>*</operator> <name>m1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><call><name>lrintf</name><argument_list>(<argument><expr><operator>*</operator><name>src0</name><operator>++</operator> <operator>*</operator> <name>m0</name> <operator>+</operator> <operator>*</operator><name>src1</name><operator>++</operator> <operator>*</operator> <name>m1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mix_2_to_1_s16p_q8_c</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>samples</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>matrix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>out_ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src0</name> <init>= <expr><name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src1</name> <init>= <expr><name><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>src0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name>m0</name> <init>= <expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name>m1</name> <init>= <expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>*</operator><name>src0</name><operator>++</operator> <operator>*</operator> <name>m0</name> <operator>+</operator> <operator>*</operator><name>src1</name><operator>++</operator> <operator>*</operator> <name>m1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>*</operator><name>src0</name><operator>++</operator> <operator>*</operator> <name>m0</name> <operator>+</operator> <operator>*</operator><name>src1</name><operator>++</operator> <operator>*</operator> <name>m1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>*</operator><name>src0</name><operator>++</operator> <operator>*</operator> <name>m0</name> <operator>+</operator> <operator>*</operator><name>src1</name><operator>++</operator> <operator>*</operator> <name>m1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>*</operator><name>src0</name><operator>++</operator> <operator>*</operator> <name>m0</name> <operator>+</operator> <operator>*</operator><name>src1</name><operator>++</operator> <operator>*</operator> <name>m1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>*</operator><name>src0</name><operator>++</operator> <operator>*</operator> <name>m0</name> <operator>+</operator> <operator>*</operator><name>src1</name><operator>++</operator> <operator>*</operator> <name>m1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mix_1_to_2_fltp_flt_c</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>samples</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>matrix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>out_ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst0</name> <init>= <expr><name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst1</name> <init>= <expr><name><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>dst0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>m0</name> <init>= <expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>m1</name> <init>= <expr><name><name>matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst0</name><operator>++</operator> <operator>=</operator> <name>v</name> <operator>*</operator> <name>m0</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst1</name><operator>++</operator> <operator>=</operator> <name>v</name> <operator>*</operator> <name>m1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst0</name><operator>++</operator> <operator>=</operator> <name>v</name> <operator>*</operator> <name>m0</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst1</name><operator>++</operator> <operator>=</operator> <name>v</name> <operator>*</operator> <name>m1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst0</name><operator>++</operator> <operator>=</operator> <name>v</name> <operator>*</operator> <name>m0</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst1</name><operator>++</operator> <operator>=</operator> <name>v</name> <operator>*</operator> <name>m1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst0</name><operator>++</operator> <operator>=</operator> <name>v</name> <operator>*</operator> <name>m0</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst1</name><operator>++</operator> <operator>=</operator> <name>v</name> <operator>*</operator> <name>m1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst0</name><operator>++</operator> <operator>=</operator> <name>v</name> <operator>*</operator> <name>m0</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst1</name><operator>++</operator> <operator>=</operator> <name>v</name> <operator>*</operator> <name>m1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mix_6_to_2_fltp_flt_c</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>samples</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>matrix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>out_ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>v0</name></decl>, <decl><type ref="prev"/><name>v1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>src0</name> <init>= <expr><name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>src1</name> <init>= <expr><name><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>src2</name> <init>= <expr><name><name>samples</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>src3</name> <init>= <expr><name><name>samples</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>src4</name> <init>= <expr><name><name>samples</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>src5</name> <init>= <expr><name><name>samples</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst0</name> <init>= <expr><name>src0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst1</name> <init>= <expr><name>src1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>m0</name> <init>= <expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>m1</name> <init>= <expr><name><name>matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v0</name> <operator>=</operator> <operator>*</operator><name>src0</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>v1</name> <operator>=</operator> <operator>*</operator><name>src1</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst0</name><operator>++</operator> <operator>=</operator> <name>v0</name> <operator>*</operator> <name><name>m0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>
<name>v1</name> <operator>*</operator> <name><name>m0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator>
<operator>*</operator><name>src2</name> <operator>*</operator> <name><name>m0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator>
<operator>*</operator><name>src3</name> <operator>*</operator> <name><name>m0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator>
<operator>*</operator><name>src4</name> <operator>*</operator> <name><name>m0</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator>
<operator>*</operator><name>src5</name> <operator>*</operator> <name><name>m0</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst1</name><operator>++</operator> <operator>=</operator> <name>v0</name> <operator>*</operator> <name><name>m1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>
<name>v1</name> <operator>*</operator> <name><name>m1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator>
<operator>*</operator><name>src2</name><operator>++</operator> <operator>*</operator> <name><name>m1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator>
<operator>*</operator><name>src3</name><operator>++</operator> <operator>*</operator> <name><name>m1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator>
<operator>*</operator><name>src4</name><operator>++</operator> <operator>*</operator> <name><name>m1</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator>
<operator>*</operator><name>src5</name><operator>++</operator> <operator>*</operator> <name><name>m1</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mix_2_to_6_fltp_flt_c</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>samples</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>matrix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>out_ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>v0</name></decl>, <decl><type ref="prev"/><name>v1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst0</name> <init>= <expr><name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst1</name> <init>= <expr><name><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst2</name> <init>= <expr><name><name>samples</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst3</name> <init>= <expr><name><name>samples</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst4</name> <init>= <expr><name><name>samples</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst5</name> <init>= <expr><name><name>samples</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>src0</name> <init>= <expr><name>dst0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>src1</name> <init>= <expr><name>dst1</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v0</name> <operator>=</operator> <operator>*</operator><name>src0</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>v1</name> <operator>=</operator> <operator>*</operator><name>src1</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst0</name><operator>++</operator> <operator>=</operator> <name>v0</name> <operator>*</operator> <name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>v1</name> <operator>*</operator> <name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst1</name><operator>++</operator> <operator>=</operator> <name>v0</name> <operator>*</operator> <name><name>matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>v1</name> <operator>*</operator> <name><name>matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst2</name><operator>++</operator> <operator>=</operator> <name>v0</name> <operator>*</operator> <name><name>matrix</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>v1</name> <operator>*</operator> <name><name>matrix</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst3</name><operator>++</operator> <operator>=</operator> <name>v0</name> <operator>*</operator> <name><name>matrix</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>v1</name> <operator>*</operator> <name><name>matrix</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst4</name><operator>++</operator> <operator>=</operator> <name>v0</name> <operator>*</operator> <name><name>matrix</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>v1</name> <operator>*</operator> <name><name>matrix</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst5</name><operator>++</operator> <operator>=</operator> <name>v0</name> <operator>*</operator> <name><name>matrix</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>v1</name> <operator>*</operator> <name><name>matrix</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>mix_function_init</name><parameter_list>(<parameter><decl><type><name>AudioMix</name> <modifier>*</modifier></type><name>am</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>am</name><operator>-&gt;</operator><name>func_descr</name></name> <operator>=</operator> <name><name>am</name><operator>-&gt;</operator><name>func_descr_generic</name></name> <operator>=</operator> <literal type="string">"n/a"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>am</name><operator>-&gt;</operator><name>mix</name></name> <operator>=</operator> <name><name>am</name><operator>-&gt;</operator><name>mix_generic</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>am</name><operator>-&gt;</operator><name>in_matrix_channels</name></name> <operator>||</operator> <operator>!</operator><name><name>am</name><operator>-&gt;</operator><name>out_matrix_channels</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>ff_audio_mix_set_func</name><argument_list>(<argument><expr><name>am</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_FLTP</name></expr></argument>, <argument><expr><name>AV_MIX_COEFF_TYPE_FLT</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>, <argument><expr><call><name>MIX_FUNC_NAME</name><argument_list>(<argument><expr><name>FLTP</name></expr></argument>, <argument><expr><name>FLT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_audio_mix_set_func</name><argument_list>(<argument><expr><name>am</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S16P</name></expr></argument>, <argument><expr><name>AV_MIX_COEFF_TYPE_FLT</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>, <argument><expr><call><name>MIX_FUNC_NAME</name><argument_list>(<argument><expr><name>S16P</name></expr></argument>, <argument><expr><name>FLT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_audio_mix_set_func</name><argument_list>(<argument><expr><name>am</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S16P</name></expr></argument>, <argument><expr><name>AV_MIX_COEFF_TYPE_Q15</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>, <argument><expr><call><name>MIX_FUNC_NAME</name><argument_list>(<argument><expr><name>S16P</name></expr></argument>, <argument><expr><name>Q15</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_audio_mix_set_func</name><argument_list>(<argument><expr><name>am</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S16P</name></expr></argument>, <argument><expr><name>AV_MIX_COEFF_TYPE_Q8</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>, <argument><expr><call><name>MIX_FUNC_NAME</name><argument_list>(<argument><expr><name>S16P</name></expr></argument>, <argument><expr><name>Q8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>ff_audio_mix_set_func</name><argument_list>(<argument><expr><name>am</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_FLTP</name></expr></argument>, <argument><expr><name>AV_MIX_COEFF_TYPE_FLT</name></expr></argument>,
<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>, <argument><expr><name>mix_2_to_1_fltp_flt_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_audio_mix_set_func</name><argument_list>(<argument><expr><name>am</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S16P</name></expr></argument>, <argument><expr><name>AV_MIX_COEFF_TYPE_FLT</name></expr></argument>,
<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>, <argument><expr><name>mix_2_to_1_s16p_flt_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_audio_mix_set_func</name><argument_list>(<argument><expr><name>am</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S16P</name></expr></argument>, <argument><expr><name>AV_MIX_COEFF_TYPE_Q8</name></expr></argument>,
<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>, <argument><expr><name>mix_2_to_1_s16p_q8_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_audio_mix_set_func</name><argument_list>(<argument><expr><name>am</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_FLTP</name></expr></argument>, <argument><expr><name>AV_MIX_COEFF_TYPE_FLT</name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>, <argument><expr><name>mix_1_to_2_fltp_flt_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_audio_mix_set_func</name><argument_list>(<argument><expr><name>am</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_FLTP</name></expr></argument>, <argument><expr><name>AV_MIX_COEFF_TYPE_FLT</name></expr></argument>,
<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>, <argument><expr><name>mix_6_to_2_fltp_flt_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_audio_mix_set_func</name><argument_list>(<argument><expr><name>am</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_FLTP</name></expr></argument>, <argument><expr><name>AV_MIX_COEFF_TYPE_FLT</name></expr></argument>,
<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>, <argument><expr><name>mix_2_to_6_fltp_flt_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_audio_mix_init_x86</name><argument_list>(<argument><expr><name>am</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>am</name><operator>-&gt;</operator><name>mix</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>am</name><operator>-&gt;</operator><name>avr</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"audio_mix: NO FUNCTION FOUND: [fmt=%s] "</literal>
<literal type="string">"[c=%s] [%d to %d]\n"</literal></expr></argument>, <argument><expr><call><name>av_get_sample_fmt_name</name><argument_list>(<argument><expr><name><name>am</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>coeff_type_names</name><index>[<expr><name><name>am</name><operator>-&gt;</operator><name>coeff_type</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>am</name><operator>-&gt;</operator><name>in_channels</name></name></expr></argument>,
<argument><expr><name><name>am</name><operator>-&gt;</operator><name>out_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>AudioMix</name> <modifier>*</modifier></type><name>ff_audio_mix_alloc</name><parameter_list>(<parameter><decl><type><name>AVAudioResampleContext</name> <modifier>*</modifier></type><name>avr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AudioMix</name> <modifier>*</modifier></type><name>am</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>am</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>am</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>am</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>am</name><operator>-&gt;</operator><name>avr</name></name> <operator>=</operator> <name>avr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>internal_sample_fmt</name></name> <operator>!=</operator> <name>AV_SAMPLE_FMT_S16P</name> <operator>&amp;&amp;</operator>
<name><name>avr</name><operator>-&gt;</operator><name>internal_sample_fmt</name></name> <operator>!=</operator> <name>AV_SAMPLE_FMT_FLTP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported internal format for "</literal>
<literal type="string">"mixing: %s\n"</literal></expr></argument>,
<argument><expr><call><name>av_get_sample_fmt_name</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>internal_sample_fmt</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>am</name><operator>-&gt;</operator><name>fmt</name></name> <operator>=</operator> <name><name>avr</name><operator>-&gt;</operator><name>internal_sample_fmt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>am</name><operator>-&gt;</operator><name>coeff_type</name></name> <operator>=</operator> <name><name>avr</name><operator>-&gt;</operator><name>mix_coeff_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>am</name><operator>-&gt;</operator><name>in_layout</name></name> <operator>=</operator> <name><name>avr</name><operator>-&gt;</operator><name>in_channel_layout</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>am</name><operator>-&gt;</operator><name>out_layout</name></name> <operator>=</operator> <name><name>avr</name><operator>-&gt;</operator><name>out_channel_layout</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>am</name><operator>-&gt;</operator><name>in_channels</name></name> <operator>=</operator> <name><name>avr</name><operator>-&gt;</operator><name>in_channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>am</name><operator>-&gt;</operator><name>out_channels</name></name> <operator>=</operator> <name><name>avr</name><operator>-&gt;</operator><name>out_channels</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>mix_matrix</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_audio_mix_set_matrix</name><argument_list>(<argument><expr><name>am</name></expr></argument>, <argument><expr><name><name>avr</name><operator>-&gt;</operator><name>mix_matrix</name></name></expr></argument>, <argument><expr><name><name>avr</name><operator>-&gt;</operator><name>in_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avr</name><operator>-&gt;</operator><name>mix_matrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>matrix_dbl</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>out_channels</name></name> <operator>*</operator> <name><name>avr</name><operator>-&gt;</operator><name>in_channels</name></name> <operator>*</operator>
<sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>matrix_dbl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>matrix_dbl</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avresample_build_matrix</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>in_channel_layout</name></name></expr></argument>,
<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>out_channel_layout</name></name></expr></argument>,
<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>center_mix_level</name></name></expr></argument>,
<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>surround_mix_level</name></name></expr></argument>,
<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>lfe_mix_level</name></name></expr></argument>,
<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>normalize_mix_level</name></name></expr></argument>,
<argument><expr><name>matrix_dbl</name></expr></argument>,
<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>in_channels</name></name></expr></argument>,
<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>matrix_encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>matrix_dbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_audio_mix_set_matrix</name><argument_list>(<argument><expr><name>am</name></expr></argument>, <argument><expr><name>matrix_dbl</name></expr></argument>, <argument><expr><name><name>avr</name><operator>-&gt;</operator><name>in_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"error setting mix matrix\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>matrix_dbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>matrix_dbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>am</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>am</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_audio_mix_free</name><parameter_list>(<parameter><decl><type><name>AudioMix</name> <modifier>*</modifier><modifier>*</modifier></type><name>am_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AudioMix</name> <modifier>*</modifier></type><name>am</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>am_p</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>am</name> <operator>=</operator> <operator>*</operator><name>am_p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>am</name><operator>-&gt;</operator><name>matrix</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>am</name><operator>-&gt;</operator><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>am</name><operator>-&gt;</operator><name>matrix</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>am</name><operator>-&gt;</operator><name>matrix_q8</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>am</name><operator>-&gt;</operator><name>matrix_q8</name></name></expr></argument> )</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>am</name><operator>-&gt;</operator><name>matrix_q15</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>am</name><operator>-&gt;</operator><name>matrix_q15</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>am</name><operator>-&gt;</operator><name>matrix_flt</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>am</name><operator>-&gt;</operator><name>matrix_flt</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>am_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_audio_mix</name><parameter_list>(<parameter><decl><type><name>AudioMix</name> <modifier>*</modifier></type><name>am</name></decl></parameter>, <parameter><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>use_generic</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name><name>am</name><operator>-&gt;</operator><name>has_optimized_func</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>aligned_len</name> <init>= <expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>am</name><operator>-&gt;</operator><name>samples_align</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>src</name><operator>-&gt;</operator><name>ptr_align</name></name> <operator>%</operator> <name><name>am</name><operator>-&gt;</operator><name>ptr_align</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>src</name><operator>-&gt;</operator><name>samples_align</name></name> <operator>&gt;=</operator> <name>aligned_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>aligned_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>use_generic</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>am</name><operator>-&gt;</operator><name>avr</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"audio_mix: %d samples - %d to %d channels (%s)\n"</literal></expr></argument>,
<argument><expr><name><name>src</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>, <argument><expr><name><name>am</name><operator>-&gt;</operator><name>in_channels</name></name></expr></argument>, <argument><expr><name><name>am</name><operator>-&gt;</operator><name>out_channels</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name>use_generic</name></expr> ?</condition><then> <expr><name><name>am</name><operator>-&gt;</operator><name>func_descr_generic</name></name></expr> </then><else>: <expr><name><name>am</name><operator>-&gt;</operator><name>func_descr</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>am</name><operator>-&gt;</operator><name>in_matrix_channels</name></name> <operator>&amp;&amp;</operator> <name><name>am</name><operator>-&gt;</operator><name>out_matrix_channels</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>data0</name><index>[<expr><name>AVRESAMPLE_MAX_CHANNELS</name></expr>]</index></name> <init>= <expr><block>{ <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>am</name><operator>-&gt;</operator><name>out_matrix_channels</name></name> <operator>&lt;</operator> <name><name>am</name><operator>-&gt;</operator><name>out_channels</name></name> <operator>||</operator>
<name><name>am</name><operator>-&gt;</operator><name>in_matrix_channels</name></name> <operator>&lt;</operator> <name><name>am</name><operator>-&gt;</operator><name>in_channels</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>am</name><operator>-&gt;</operator><name>in_channels</name></name></expr></argument>, <argument><expr><name><name>am</name><operator>-&gt;</operator><name>out_channels</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>am</name><operator>-&gt;</operator><name>input_skip</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <name><name>am</name><operator>-&gt;</operator><name>output_skip</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <name><name>am</name><operator>-&gt;</operator><name>output_zero</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data0</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>data</name> <operator>=</operator> <name>data0</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_generic</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>am</name><operator>-&gt;</operator><name>mix_generic</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>am</name><operator>-&gt;</operator><name>matrix</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>am</name><operator>-&gt;</operator><name>out_matrix_channels</name></name></expr></argument>,
<argument><expr><name><name>am</name><operator>-&gt;</operator><name>in_matrix_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>am</name><operator>-&gt;</operator><name>mix</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>am</name><operator>-&gt;</operator><name>matrix</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>am</name><operator>-&gt;</operator><name>out_matrix_channels</name></name></expr></argument>,
<argument><expr><name><name>am</name><operator>-&gt;</operator><name>in_matrix_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>am</name><operator>-&gt;</operator><name>out_matrix_channels</name></name> <operator>&lt;</operator> <name><name>am</name><operator>-&gt;</operator><name>out_channels</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>am</name><operator>-&gt;</operator><name>out_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>am</name><operator>-&gt;</operator><name>output_zero</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_samples_set_silence</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>am</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_audio_data_set_channels</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>am</name><operator>-&gt;</operator><name>out_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_audio_mix_get_matrix</name><parameter_list>(<parameter><decl><type><name>AudioMix</name> <modifier>*</modifier></type><name>am</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>matrix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>o</name></decl>, <decl><type ref="prev"/><name>i0</name></decl>, <decl><type ref="prev"/><name>o0</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>am</name><operator>-&gt;</operator><name>in_channels</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>am</name><operator>-&gt;</operator><name>in_channels</name></name> <operator>&gt;</operator> <name>AVRESAMPLE_MAX_CHANNELS</name> <operator>||</operator>
<name><name>am</name><operator>-&gt;</operator><name>out_channels</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>am</name><operator>-&gt;</operator><name>out_channels</name></name> <operator>&gt;</operator> <name>AVRESAMPLE_MAX_CHANNELS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>am</name><operator>-&gt;</operator><name>avr</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid channel counts\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_MATRIX_CONVERT</name><parameter_list>(<parameter><type><name>suffix</name></type></parameter>, <parameter><type><name>scale</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (!am-&gt;matrix_ ##suffix[0]) { av_log(am-&gt;avr, AV_LOG_ERROR, "matrix is not set\n"); return AVERROR(EINVAL); } for (o = 0, o0 = 0; o &lt; am-&gt;out_channels; o++) { for (i = 0, i0 = 0; i &lt; am-&gt;in_channels; i++) { if (am-&gt;input_skip[i] || am-&gt;output_zero[o]) matrix[o * stride + i] = 0.0; else matrix[o * stride + i] = am-&gt;matrix_ ##suffix[o0][i0] * (scale); if (!am-&gt;input_skip[i]) i0++; } if (!am-&gt;output_zero[o]) o0++; }</cpp:value></cpp:define>


















<switch>switch <condition>(<expr><name><name>am</name><operator>-&gt;</operator><name>coeff_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_MIX_COEFF_TYPE_Q8</name></expr>:</case>
<expr_stmt><expr><call><name>GET_MATRIX_CONVERT</name><argument_list>(<argument><expr><name>q8</name></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">256.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_MIX_COEFF_TYPE_Q15</name></expr>:</case>
<expr_stmt><expr><call><name>GET_MATRIX_CONVERT</name><argument_list>(<argument><expr><name>q15</name></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">32768.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_MIX_COEFF_TYPE_FLT</name></expr>:</case>
<expr_stmt><expr><call><name>GET_MATRIX_CONVERT</name><argument_list>(<argument><expr><name>flt</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>am</name><operator>-&gt;</operator><name>avr</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid mix coeff type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reduce_matrix</name><parameter_list>(<parameter><decl><type><name>AudioMix</name> <modifier>*</modifier></type><name>am</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>matrix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>o</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>am</name><operator>-&gt;</operator><name>output_zero</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>am</name><operator>-&gt;</operator><name>output_zero</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>am</name><operator>-&gt;</operator><name>input_skip</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>am</name><operator>-&gt;</operator><name>input_skip</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>am</name><operator>-&gt;</operator><name>output_skip</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>am</name><operator>-&gt;</operator><name>output_skip</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>o</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>o</name> <operator>&lt;</operator> <name><name>am</name><operator>-&gt;</operator><name>out_channels</name></name></expr>;</condition> <incr><expr><name>o</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>zero</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>am</name><operator>-&gt;</operator><name>in_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>matrix</name><index>[<expr><name>o</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>zero</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name>o</name> <operator>&lt;</operator> <name><name>am</name><operator>-&gt;</operator><name>in_channels</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>am</name><operator>-&gt;</operator><name>out_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>matrix</name><index>[<expr><name>i</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>o</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>zero</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>zero</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>am</name><operator>-&gt;</operator><name>output_zero</name><index>[<expr><name>o</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>am</name><operator>-&gt;</operator><name>out_matrix_channels</name></name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>o</name> <operator>&lt;</operator> <name><name>am</name><operator>-&gt;</operator><name>in_channels</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>am</name><operator>-&gt;</operator><name>in_matrix_channels</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>am</name><operator>-&gt;</operator><name>out_matrix_channels</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>am</name><operator>-&gt;</operator><name>in_matrix_channels</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>am</name><operator>-&gt;</operator><name>out_matrix_channels</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>am</name><operator>-&gt;</operator><name>in_matrix_channels</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>am</name><operator>-&gt;</operator><name>in_channels</name></name></expr></argument>, <argument><expr><name><name>am</name><operator>-&gt;</operator><name>out_channels</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>skip</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>o</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>o</name> <operator>&lt;</operator> <name><name>am</name><operator>-&gt;</operator><name>out_channels</name></name></expr>;</condition> <incr><expr><name>o</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i0</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>o</name> <operator>!=</operator> <name>i</name> <operator>&amp;&amp;</operator> <name><name>matrix</name><index>[<expr><name>o</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0.0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>o</name> <operator>==</operator> <name>i</name> <operator>&amp;&amp;</operator> <name><name>matrix</name><index>[<expr><name>o</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">1.0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>skip</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <name>i</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i0</name> <operator>&lt;</operator> <name><name>am</name><operator>-&gt;</operator><name>in_channels</name></name></expr>;</condition> <incr><expr><name>i0</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i0</name> <operator>!=</operator> <name>i</name> <operator>&amp;&amp;</operator> <name><name>matrix</name><index>[<expr><name>o</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>i0</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>skip</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>skip</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>am</name><operator>-&gt;</operator><name>input_skip</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>am</name><operator>-&gt;</operator><name>in_matrix_channels</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>am</name><operator>-&gt;</operator><name>in_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>contrib</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>o</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>o</name> <operator>&lt;</operator> <name><name>am</name><operator>-&gt;</operator><name>out_channels</name></name></expr>;</condition> <incr><expr><name>o</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>matrix</name><index>[<expr><name>o</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>contrib</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>contrib</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>am</name><operator>-&gt;</operator><name>input_skip</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>am</name><operator>-&gt;</operator><name>in_matrix_channels</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>am</name><operator>-&gt;</operator><name>in_matrix_channels</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>am</name><operator>-&gt;</operator><name>out_matrix_channels</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>



<for>for <control>(<init><expr><name>o</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>o</name> <operator>&lt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>am</name><operator>-&gt;</operator><name>in_channels</name></name></expr></argument>, <argument><expr><name><name>am</name><operator>-&gt;</operator><name>out_channels</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>o</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>skip</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>o0</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>am</name><operator>-&gt;</operator><name>in_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>o</name> <operator>!=</operator> <name>i</name> <operator>&amp;&amp;</operator> <name><name>matrix</name><index>[<expr><name>o</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0.0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>o</name> <operator>==</operator> <name>i</name> <operator>&amp;&amp;</operator> <name><name>matrix</name><index>[<expr><name>o</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">1.0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>skip</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>i</name> <operator>=</operator> <name>o</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>o0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>o0</name> <operator>&lt;</operator> <name><name>am</name><operator>-&gt;</operator><name>out_channels</name></name></expr>;</condition> <incr><expr><name>o0</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>o0</name> <operator>!=</operator> <name>i</name> <operator>&amp;&amp;</operator> <name><name>matrix</name><index>[<expr><name>o0</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>skip</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>skip</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>am</name><operator>-&gt;</operator><name>output_skip</name><index>[<expr><name>o</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>am</name><operator>-&gt;</operator><name>out_matrix_channels</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>am</name><operator>-&gt;</operator><name>out_matrix_channels</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>am</name><operator>-&gt;</operator><name>in_matrix_channels</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_audio_mix_set_matrix</name><parameter_list>(<parameter><decl><type><name>AudioMix</name> <modifier>*</modifier></type><name>am</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>matrix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>o</name></decl>, <decl><type ref="prev"/><name>i0</name></decl>, <decl><type ref="prev"/><name>o0</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>in_layout_name</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>out_layout_name</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>am</name><operator>-&gt;</operator><name>in_channels</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>am</name><operator>-&gt;</operator><name>in_channels</name></name> <operator>&gt;</operator> <name>AVRESAMPLE_MAX_CHANNELS</name> <operator>||</operator>
<name><name>am</name><operator>-&gt;</operator><name>out_channels</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>am</name><operator>-&gt;</operator><name>out_channels</name></name> <operator>&gt;</operator> <name>AVRESAMPLE_MAX_CHANNELS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>am</name><operator>-&gt;</operator><name>avr</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid channel counts\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>am</name><operator>-&gt;</operator><name>matrix</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>am</name><operator>-&gt;</operator><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>am</name><operator>-&gt;</operator><name>matrix</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>am</name><operator>-&gt;</operator><name>in_matrix_channels</name></name> <operator>=</operator> <name><name>am</name><operator>-&gt;</operator><name>in_channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>am</name><operator>-&gt;</operator><name>out_matrix_channels</name></name> <operator>=</operator> <name><name>am</name><operator>-&gt;</operator><name>out_channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reduce_matrix</name><argument_list>(<argument><expr><name>am</name></expr></argument>, <argument><expr><name>matrix</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONVERT_MATRIX</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>am-&gt;matrix_##type[0] = av_mallocz(am-&gt;out_matrix_channels * am-&gt;in_matrix_channels * sizeof(*am-&gt;matrix_##type[0])); if (!am-&gt;matrix_##type[0]) return AVERROR(ENOMEM); for (o = 0, o0 = 0; o &lt; am-&gt;out_channels; o++) { if (am-&gt;output_zero[o] || am-&gt;output_skip[o]) continue; if (o0 &gt; 0) am-&gt;matrix_##type[o0] = am-&gt;matrix_##type[o0 - 1] + am-&gt;in_matrix_channels; for (i = 0, i0 = 0; i &lt; am-&gt;in_channels; i++) { double v; if (am-&gt;input_skip[i] || am-&gt;output_zero[i]) continue; v = matrix[o * stride + i]; am-&gt;matrix_##type[o0][i0] = expr; i0++; } o0++; } am-&gt;matrix = (void **)am-&gt;matrix_##type;</cpp:value></cpp:define>























<if_stmt><if>if <condition>(<expr><name><name>am</name><operator>-&gt;</operator><name>in_matrix_channels</name></name> <operator>&amp;&amp;</operator> <name><name>am</name><operator>-&gt;</operator><name>out_matrix_channels</name></name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>am</name><operator>-&gt;</operator><name>coeff_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_MIX_COEFF_TYPE_Q8</name></expr>:</case>
<macro><name>CONVERT_MATRIX</name><argument_list>(<argument>q8</argument>, <argument>av_clip_int16(lrint(<literal type="number">256.0</literal> * v))</argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><name>AV_MIX_COEFF_TYPE_Q15</name></expr>:</case>
<macro><name>CONVERT_MATRIX</name><argument_list>(<argument>q15</argument>, <argument>av_clipl_int32(llrint(<literal type="number">32768.0</literal> * v))</argument>)</argument_list></macro>
<break>break;</break>
<case>case <expr><name>AV_MIX_COEFF_TYPE_FLT</name></expr>:</case>
<macro><name>CONVERT_MATRIX</name><argument_list>(<argument>flt</argument>, <argument>v</argument>)</argument_list></macro>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>am</name><operator>-&gt;</operator><name>avr</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid mix coeff type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mix_function_init</name><argument_list>(<argument><expr><name>am</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_get_channel_layout_string</name><argument_list>(<argument><expr><name>in_layout_name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>in_layout_name</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name><name>am</name><operator>-&gt;</operator><name>in_channels</name></name></expr></argument>, <argument><expr><name><name>am</name><operator>-&gt;</operator><name>in_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_get_channel_layout_string</name><argument_list>(<argument><expr><name>out_layout_name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>out_layout_name</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name><name>am</name><operator>-&gt;</operator><name>out_channels</name></name></expr></argument>, <argument><expr><name><name>am</name><operator>-&gt;</operator><name>out_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>am</name><operator>-&gt;</operator><name>avr</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"audio_mix: %s to %s\n"</literal></expr></argument>,
<argument><expr><name>in_layout_name</name></expr></argument>, <argument><expr><name>out_layout_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>am</name><operator>-&gt;</operator><name>avr</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"matrix size: %d x %d\n"</literal></expr></argument>,
<argument><expr><name><name>am</name><operator>-&gt;</operator><name>in_matrix_channels</name></name></expr></argument>, <argument><expr><name><name>am</name><operator>-&gt;</operator><name>out_matrix_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>o</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>o</name> <operator>&lt;</operator> <name><name>am</name><operator>-&gt;</operator><name>out_channels</name></name></expr>;</condition> <incr><expr><name>o</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>am</name><operator>-&gt;</operator><name>in_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>am</name><operator>-&gt;</operator><name>output_zero</name><index>[<expr><name>o</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>am</name><operator>-&gt;</operator><name>avr</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" (ZERO)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>am</name><operator>-&gt;</operator><name>input_skip</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <name><name>am</name><operator>-&gt;</operator><name>output_zero</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <name><name>am</name><operator>-&gt;</operator><name>output_skip</name><index>[<expr><name>o</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>am</name><operator>-&gt;</operator><name>avr</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" (SKIP)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>am</name><operator>-&gt;</operator><name>avr</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" %0.3f "</literal></expr></argument>,
<argument><expr><name><name>matrix</name><index>[<expr><name>o</name> <operator>*</operator> <name><name>am</name><operator>-&gt;</operator><name>in_channels</name></name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>am</name><operator>-&gt;</operator><name>avr</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
