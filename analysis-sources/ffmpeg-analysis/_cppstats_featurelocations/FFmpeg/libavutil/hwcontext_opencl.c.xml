<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\hwcontext_opencl.c">

















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CL_USE_DEPRECATED_OPENCL_1_2_APIS</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwcontext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwcontext_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwcontext_opencl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pixdesc.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_VAAPI_BEIGNET</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;va/va.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;va/va_drmcommon.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CL/cl_intel.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwcontext_vaapi.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_DRM_BEIGNET</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CL/cl_intel.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwcontext_drm.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_VAAPI_INTEL_MEDIA</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBMFX</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mfx/mfxstructures.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;va/va.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CL/cl_va_api_media_sharing_intel.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwcontext_vaapi.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_DXVA2</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COBJMACROS</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CL/cl_dx9_media_sharing.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dxva2api.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwcontext_dxva2.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_D3D11</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CL/cl_d3d11.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwcontext_d3d11va.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_DRM_ARM</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CL/cl_ext.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;drm_fourcc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwcontext_drm.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<typedef>typedef <type><struct>struct <name>OpenCLDeviceContext</name> <block>{



<decl_stmt><decl><type><name>cl_command_queue</name></type> <name>command_queue</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>cl_platform_id</name></type> <name>platform_id</name></decl>;</decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_DRM_BEIGNET</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>beignet_drm_mapping_usable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clCreateImageFromFdINTEL_fn</name></type> <name>clCreateImageFromFdINTEL</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_VAAPI_INTEL_MEDIA</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>qsv_mapping_usable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clCreateFromVA_APIMediaSurfaceINTEL_fn</name></type>
<name>clCreateFromVA_APIMediaSurfaceINTEL</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clEnqueueAcquireVA_APIMediaSurfacesINTEL_fn</name></type>
<name>clEnqueueAcquireVA_APIMediaSurfacesINTEL</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clEnqueueReleaseVA_APIMediaSurfacesINTEL_fn</name></type>
<name>clEnqueueReleaseVA_APIMediaSurfacesINTEL</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_DXVA2</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>dxva2_mapping_usable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_dx9_media_adapter_type_khr</name></type> <name>dx9_media_adapter_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>clCreateFromDX9MediaSurfaceKHR_fn</name></type>
<name>clCreateFromDX9MediaSurfaceKHR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clEnqueueAcquireDX9MediaSurfacesKHR_fn</name></type>
<name>clEnqueueAcquireDX9MediaSurfacesKHR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clEnqueueReleaseDX9MediaSurfacesKHR_fn</name></type>
<name>clEnqueueReleaseDX9MediaSurfacesKHR</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_D3D11</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>d3d11_mapping_usable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clCreateFromD3D11Texture2DKHR_fn</name></type>
<name>clCreateFromD3D11Texture2DKHR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clEnqueueAcquireD3D11ObjectsKHR_fn</name></type>
<name>clEnqueueAcquireD3D11ObjectsKHR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clEnqueueReleaseD3D11ObjectsKHR_fn</name></type>
<name>clEnqueueReleaseD3D11ObjectsKHR</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_DRM_ARM</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>drm_arm_mapping_usable</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>OpenCLDeviceContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>OpenCLFramesContext</name> <block>{




<decl_stmt><decl><type><name>cl_command_queue</name></type> <name>command_queue</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_DXVA2</name> <operator>||</operator> <name>HAVE_OPENCL_D3D11</name></expr></cpp:if>



<decl_stmt><decl><type><name>int</name></type> <name>nb_mapped_frames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVOpenCLFrameDescriptor</name> <modifier>*</modifier></type><name>mapped_frames</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>OpenCLFramesContext</name>;</typedef>


<function><type><specifier>static</specifier> <name>void</name> <name>CL_CALLBACK</name></type> <name>opencl_error_callback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errinfo</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>private_info</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>cb</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"OpenCL error: %s\n"</literal></expr></argument>, <argument><expr><name>errinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>opencl_device_free</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>hwdev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVOpenCLDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>hwdev</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clReleaseContext</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to release OpenCL "</literal>
<literal type="string">"context: %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<struct><specifier>static</specifier> struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_platform_info</name></type> <name>name</name></decl>;</decl_stmt>
}</block> <decl><name><name>opencl_platform_params</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"platform_profile"</literal></expr>, <expr><name>CL_PLATFORM_PROFILE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"platform_version"</literal></expr>, <expr><name>CL_PLATFORM_VERSION</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"platform_name"</literal></expr>, <expr><name>CL_PLATFORM_NAME</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"platform_vendor"</literal></expr>, <expr><name>CL_PLATFORM_VENDOR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"platform_extensions"</literal></expr>, <expr><name>CL_PLATFORM_EXTENSIONS</name></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>

<struct><specifier>static</specifier> struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_device_info</name></type> <name>name</name></decl>;</decl_stmt>
}</block> <decl><name><name>opencl_device_params</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"device_name"</literal></expr>, <expr><name>CL_DEVICE_NAME</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"device_vendor"</literal></expr>, <expr><name>CL_DEVICE_VENDOR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"driver_version"</literal></expr>, <expr><name>CL_DRIVER_VERSION</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"device_version"</literal></expr>, <expr><name>CL_DEVICE_VERSION</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"device_profile"</literal></expr>, <expr><name>CL_DEVICE_PROFILE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"device_extensions"</literal></expr>, <expr><name>CL_DEVICE_EXTENSIONS</name></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>

<struct><specifier>static</specifier> struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_device_type</name></type> <name>type</name></decl>;</decl_stmt>
}</block> <decl><name><name>opencl_device_types</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"cpu"</literal></expr>, <expr><name>CL_DEVICE_TYPE_CPU</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"gpu"</literal></expr>, <expr><name>CL_DEVICE_TYPE_GPU</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"accelerator"</literal></expr>, <expr><name>CL_DEVICE_TYPE_ACCELERATOR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"custom"</literal></expr>, <expr><name>CL_DEVICE_TYPE_CUSTOM</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"default"</literal></expr>, <expr><name>CL_DEVICE_TYPE_DEFAULT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"all"</literal></expr>, <expr><name>CL_DEVICE_TYPE_ALL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>opencl_get_platform_string</name><parameter_list>(<parameter><decl><type><name>cl_platform_id</name></type> <name>platform_id</name></decl></parameter>,
<parameter><decl><type><name>cl_platform_info</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clGetPlatformInfo</name><argument_list>(<argument><expr><name>platform_id</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clGetPlatformInfo</name><argument_list>(<argument><expr><name>platform_id</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>opencl_get_device_string</name><parameter_list>(<parameter><decl><type><name>cl_device_id</name></type> <name>device_id</name></decl></parameter>,
<parameter><decl><type><name>cl_device_info</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clGetDeviceInfo</name><argument_list>(<argument><expr><name>device_id</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clGetDeviceInfo</name><argument_list>(<argument><expr><name>device_id</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>==</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opencl_check_platform_extension</name><parameter_list>(<parameter><decl><type><name>cl_platform_id</name></type> <name>platform_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>opencl_get_platform_string</name><argument_list>(<argument><expr><name>platform_id</name></expr></argument>,
<argument><expr><name>CL_PLATFORM_EXTENSIONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>found</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opencl_check_device_extension</name><parameter_list>(<parameter><decl><type><name>cl_device_id</name></type> <name>device_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>opencl_get_device_string</name><argument_list>(<argument><expr><name>device_id</name></expr></argument>,
<argument><expr><name>CL_DEVICE_EXTENSIONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>found</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_unused</name> <name>int</name></type> <name>opencl_check_extension</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>hwdev</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVOpenCLDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>hwdev</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OpenCLDeviceContext</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>hwdev</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>opencl_check_platform_extension</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>platform_id</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"%s found as platform extension.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>opencl_check_device_extension</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>device_id</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"%s found as device extension.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opencl_enumerate_platforms</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>hwdev</name></decl></parameter>,
<parameter><decl><type><name>cl_uint</name> <modifier>*</modifier></type><name>nb_platforms</name></decl></parameter>,
<parameter><decl><type><name>cl_platform_id</name> <modifier>*</modifier><modifier>*</modifier></type><name>platforms</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clGetPlatformIDs</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>nb_platforms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to get number of "</literal>
<literal type="string">"OpenCL platforms: %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENODEV</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%u OpenCL platforms found.\n"</literal></expr></argument>,
<argument><expr><operator>*</operator><name>nb_platforms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>platforms</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><operator>*</operator><name>nb_platforms</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>platforms</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>platforms</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clGetPlatformIDs</name><argument_list>(<argument><expr><operator>*</operator><name>nb_platforms</name></expr></argument>, <argument><expr><operator>*</operator><name>platforms</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to get list of OpenCL "</literal>
<literal type="string">"platforms: %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>platforms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENODEV</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opencl_filter_platform</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>hwdev</name></decl></parameter>,
<parameter><decl><type><name>cl_platform_id</name></type> <name>platform_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>platform_name</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>opts</name> <init>= <expr><name>context</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>opencl_platform_params</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>param</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name><name>opencl_platform_params</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>param</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>opencl_get_platform_string</name><argument_list>(<argument><expr><name>platform_id</name></expr></argument>,
<argument><expr><name><name>opencl_platform_params</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to query %s "</literal>
<literal type="string">"of platform \"%s\".\n"</literal></expr></argument>,
<argument><expr><name><name>opencl_platform_params</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>, <argument><expr><name>platform_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_stristr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s does not match (\"%s\").\n"</literal></expr></argument>,
<argument><expr><name><name>param</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opencl_enumerate_devices</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>hwdev</name></decl></parameter>,
<parameter><decl><type><name>cl_platform_id</name></type> <name>platform_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>platform_name</name></decl></parameter>,
<parameter><decl><type><name>cl_uint</name> <modifier>*</modifier></type><name>nb_devices</name></decl></parameter>,
<parameter><decl><type><name>cl_device_id</name> <modifier>*</modifier><modifier>*</modifier></type><name>devices</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clGetDeviceIDs</name><argument_list>(<argument><expr><name>platform_id</name></expr></argument>, <argument><expr><name>CL_DEVICE_TYPE_ALL</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>nb_devices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>==</operator> <name>CL_DEVICE_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"No devices found "</literal>
<literal type="string">"on platform \"%s\".\n"</literal></expr></argument>, <argument><expr><name>platform_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>nb_devices</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to get number of devices "</literal>
<literal type="string">"on platform \"%s\": %d.\n"</literal></expr></argument>, <argument><expr><name>platform_name</name></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENODEV</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%u OpenCL devices found on "</literal>
<literal type="string">"platform \"%s\".\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>nb_devices</name></expr></argument>, <argument><expr><name>platform_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>devices</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><operator>*</operator><name>nb_devices</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>devices</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>devices</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clGetDeviceIDs</name><argument_list>(<argument><expr><name>platform_id</name></expr></argument>, <argument><expr><name>CL_DEVICE_TYPE_ALL</name></expr></argument>,
<argument><expr><operator>*</operator><name>nb_devices</name></expr></argument>, <argument><expr><operator>*</operator><name>devices</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to get list of devices "</literal>
<literal type="string">"on platform \"%s\": %d.\n"</literal></expr></argument>, <argument><expr><name>platform_name</name></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>devices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENODEV</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opencl_filter_device</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>hwdev</name></decl></parameter>,
<parameter><decl><type><name>cl_device_id</name></type> <name>device_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device_name</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>opts</name> <init>= <expr><name>context</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>param</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><literal type="string">"device_type"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>param</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>cl_device_type</name></type> <name>match_type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>device_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>opencl_device_types</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>opencl_device_types</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>match_type</name> <operator>=</operator> <name><name>opencl_device_types</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>match_type</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown device type %s.\n"</literal></expr></argument>,
<argument><expr><name><name>param</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clGetDeviceInfo</name><argument_list>(<argument><expr><name>device_id</name></expr></argument>, <argument><expr><name>CL_DEVICE_TYPE</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>device_type</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>device_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to query device type "</literal>
<literal type="string">"of device \"%s\".\n"</literal></expr></argument>, <argument><expr><name>device_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>device_type</name> <operator>&amp;</operator> <name>match_type</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"device_type does not match.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>opencl_device_params</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>param</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name><name>opencl_device_params</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>param</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>opencl_get_device_string</name><argument_list>(<argument><expr><name>device_id</name></expr></argument>,
<argument><expr><name><name>opencl_device_params</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to query %s "</literal>
<literal type="string">"of device \"%s\".\n"</literal></expr></argument>,
<argument><expr><name><name>opencl_device_params</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>, <argument><expr><name>device_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_stristr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s does not match (\"%s\").\n"</literal></expr></argument>,
<argument><expr><name><name>param</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>OpenCLDeviceSelector</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>platform_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>device_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>enumerate_platforms</name>)<parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>hwdev</name></decl></parameter>,
<parameter><decl><type><name>cl_uint</name> <modifier>*</modifier></type><name>nb_platforms</name></decl></parameter>,
<parameter><decl><type><name>cl_platform_id</name> <modifier>*</modifier><modifier>*</modifier></type><name>platforms</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>filter_platform</name>) <parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>hwdev</name></decl></parameter>,
<parameter><decl><type><name>cl_platform_id</name></type> <name>platform_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>platform_name</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>enumerate_devices</name>) <parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>hwdev</name></decl></parameter>,
<parameter><decl><type><name>cl_platform_id</name></type> <name>platform_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>platform_name</name></decl></parameter>,
<parameter><decl><type><name>cl_uint</name> <modifier>*</modifier></type><name>nb_devices</name></decl></parameter>,
<parameter><decl><type><name>cl_device_id</name> <modifier>*</modifier><modifier>*</modifier></type><name>devices</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>filter_device</name>) <parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>hwdev</name></decl></parameter>,
<parameter><decl><type><name>cl_device_id</name></type> <name>device_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device_name</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>OpenCLDeviceSelector</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opencl_device_create_internal</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>hwdev</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>OpenCLDeviceSelector</name> <modifier>*</modifier></type><name>selector</name></decl></parameter>,
<parameter><decl><type><name>cl_context_properties</name> <modifier>*</modifier></type><name>props</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>cl_uint</name></type> <name>nb_platforms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_platform_id</name> <modifier>*</modifier></type><name>platforms</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_platform_id</name></type> <name>platform_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_uint</name></type> <name>nb_devices</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_device_id</name> <modifier>*</modifier></type><name>devices</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVOpenCLDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>hwdev</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_context_properties</name></type> <name><name>default_props</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>platform_name_src</name> <init>= <expr><name>NULL</name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>device_name_src</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>found</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>selector</name><operator>-&gt;</operator><name>enumerate_platforms</name></name> <operator>&amp;&amp;</operator>
<name><name>selector</name><operator>-&gt;</operator><name>enumerate_devices</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>selector</name><operator>-&gt;</operator><name>enumerate_platforms</name></name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nb_platforms</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>platforms</name></expr></argument>,
<argument><expr><name><name>selector</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>nb_platforms</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>platform_name</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>selector</name><operator>-&gt;</operator><name>platform_index</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>selector</name><operator>-&gt;</operator><name>platform_index</name></name> <operator>!=</operator> <name>p</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>platform_name_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>platform_name_src</name> <operator>=</operator> <call><name>opencl_get_platform_string</name><argument_list>(<argument><expr><name><name>platforms</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>,
<argument><expr><name>CL_PLATFORM_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>platform_name_src</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>platform_name</name> <operator>=</operator> <name>platform_name_src</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>platform_name</name> <operator>=</operator> <literal type="string">"Unknown Platform"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>selector</name><operator>-&gt;</operator><name>filter_platform</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>selector</name><operator>-&gt;</operator><name>filter_platform</name></name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name><name>platforms</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>,
<argument><expr><name>platform_name</name></expr></argument>,
<argument><expr><name><name>selector</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>selector</name><operator>-&gt;</operator><name>enumerate_devices</name></name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name><name>platforms</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><name>platform_name</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>nb_devices</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>devices</name></expr></argument>,
<argument><expr><name><name>selector</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>d</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>d</name> <operator>&lt;</operator> <name>nb_devices</name></expr>;</condition> <incr><expr><name>d</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device_name</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>selector</name><operator>-&gt;</operator><name>device_index</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>selector</name><operator>-&gt;</operator><name>device_index</name></name> <operator>!=</operator> <name>d</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>device_name_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>device_name_src</name> <operator>=</operator> <call><name>opencl_get_device_string</name><argument_list>(<argument><expr><name><name>devices</name><index>[<expr><name>d</name></expr>]</index></name></expr></argument>,
<argument><expr><name>CL_DEVICE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>device_name_src</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>device_name</name> <operator>=</operator> <name>device_name_src</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>device_name</name> <operator>=</operator> <literal type="string">"Unknown Device"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>selector</name><operator>-&gt;</operator><name>filter_device</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>selector</name><operator>-&gt;</operator><name>filter_device</name></name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name><name>devices</name><index>[<expr><name>d</name></expr>]</index></name></expr></argument>,
<argument><expr><name>device_name</name></expr></argument>,
<argument><expr><name><name>selector</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"%d.%d: %s / %s\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>d</name></expr></argument>,
<argument><expr><name>platform_name</name></expr></argument>, <argument><expr><name>device_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>found</name></expr>;</expr_stmt>
<expr_stmt><expr><name>platform_id</name> <operator>=</operator> <name><name>platforms</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hwctx</name><operator>-&gt;</operator><name>device_id</name></name> <operator>=</operator> <name><name>devices</name><index>[<expr><name>d</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>devices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>found</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No matching devices found.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENODEV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>found</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"More than one matching device found.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENODEV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>props</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>props</name> <operator>=</operator> <name>default_props</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>default_props</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CL_CONTEXT_PLATFORM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>default_props</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator><name>platform_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>default_props</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>props</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>CL_CONTEXT_PLATFORM</name> <operator>&amp;&amp;</operator> <name><name>props</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>props</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator><name>platform_id</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>hwctx</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <call><name>clCreateContext</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hwctx</name><operator>-&gt;</operator><name>device_id</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>opencl_error_callback</name></expr></argument>, <argument><expr><name>hwdev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hwctx</name><operator>-&gt;</operator><name>context</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create OpenCL context: "</literal>
<literal type="string">"%d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENODEV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>hwdev</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <operator>&amp;</operator><name>opencl_device_free</name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>platform_name_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>device_name_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>platforms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>devices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opencl_device_create</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>hwdev</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>,
<parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OpenCLDeviceSelector</name></type> <name>selector</name> <init>= <expr><block>{
<expr><operator>.</operator><name>context</name> <operator>=</operator> <name>opts</name></expr>,
<expr><operator>.</operator><name>enumerate_platforms</name> <operator>=</operator> <operator>&amp;</operator><name>opencl_enumerate_platforms</name></expr>,
<expr><operator>.</operator><name>filter_platform</name> <operator>=</operator> <operator>&amp;</operator><name>opencl_filter_platform</name></expr>,
<expr><operator>.</operator><name>enumerate_devices</name> <operator>=</operator> <operator>&amp;</operator><name>opencl_enumerate_devices</name></expr>,
<expr><operator>.</operator><name>filter_device</name> <operator>=</operator> <operator>&amp;</operator><name>opencl_filter_device</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>device</name> <operator>&amp;&amp;</operator> <name><name>device</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>p</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>device</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><literal type="string">".%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><literal type="string">"%d.%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid OpenCL platform/device "</literal>
<literal type="string">"index specification \"%s\".\n"</literal></expr></argument>, <argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>selector</name><operator>.</operator><name>platform_index</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>selector</name><operator>.</operator><name>device_index</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>selector</name><operator>.</operator><name>platform_index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>selector</name><operator>.</operator><name>device_index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>opencl_device_create_internal</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>selector</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opencl_device_init</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>hwdev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVOpenCLDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>hwdev</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OpenCLDeviceContext</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>hwdev</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hwctx</name><operator>-&gt;</operator><name>command_queue</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clRetainCommandQueue</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to retain external "</literal>
<literal type="string">"command queue: %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>command_queue</name></name> <operator>=</operator> <name><name>hwctx</name><operator>-&gt;</operator><name>command_queue</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>command_queue</name></name> <operator>=</operator> <call><name>clCreateCommandQueue</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>context</name></name></expr></argument>,
<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>device_id</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>command_queue</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create internal "</literal>
<literal type="string">"command queue: %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clGetDeviceInfo</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>device_id</name></name></expr></argument>, <argument><expr><name>CL_DEVICE_PLATFORM</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>platform_id</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>platform_id</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to determine the OpenCL "</literal>
<literal type="string">"platform containing the device.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CL_FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>desc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (fail) break; priv-&gt;name = clGetExtensionFunctionAddressForPlatform( priv-&gt;platform_id, #name); if (!priv-&gt;name) { av_log(hwdev, AV_LOG_VERBOSE, desc " function not found (%s).\n", #name); fail = 1; } else { av_log(hwdev, AV_LOG_VERBOSE, desc " function found (%s).\n", #name); } } while (0)</cpp:value></cpp:define>














<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_DRM_BEIGNET</name></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fail</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CL_FUNC</name><argument_list>(<argument><expr><name>clCreateImageFromFdINTEL</name></expr></argument>,
<argument><expr><literal type="string">"Beignet DRM to OpenCL image mapping"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fail</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Beignet DRM to OpenCL "</literal>
<literal type="string">"mapping not usable.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>beignet_drm_mapping_usable</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>beignet_drm_mapping_usable</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_VAAPI_INTEL_MEDIA</name></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>props_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_context_properties</name> <modifier>*</modifier></type><name>props</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VADisplay</name></type> <name>va_display</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>va_ext</name> <init>= <expr><literal type="string">"cl_intel_va_api_media_sharing"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>fail</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>opencl_check_extension</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>va_ext</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"The %s extension is "</literal>
<literal type="string">"required for QSV to OpenCL mapping.\n"</literal></expr></argument>, <argument><expr><name>va_ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>no_qsv</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clGetContextInfo</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>CL_CONTEXT_PROPERTIES</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>props_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Failed to get context "</literal>
<literal type="string">"properties: %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>no_qsv</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>props_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Media sharing must be "</literal>
<literal type="string">"enabled on context creation to use QSV to "</literal>
<literal type="string">"OpenCL mapping.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>no_qsv</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>props</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>props_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>props</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clGetContextInfo</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>CL_CONTEXT_PROPERTIES</name></expr></argument>,
<argument><expr><name>props_size</name></expr></argument>, <argument><expr><name>props</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Failed to get context "</literal>
<literal type="string">"properties: %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>no_qsv</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>va_display</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>props_size</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>props</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>props</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>CL_CONTEXT_VA_API_DISPLAY_INTEL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>va_display</name> <operator>=</operator> <operator>(</operator><name>VADisplay</name><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name><name>props</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>va_display</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Media sharing must be "</literal>
<literal type="string">"enabled on context creation to use QSV to "</literal>
<literal type="string">"OpenCL mapping.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>no_qsv</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vaDisplayIsValid</name><argument_list>(<argument><expr><name>va_display</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"A valid VADisplay is "</literal>
<literal type="string">"required on context creation to use QSV to "</literal>
<literal type="string">"OpenCL mapping.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>no_qsv</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CL_FUNC</name><argument_list>(<argument><expr><name>clCreateFromVA_APIMediaSurfaceINTEL</name></expr></argument>,
<argument><expr><literal type="string">"Intel QSV to OpenCL mapping"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_FUNC</name><argument_list>(<argument><expr><name>clEnqueueAcquireVA_APIMediaSurfacesINTEL</name></expr></argument>,
<argument><expr><literal type="string">"Intel QSV in OpenCL acquire"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_FUNC</name><argument_list>(<argument><expr><name>clEnqueueReleaseVA_APIMediaSurfacesINTEL</name></expr></argument>,
<argument><expr><literal type="string">"Intel QSV in OpenCL release"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fail</name></expr>)</condition> <block>{<block_content>
<label><name>no_qsv</name>:</label>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"QSV to OpenCL mapping "</literal>
<literal type="string">"not usable.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>qsv_mapping_usable</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>qsv_mapping_usable</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_DXVA2</name></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fail</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CL_FUNC</name><argument_list>(<argument><expr><name>clCreateFromDX9MediaSurfaceKHR</name></expr></argument>,
<argument><expr><literal type="string">"DXVA2 to OpenCL mapping"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_FUNC</name><argument_list>(<argument><expr><name>clEnqueueAcquireDX9MediaSurfacesKHR</name></expr></argument>,
<argument><expr><literal type="string">"DXVA2 in OpenCL acquire"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_FUNC</name><argument_list>(<argument><expr><name>clEnqueueReleaseDX9MediaSurfacesKHR</name></expr></argument>,
<argument><expr><literal type="string">"DXVA2 in OpenCL release"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fail</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"DXVA2 to OpenCL mapping "</literal>
<literal type="string">"not usable.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>dxva2_mapping_usable</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>dx9_media_adapter_type</name></name> <operator>=</operator> <name>CL_ADAPTER_D3D9EX_KHR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>dxva2_mapping_usable</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_D3D11</name></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>d3d11_ext</name> <init>= <expr><literal type="string">"cl_khr_d3d11_sharing"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nv12_ext</name> <init>= <expr><literal type="string">"cl_intel_d3d11_nv12_media_sharing"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fail</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>opencl_check_extension</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>d3d11_ext</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"The %s extension is "</literal>
<literal type="string">"required for D3D11 to OpenCL mapping.\n"</literal></expr></argument>, <argument><expr><name>d3d11_ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fail</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>opencl_check_extension</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>nv12_ext</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"The %s extension may be "</literal>
<literal type="string">"required for D3D11 to OpenCL mapping.\n"</literal></expr></argument>, <argument><expr><name>nv12_ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CL_FUNC</name><argument_list>(<argument><expr><name>clCreateFromD3D11Texture2DKHR</name></expr></argument>,
<argument><expr><literal type="string">"D3D11 to OpenCL mapping"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_FUNC</name><argument_list>(<argument><expr><name>clEnqueueAcquireD3D11ObjectsKHR</name></expr></argument>,
<argument><expr><literal type="string">"D3D11 in OpenCL acquire"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_FUNC</name><argument_list>(<argument><expr><name>clEnqueueReleaseD3D11ObjectsKHR</name></expr></argument>,
<argument><expr><literal type="string">"D3D11 in OpenCL release"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fail</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"D3D11 to OpenCL mapping "</literal>
<literal type="string">"not usable.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>d3d11_mapping_usable</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>d3d11_mapping_usable</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_DRM_ARM</name></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>drm_arm_ext</name> <init>= <expr><literal type="string">"cl_arm_import_memory"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>image_ext</name> <init>= <expr><literal type="string">"cl_khr_image2d_from_buffer"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fail</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>opencl_check_extension</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>drm_arm_ext</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"The %s extension is "</literal>
<literal type="string">"required for DRM to OpenCL mapping on ARM.\n"</literal></expr></argument>,
<argument><expr><name>drm_arm_ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fail</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>opencl_check_extension</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>image_ext</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"The %s extension is "</literal>
<literal type="string">"required for DRM to OpenCL mapping on ARM.\n"</literal></expr></argument>,
<argument><expr><name>image_ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fail</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>fail</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"DRM to OpenCL mapping on ARM "</literal>
<literal type="string">"not usable.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>drm_arm_mapping_usable</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>drm_arm_mapping_usable</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CL_FUNC</name></cpp:undef>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>opencl_device_uninit</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>hwdev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OpenCLDeviceContext</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>hwdev</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>command_queue</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clReleaseCommandQueue</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to release internal "</literal>
<literal type="string">"command queue reference: %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>command_queue</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_VAAPI_INTEL_MEDIA</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>opencl_filter_intel_media_vaapi_platform</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>hwdev</name></decl></parameter>,
<parameter><decl><type><name>cl_platform_id</name></type> <name>platform_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>platform_name</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>clGetExtensionFunctionAddressForPlatform</name><argument_list>(<argument><expr><name>platform_id</name></expr></argument>,
<argument><expr><literal type="string">"clGetDeviceIDsFromVA_APIMediaAdapterINTEL"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Platform %s does not export the "</literal>
<literal type="string">"VAAPI device enumeration function.\n"</literal></expr></argument>, <argument><expr><name>platform_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opencl_enumerate_intel_media_vaapi_devices</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>hwdev</name></decl></parameter>,
<parameter><decl><type><name>cl_platform_id</name></type> <name>platform_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>platform_name</name></decl></parameter>,
<parameter><decl><type><name>cl_uint</name> <modifier>*</modifier></type><name>nb_devices</name></decl></parameter>,
<parameter><decl><type><name>cl_device_id</name> <modifier>*</modifier><modifier>*</modifier></type><name>devices</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VADisplay</name></type> <name>va_display</name> <init>= <expr><name>context</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clGetDeviceIDsFromVA_APIMediaAdapterINTEL_fn</name></type>
<name>clGetDeviceIDsFromVA_APIMediaAdapterINTEL</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>

<expr_stmt><expr><name>clGetDeviceIDsFromVA_APIMediaAdapterINTEL</name> <operator>=</operator>
<call><name>clGetExtensionFunctionAddressForPlatform</name><argument_list>(<argument><expr><name>platform_id</name></expr></argument>,
<argument><expr><literal type="string">"clGetDeviceIDsFromVA_APIMediaAdapterINTEL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>clGetDeviceIDsFromVA_APIMediaAdapterINTEL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to get address of "</literal>
<literal type="string">"clGetDeviceIDsFromVA_APIMediaAdapterINTEL().\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clGetDeviceIDsFromVA_APIMediaAdapterINTEL</name><argument_list>(
<argument><expr><name>platform_id</name></expr></argument>, <argument><expr><name>CL_VA_API_DISPLAY_INTEL</name></expr></argument>, <argument><expr><name>va_display</name></expr></argument>,
<argument><expr><name>CL_PREFERRED_DEVICES_FOR_VA_API_INTEL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>nb_devices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>==</operator> <name>CL_DEVICE_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"No VAAPI-supporting devices found "</literal>
<literal type="string">"on platform \"%s\".\n"</literal></expr></argument>, <argument><expr><name>platform_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>nb_devices</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to get number of devices "</literal>
<literal type="string">"on platform \"%s\": %d.\n"</literal></expr></argument>, <argument><expr><name>platform_name</name></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>devices</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><operator>*</operator><name>nb_devices</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>devices</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>devices</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clGetDeviceIDsFromVA_APIMediaAdapterINTEL</name><argument_list>(
<argument><expr><name>platform_id</name></expr></argument>, <argument><expr><name>CL_VA_API_DISPLAY_INTEL</name></expr></argument>, <argument><expr><name>va_display</name></expr></argument>,
<argument><expr><name>CL_PREFERRED_DEVICES_FOR_VA_API_INTEL</name></expr></argument>, <argument><expr><operator>*</operator><name>nb_devices</name></expr></argument>, <argument><expr><operator>*</operator><name>devices</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to get list of VAAPI-supporting "</literal>
<literal type="string">"devices on platform \"%s\": %d.\n"</literal></expr></argument>, <argument><expr><name>platform_name</name></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>devices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opencl_filter_intel_media_vaapi_device</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>hwdev</name></decl></parameter>,
<parameter><decl><type><name>cl_device_id</name></type> <name>device_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device_name</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>va_ext</name> <init>= <expr><literal type="string">"cl_intel_va_api_media_sharing"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>opencl_check_device_extension</name><argument_list>(<argument><expr><name>device_id</name></expr></argument>, <argument><expr><name>va_ext</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Device %s does not support the "</literal>
<literal type="string">"%s extension.\n"</literal></expr></argument>, <argument><expr><name>device_name</name></expr></argument>, <argument><expr><name>va_ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_DXVA2</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>opencl_filter_dxva2_platform</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>hwdev</name></decl></parameter>,
<parameter><decl><type><name>cl_platform_id</name></type> <name>platform_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>platform_name</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dx9_ext</name> <init>= <expr><literal type="string">"cl_khr_dx9_media_sharing"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>opencl_check_platform_extension</name><argument_list>(<argument><expr><name>platform_id</name></expr></argument>, <argument><expr><name>dx9_ext</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Platform %s does not support the "</literal>
<literal type="string">"%s extension.\n"</literal></expr></argument>, <argument><expr><name>platform_name</name></expr></argument>, <argument><expr><name>dx9_ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opencl_enumerate_dxva2_devices</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>hwdev</name></decl></parameter>,
<parameter><decl><type><name>cl_platform_id</name></type> <name>platform_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>platform_name</name></decl></parameter>,
<parameter><decl><type><name>cl_uint</name> <modifier>*</modifier></type><name>nb_devices</name></decl></parameter>,
<parameter><decl><type><name>cl_device_id</name> <modifier>*</modifier><modifier>*</modifier></type><name>devices</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>IDirect3DDevice9</name> <modifier>*</modifier></type><name>device</name> <init>= <expr><name>context</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clGetDeviceIDsFromDX9MediaAdapterKHR_fn</name></type>
<name>clGetDeviceIDsFromDX9MediaAdapterKHR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_dx9_media_adapter_type_khr</name></type> <name>media_adapter_type</name> <init>= <expr><name>CL_ADAPTER_D3D9EX_KHR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>

<expr_stmt><expr><name>clGetDeviceIDsFromDX9MediaAdapterKHR</name> <operator>=</operator>
<call><name>clGetExtensionFunctionAddressForPlatform</name><argument_list>(<argument><expr><name>platform_id</name></expr></argument>,
<argument><expr><literal type="string">"clGetDeviceIDsFromDX9MediaAdapterKHR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>clGetDeviceIDsFromDX9MediaAdapterKHR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to get address of "</literal>
<literal type="string">"clGetDeviceIDsFromDX9MediaAdapterKHR().\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clGetDeviceIDsFromDX9MediaAdapterKHR</name><argument_list>(
<argument><expr><name>platform_id</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>media_adapter_type</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>device</name></expr></argument>,
<argument><expr><name>CL_PREFERRED_DEVICES_FOR_DX9_MEDIA_ADAPTER_KHR</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>nb_devices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>==</operator> <name>CL_DEVICE_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"No DXVA2-supporting devices found "</literal>
<literal type="string">"on platform \"%s\".\n"</literal></expr></argument>, <argument><expr><name>platform_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>nb_devices</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to get number of devices "</literal>
<literal type="string">"on platform \"%s\": %d.\n"</literal></expr></argument>, <argument><expr><name>platform_name</name></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>devices</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><operator>*</operator><name>nb_devices</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>devices</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>devices</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clGetDeviceIDsFromDX9MediaAdapterKHR</name><argument_list>(
<argument><expr><name>platform_id</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>media_adapter_type</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>device</name></expr></argument>,
<argument><expr><name>CL_PREFERRED_DEVICES_FOR_DX9_MEDIA_ADAPTER_KHR</name></expr></argument>,
<argument><expr><operator>*</operator><name>nb_devices</name></expr></argument>, <argument><expr><operator>*</operator><name>devices</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to get list of DXVA2-supporting "</literal>
<literal type="string">"devices on platform \"%s\": %d.\n"</literal></expr></argument>, <argument><expr><name>platform_name</name></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>devices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_D3D11</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>opencl_filter_d3d11_platform</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>hwdev</name></decl></parameter>,
<parameter><decl><type><name>cl_platform_id</name></type> <name>platform_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>platform_name</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>d3d11_ext</name> <init>= <expr><literal type="string">"cl_khr_d3d11_sharing"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>opencl_check_platform_extension</name><argument_list>(<argument><expr><name>platform_id</name></expr></argument>, <argument><expr><name>d3d11_ext</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Platform %s does not support the "</literal>
<literal type="string">"%s extension.\n"</literal></expr></argument>, <argument><expr><name>platform_name</name></expr></argument>, <argument><expr><name>d3d11_ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opencl_enumerate_d3d11_devices</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>hwdev</name></decl></parameter>,
<parameter><decl><type><name>cl_platform_id</name></type> <name>platform_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>platform_name</name></decl></parameter>,
<parameter><decl><type><name>cl_uint</name> <modifier>*</modifier></type><name>nb_devices</name></decl></parameter>,
<parameter><decl><type><name>cl_device_id</name> <modifier>*</modifier><modifier>*</modifier></type><name>devices</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ID3D11Device</name> <modifier>*</modifier></type><name>device</name> <init>= <expr><name>context</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>clGetDeviceIDsFromD3D11KHR_fn</name></type> <name>clGetDeviceIDsFromD3D11KHR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>

<expr_stmt><expr><name>clGetDeviceIDsFromD3D11KHR</name> <operator>=</operator>
<call><name>clGetExtensionFunctionAddressForPlatform</name><argument_list>(<argument><expr><name>platform_id</name></expr></argument>,
<argument><expr><literal type="string">"clGetDeviceIDsFromD3D11KHR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>clGetDeviceIDsFromD3D11KHR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to get address of "</literal>
<literal type="string">"clGetDeviceIDsFromD3D11KHR().\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clGetDeviceIDsFromD3D11KHR</name><argument_list>(<argument><expr><name>platform_id</name></expr></argument>,
<argument><expr><name>CL_D3D11_DEVICE_KHR</name></expr></argument>, <argument><expr><name>device</name></expr></argument>,
<argument><expr><name>CL_PREFERRED_DEVICES_FOR_D3D11_KHR</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>nb_devices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>==</operator> <name>CL_DEVICE_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"No D3D11-supporting devices found "</literal>
<literal type="string">"on platform \"%s\".\n"</literal></expr></argument>, <argument><expr><name>platform_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>nb_devices</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to get number of devices "</literal>
<literal type="string">"on platform \"%s\": %d.\n"</literal></expr></argument>, <argument><expr><name>platform_name</name></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>devices</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><operator>*</operator><name>nb_devices</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>devices</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>devices</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clGetDeviceIDsFromD3D11KHR</name><argument_list>(<argument><expr><name>platform_id</name></expr></argument>,
<argument><expr><name>CL_D3D11_DEVICE_KHR</name></expr></argument>, <argument><expr><name>device</name></expr></argument>,
<argument><expr><name>CL_PREFERRED_DEVICES_FOR_D3D11_KHR</name></expr></argument>,
<argument><expr><operator>*</operator><name>nb_devices</name></expr></argument>, <argument><expr><operator>*</operator><name>devices</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to get list of D3D11-supporting "</literal>
<literal type="string">"devices on platform \"%s\": %d.\n"</literal></expr></argument>, <argument><expr><name>platform_name</name></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>devices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_DXVA2</name> <operator>||</operator> <name>HAVE_OPENCL_D3D11</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>opencl_filter_gpu_device</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>hwdev</name></decl></parameter>,
<parameter><decl><type><name>cl_device_id</name></type> <name>device_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device_name</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>cl_device_type</name></type> <name>device_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clGetDeviceInfo</name><argument_list>(<argument><expr><name>device_id</name></expr></argument>, <argument><expr><name>CL_DEVICE_TYPE</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>device_type</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>device_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to query device type "</literal>
<literal type="string">"of device \"%s\".\n"</literal></expr></argument>, <argument><expr><name>device_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>device_type</name> <operator>&amp;</operator> <name>CL_DEVICE_TYPE_GPU</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Device %s skipped (not GPU).\n"</literal></expr></argument>,
<argument><expr><name>device_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_DRM_ARM</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>opencl_filter_drm_arm_platform</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>hwdev</name></decl></parameter>,
<parameter><decl><type><name>cl_platform_id</name></type> <name>platform_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>platform_name</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>drm_arm_ext</name> <init>= <expr><literal type="string">"cl_arm_import_memory"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>opencl_check_platform_extension</name><argument_list>(<argument><expr><name>platform_id</name></expr></argument>, <argument><expr><name>drm_arm_ext</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Platform %s does not support the "</literal>
<literal type="string">"%s extension.\n"</literal></expr></argument>, <argument><expr><name>platform_name</name></expr></argument>, <argument><expr><name>drm_arm_ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opencl_filter_drm_arm_device</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>hwdev</name></decl></parameter>,
<parameter><decl><type><name>cl_device_id</name></type> <name>device_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device_name</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>drm_arm_ext</name> <init>= <expr><literal type="string">"cl_arm_import_memory"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>opencl_check_device_extension</name><argument_list>(<argument><expr><name>device_id</name></expr></argument>, <argument><expr><name>drm_arm_ext</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Device %s does not support the "</literal>
<literal type="string">"%s extension.\n"</literal></expr></argument>, <argument><expr><name>device_name</name></expr></argument>, <argument><expr><name>drm_arm_ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opencl_device_derive</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>hwdev</name></decl></parameter>,
<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>src_ctx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>src_ctx</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_DRM_BEIGNET</name></expr></cpp:if>
<case>case <expr><name>AV_HWDEVICE_TYPE_DRM</name></expr>:</case>
<case>case <expr><name>AV_HWDEVICE_TYPE_VAAPI</name></expr>:</case>
<block>{<block_content>



<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>opts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"platform_vendor"</literal></expr></argument>, <argument><expr><literal type="string">"Intel"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"platform_version"</literal></expr></argument>, <argument><expr><literal type="string">"beignet"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>OpenCLDeviceSelector</name></type> <name>selector</name> <init>= <expr><block>{
<expr><operator>.</operator><name>platform_index</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>device_index</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>context</name> <operator>=</operator> <name>opts</name></expr>,
<expr><operator>.</operator><name>enumerate_platforms</name> <operator>=</operator> <operator>&amp;</operator><name>opencl_enumerate_platforms</name></expr>,
<expr><operator>.</operator><name>filter_platform</name> <operator>=</operator> <operator>&amp;</operator><name>opencl_filter_platform</name></expr>,
<expr><operator>.</operator><name>enumerate_devices</name> <operator>=</operator> <operator>&amp;</operator><name>opencl_enumerate_devices</name></expr>,
<expr><operator>.</operator><name>filter_device</name> <operator>=</operator> <name>NULL</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>opencl_device_create_internal</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>selector</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_VAAPI_INTEL_MEDIA</name></expr></cpp:if>



<case>case <expr><name>AV_HWDEVICE_TYPE_VAAPI</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>AVVAAPIDeviceContext</name> <modifier>*</modifier></type><name>src_hwctx</name> <init>= <expr><name><name>src_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_context_properties</name></type> <name><name>props</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name>CL_CONTEXT_PLATFORM</name></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><name>CL_CONTEXT_VA_API_DISPLAY_INTEL</name></expr>,
<expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name><name>src_hwctx</name><operator>-&gt;</operator><name>display</name></name></expr>,
<expr><name>CL_CONTEXT_INTEROP_USER_SYNC</name></expr>,
<expr><name>CL_FALSE</name></expr>,
<expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OpenCLDeviceSelector</name></type> <name>selector</name> <init>= <expr><block>{
<expr><operator>.</operator><name>platform_index</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>device_index</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>context</name> <operator>=</operator> <name><name>src_hwctx</name><operator>-&gt;</operator><name>display</name></name></expr>,
<expr><operator>.</operator><name>enumerate_platforms</name> <operator>=</operator> <operator>&amp;</operator><name>opencl_enumerate_platforms</name></expr>,
<expr><operator>.</operator><name>filter_platform</name> <operator>=</operator> <operator>&amp;</operator><name>opencl_filter_intel_media_vaapi_platform</name></expr>,
<expr><operator>.</operator><name>enumerate_devices</name> <operator>=</operator> <operator>&amp;</operator><name>opencl_enumerate_intel_media_vaapi_devices</name></expr>,
<expr><operator>.</operator><name>filter_device</name> <operator>=</operator> <operator>&amp;</operator><name>opencl_filter_intel_media_vaapi_device</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>opencl_device_create_internal</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>selector</name></expr></argument>, <argument><expr><name>props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_DXVA2</name></expr></cpp:if>
<case>case <expr><name>AV_HWDEVICE_TYPE_DXVA2</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>AVDXVA2DeviceContext</name> <modifier>*</modifier></type><name>src_hwctx</name> <init>= <expr><name><name>src_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IDirect3DDevice9</name> <modifier>*</modifier></type><name>device</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>device_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DDeviceManager9_OpenDeviceHandle</name><argument_list>(<argument><expr><name><name>src_hwctx</name><operator>-&gt;</operator><name>devmgr</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>device_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to open device handle "</literal>
<literal type="string">"for Direct3D9 device: %lx.\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_UNKNOWN</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DDeviceManager9_LockDevice</name><argument_list>(<argument><expr><name><name>src_hwctx</name><operator>-&gt;</operator><name>devmgr</name></name></expr></argument>,
<argument><expr><name>device_handle</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>device</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>cl_context_properties</name></type> <name><name>props</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name>CL_CONTEXT_PLATFORM</name></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><name>CL_CONTEXT_ADAPTER_D3D9EX_KHR</name></expr>,
<expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name>device</name></expr>,
<expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OpenCLDeviceSelector</name></type> <name>selector</name> <init>= <expr><block>{
<expr><operator>.</operator><name>platform_index</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>device_index</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>context</name> <operator>=</operator> <name>device</name></expr>,
<expr><operator>.</operator><name>enumerate_platforms</name> <operator>=</operator> <operator>&amp;</operator><name>opencl_enumerate_platforms</name></expr>,
<expr><operator>.</operator><name>filter_platform</name> <operator>=</operator> <operator>&amp;</operator><name>opencl_filter_dxva2_platform</name></expr>,
<expr><operator>.</operator><name>enumerate_devices</name> <operator>=</operator> <operator>&amp;</operator><name>opencl_enumerate_dxva2_devices</name></expr>,
<expr><operator>.</operator><name>filter_device</name> <operator>=</operator> <operator>&amp;</operator><name>opencl_filter_gpu_device</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>opencl_device_create_internal</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>selector</name></expr></argument>, <argument><expr><name>props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDirect3DDeviceManager9_UnlockDevice</name><argument_list>(<argument><expr><name><name>src_hwctx</name><operator>-&gt;</operator><name>devmgr</name></name></expr></argument>,
<argument><expr><name>device_handle</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to lock device handle "</literal>
<literal type="string">"for Direct3D9 device: %lx.\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_UNKNOWN</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>IDirect3DDeviceManager9_CloseDeviceHandle</name><argument_list>(<argument><expr><name><name>src_hwctx</name><operator>-&gt;</operator><name>devmgr</name></name></expr></argument>,
<argument><expr><name>device_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_D3D11</name></expr></cpp:if>
<case>case <expr><name>AV_HWDEVICE_TYPE_D3D11VA</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>AVD3D11VADeviceContext</name> <modifier>*</modifier></type><name>src_hwctx</name> <init>= <expr><name><name>src_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_context_properties</name></type> <name><name>props</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name>CL_CONTEXT_PLATFORM</name></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><name>CL_CONTEXT_D3D11_DEVICE_KHR</name></expr>,
<expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name><name>src_hwctx</name><operator>-&gt;</operator><name>device</name></name></expr>,
<expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OpenCLDeviceSelector</name></type> <name>selector</name> <init>= <expr><block>{
<expr><operator>.</operator><name>platform_index</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>device_index</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>context</name> <operator>=</operator> <name><name>src_hwctx</name><operator>-&gt;</operator><name>device</name></name></expr>,
<expr><operator>.</operator><name>enumerate_platforms</name> <operator>=</operator> <operator>&amp;</operator><name>opencl_enumerate_platforms</name></expr>,
<expr><operator>.</operator><name>filter_platform</name> <operator>=</operator> <operator>&amp;</operator><name>opencl_filter_d3d11_platform</name></expr>,
<expr><operator>.</operator><name>enumerate_devices</name> <operator>=</operator> <operator>&amp;</operator><name>opencl_enumerate_d3d11_devices</name></expr>,
<expr><operator>.</operator><name>filter_device</name> <operator>=</operator> <operator>&amp;</operator><name>opencl_filter_gpu_device</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>opencl_device_create_internal</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>selector</name></expr></argument>, <argument><expr><name>props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_DRM_ARM</name></expr></cpp:if>
<case>case <expr><name>AV_HWDEVICE_TYPE_DRM</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>OpenCLDeviceSelector</name></type> <name>selector</name> <init>= <expr><block>{
<expr><operator>.</operator><name>platform_index</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>device_index</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>context</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>enumerate_platforms</name> <operator>=</operator> <operator>&amp;</operator><name>opencl_enumerate_platforms</name></expr>,
<expr><operator>.</operator><name>filter_platform</name> <operator>=</operator> <operator>&amp;</operator><name>opencl_filter_drm_arm_platform</name></expr>,
<expr><operator>.</operator><name>enumerate_devices</name> <operator>=</operator> <operator>&amp;</operator><name>opencl_enumerate_devices</name></expr>,
<expr><operator>.</operator><name>filter_device</name> <operator>=</operator> <operator>&amp;</operator><name>opencl_filter_drm_arm_device</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>opencl_device_create_internal</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>selector</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opencl_get_plane_format</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pixfmt</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>cl_image_format</name> <modifier>*</modifier></type><name>image_format</name></decl></parameter>,
<parameter><decl><type><name>cl_image_desc</name> <modifier>*</modifier></type><name>image_desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVComponentDescriptor</name> <modifier>*</modifier></type><name>comp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>channels</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>order</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>depth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>step</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wsub</name></decl>, <decl><type ref="prev"/><name>hsub</name></decl>, <decl><type ref="prev"/><name>alpha</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>plane</name> <operator>&gt;=</operator> <name>AV_NUM_DATA_POINTERS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOENT</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>pixfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>AV_PIX_FMT_FLAG_BITSTREAM</name> <operator>|</operator>
<name>AV_PIX_FMT_FLAG_HWACCEL</name> <operator>|</operator>
<name>AV_PIX_FMT_FLAG_PAL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>wsub</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>hsub</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&amp;</operator> <name>wsub</name> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator> <name>height</name> <operator>&amp;</operator> <name>hsub</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>comp</name> <operator>=</operator> <operator>&amp;</operator><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>comp</name><operator>-&gt;</operator><name>plane</name></name> <operator>!=</operator> <name>plane</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>comp</name><operator>-&gt;</operator><name>step</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>comp</name><operator>-&gt;</operator><name>step</name></name> <operator>!=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>
<name><name>comp</name><operator>-&gt;</operator><name>step</name></name> <operator>!=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>comp</name><operator>-&gt;</operator><name>step</name></name> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>comp</name><operator>-&gt;</operator><name>shift</name></name> <operator>+</operator> <name><name>comp</name><operator>-&gt;</operator><name>depth</name></name> <operator>!=</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator>
<name><name>comp</name><operator>-&gt;</operator><name>shift</name></name> <operator>+</operator> <name><name>comp</name><operator>-&gt;</operator><name>depth</name></name> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&amp;&amp;</operator> <name><name>comp</name><operator>-&gt;</operator><name>depth</name></name> <operator>!=</operator> <name>depth</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>comp</name><operator>-&gt;</operator><name>depth</name></name> <operator>&gt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator>
<name>HAVE_BIGENDIAN</name> <operator>==</operator> <operator>!</operator><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_BE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>step</name> <operator>&amp;&amp;</operator> <name><name>comp</name><operator>-&gt;</operator><name>step</name></name> <operator>!=</operator> <name>step</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>depth</name> <operator>=</operator> <name><name>comp</name><operator>-&gt;</operator><name>depth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>order</name> <operator>=</operator> <name>order</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name><name>comp</name><operator>-&gt;</operator><name>offset</name></name> <operator>/</operator> <operator>(</operator><operator>(</operator><name>depth</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>step</name> <operator>=</operator> <name><name>comp</name><operator>-&gt;</operator><name>step</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>alpha</name> <operator>=</operator> <operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_ALPHA</name> <operator>&amp;&amp;</operator>
<name>c</name> <operator>==</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>channels</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>channels</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOENT</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>image_format</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>image_format</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>image_desc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>image_desc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image_desc</name><operator>-&gt;</operator><name>image_type</name></name> <operator>=</operator> <name>CL_MEM_OBJECT_IMAGE2D</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>plane</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>alpha</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>image_desc</name><operator>-&gt;</operator><name>image_width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image_desc</name><operator>-&gt;</operator><name>image_height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image_desc</name><operator>-&gt;</operator><name>image_row_pitch</name></name> <operator>=</operator> <name>step</name> <operator>*</operator> <name>width</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>image_desc</name><operator>-&gt;</operator><name>image_width</name></name> <operator>=</operator> <name>width</name> <operator>/</operator> <name>wsub</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image_desc</name><operator>-&gt;</operator><name>image_height</name></name> <operator>=</operator> <name>height</name> <operator>/</operator> <name>hsub</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image_desc</name><operator>-&gt;</operator><name>image_row_pitch</name></name> <operator>=</operator> <name>step</name> <operator>*</operator> <name>width</name> <operator>/</operator> <name>wsub</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>image_format</name><operator>-&gt;</operator><name>image_channel_data_type</name></name> <operator>=</operator> <name>CL_UNORM_INT8</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&lt;=</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>image_format</name><operator>-&gt;</operator><name>image_channel_data_type</name></name> <operator>=</operator> <name>CL_UNORM_INT16</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHANNEL_ORDER</name><parameter_list>(<parameter><type><name>order</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case order: image_format-&gt;image_channel_order = type; break;</cpp:value></cpp:define>

<switch>switch <condition>(<expr><name>order</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CHANNEL_ORDER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CL_R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHANNEL_ORDER</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>CL_RG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHANNEL_ORDER</name><argument_list>(<argument><expr><literal type="number">1234</literal></expr></argument>, <argument><expr><name>CL_RGBA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHANNEL_ORDER</name><argument_list>(<argument><expr><literal type="number">2341</literal></expr></argument>, <argument><expr><name>CL_ARGB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHANNEL_ORDER</name><argument_list>(<argument><expr><literal type="number">3214</literal></expr></argument>, <argument><expr><name>CL_BGRA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CL_ABGR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>CHANNEL_ORDER</name><argument_list>(<argument><expr><literal type="number">4321</literal></expr></argument>, <argument><expr><name>CL_ABGR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHANNEL_ORDER</name></cpp:undef>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opencl_frames_get_constraints</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>hwdev</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>hwconfig</name></decl></parameter>,
<parameter><decl><type><name>AVHWFramesConstraints</name> <modifier>*</modifier></type><name>constraints</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVOpenCLDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>hwdev</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_uint</name></type> <name>nb_image_formats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_image_format</name> <modifier>*</modifier></type><name>image_formats</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>pix_fmts_found</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>max_width</name></decl>, <decl><type ref="prev"/><name>max_height</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clGetDeviceInfo</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>device_id</name></name></expr></argument>, <argument><expr><name>CL_DEVICE_IMAGE2D_MAX_WIDTH</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>max_width</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>max_width</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to query maximum "</literal>
<literal type="string">"supported image width: %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>constraints</name><operator>-&gt;</operator><name>max_width</name></name> <operator>=</operator> <name>max_width</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clGetDeviceInfo</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>device_id</name></name></expr></argument>, <argument><expr><name>CL_DEVICE_IMAGE2D_MAX_HEIGHT</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>max_height</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>max_height</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to query maximum "</literal>
<literal type="string">"supported image height: %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>constraints</name><operator>-&gt;</operator><name>max_height</name></name> <operator>=</operator> <name>max_height</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Maximum supported image size %dx%d.\n"</literal></expr></argument>,
<argument><expr><name><name>constraints</name><operator>-&gt;</operator><name>max_width</name></name></expr></argument>, <argument><expr><name><name>constraints</name><operator>-&gt;</operator><name>max_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clGetSupportedImageFormats</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>context</name></name></expr></argument>,
<argument><expr><name>CL_MEM_READ_WRITE</name></expr></argument>,
<argument><expr><name>CL_MEM_OBJECT_IMAGE2D</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nb_image_formats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to query supported "</literal>
<literal type="string">"image formats: %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nb_image_formats</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No image support in OpenCL "</literal>
<literal type="string">"driver (zero supported image formats).\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>image_formats</name> <operator>=</operator>
<call><name>av_malloc_array</name><argument_list>(<argument><expr><name>nb_image_formats</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>image_formats</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>image_formats</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clGetSupportedImageFormats</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>context</name></name></expr></argument>,
<argument><expr><name>CL_MEM_READ_WRITE</name></expr></argument>,
<argument><expr><name>CL_MEM_OBJECT_IMAGE2D</name></expr></argument>,
<argument><expr><name>nb_image_formats</name></expr></argument>,
<argument><expr><name>image_formats</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to query supported "</literal>
<literal type="string">"image formats: %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pix_fmts_found</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>pix_fmt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pix_fmt</name> <operator>&lt;</operator> <name>AV_PIX_FMT_NB</name></expr>;</condition> <incr><expr><name>pix_fmt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>cl_image_format</name></type> <name>image_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_image_desc</name></type> <name>image_desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>plane</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>opencl_get_plane_format</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>image_format</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>image_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_image_formats</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>image_formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>image_channel_order</name> <operator>==</operator>
<name><name>image_format</name><operator>.</operator><name>image_channel_order</name></name> <operator>&amp;&amp;</operator>
<name><name>image_formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>image_channel_data_type</name> <operator>==</operator>
<name><name>image_format</name><operator>.</operator><name>image_channel_data_type</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>nb_image_formats</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOENT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Format %s supported.\n"</literal></expr></argument>,
<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>av_reallocp_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>constraints</name><operator>-&gt;</operator><name>valid_sw_formats</name></name></expr></argument>,
<argument><expr><name>pix_fmts_found</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>constraints</name><operator>-&gt;</operator><name>valid_sw_formats</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>constraints</name><operator>-&gt;</operator><name>valid_sw_formats</name><index>[<expr><name>pix_fmts_found</name></expr>]</index></name> <operator>=</operator> <name>pix_fmt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>constraints</name><operator>-&gt;</operator><name>valid_sw_formats</name><index>[<expr><name>pix_fmts_found</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
<name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>pix_fmts_found</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>image_formats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>constraints</name><operator>-&gt;</operator><name>valid_hw_formats</name></name> <operator>=</operator>
<call><name>av_malloc_array</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>constraints</name><operator>-&gt;</operator><name>valid_hw_formats</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>constraints</name><operator>-&gt;</operator><name>valid_hw_formats</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>constraints</name><operator>-&gt;</operator><name>valid_hw_formats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>AV_PIX_FMT_OPENCL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>constraints</name><operator>-&gt;</operator><name>valid_hw_formats</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>image_formats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>opencl_pool_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVOpenCLFrameDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><operator>(</operator><name>AVOpenCLFrameDescriptor</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clReleaseMemObject</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to release plane %d: "</literal>
<literal type="string">"%d.\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AVBufferRef</name> <modifier>*</modifier></type><name>opencl_pool_alloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVOpenCLDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVOpenCLFrameDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_mem</name></type> <name>image</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_image_format</name></type> <name>image_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_image_desc</name></type> <name>image_desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>desc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>opencl_get_plane_format</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>,
<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>image_format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>image_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOENT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>



<expr_stmt><expr><name><name>image_desc</name><operator>.</operator><name>image_row_pitch</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>image</name> <operator>=</operator> <call><name>clCreateImage</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>CL_MEM_READ_WRITE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>image_format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>image_desc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>image</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create image for "</literal>
<literal type="string">"plane %d: %d.\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name>image</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <call><name>av_buffer_create</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>desc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>desc</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>&amp;</operator><name>opencl_pool_free</name></expr></argument>, <argument><expr><name>hwfc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ref</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><name>ref</name></expr>;</return>

<label><name>fail</name>:</label>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>desc</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clReleaseMemObject</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opencl_frames_init_command_queue</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVOpenCLFramesContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OpenCLDeviceContext</name> <modifier>*</modifier></type><name>devpriv</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OpenCLFramesContext</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>command_queue</name></name> <operator>=</operator> <ternary><condition><expr><name><name>hwctx</name><operator>-&gt;</operator><name>command_queue</name></name></expr> ?</condition><then> <expr><name><name>hwctx</name><operator>-&gt;</operator><name>command_queue</name></name></expr>
</then><else>: <expr><name><name>devpriv</name><operator>-&gt;</operator><name>command_queue</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clRetainCommandQueue</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to retain frame "</literal>
<literal type="string">"command queue: %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opencl_frames_init</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hwfc</name><operator>-&gt;</operator><name>pool</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>hwfc</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>pool_internal</name></name> <operator>=</operator>
<call><name>av_buffer_pool_init2</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cl_mem</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>hwfc</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>opencl_pool_alloc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hwfc</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>pool_internal</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>opencl_frames_init_command_queue</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>opencl_frames_uninit</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OpenCLFramesContext</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_DXVA2</name> <operator>||</operator> <name>HAVE_OPENCL_D3D11</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>priv</name><operator>-&gt;</operator><name>nb_mapped_frames</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AVOpenCLFrameDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>mapped_frames</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clReleaseMemObject</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to release mapped "</literal>
<literal type="string">"frame object (frame %d plane %d): %d.\n"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>mapped_frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>command_queue</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clReleaseCommandQueue</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to release frame "</literal>
<literal type="string">"command queue: %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>command_queue</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opencl_get_buffer</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVOpenCLFrameDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_buffer_pool_get</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <operator>(</operator><name>AVOpenCLFrameDescriptor</name><operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>desc</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_OPENCL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>hwfc</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>hwfc</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opencl_transfer_get_formats</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVHWFrameTransferDirection</name></name></type> <name>dir</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>formats</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier></type><name>fmts</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fmts</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>fmts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fmts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>hwfc</name><operator>-&gt;</operator><name>sw_format</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>formats</name> <operator>=</operator> <name>fmts</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opencl_wait_events</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>,
<parameter><decl><type><name>cl_event</name> <modifier>*</modifier></type><name>events</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_events</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clWaitForEvents</name><argument_list>(<argument><expr><name>nb_events</name></expr></argument>, <argument><expr><name>events</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to wait for event "</literal>
<literal type="string">"completion: %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_events</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clReleaseEvent</name><argument_list>(<argument><expr><name><name>events</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to release "</literal>
<literal type="string">"event: %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opencl_transfer_data_from</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>,
<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OpenCLFramesContext</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_image_format</name></type> <name>image_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_image_desc</name></type> <name>image_desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name><name>origin</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name><name>region</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_event</name></type> <name><name>events</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name><name>hwfc</name><operator>-&gt;</operator><name>sw_format</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>opencl_get_plane_format</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>,
<argument><expr><name><name>src</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>image_format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>image_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOENT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Plane %d missing on "</literal>
<literal type="string">"destination frame for transfer.\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>region</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>image_desc</name><operator>.</operator><name>image_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>region</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>image_desc</name><operator>.</operator><name>image_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>region</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clEnqueueReadImage</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>cl_mem</name><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>,
<argument><expr><name>CL_FALSE</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>, <argument><expr><name>region</name></expr></argument>,
<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>events</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to enqueue read of "</literal>
<literal type="string">"OpenCL image plane %d: %d.\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>opencl_wait_events</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>events</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opencl_transfer_data_to</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>,
<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OpenCLFramesContext</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_image_format</name></type> <name>image_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_image_desc</name></type> <name>image_desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name><name>origin</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name><name>region</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_event</name></type> <name><name>events</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name><name>hwfc</name><operator>-&gt;</operator><name>sw_format</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>opencl_get_plane_format</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>,
<argument><expr><name><name>src</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>image_format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>image_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOENT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Plane %d missing on "</literal>
<literal type="string">"source frame for transfer.\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>region</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>image_desc</name><operator>.</operator><name>image_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>region</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>image_desc</name><operator>.</operator><name>image_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>region</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clEnqueueWriteImage</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>cl_mem</name><operator>)</operator><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>,
<argument><expr><name>CL_FALSE</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>, <argument><expr><name>region</name></expr></argument>,
<argument><expr><name><name>src</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>events</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to enqueue write of "</literal>
<literal type="string">"OpenCL image plane %d: %d.\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>opencl_wait_events</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>events</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>OpenCLMapping</name> <block>{



<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>address</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>OpenCLMapping</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>opencl_unmap_frame</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>,
<parameter><decl><type><name>HWMapDescriptor</name> <modifier>*</modifier></type><name>hwmap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OpenCLFramesContext</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OpenCLMapping</name> <modifier>*</modifier></type><name>map</name> <init>= <expr><name><name>hwmap</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_event</name></type> <name><name>events</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>address</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>map</name><operator>-&gt;</operator><name>address</name><index>[<expr><name>p</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clEnqueueUnmapMemObject</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>cl_mem</name><operator>)</operator><name><name>hwmap</name><operator>-&gt;</operator><name>source</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>map</name><operator>-&gt;</operator><name>address</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>events</name><index>[<expr><name>e</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to unmap OpenCL "</literal>
<literal type="string">"image plane %d: %d.\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>e</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>opencl_wait_events</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>events</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opencl_map_frame</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OpenCLFramesContext</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_map_flags</name></type> <name>map_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_image_format</name></type> <name>image_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_image_desc</name></type> <name>image_desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OpenCLMapping</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name><name>origin</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name><name>region</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>row_pitch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_event</name></type> <name><name>events</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>sw_format</name></name> <operator>==</operator> <name><name>dst</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>AV_HWFRAME_MAP_OVERWRITE</name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>AV_HWFRAME_MAP_READ</name><operator>)</operator></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>map_flags</name> <operator>=</operator> <name>CL_MAP_WRITE_INVALIDATE_REGION</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>map_flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>AV_HWFRAME_MAP_READ</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>map_flags</name> <operator>|=</operator> <name>CL_MAP_READ</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>AV_HWFRAME_MAP_WRITE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>map_flags</name> <operator>|=</operator> <name>CL_MAP_WRITE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>map</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>map</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>map</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>opencl_get_plane_format</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>,
<argument><expr><name><name>src</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>image_format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>image_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOENT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>region</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>image_desc</name><operator>.</operator><name>image_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>region</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>image_desc</name><operator>.</operator><name>image_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>region</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>address</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator>
<call><name>clEnqueueMapImage</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>cl_mem</name><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>,
<argument><expr><name>CL_FALSE</name></expr></argument>, <argument><expr><name>map_flags</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>, <argument><expr><name>region</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>row_pitch</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>events</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>map</name><operator>-&gt;</operator><name>address</name><index>[<expr><name>p</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to map OpenCL "</literal>
<literal type="string">"image plane %d: %d.\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>address</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Map plane %d (%p -&gt; %p).\n"</literal></expr></argument>,
<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>opencl_wait_events</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>events</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_hwframe_map_create</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>opencl_unmap_frame</name></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>AV_NUM_DATA_POINTERS</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>map</name><operator>-&gt;</operator><name>address</name><index>[<expr><name>p</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>clEnqueueUnmapMemObject</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>cl_mem</name><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>map</name><operator>-&gt;</operator><name>address</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>events</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>opencl_wait_events</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>events</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_DRM_BEIGNET</name></expr></cpp:if>

<typedef>typedef <type><struct>struct <name>DRMBeignetToOpenCLMapping</name> <block>{
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>drm_frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDRMFrameDescriptor</name> <modifier>*</modifier></type><name>drm_desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVOpenCLFrameDescriptor</name></type> <name>frame</name></decl>;</decl_stmt>
}</block></struct></type> <name>DRMBeignetToOpenCLMapping</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>opencl_unmap_from_drm_beignet</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>dst_fc</name></decl></parameter>,
<parameter><decl><type><name>HWMapDescriptor</name> <modifier>*</modifier></type><name>hwmap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DRMBeignetToOpenCLMapping</name> <modifier>*</modifier></type><name>mapping</name> <init>= <expr><name><name>hwmap</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mapping</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clReleaseMemObject</name><argument_list>(<argument><expr><name><name>mapping</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>planes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to release CL image "</literal>
<literal type="string">"of plane %d of DRM frame: %d.\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>mapping</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opencl_map_from_drm_beignet</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>dst_fc</name></decl></parameter>,
<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVOpenCLDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>dst_fc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OpenCLDeviceContext</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>dst_fc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DRMBeignetToOpenCLMapping</name> <modifier>*</modifier></type><name>mapping</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVDRMFrameDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>AVDRMFrameDescriptor</name><operator>*</operator><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mapping</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>mapping</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mapping</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_layers</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVDRMLayerDescriptor</name> <modifier>*</modifier></type><name>layer</name> <init>= <expr><operator>&amp;</operator><name><name>desc</name><operator>-&gt;</operator><name>layers</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>layer</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVDRMPlaneDescriptor</name> <modifier>*</modifier></type><name>plane</name> <init>= <expr><operator>&amp;</operator><name><name>layer</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVDRMObjectDescriptor</name> <modifier>*</modifier></type><name>object</name> <init>=
<expr><operator>&amp;</operator><name><name>desc</name><operator>-&gt;</operator><name>objects</name><index>[<expr><name><name>plane</name><operator>-&gt;</operator><name>object_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cl_import_image_info_intel</name></type> <name>image_info</name> <init>= <expr><block>{
<expr><operator>.</operator><name>fd</name> <operator>=</operator> <name><name>object</name><operator>-&gt;</operator><name>fd</name></name></expr>,
<expr><operator>.</operator><name>size</name> <operator>=</operator> <name><name>object</name><operator>-&gt;</operator><name>size</name></name></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>CL_MEM_OBJECT_IMAGE2D</name></expr>,
<expr><operator>.</operator><name>offset</name> <operator>=</operator> <name><name>plane</name><operator>-&gt;</operator><name>offset</name></name></expr>,
<expr><operator>.</operator><name>row_pitch</name> <operator>=</operator> <name><name>plane</name><operator>-&gt;</operator><name>pitch</name></name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_image_desc</name></type> <name>image_desc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>opencl_get_plane_format</name><argument_list>(<argument><expr><name><name>dst_fc</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>,
<argument><expr><name><name>src</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>image_info</name><operator>.</operator><name>fmt</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>image_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"DRM frame layer %d "</literal>
<literal type="string">"plane %d is not representable in OpenCL: %d.\n"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>image_info</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>image_desc</name><operator>.</operator><name>image_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image_info</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>image_desc</name><operator>.</operator><name>image_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mapping</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator>
<call><name><name>priv</name><operator>-&gt;</operator><name>clCreateImageFromFdINTEL</name></name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>context</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>image_info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mapping</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create CL image "</literal>
<literal type="string">"from layer %d plane %d of DRM frame: %d.\n"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>mapping</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapping</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>nb_planes</name></name> <operator>=</operator> <operator>++</operator><name>p</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_hwframe_map_create</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>opencl_unmap_from_drm_beignet</name></expr></argument>,
<argument><expr><name>mapping</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>mapping</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mapping</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clReleaseMemObject</name><argument_list>(<argument><expr><name><name>mapping</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>mapping</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_VAAPI_BEIGNET</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opencl_map_from_vaapi</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>dst_fc</name></decl></parameter>,
<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_DRM_PRIME</name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>av_hwframe_map</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>opencl_map_from_drm_beignet</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_hwframe_map_replace</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>cl_mem_flags</name></type> <name>opencl_mem_flags_for_mapping</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>map_flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>map_flags</name> <operator>&amp;</operator> <name>AV_HWFRAME_MAP_READ</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>map_flags</name> <operator>&amp;</operator> <name>AV_HWFRAME_MAP_WRITE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CL_MEM_READ_WRITE</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>map_flags</name> <operator>&amp;</operator> <name>AV_HWFRAME_MAP_READ</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CL_MEM_READ_ONLY</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>map_flags</name> <operator>&amp;</operator> <name>AV_HWFRAME_MAP_WRITE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CL_MEM_WRITE_ONLY</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_VAAPI_INTEL_MEDIA</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>opencl_unmap_from_qsv</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>dst_fc</name></decl></parameter>,
<parameter><decl><type><name>HWMapDescriptor</name> <modifier>*</modifier></type><name>hwmap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVOpenCLFrameDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><name><name>hwmap</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OpenCLDeviceContext</name> <modifier>*</modifier></type><name>device_priv</name> <init>= <expr><name><name>dst_fc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OpenCLFramesContext</name> <modifier>*</modifier></type><name>frames_priv</name> <init>= <expr><name><name>dst_fc</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_event</name></type> <name>event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Unmap QSV/VAAPI surface from OpenCL.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name><name>device_priv</name><operator>-&gt;</operator><name>clEnqueueReleaseVA_APIMediaSurfacesINTEL</name></name><argument_list>(
<argument><expr><name><name>frames_priv</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>nb_planes</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>planes</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to release surface "</literal>
<literal type="string">"handles: %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>opencl_wait_events</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clReleaseMemObject</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to release CL "</literal>
<literal type="string">"image of plane %d of QSV/VAAPI surface: %d\n"</literal></expr></argument>,
<argument><expr><name>p</name></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opencl_map_from_qsv</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>dst_fc</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>src_fc</name> <init>=
<expr><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVOpenCLDeviceContext</name> <modifier>*</modifier></type><name>dst_dev</name> <init>= <expr><name><name>dst_fc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OpenCLDeviceContext</name> <modifier>*</modifier></type><name>device_priv</name> <init>= <expr><name><name>dst_fc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OpenCLFramesContext</name> <modifier>*</modifier></type><name>frames_priv</name> <init>= <expr><name><name>dst_fc</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVOpenCLFrameDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VASurfaceID</name></type> <name>va_surface</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_mem_flags</name></type> <name>cl_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_event</name></type> <name>event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBMFX</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_QSV</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier></type><name>mfx_surface</name> <init>= <expr><operator>(</operator><name>mfxFrameSurface1</name><operator>*</operator><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>va_surface</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>VASurfaceID</name><operator>*</operator><operator>)</operator><name><name>mfx_surface</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>MemId</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_VAAPI</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>va_surface</name> <operator>=</operator> <operator>(</operator><name>VASurfaceID</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>cl_flags</name> <operator>=</operator> <call><name>opencl_mem_flags_for_mapping</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cl_flags</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>src_fc</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Map QSV/VAAPI surface %#x to "</literal>
<literal type="string">"OpenCL.\n"</literal></expr></argument>, <argument><expr><name>va_surface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>desc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator>
<call><name><name>device_priv</name><operator>-&gt;</operator><name>clCreateFromVA_APIMediaSurfaceINTEL</name></name><argument_list>(
<argument><expr><name><name>dst_dev</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>cl_flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>va_surface</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>desc</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create CL "</literal>
<literal type="string">"image from plane %d of QSV/VAAPI surface "</literal>
<literal type="string">"%#x: %d.\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>va_surface</name></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>desc</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name><name>device_priv</name><operator>-&gt;</operator><name>clEnqueueAcquireVA_APIMediaSurfacesINTEL</name></name><argument_list>(
<argument><expr><name><name>frames_priv</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>nb_planes</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>planes</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to acquire surface "</literal>
<literal type="string">"handles: %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>opencl_wait_events</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_hwframe_map_create</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>opencl_unmap_from_qsv</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clReleaseMemObject</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_DXVA2</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>opencl_unmap_from_dxva2</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>dst_fc</name></decl></parameter>,
<parameter><decl><type><name>HWMapDescriptor</name> <modifier>*</modifier></type><name>hwmap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVOpenCLFrameDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><name><name>hwmap</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OpenCLDeviceContext</name> <modifier>*</modifier></type><name>device_priv</name> <init>= <expr><name><name>dst_fc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OpenCLFramesContext</name> <modifier>*</modifier></type><name>frames_priv</name> <init>= <expr><name><name>dst_fc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_event</name></type> <name>event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Unmap DXVA2 surface from OpenCL.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name><name>device_priv</name><operator>-&gt;</operator><name>clEnqueueReleaseDX9MediaSurfacesKHR</name></name><argument_list>(
<argument><expr><name><name>frames_priv</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>nb_planes</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>planes</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to release surface "</literal>
<literal type="string">"handle: %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>opencl_wait_events</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opencl_map_from_dxva2</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>dst_fc</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>src_fc</name> <init>=
<expr><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDXVA2FramesContext</name> <modifier>*</modifier></type><name>src_hwctx</name> <init>= <expr><name><name>src_fc</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OpenCLDeviceContext</name> <modifier>*</modifier></type><name>device_priv</name> <init>= <expr><name><name>dst_fc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OpenCLFramesContext</name> <modifier>*</modifier></type><name>frames_priv</name> <init>= <expr><name><name>dst_fc</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVOpenCLFrameDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_event</name></type> <name>event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Map DXVA2 surface %p to "</literal>
<literal type="string">"OpenCL.\n"</literal></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>src_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>src_hwctx</name><operator>-&gt;</operator><name>surfaces</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>IDirect3DSurface9</name><operator>*</operator><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>src_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Trying to map from a surface which "</literal>
<literal type="string">"is not in the mapped frames context.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <operator>&amp;</operator><name><name>frames_priv</name><operator>-&gt;</operator><name>mapped_frames</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name><name>device_priv</name><operator>-&gt;</operator><name>clEnqueueAcquireDX9MediaSurfacesKHR</name></name><argument_list>(
<argument><expr><name><name>frames_priv</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>nb_planes</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>planes</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to acquire surface "</literal>
<literal type="string">"handle: %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>opencl_wait_events</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>desc</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_hwframe_map_create</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>opencl_unmap_from_dxva2</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name><name>device_priv</name><operator>-&gt;</operator><name>clEnqueueReleaseDX9MediaSurfacesKHR</name></name><argument_list>(
<argument><expr><name><name>frames_priv</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>nb_planes</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>planes</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>==</operator> <name>CL_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>opencl_wait_events</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opencl_frames_derive_from_dxva2</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>dst_fc</name></decl></parameter>,
<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>src_fc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVOpenCLDeviceContext</name> <modifier>*</modifier></type><name>dst_dev</name> <init>= <expr><name><name>dst_fc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDXVA2FramesContext</name> <modifier>*</modifier></type><name>src_hwctx</name> <init>= <expr><name><name>src_fc</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OpenCLDeviceContext</name> <modifier>*</modifier></type><name>device_priv</name> <init>= <expr><name><name>dst_fc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OpenCLFramesContext</name> <modifier>*</modifier></type><name>frames_priv</name> <init>= <expr><name><name>dst_fc</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_mem_flags</name></type> <name>cl_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>nb_planes</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src_fc</name><operator>-&gt;</operator><name>sw_format</name></name> <operator>!=</operator> <name>AV_PIX_FMT_NV12</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Only NV12 textures are supported "</literal>
<literal type="string">"for DXVA2 to OpenCL mapping.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nb_planes</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src_fc</name><operator>-&gt;</operator><name>initial_pool_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Only fixed-size pools are supported "</literal>
<literal type="string">"for DXVA2 to OpenCL mapping.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cl_flags</name> <operator>=</operator> <call><name>opencl_mem_flags_for_mapping</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cl_flags</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>frames_priv</name><operator>-&gt;</operator><name>nb_mapped_frames</name></name> <operator>=</operator> <name><name>src_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frames_priv</name><operator>-&gt;</operator><name>mapped_frames</name></name> <operator>=</operator>
<call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>frames_priv</name><operator>-&gt;</operator><name>nb_mapped_frames</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>frames_priv</name><operator>-&gt;</operator><name>mapped_frames</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frames_priv</name><operator>-&gt;</operator><name>mapped_frames</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>frames_priv</name><operator>-&gt;</operator><name>nb_mapped_frames</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AVOpenCLFrameDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><operator>&amp;</operator><name><name>frames_priv</name><operator>-&gt;</operator><name>mapped_frames</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_dx9_surface_info_khr</name></type> <name>surface_info</name> <init>= <expr><block>{
<expr><operator>.</operator><name>resource</name> <operator>=</operator> <name><name>src_hwctx</name><operator>-&gt;</operator><name>surfaces</name><index>[<expr><name>i</name></expr>]</index></name></expr>,
<expr><operator>.</operator><name>shared_handle</name> <operator>=</operator> <name>NULL</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>=</operator> <name>nb_planes</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>nb_planes</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator>
<call><name><name>device_priv</name><operator>-&gt;</operator><name>clCreateFromDX9MediaSurfaceKHR</name></name><argument_list>(
<argument><expr><name><name>dst_dev</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>cl_flags</name></expr></argument>,
<argument><expr><name><name>device_priv</name><operator>-&gt;</operator><name>dx9_media_adapter_type</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>surface_info</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>desc</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create CL "</literal>
<literal type="string">"image from plane %d of DXVA2 surface %d: %d.\n"</literal></expr></argument>,
<argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>frames_priv</name><operator>-&gt;</operator><name>nb_mapped_frames</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AVOpenCLFrameDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><operator>&amp;</operator><name><name>frames_priv</name><operator>-&gt;</operator><name>mapped_frames</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clReleaseMemObject</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frames_priv</name><operator>-&gt;</operator><name>mapped_frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frames_priv</name><operator>-&gt;</operator><name>nb_mapped_frames</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_D3D11</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>opencl_unmap_from_d3d11</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>dst_fc</name></decl></parameter>,
<parameter><decl><type><name>HWMapDescriptor</name> <modifier>*</modifier></type><name>hwmap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVOpenCLFrameDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><name><name>hwmap</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OpenCLDeviceContext</name> <modifier>*</modifier></type><name>device_priv</name> <init>= <expr><name><name>dst_fc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OpenCLFramesContext</name> <modifier>*</modifier></type><name>frames_priv</name> <init>= <expr><name><name>dst_fc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_event</name></type> <name>event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name><name>device_priv</name><operator>-&gt;</operator><name>clEnqueueReleaseD3D11ObjectsKHR</name></name><argument_list>(
<argument><expr><name><name>frames_priv</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>nb_planes</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>planes</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to release surface "</literal>
<literal type="string">"handle: %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>opencl_wait_events</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opencl_map_from_d3d11</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>dst_fc</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OpenCLDeviceContext</name> <modifier>*</modifier></type><name>device_priv</name> <init>= <expr><name><name>dst_fc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OpenCLFramesContext</name> <modifier>*</modifier></type><name>frames_priv</name> <init>= <expr><name><name>dst_fc</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVOpenCLFrameDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_event</name></type> <name>event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>index</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name><name>frames_priv</name><operator>-&gt;</operator><name>nb_mapped_frames</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Texture array index out of range for "</literal>
<literal type="string">"mapping: %d &gt;= %d.\n"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>frames_priv</name><operator>-&gt;</operator><name>nb_mapped_frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Map D3D11 texture %d to OpenCL.\n"</literal></expr></argument>,
<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <operator>&amp;</operator><name><name>frames_priv</name><operator>-&gt;</operator><name>mapped_frames</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name><name>device_priv</name><operator>-&gt;</operator><name>clEnqueueAcquireD3D11ObjectsKHR</name></name><argument_list>(
<argument><expr><name><name>frames_priv</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>nb_planes</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>planes</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to acquire surface "</literal>
<literal type="string">"handle: %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>opencl_wait_events</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>desc</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_hwframe_map_create</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>opencl_unmap_from_d3d11</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name><name>device_priv</name><operator>-&gt;</operator><name>clEnqueueReleaseD3D11ObjectsKHR</name></name><argument_list>(
<argument><expr><name><name>frames_priv</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>nb_planes</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>planes</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>==</operator> <name>CL_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>opencl_wait_events</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opencl_frames_derive_from_d3d11</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>dst_fc</name></decl></parameter>,
<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>src_fc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVOpenCLDeviceContext</name> <modifier>*</modifier></type><name>dst_dev</name> <init>= <expr><name><name>dst_fc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVD3D11VAFramesContext</name> <modifier>*</modifier></type><name>src_hwctx</name> <init>= <expr><name><name>src_fc</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OpenCLDeviceContext</name> <modifier>*</modifier></type><name>device_priv</name> <init>= <expr><name><name>dst_fc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OpenCLFramesContext</name> <modifier>*</modifier></type><name>frames_priv</name> <init>= <expr><name><name>dst_fc</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_mem_flags</name></type> <name>cl_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>nb_planes</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src_fc</name><operator>-&gt;</operator><name>sw_format</name></name> <operator>!=</operator> <name>AV_PIX_FMT_NV12</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Only NV12 textures are supported "</literal>
<literal type="string">"for D3D11 to OpenCL mapping.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nb_planes</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src_fc</name><operator>-&gt;</operator><name>initial_pool_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Only fixed-size pools are supported "</literal>
<literal type="string">"for D3D11 to OpenCL mapping.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cl_flags</name> <operator>=</operator> <call><name>opencl_mem_flags_for_mapping</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cl_flags</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>frames_priv</name><operator>-&gt;</operator><name>nb_mapped_frames</name></name> <operator>=</operator> <name><name>src_fc</name><operator>-&gt;</operator><name>initial_pool_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frames_priv</name><operator>-&gt;</operator><name>mapped_frames</name></name> <operator>=</operator>
<call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>frames_priv</name><operator>-&gt;</operator><name>nb_mapped_frames</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>frames_priv</name><operator>-&gt;</operator><name>mapped_frames</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frames_priv</name><operator>-&gt;</operator><name>mapped_frames</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>frames_priv</name><operator>-&gt;</operator><name>nb_mapped_frames</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AVOpenCLFrameDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><operator>&amp;</operator><name><name>frames_priv</name><operator>-&gt;</operator><name>mapped_frames</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>=</operator> <name>nb_planes</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>nb_planes</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>UINT</name></type> <name>subresource</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <name>p</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator>
<call><name><name>device_priv</name><operator>-&gt;</operator><name>clCreateFromD3D11Texture2DKHR</name></name><argument_list>(
<argument><expr><name><name>dst_dev</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>cl_flags</name></expr></argument>, <argument><expr><name><name>src_hwctx</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>,
<argument><expr><name>subresource</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>desc</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create CL "</literal>
<literal type="string">"image from plane %d of D3D texture "</literal>
<literal type="string">"index %d (subresource %u): %d.\n"</literal></expr></argument>,
<argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>subresource</name></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>frames_priv</name><operator>-&gt;</operator><name>nb_mapped_frames</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AVOpenCLFrameDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><operator>&amp;</operator><name><name>frames_priv</name><operator>-&gt;</operator><name>mapped_frames</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clReleaseMemObject</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frames_priv</name><operator>-&gt;</operator><name>mapped_frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frames_priv</name><operator>-&gt;</operator><name>nb_mapped_frames</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_DRM_ARM</name></expr></cpp:if>

<typedef>typedef <type><struct>struct <name>DRMARMtoOpenCLMapping</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>nb_objects</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_mem</name></type> <name><name>object_buffers</name><index>[<expr><name>AV_DRM_MAX_PLANES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_planes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_mem</name></type> <name><name>plane_images</name><index>[<expr><name>AV_DRM_MAX_PLANES</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>DRMARMtoOpenCLMapping</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>opencl_unmap_from_drm_arm</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>dst_fc</name></decl></parameter>,
<parameter><decl><type><name>HWMapDescriptor</name> <modifier>*</modifier></type><name>hwmap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DRMARMtoOpenCLMapping</name> <modifier>*</modifier></type><name>mapping</name> <init>= <expr><name><name>hwmap</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mapping</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clReleaseMemObject</name><argument_list>(<argument><expr><name><name>mapping</name><operator>-&gt;</operator><name>plane_images</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mapping</name><operator>-&gt;</operator><name>nb_objects</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clReleaseMemObject</name><argument_list>(<argument><expr><name><name>mapping</name><operator>-&gt;</operator><name>object_buffers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>mapping</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opencl_map_from_drm_arm</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>dst_fc</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>src_fc</name> <init>=
<expr><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVOpenCLDeviceContext</name> <modifier>*</modifier></type><name>dst_dev</name> <init>= <expr><name><name>dst_fc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVDRMFrameDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DRMARMtoOpenCLMapping</name> <modifier>*</modifier></type><name>mapping</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_mem_flags</name></type> <name>cl_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>cl_import_properties_arm</name></type> <name><name>props</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name>CL_IMPORT_TYPE_ARM</name></expr>, <expr><name>CL_IMPORT_TYPE_DMA_BUF_ARM</name></expr>, <expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>AVDRMFrameDescriptor</name><operator>*</operator><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cl_flags</name> <operator>=</operator> <call><name>opencl_mem_flags_for_mapping</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cl_flags</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mapping</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>mapping</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mapping</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>mapping</name><operator>-&gt;</operator><name>nb_objects</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_objects</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_objects</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Map DRM PRIME fd %d to OpenCL.\n"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>format_modifier</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Warning: object %d fd %d has "</literal>
<literal type="string">"nonzero format modifier %"</literal><name>PRId64</name><literal type="string">", result may not "</literal>
<literal type="string">"be as expected.\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>,
<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>format_modifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mapping</name><operator>-&gt;</operator><name>object_buffers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
<call><name>clImportMemoryARM</name><argument_list>(<argument><expr><name><name>dst_dev</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>cl_flags</name></expr></argument>, <argument><expr><name>props</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>fd</name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mapping</name><operator>-&gt;</operator><name>object_buffers</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create CL buffer "</literal>
<literal type="string">"from object %d (fd %d, size %"</literal><name>SIZE_SPECIFIER</name><literal type="string">") of DRM frame: %d.\n"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>mapping</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_layers</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVDRMLayerDescriptor</name> <modifier>*</modifier></type><name>layer</name> <init>= <expr><operator>&amp;</operator><name><name>desc</name><operator>-&gt;</operator><name>layers</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>layer</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVDRMPlaneDescriptor</name> <modifier>*</modifier></type><name>plane</name> <init>= <expr><operator>&amp;</operator><name><name>layer</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_mem</name></type> <name>plane_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_image_format</name></type> <name>image_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_image_desc</name></type> <name>image_desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_buffer_region</name></type> <name>region</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><name><name>mapping</name><operator>-&gt;</operator><name>nb_planes</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>opencl_get_plane_format</name><argument_list>(<argument><expr><name><name>src_fc</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>,
<argument><expr><name><name>src_fc</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>src_fc</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>image_format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>image_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid plane %d (DRM "</literal>
<literal type="string">"layer %d plane %d): %d.\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>region</name><operator>.</operator><name>origin</name></name> <operator>=</operator> <name><name>plane</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>region</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>image_desc</name><operator>.</operator><name>image_row_pitch</name></name> <operator>*</operator>
<name><name>image_desc</name><operator>.</operator><name>image_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>plane_buffer</name> <operator>=</operator>
<call><name>clCreateSubBuffer</name><argument_list>(<argument><expr><name><name>mapping</name><operator>-&gt;</operator><name>object_buffers</name><index>[<expr><name><name>plane</name><operator>-&gt;</operator><name>object_index</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name>cl_flags</name></expr></argument>,
<argument><expr><name>CL_BUFFER_CREATE_TYPE_REGION</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>region</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>plane_buffer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create sub-buffer "</literal>
<literal type="string">"for plane %d: %d.\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>image_desc</name><operator>.</operator><name>buffer</name></name> <operator>=</operator> <name>plane_buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mapping</name><operator>-&gt;</operator><name>plane_images</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator>
<call><name>clCreateImage</name><argument_list>(<argument><expr><name><name>dst_dev</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>cl_flags</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>image_format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>image_desc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>clReleaseMemObject</name><argument_list>(<argument><expr><name>plane_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mapping</name><operator>-&gt;</operator><name>plane_images</name><index>[<expr><name>p</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create image "</literal>
<literal type="string">"for plane %d: %d.\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name><name>mapping</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mapping</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>mapping</name><operator>-&gt;</operator><name>plane_images</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_hwframe_map_create</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>opencl_unmap_from_drm_arm</name></expr></argument>, <argument><expr><name>mapping</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mapping</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>clReleaseMemObject</name><argument_list>(<argument><expr><name><name>mapping</name><operator>-&gt;</operator><name>plane_images</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mapping</name><operator>-&gt;</operator><name>nb_objects</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mapping</name><operator>-&gt;</operator><name>object_buffers</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clReleaseMemObject</name><argument_list>(<argument><expr><name><name>mapping</name><operator>-&gt;</operator><name>object_buffers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>mapping</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opencl_map_from</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_OPENCL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hwfc</name><operator>-&gt;</operator><name>sw_format</name></name> <operator>!=</operator> <name><name>dst</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>opencl_map_frame</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opencl_map_to</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>av_unused</name> <name>OpenCLDeviceContext</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_OPENCL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_DRM_BEIGNET</name></expr></cpp:if>
<case>case <expr><name>AV_PIX_FMT_DRM_PRIME</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>beignet_drm_mapping_usable</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>opencl_map_from_drm_beignet</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_VAAPI_BEIGNET</name></expr></cpp:if>
<case>case <expr><name>AV_PIX_FMT_VAAPI</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>beignet_drm_mapping_usable</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>opencl_map_from_vaapi</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_VAAPI_INTEL_MEDIA</name></expr></cpp:if>
<case>case <expr><name>AV_PIX_FMT_QSV</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_VAAPI</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>qsv_mapping_usable</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>opencl_map_from_qsv</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_DXVA2</name></expr></cpp:if>
<case>case <expr><name>AV_PIX_FMT_DXVA2_VLD</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>dxva2_mapping_usable</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>opencl_map_from_dxva2</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_D3D11</name></expr></cpp:if>
<case>case <expr><name>AV_PIX_FMT_D3D11</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>d3d11_mapping_usable</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>opencl_map_from_d3d11</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_DRM_ARM</name></expr></cpp:if>
<case>case <expr><name>AV_PIX_FMT_DRM_PRIME</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>drm_arm_mapping_usable</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>opencl_map_from_drm_arm</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></switch>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opencl_frames_derive_to</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>dst_fc</name></decl></parameter>,
<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>src_fc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>av_unused</name> <name>OpenCLDeviceContext</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>dst_fc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>src_fc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_DRM_BEIGNET</name></expr></cpp:if>
<case>case <expr><name>AV_HWDEVICE_TYPE_DRM</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>beignet_drm_mapping_usable</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_VAAPI_BEIGNET</name></expr></cpp:if>
<case>case <expr><name>AV_HWDEVICE_TYPE_VAAPI</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>beignet_drm_mapping_usable</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_VAAPI_INTEL_MEDIA</name></expr></cpp:if>
<case>case <expr><name>AV_HWDEVICE_TYPE_QSV</name></expr>:</case>
<case>case <expr><name>AV_HWDEVICE_TYPE_VAAPI</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>qsv_mapping_usable</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_DXVA2</name></expr></cpp:if>
<case>case <expr><name>AV_HWDEVICE_TYPE_DXVA2</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>dxva2_mapping_usable</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>opencl_frames_derive_from_dxva2</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><name>src_fc</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_D3D11</name></expr></cpp:if>
<case>case <expr><name>AV_HWDEVICE_TYPE_D3D11VA</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>d3d11_mapping_usable</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>opencl_frames_derive_from_d3d11</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><name>src_fc</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCL_DRM_ARM</name></expr></cpp:if>
<case>case <expr><name>AV_HWDEVICE_TYPE_DRM</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>drm_arm_mapping_usable</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>opencl_frames_init_command_queue</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>HWContextType</name></type> <name>ff_hwcontext_type_opencl</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AV_HWDEVICE_TYPE_OPENCL</name></expr>,
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"OpenCL"</literal></expr>,

<expr><operator>.</operator><name>device_hwctx_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AVOpenCLDeviceContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>device_priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OpenCLDeviceContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>frames_hwctx_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AVOpenCLFramesContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>frames_priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OpenCLFramesContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>device_create</name> <operator>=</operator> <operator>&amp;</operator><name>opencl_device_create</name></expr>,
<expr><operator>.</operator><name>device_derive</name> <operator>=</operator> <operator>&amp;</operator><name>opencl_device_derive</name></expr>,
<expr><operator>.</operator><name>device_init</name> <operator>=</operator> <operator>&amp;</operator><name>opencl_device_init</name></expr>,
<expr><operator>.</operator><name>device_uninit</name> <operator>=</operator> <operator>&amp;</operator><name>opencl_device_uninit</name></expr>,

<expr><operator>.</operator><name>frames_get_constraints</name> <operator>=</operator> <operator>&amp;</operator><name>opencl_frames_get_constraints</name></expr>,
<expr><operator>.</operator><name>frames_init</name> <operator>=</operator> <operator>&amp;</operator><name>opencl_frames_init</name></expr>,
<expr><operator>.</operator><name>frames_uninit</name> <operator>=</operator> <operator>&amp;</operator><name>opencl_frames_uninit</name></expr>,
<expr><operator>.</operator><name>frames_get_buffer</name> <operator>=</operator> <operator>&amp;</operator><name>opencl_get_buffer</name></expr>,

<expr><operator>.</operator><name>transfer_get_formats</name> <operator>=</operator> <operator>&amp;</operator><name>opencl_transfer_get_formats</name></expr>,
<expr><operator>.</operator><name>transfer_data_to</name> <operator>=</operator> <operator>&amp;</operator><name>opencl_transfer_data_to</name></expr>,
<expr><operator>.</operator><name>transfer_data_from</name> <operator>=</operator> <operator>&amp;</operator><name>opencl_transfer_data_from</name></expr>,

<expr><operator>.</operator><name>map_from</name> <operator>=</operator> <operator>&amp;</operator><name>opencl_map_from</name></expr>,
<expr><operator>.</operator><name>map_to</name> <operator>=</operator> <operator>&amp;</operator><name>opencl_map_to</name></expr>,
<expr><operator>.</operator><name>frames_derive_to</name> <operator>=</operator> <operator>&amp;</operator><name>opencl_frames_derive_to</name></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator> <block>{
<expr><name>AV_PIX_FMT_OPENCL</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
