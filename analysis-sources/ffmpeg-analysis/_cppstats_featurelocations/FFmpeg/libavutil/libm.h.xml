<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\libm.h">























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVUTIL_LIBM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVUTIL_LIBM_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"intfloat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathematics.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MIPSFPU</name> <operator>&amp;&amp;</operator> <name>HAVE_INLINE_ASM</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mips/libm_mips.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_ATANF</name></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>atanf</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atanf</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((float)atan(x))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_ATAN2F</name></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>atan2f</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atan2f</name><parameter_list>(<parameter><type><name>y</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((float)atan2(y, x))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_POWF</name></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>powf</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>powf</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((float)pow(x, y))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_CBRT</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>double</name></type> <name>cbrt</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><call><name>pow</name><argument_list>(<argument><expr><operator>-</operator><name>x</name></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">3.0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>pow</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">3.0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_CBRTF</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>float</name></type> <name>cbrtf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><call><name>powf</name><argument_list>(<argument><expr><operator>-</operator><name>x</name></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">3.0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>powf</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">3.0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_COPYSIGN</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>double</name></type> <name>copysign</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>vx</name> <init>= <expr><call><name>av_double2int</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>vy</name> <init>= <expr><call><name>av_double2int</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>av_int2double</name><argument_list>(<argument><expr><operator>(</operator><name>vx</name> <operator>&amp;</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x7fffffffffffffff</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>|</operator> <operator>(</operator><name>vy</name> <operator>&amp;</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x8000000000000000</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_COSF</name></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>cosf</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cosf</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((float)cos(x))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_ERF</name></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type> <name>ff_eval_poly</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>coeff</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>sum</name> <init>= <expr><name><name>coeff</name><index>[<expr><name>size</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>size</name><operator>-</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>sum</name> <operator>*=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>coeff</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>sum</name></expr>;</return>
</block_content>}</block></function>






























<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type> <name>erf</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FF_ARRAY_ELEMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_ARRAY_ELEMS</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof(a) / sizeof((a)[0]))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>double</name></type> <name>result</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>z</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><call><name>erf</name><argument_list>(<argument><expr><operator>-</operator><name>z</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>z</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>z</name> <operator>&lt;</operator> <literal type="number">1e-10</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>z</name> <operator>*</operator> <literal type="number">1.125</literal> <operator>+</operator> <name>z</name> <operator>*</operator> <literal type="number">0.003379167095512573896158903121545171688</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>z</name> <operator>&lt;</operator> <literal type="number">0.5</literal></expr>)</condition> <block>{<block_content>





<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name>y</name> <init>= <expr><literal type="number">1.044948577880859375</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>p</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0.0834305892146531832907</literal></expr>,
<expr><operator>-</operator><literal type="number">0.338165134459360935041</literal></expr>,
<expr><operator>-</operator><literal type="number">0.0509990735146777432841</literal></expr>,
<expr><operator>-</operator><literal type="number">0.00772758345802133288487</literal></expr>,
<expr><operator>-</operator><literal type="number">0.000322780120964605683831</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>q</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">0.455004033050794024546</literal></expr>,
<expr><literal type="number">0.0875222600142252549554</literal></expr>,
<expr><literal type="number">0.00858571925074406212772</literal></expr>,
<expr><literal type="number">0.000370900071787748000569</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>zz</name> <init>= <expr><name>z</name> <operator>*</operator> <name>z</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name>z</name> <operator>*</operator> <operator>(</operator><name>y</name> <operator>+</operator> <call><name>ff_eval_poly</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zz</name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>ff_eval_poly</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zz</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>z</name> <operator>&lt;</operator> <literal type="number">1.5</literal></expr>)</condition> <block>{<block_content>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name>y</name> <init>= <expr><literal type="number">0.405935764312744140625</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>p</name><index>[]</index></name> <init>= <expr><block>{
<expr><operator>-</operator><literal type="number">0.098090592216281240205</literal></expr>,
<expr><literal type="number">0.178114665841120341155</literal></expr>,
<expr><literal type="number">0.191003695796775433986</literal></expr>,
<expr><literal type="number">0.0888900368967884466578</literal></expr>,
<expr><literal type="number">0.0195049001251218801359</literal></expr>,
<expr><literal type="number">0.00180424538297014223957</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>q</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1.84759070983002217845</literal></expr>,
<expr><literal type="number">1.42628004845511324508</literal></expr>,
<expr><literal type="number">0.578052804889902404909</literal></expr>,
<expr><literal type="number">0.12385097467900864233</literal></expr>,
<expr><literal type="number">0.0113385233577001411017</literal></expr>,
<expr><literal type="number">0.337511472483094676155e-5</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>y</name> <operator>+</operator> <call><name>ff_eval_poly</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>z</name> <operator>-</operator> <literal type="number">0.5</literal></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>ff_eval_poly</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>z</name> <operator>-</operator> <literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>*=</operator> <call><name>exp</name><argument_list>(<argument><expr><operator>-</operator><name>z</name> <operator>*</operator> <name>z</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>z</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal> <operator>-</operator> <name>result</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>z</name> <operator>&lt;</operator> <literal type="number">2.5</literal></expr>)</condition> <block>{<block_content>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name>y</name> <init>= <expr><literal type="number">0.50672817230224609375</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>p</name><index>[]</index></name> <init>= <expr><block>{
<expr><operator>-</operator><literal type="number">0.0243500476207698441272</literal></expr>,
<expr><literal type="number">0.0386540375035707201728</literal></expr>,
<expr><literal type="number">0.04394818964209516296</literal></expr>,
<expr><literal type="number">0.0175679436311802092299</literal></expr>,
<expr><literal type="number">0.00323962406290842133584</literal></expr>,
<expr><literal type="number">0.000235839115596880717416</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>q</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1.53991494948552447182</literal></expr>,
<expr><literal type="number">0.982403709157920235114</literal></expr>,
<expr><literal type="number">0.325732924782444448493</literal></expr>,
<expr><literal type="number">0.0563921837420478160373</literal></expr>,
<expr><literal type="number">0.00410369723978904575884</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>y</name> <operator>+</operator> <call><name>ff_eval_poly</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>z</name> <operator>-</operator> <literal type="number">1.5</literal></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>ff_eval_poly</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>z</name> <operator>-</operator> <literal type="number">1.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>*=</operator> <call><name>exp</name><argument_list>(<argument><expr><operator>-</operator><name>z</name> <operator>*</operator> <name>z</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>z</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal> <operator>-</operator> <name>result</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>z</name> <operator>&lt;</operator> <literal type="number">4.5</literal></expr>)</condition> <block>{<block_content>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name>y</name> <init>= <expr><literal type="number">0.5405750274658203125</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>p</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0.00295276716530971662634</literal></expr>,
<expr><literal type="number">0.0137384425896355332126</literal></expr>,
<expr><literal type="number">0.00840807615555585383007</literal></expr>,
<expr><literal type="number">0.00212825620914618649141</literal></expr>,
<expr><literal type="number">0.000250269961544794627958</literal></expr>,
<expr><literal type="number">0.113212406648847561139e-4</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>q</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1.04217814166938418171</literal></expr>,
<expr><literal type="number">0.442597659481563127003</literal></expr>,
<expr><literal type="number">0.0958492726301061423444</literal></expr>,
<expr><literal type="number">0.0105982906484876531489</literal></expr>,
<expr><literal type="number">0.000479411269521714493907</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>y</name> <operator>+</operator> <call><name>ff_eval_poly</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>z</name> <operator>-</operator> <literal type="number">3.5</literal></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>ff_eval_poly</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>z</name> <operator>-</operator> <literal type="number">3.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>*=</operator> <call><name>exp</name><argument_list>(<argument><expr><operator>-</operator><name>z</name> <operator>*</operator> <name>z</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>z</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal> <operator>-</operator> <name>result</name></expr>;</return>
</block_content>}</block></if>



<if type="elseif">else if <condition>(<expr><name>z</name> <operator>&lt;</operator> <literal type="number">5.92</literal></expr>)</condition> <block>{<block_content>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name>y</name> <init>= <expr><literal type="number">0.5579090118408203125</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>p</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0.00628057170626964891937</literal></expr>,
<expr><literal type="number">0.0175389834052493308818</literal></expr>,
<expr><operator>-</operator><literal type="number">0.212652252872804219852</literal></expr>,
<expr><operator>-</operator><literal type="number">0.687717681153649930619</literal></expr>,
<expr><operator>-</operator><literal type="number">2.5518551727311523996</literal></expr>,
<expr><operator>-</operator><literal type="number">3.22729451764143718517</literal></expr>,
<expr><operator>-</operator><literal type="number">2.8175401114513378771</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>q</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">2.79257750980575282228</literal></expr>,
<expr><literal type="number">11.0567237927800161565</literal></expr>,
<expr><literal type="number">15.930646027911794143</literal></expr>,
<expr><literal type="number">22.9367376522880577224</literal></expr>,
<expr><literal type="number">13.5064170191802889145</literal></expr>,
<expr><literal type="number">5.48409182238641741584</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>y</name> <operator>+</operator> <call><name>ff_eval_poly</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>/</operator> <name>z</name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>ff_eval_poly</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>/</operator> <name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>*=</operator> <call><name>exp</name><argument_list>(<argument><expr><operator>-</operator><name>z</name> <operator>*</operator> <name>z</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>z</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal> <operator>-</operator> <name>result</name></expr>;</return>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>z</name> <operator>!=</operator> <name>z</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>z</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_EXPF</name></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>expf</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>expf</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((float)exp(x))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_EXP2</name></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>exp2</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>exp2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>exp((x) * M_LN2)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_EXP2F</name></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>exp2f</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>exp2f</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((float)exp2(x))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_ISINF</name></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>isinf</name></cpp:undef>



<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>int</name></type> <name>avpriv_isinff</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>v</name> <init>= <expr><call><name>av_float2int</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>v</name> <operator>&amp;</operator> <literal type="number">0x7f800000</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x7f800000</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>!</operator><operator>(</operator><name>v</name> <operator>&amp;</operator> <literal type="number">0x007fffff</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>int</name></type> <name>avpriv_isinf</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>v</name> <init>= <expr><call><name>av_double2int</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>v</name> <operator>&amp;</operator> <literal type="number">0x7ff0000000000000</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x7ff0000000000000</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>!</operator><operator>(</operator><name>v</name> <operator>&amp;</operator> <literal type="number">0x000fffffffffffff</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isinf</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof(x) == sizeof(float) ? avpriv_isinff(x) : avpriv_isinf(x))</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_ISNAN</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>int</name></type> <name>avpriv_isnanf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>v</name> <init>= <expr><call><name>av_float2int</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>v</name> <operator>&amp;</operator> <literal type="number">0x7f800000</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x7f800000</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>v</name> <operator>&amp;</operator> <literal type="number">0x007fffff</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>int</name></type> <name>avpriv_isnan</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>v</name> <init>= <expr><call><name>av_double2int</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>v</name> <operator>&amp;</operator> <literal type="number">0x7ff0000000000000</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x7ff0000000000000</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>v</name> <operator>&amp;</operator> <literal type="number">0x000fffffffffffff</literal><operator>)</operator> <operator>&amp;&amp;</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isnan</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof(x) == sizeof(float) ? avpriv_isnanf(x) : avpriv_isnan(x))</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_ISFINITE</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>int</name></type> <name>avpriv_isfinitef</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>v</name> <init>= <expr><call><name>av_float2int</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>v</name> <operator>&amp;</operator> <literal type="number">0x7f800000</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x7f800000</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>int</name></type> <name>avpriv_isfinite</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>v</name> <init>= <expr><call><name>av_double2int</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>v</name> <operator>&amp;</operator> <literal type="number">0x7ff0000000000000</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x7ff0000000000000</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isfinite</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof(x) == sizeof(float) ? avpriv_isfinitef(x) : avpriv_isfinite(x))</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_HYPOT</name></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>av_const</name> <name>double</name></type> <name>hypot</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>temp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isinf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isinf</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>av_int2double</name><argument_list>(<argument><expr><literal type="number">0x7ff0000000000000</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>y</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>x</name> <operator>+</operator> <name>y</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>y</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name>y</name><operator>/</operator><name>x</name></expr>;</expr_stmt>
<return>return <expr><name>x</name><operator>*</operator><call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <name>y</name><operator>*</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_LDEXPF</name></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ldexpf</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ldexpf</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>exp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((float)ldexp(x, exp))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_LLRINT</name></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>llrint</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>llrint</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((long long)rint(x))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_LLRINTF</name></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>llrintf</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>llrintf</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((long long)rint(x))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_LOG2</name></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>log2</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>log2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(log(x) * 1.44269504088896340736)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_LOG2F</name></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>log2f</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>log2f</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((float)log2(x))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_LOG10F</name></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>log10f</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>log10f</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((float)log10(x))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_SINF</name></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>sinf</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sinf</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((float)sin(x))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_RINT</name></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type> <name>rint</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>floor</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>ceil</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_LRINT</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>long</name> <name>int</name></type> <name>lrint</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rint</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_LRINTF</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>long</name> <name>int</name></type> <name>lrintf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>rint</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_ROUND</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>double</name></type> <name>round</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>x</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>floor</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>ceil</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_ROUNDF</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>float</name></type> <name>roundf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>x</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>floor</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>ceil</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_TRUNC</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>double</name></type> <name>trunc</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>x</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>floor</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>ceil</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_TRUNCF</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>float</name></type> <name>truncf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>x</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>floor</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>ceil</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
