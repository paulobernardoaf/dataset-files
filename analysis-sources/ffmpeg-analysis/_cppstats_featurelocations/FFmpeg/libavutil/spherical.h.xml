<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\spherical.h">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVUTIL_SPHERICAL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVUTIL_SPHERICAL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>




















<enum>enum <name>AVSphericalProjection</name> <block>{




<decl><name>AV_SPHERICAL_EQUIRECTANGULAR</name></decl>,








<decl><name>AV_SPHERICAL_CUBEMAP</name></decl>,






<decl><name>AV_SPHERICAL_EQUIRECTANGULAR_TILE</name></decl>,
}</block>;</enum>








<typedef>typedef <type><struct>struct <name>AVSphericalMapping</name> <block>{



<decl_stmt><decl><type><name><name>enum</name> <name>AVSphericalProjection</name></name></type> <name>projection</name></decl>;</decl_stmt>







































<decl_stmt><decl><type><name>int32_t</name></type> <name>yaw</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int32_t</name></type> <name>pitch</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int32_t</name></type> <name>roll</name></decl>;</decl_stmt> 






































<decl_stmt><decl><type><name>uint32_t</name></type> <name>bound_left</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bound_top</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bound_right</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>bound_bottom</name></decl>;</decl_stmt> 











<decl_stmt><decl><type><name>uint32_t</name></type> <name>padding</name></decl>;</decl_stmt>
}</block></struct></type> <name>AVSphericalMapping</name>;</typedef>







<function_decl><type><name>AVSphericalMapping</name> <modifier>*</modifier></type><name>av_spherical_alloc</name><parameter_list>(<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>void</name></type> <name>av_spherical_tile_bounds</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVSphericalMapping</name> <modifier>*</modifier></type><name>map</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>right</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>bottom</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>av_spherical_projection_name</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVSphericalProjection</name></name></type> <name>projection</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>int</name></type> <name>av_spherical_from_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>





<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
