<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\error.c">

















<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_GNU_SOURCE</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_XOPEN_SOURCE</name></cpp:macro> <cpp:value>600</cpp:value></cpp:define> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avutil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<struct>struct <name>error_entry</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_TAG</name><parameter_list>(<parameter><type><name>tag</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AVERROR_##tag, #tag</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EERROR_TAG</name><parameter_list>(<parameter><type><name>tag</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AVERROR(tag), #tag</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVERROR_INPUT_AND_OUTPUT_CHANGED</name></cpp:macro> <cpp:value>(AVERROR_INPUT_CHANGED | AVERROR_OUTPUT_CHANGED)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>error_entry</name></name></type> <name><name>error_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><call><name>ERROR_TAG</name><argument_list>(<argument><expr><name>BSF_NOT_FOUND</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Bitstream filter not found"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>ERROR_TAG</name><argument_list>(<argument><expr><name>BUG</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Internal bug, should not have happened"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>ERROR_TAG</name><argument_list>(<argument><expr><name>BUG2</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Internal bug, should not have happened"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>ERROR_TAG</name><argument_list>(<argument><expr><name>BUFFER_TOO_SMALL</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Buffer too small"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>ERROR_TAG</name><argument_list>(<argument><expr><name>DECODER_NOT_FOUND</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Decoder not found"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>ERROR_TAG</name><argument_list>(<argument><expr><name>DEMUXER_NOT_FOUND</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Demuxer not found"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>ERROR_TAG</name><argument_list>(<argument><expr><name>ENCODER_NOT_FOUND</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Encoder not found"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>ERROR_TAG</name><argument_list>(<argument><expr><name>EOF</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"End of file"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>ERROR_TAG</name><argument_list>(<argument><expr><name>EXIT</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Immediate exit requested"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>ERROR_TAG</name><argument_list>(<argument><expr><name>EXTERNAL</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Generic error in an external library"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>ERROR_TAG</name><argument_list>(<argument><expr><name>FILTER_NOT_FOUND</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Filter not found"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>ERROR_TAG</name><argument_list>(<argument><expr><name>INPUT_CHANGED</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Input changed"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>ERROR_TAG</name><argument_list>(<argument><expr><name>INVALIDDATA</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Invalid data found when processing input"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>ERROR_TAG</name><argument_list>(<argument><expr><name>MUXER_NOT_FOUND</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Muxer not found"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>ERROR_TAG</name><argument_list>(<argument><expr><name>OPTION_NOT_FOUND</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Option not found"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>ERROR_TAG</name><argument_list>(<argument><expr><name>OUTPUT_CHANGED</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Output changed"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>ERROR_TAG</name><argument_list>(<argument><expr><name>PATCHWELCOME</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Not yet implemented in FFmpeg, patches welcome"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>ERROR_TAG</name><argument_list>(<argument><expr><name>PROTOCOL_NOT_FOUND</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Protocol not found"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>ERROR_TAG</name><argument_list>(<argument><expr><name>STREAM_NOT_FOUND</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Stream not found"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>ERROR_TAG</name><argument_list>(<argument><expr><name>UNKNOWN</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Unknown error occurred"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>ERROR_TAG</name><argument_list>(<argument><expr><name>EXPERIMENTAL</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Experimental feature"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>ERROR_TAG</name><argument_list>(<argument><expr><name>INPUT_AND_OUTPUT_CHANGED</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Input and output changed"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>ERROR_TAG</name><argument_list>(<argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Server returned 400 Bad Request"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>ERROR_TAG</name><argument_list>(<argument><expr><name>HTTP_UNAUTHORIZED</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Server returned 401 Unauthorized (authorization failed)"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>ERROR_TAG</name><argument_list>(<argument><expr><name>HTTP_FORBIDDEN</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Server returned 403 Forbidden (access denied)"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>ERROR_TAG</name><argument_list>(<argument><expr><name>HTTP_NOT_FOUND</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Server returned 404 Not Found"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>ERROR_TAG</name><argument_list>(<argument><expr><name>HTTP_OTHER_4XX</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Server returned 4XX Client Error, but not one of 40{0,1,3,4}"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>ERROR_TAG</name><argument_list>(<argument><expr><name>HTTP_SERVER_ERROR</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Server returned 5XX Server Error reply"</literal></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_STRERROR_R</name></expr></cpp:if>
<expr><block>{ <expr><call><name>EERROR_TAG</name><argument_list>(<argument><expr><name>E2BIG</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Argument list too long"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>EERROR_TAG</name><argument_list>(<argument><expr><name>EACCES</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Permission denied"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>EERROR_TAG</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Resource temporarily unavailable"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>EERROR_TAG</name><argument_list>(<argument><expr><name>EBADF</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Bad file descriptor"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>EERROR_TAG</name><argument_list>(<argument><expr><name>EBUSY</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Device or resource busy"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>EERROR_TAG</name><argument_list>(<argument><expr><name>ECHILD</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"No child processes"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>EERROR_TAG</name><argument_list>(<argument><expr><name>EDEADLK</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Resource deadlock avoided"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>EERROR_TAG</name><argument_list>(<argument><expr><name>EDOM</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Numerical argument out of domain"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>EERROR_TAG</name><argument_list>(<argument><expr><name>EEXIST</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"File exists"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>EERROR_TAG</name><argument_list>(<argument><expr><name>EFAULT</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Bad address"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>EERROR_TAG</name><argument_list>(<argument><expr><name>EFBIG</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"File too large"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>EERROR_TAG</name><argument_list>(<argument><expr><name>EILSEQ</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Illegal byte sequence"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>EERROR_TAG</name><argument_list>(<argument><expr><name>EINTR</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Interrupted system call"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>EERROR_TAG</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Invalid argument"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>EERROR_TAG</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"I/O error"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>EERROR_TAG</name><argument_list>(<argument><expr><name>EISDIR</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Is a directory"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>EERROR_TAG</name><argument_list>(<argument><expr><name>EMFILE</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Too many open files"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>EERROR_TAG</name><argument_list>(<argument><expr><name>EMLINK</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Too many links"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>EERROR_TAG</name><argument_list>(<argument><expr><name>ENAMETOOLONG</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"File name too long"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>EERROR_TAG</name><argument_list>(<argument><expr><name>ENFILE</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Too many open files in system"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>EERROR_TAG</name><argument_list>(<argument><expr><name>ENODEV</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"No such device"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>EERROR_TAG</name><argument_list>(<argument><expr><name>ENOENT</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"No such file or directory"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>EERROR_TAG</name><argument_list>(<argument><expr><name>ENOEXEC</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Exec format error"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>EERROR_TAG</name><argument_list>(<argument><expr><name>ENOLCK</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"No locks available"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>EERROR_TAG</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Cannot allocate memory"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>EERROR_TAG</name><argument_list>(<argument><expr><name>ENOSPC</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"No space left on device"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>EERROR_TAG</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Function not implemented"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>EERROR_TAG</name><argument_list>(<argument><expr><name>ENOTDIR</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Not a directory"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>EERROR_TAG</name><argument_list>(<argument><expr><name>ENOTEMPTY</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Directory not empty"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>EERROR_TAG</name><argument_list>(<argument><expr><name>ENOTTY</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Inappropriate I/O control operation"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>EERROR_TAG</name><argument_list>(<argument><expr><name>ENXIO</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"No such device or address"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>EERROR_TAG</name><argument_list>(<argument><expr><name>EPERM</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Operation not permitted"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>EERROR_TAG</name><argument_list>(<argument><expr><name>EPIPE</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Broken pipe"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>EERROR_TAG</name><argument_list>(<argument><expr><name>ERANGE</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Result too large"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>EERROR_TAG</name><argument_list>(<argument><expr><name>EROFS</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Read-only file system"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>EERROR_TAG</name><argument_list>(<argument><expr><name>ESPIPE</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Illegal seek"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>EERROR_TAG</name><argument_list>(<argument><expr><name>ESRCH</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"No such process"</literal></expr> }</block></expr>,
<expr><block>{ <expr><call><name>EERROR_TAG</name><argument_list>(<argument><expr><name>EXDEV</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"Cross-device link"</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>av_strerror</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>errnum</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>errbuf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>error_entry</name></name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>error_entries</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errnum</name> <operator>==</operator> <name><name>error_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>&amp;</operator><name><name>error_entries</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>entry</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>errbuf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_STRERROR_R</name></expr></cpp:if>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><call><name>strerror_r</name><argument_list>(<argument><expr><call><name>AVUNERROR</name><argument_list>(<argument><expr><name>errnum</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuf_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuf_size</name></expr></argument>, <argument><expr><literal type="string">"Error number %d occurred"</literal></expr></argument>, <argument><expr><name>errnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
