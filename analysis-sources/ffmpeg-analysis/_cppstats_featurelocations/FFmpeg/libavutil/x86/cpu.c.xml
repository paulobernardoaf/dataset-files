<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\x86\cpu.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/asm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu_internal.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_X86ASM</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cpuid</name><parameter_list>(<parameter><type><name>index</name></type></parameter>, <parameter><type><name>eax</name></type></parameter>, <parameter><type><name>ebx</name></type></parameter>, <parameter><type><name>ecx</name></type></parameter>, <parameter><type><name>edx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ff_cpu_cpuid(index, &amp;eax, &amp;ebx, &amp;ecx, &amp;edx)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xgetbv</name><parameter_list>(<parameter><type><name>index</name></type></parameter>, <parameter><type><name>eax</name></type></parameter>, <parameter><type><name>edx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ff_cpu_xgetbv(index, &amp;eax, &amp;edx)</cpp:value></cpp:define>


<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_INLINE_ASM</name></expr></cpp:elif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cpuid</name><parameter_list>(<parameter><type><name>index</name></type></parameter>, <parameter><type><name>eax</name></type></parameter>, <parameter><type><name>ebx</name></type></parameter>, <parameter><type><name>ecx</name></type></parameter>, <parameter><type><name>edx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__asm__ volatile ( "mov %%"FF_REG_b", %%"FF_REG_S" \n\t" "cpuid \n\t" "xchg %%"FF_REG_b", %%"FF_REG_S : "=a" (eax), "=S" (ebx), "=c" (ecx), "=d" (edx) : "0" (index), "2"(0))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xgetbv</name><parameter_list>(<parameter><type><name>index</name></type></parameter>, <parameter><type><name>eax</name></type></parameter>, <parameter><type><name>edx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__asm__ (".byte 0x0f, 0x01, 0xd0" : "=a"(eax), "=d"(edx) : "c" (index))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_eflags</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__asm__ volatile ("pushfl \n" "pop %0 \n" : "=r"(x))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_eflags</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__asm__ volatile ("push %0 \n" "popfl \n" :: "r"(x))</cpp:value></cpp:define>




<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_64</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cpuid_test</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_X86ASM</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cpuid_test</name></cpp:macro> <cpp:value>ff_cpu_cpuid_test</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_INLINE_ASM</name></expr></cpp:elif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cpuid_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>x86_reg</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>



<expr_stmt><expr><call><name>get_eflags</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_eflags</name><argument_list>(<argument><expr><name>a</name> <operator>^</operator> <literal type="number">0x200000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_eflags</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>a</name> <operator>!=</operator> <name>c</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><name>int</name></type> <name>ff_get_cpu_flags_x86</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>cpuid</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>eax</name></decl>, <decl><type ref="prev"/><name>ebx</name></decl>, <decl><type ref="prev"/><name>ecx</name></decl>, <decl><type ref="prev"/><name>edx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_std_level</name></decl>, <decl><type ref="prev"/><name>max_ext_level</name></decl>, <decl><type ref="prev"/><name>std_caps</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ext_caps</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>family</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>model</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<union>union <block>{ <decl_stmt><decl><type><name>int</name></type> <name><name>i</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name></type> <name><name>c</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt> }</block> <decl><name>vendor</name></decl>;</union>
<decl_stmt><decl><type><name>int</name></type> <name>xcr0_lo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>xcr0_hi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpuid_test</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>cpuid</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>max_std_level</name></expr></argument>, <argument><expr><name><name>vendor</name><operator>.</operator><name>i</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>vendor</name><operator>.</operator><name>i</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>vendor</name><operator>.</operator><name>i</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>max_std_level</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cpuid</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>eax</name></expr></argument>, <argument><expr><name>ebx</name></expr></argument>, <argument><expr><name>ecx</name></expr></argument>, <argument><expr><name>std_caps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>family</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>eax</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>eax</name> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>model</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>eax</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>eax</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>std_caps</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rval</name> <operator>|=</operator> <name>AV_CPU_FLAG_CMOV</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>std_caps</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rval</name> <operator>|=</operator> <name>AV_CPU_FLAG_MMX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>std_caps</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">25</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rval</name> <operator>|=</operator> <name>AV_CPU_FLAG_MMXEXT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SSE</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>std_caps</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">25</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rval</name> <operator>|=</operator> <name>AV_CPU_FLAG_SSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>std_caps</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">26</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rval</name> <operator>|=</operator> <name>AV_CPU_FLAG_SSE2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ecx</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rval</name> <operator>|=</operator> <name>AV_CPU_FLAG_SSE3</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ecx</name> <operator>&amp;</operator> <literal type="number">0x00000200</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rval</name> <operator>|=</operator> <name>AV_CPU_FLAG_SSSE3</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ecx</name> <operator>&amp;</operator> <literal type="number">0x00080000</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rval</name> <operator>|=</operator> <name>AV_CPU_FLAG_SSE4</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ecx</name> <operator>&amp;</operator> <literal type="number">0x00100000</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rval</name> <operator>|=</operator> <name>AV_CPU_FLAG_SSE42</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ecx</name> <operator>&amp;</operator> <literal type="number">0x02000000</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rval</name> <operator>|=</operator> <name>AV_CPU_FLAG_AESNI</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_AVX</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ecx</name> <operator>&amp;</operator> <literal type="number">0x18000000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x18000000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xgetbv</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>xcr0_lo</name></expr></argument>, <argument><expr><name>xcr0_hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>xcr0_lo</name> <operator>&amp;</operator> <literal type="number">0x6</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x6</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rval</name> <operator>|=</operator> <name>AV_CPU_FLAG_AVX</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ecx</name> <operator>&amp;</operator> <literal type="number">0x00001000</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rval</name> <operator>|=</operator> <name>AV_CPU_FLAG_FMA3</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>max_std_level</name> <operator>&gt;=</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cpuid</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>eax</name></expr></argument>, <argument><expr><name>ebx</name></expr></argument>, <argument><expr><name>ecx</name></expr></argument>, <argument><expr><name>edx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_AVX2</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rval</name> <operator>&amp;</operator> <name>AV_CPU_FLAG_AVX</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>ebx</name> <operator>&amp;</operator> <literal type="number">0x00000020</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rval</name> <operator>|=</operator> <name>AV_CPU_FLAG_AVX2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_AVX512</name></expr></cpp:if> 
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>xcr0_lo</name> <operator>&amp;</operator> <literal type="number">0xe0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xe0</literal></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rval</name> <operator>&amp;</operator> <name>AV_CPU_FLAG_AVX2</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>ebx</name> <operator>&amp;</operator> <literal type="number">0xd0030000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xd0030000</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rval</name> <operator>|=</operator> <name>AV_CPU_FLAG_AVX512</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if <condition>(<expr><name>ebx</name> <operator>&amp;</operator> <literal type="number">0x00000008</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rval</name> <operator>|=</operator> <name>AV_CPU_FLAG_BMI1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ebx</name> <operator>&amp;</operator> <literal type="number">0x00000100</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rval</name> <operator>|=</operator> <name>AV_CPU_FLAG_BMI2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cpuid</name><argument_list>(<argument><expr><literal type="number">0x80000000</literal></expr></argument>, <argument><expr><name>max_ext_level</name></expr></argument>, <argument><expr><name>ebx</name></expr></argument>, <argument><expr><name>ecx</name></expr></argument>, <argument><expr><name>edx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>max_ext_level</name> <operator>&gt;=</operator> <literal type="number">0x80000001</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cpuid</name><argument_list>(<argument><expr><literal type="number">0x80000001</literal></expr></argument>, <argument><expr><name>eax</name></expr></argument>, <argument><expr><name>ebx</name></expr></argument>, <argument><expr><name>ecx</name></expr></argument>, <argument><expr><name>ext_caps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ext_caps</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rval</name> <operator>|=</operator> <name>AV_CPU_FLAG_3DNOW</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ext_caps</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rval</name> <operator>|=</operator> <name>AV_CPU_FLAG_3DNOWEXT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ext_caps</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rval</name> <operator>|=</operator> <name>AV_CPU_FLAG_MMX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ext_caps</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">22</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rval</name> <operator>|=</operator> <name>AV_CPU_FLAG_MMXEXT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>vendor</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="string">"AuthenticAMD"</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>







<if_stmt><if>if <condition>(<expr><name>rval</name> <operator>&amp;</operator> <name>AV_CPU_FLAG_SSE2</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>ecx</name> <operator>&amp;</operator> <literal type="number">0x00000040</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rval</name> <operator>|=</operator> <name>AV_CPU_FLAG_SSE2SLOW</name></expr>;</expr_stmt></block_content></block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><operator>(</operator><name>family</name> <operator>==</operator> <literal type="number">0x15</literal> <operator>||</operator> <name>family</name> <operator>==</operator> <literal type="number">0x16</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>rval</name> <operator>&amp;</operator> <name>AV_CPU_FLAG_AVX</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rval</name> <operator>|=</operator> <name>AV_CPU_FLAG_AVXSLOW</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>rval</name> <operator>&amp;</operator> <name>AV_CPU_FLAG_AVX</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ecx</name> <operator>&amp;</operator> <literal type="number">0x00000800</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rval</name> <operator>|=</operator> <name>AV_CPU_FLAG_XOP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ecx</name> <operator>&amp;</operator> <literal type="number">0x00010000</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rval</name> <operator>|=</operator> <name>AV_CPU_FLAG_FMA4</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>vendor</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="string">"GenuineIntel"</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>family</name> <operator>==</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>model</name> <operator>==</operator> <literal type="number">9</literal> <operator>||</operator> <name>model</name> <operator>==</operator> <literal type="number">13</literal> <operator>||</operator> <name>model</name> <operator>==</operator> <literal type="number">14</literal><operator>)</operator></expr>)</condition> <block>{<block_content>







<if_stmt><if>if <condition>(<expr><name>rval</name> <operator>&amp;</operator> <name>AV_CPU_FLAG_SSE2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rval</name> <operator>^=</operator> <name>AV_CPU_FLAG_SSE2SLOW</name> <operator>|</operator> <name>AV_CPU_FLAG_SSE2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rval</name> <operator>&amp;</operator> <name>AV_CPU_FLAG_SSE3</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rval</name> <operator>^=</operator> <name>AV_CPU_FLAG_SSE3SLOW</name> <operator>|</operator> <name>AV_CPU_FLAG_SSE3</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>family</name> <operator>==</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <name>model</name> <operator>==</operator> <literal type="number">28</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rval</name> <operator>|=</operator> <name>AV_CPU_FLAG_ATOM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rval</name> <operator>&amp;</operator> <name>AV_CPU_FLAG_SSSE3</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>rval</name> <operator>&amp;</operator> <name>AV_CPU_FLAG_SSE4</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name>family</name> <operator>==</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <name>model</name> <operator>&lt;</operator> <literal type="number">23</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rval</name> <operator>|=</operator> <name>AV_CPU_FLAG_SSSE3SLOW</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<return>return <expr><name>rval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>ff_get_cpu_max_align_x86</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>AV_CPU_FLAG_AVX512</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">64</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>AV_CPU_FLAG_AVX2</name> <operator>|</operator>
<name>AV_CPU_FLAG_AVX</name> <operator>|</operator>
<name>AV_CPU_FLAG_XOP</name> <operator>|</operator>
<name>AV_CPU_FLAG_FMA4</name> <operator>|</operator>
<name>AV_CPU_FLAG_FMA3</name> <operator>|</operator>
<name>AV_CPU_FLAG_AVXSLOW</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">32</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>AV_CPU_FLAG_AESNI</name> <operator>|</operator>
<name>AV_CPU_FLAG_SSE42</name> <operator>|</operator>
<name>AV_CPU_FLAG_SSE4</name> <operator>|</operator>
<name>AV_CPU_FLAG_SSSE3</name> <operator>|</operator>
<name>AV_CPU_FLAG_SSE3</name> <operator>|</operator>
<name>AV_CPU_FLAG_SSE2</name> <operator>|</operator>
<name>AV_CPU_FLAG_SSE</name> <operator>|</operator>
<name>AV_CPU_FLAG_ATOM</name> <operator>|</operator>
<name>AV_CPU_FLAG_SSSE3SLOW</name> <operator>|</operator>
<name>AV_CPU_FLAG_SSE3SLOW</name> <operator>|</operator>
<name>AV_CPU_FLAG_SSE2SLOW</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">16</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">8</literal></expr>;</return>
</block_content>}</block></function>
</unit>
