<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\lls.h">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVUTIL_LLS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVUTIL_LLS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"macros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_VARS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_VARS_ALIGN</name></cpp:macro> <cpp:value>FFALIGN(MAX_VARS+1,4)</cpp:value></cpp:define>






<typedef>typedef <type><struct>struct <name>LLSModel</name> <block>{
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name><name>covariance</name><index>[<expr><name>MAX_VARS_ALIGN</name></expr>]</index><index>[<expr><name>MAX_VARS_ALIGN</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name><name>coeff</name><index>[<expr><name>MAX_VARS</name></expr>]</index><index>[<expr><name>MAX_VARS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>variance</name><index>[<expr><name>MAX_VARS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>indep_count</name></decl>;</decl_stmt>







<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>update_lls</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>LLSModel</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>double</name></type> (<modifier>*</modifier><name>evaluate_lls</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>LLSModel</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>LLSModel</name>;</typedef>

<function_decl><type><name>void</name></type> <name>avpriv_init_lls</name><parameter_list>(<parameter><decl><type><name>LLSModel</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indep_count</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_init_lls_x86</name><parameter_list>(<parameter><decl><type><name>LLSModel</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>avpriv_solve_lls</name><parameter_list>(<parameter><decl><type><name>LLSModel</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>threshold</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>min_order</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
