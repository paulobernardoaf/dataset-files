<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\tests\random_seed.c">



















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/random_seed.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>printf</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<typedef>typedef <function_decl><type><name>uint32_t</name></type> (<modifier>*</modifier><name>random_seed_ptr_t</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>rsf</name></decl>, <decl><type ref="prev"/><name>retry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>seeds</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>random_seed_ptr_t</name></type> <name><name>random_seed</name><index>[<expr><name>F</name></expr>]</index></name> <init>= <expr><block>{<expr><name>av_get_random_seed</name></expr>, <expr><name>get_generic_seed</name></expr>}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>rsf</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>rsf</name><operator>&lt;</operator><name>F</name></expr>;</condition> <incr><expr><operator>++</operator><name>rsf</name></expr></incr>)</control><block>{<block_content>
<for>for <control>(<init><expr><name>retry</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>retry</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>retry</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name><name>seeds</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>random_seed</name><index>[<expr><name>rsf</name></expr>]</index></name><operator>(</operator><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>seeds</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>seeds</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>retry</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"seeds OK\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<label><name>retry</name>:</label><empty_stmt>;</empty_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>retry</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"rsf %d: FAIL at %d with %"</literal><name>PRIX32</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>rsf</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>seeds</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
