<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\tests\cpu.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_UNISTD_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_GETOPT</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/getopt.c"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
}</block> <decl><name><name>cpu_flag_tab</name><index>[]</index></name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_AARCH64</name></expr></cpp:if>
<expr><block>{ <expr><name>AV_CPU_FLAG_ARMV8</name></expr>, <expr><literal type="string">"armv8"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CPU_FLAG_NEON</name></expr>, <expr><literal type="string">"neon"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CPU_FLAG_VFP</name></expr>, <expr><literal type="string">"vfp"</literal></expr> }</block></expr>,
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCH_ARM</name></expr></cpp:elif>
<expr><block>{ <expr><name>AV_CPU_FLAG_ARMV5TE</name></expr>, <expr><literal type="string">"armv5te"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CPU_FLAG_ARMV6</name></expr>, <expr><literal type="string">"armv6"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CPU_FLAG_ARMV6T2</name></expr>, <expr><literal type="string">"armv6t2"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CPU_FLAG_VFP</name></expr>, <expr><literal type="string">"vfp"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CPU_FLAG_VFP_VM</name></expr>, <expr><literal type="string">"vfp_vm"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CPU_FLAG_VFPV3</name></expr>, <expr><literal type="string">"vfpv3"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CPU_FLAG_NEON</name></expr>, <expr><literal type="string">"neon"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CPU_FLAG_SETEND</name></expr>, <expr><literal type="string">"setend"</literal></expr> }</block></expr>,
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCH_PPC</name></expr></cpp:elif>
<expr><block>{ <expr><name>AV_CPU_FLAG_ALTIVEC</name></expr>, <expr><literal type="string">"altivec"</literal></expr> }</block></expr>,
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCH_X86</name></expr></cpp:elif>
<expr><block>{ <expr><name>AV_CPU_FLAG_MMX</name></expr>, <expr><literal type="string">"mmx"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CPU_FLAG_MMXEXT</name></expr>, <expr><literal type="string">"mmxext"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CPU_FLAG_SSE</name></expr>, <expr><literal type="string">"sse"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CPU_FLAG_SSE2</name></expr>, <expr><literal type="string">"sse2"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CPU_FLAG_SSE2SLOW</name></expr>, <expr><literal type="string">"sse2slow"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CPU_FLAG_SSE3</name></expr>, <expr><literal type="string">"sse3"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CPU_FLAG_SSE3SLOW</name></expr>, <expr><literal type="string">"sse3slow"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CPU_FLAG_SSSE3</name></expr>, <expr><literal type="string">"ssse3"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CPU_FLAG_ATOM</name></expr>, <expr><literal type="string">"atom"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CPU_FLAG_SSE4</name></expr>, <expr><literal type="string">"sse4.1"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CPU_FLAG_SSE42</name></expr>, <expr><literal type="string">"sse4.2"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CPU_FLAG_AVX</name></expr>, <expr><literal type="string">"avx"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CPU_FLAG_AVXSLOW</name></expr>, <expr><literal type="string">"avxslow"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CPU_FLAG_XOP</name></expr>, <expr><literal type="string">"xop"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CPU_FLAG_FMA3</name></expr>, <expr><literal type="string">"fma3"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CPU_FLAG_FMA4</name></expr>, <expr><literal type="string">"fma4"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CPU_FLAG_3DNOW</name></expr>, <expr><literal type="string">"3dnow"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CPU_FLAG_3DNOWEXT</name></expr>, <expr><literal type="string">"3dnowext"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CPU_FLAG_CMOV</name></expr>, <expr><literal type="string">"cmov"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CPU_FLAG_AVX2</name></expr>, <expr><literal type="string">"avx2"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CPU_FLAG_BMI1</name></expr>, <expr><literal type="string">"bmi1"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CPU_FLAG_BMI2</name></expr>, <expr><literal type="string">"bmi2"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CPU_FLAG_AESNI</name></expr>, <expr><literal type="string">"aesni"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CPU_FLAG_AVX512</name></expr>, <expr><literal type="string">"avx512"</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_cpu_flags</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cpu_flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"cpu_flags(%s) = 0x%08X\n"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"cpu_flags_str(%s) ="</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>cpu_flag_tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flag</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>cpu_flags</name> <operator>&amp;</operator> <name><name>cpu_flag_tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name><name>cpu_flag_tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cpu_flags_raw</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cpu_flags_eff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cpu_count</name> <init>= <expr><call><name>av_cpu_count</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>threads</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><literal type="string">"auto"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>cpu_flag_tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flag</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>tmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_parse_cpu_caps</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name><name>cpu_flag_tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Table missing %s\n"</literal></expr></argument>, <argument><expr><name><name>cpu_flag_tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">4</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>cpu_flags_raw</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"c:t:"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_parse_cpu_caps</name><argument_list>(<argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_force_cpu_flags</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>threads</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>threads</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>threads</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Invalid thread count '%s'\n"</literal></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></switch>
</block_content>}</block></for>

<expr_stmt><expr><name>cpu_flags_eff</name> <operator>=</operator> <call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cpu_flags_eff</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">3</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>print_cpu_flags</name><argument_list>(<argument><expr><name>cpu_flags_raw</name></expr></argument>, <argument><expr><literal type="string">"raw"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_cpu_flags</name><argument_list>(<argument><expr><name>cpu_flags_eff</name></expr></argument>, <argument><expr><literal type="string">"effective"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"threads = %s (cpu_count = %d)\n"</literal></expr></argument>, <argument><expr><name>threads</name></expr></argument>, <argument><expr><name>cpu_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
