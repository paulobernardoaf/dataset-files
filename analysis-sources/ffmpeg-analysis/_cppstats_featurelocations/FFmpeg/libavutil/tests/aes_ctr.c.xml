<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\tests\aes_ctr.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/aes_ctr.h"</cpp:file></cpp:include>

<expr_stmt><expr><specifier>static</specifier> <specifier>const</specifier> <call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>plain</name></expr></argument>)</argument_list></call><index>[]</index> <operator>=</operator> <block>{
<expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0x6d</literal></expr>
}</block></expr>;</expr_stmt>
<expr_stmt><expr><specifier>static</specifier> <call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">11</literal></expr>]</index></expr>;</expr_stmt>

<function><type><name>int</name></type> <name>main</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>AVAESCTR</name></name> <modifier>*</modifier></type><name>ae</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ad</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>iv</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ae</name> <operator>=</operator> <call><name>av_aes_ctr_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ad</name> <operator>=</operator> <call><name>av_aes_ctr_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ae</name> <operator>||</operator> <operator>!</operator><name>ad</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ERROR</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_aes_ctr_init</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name><operator>*</operator><operator>)</operator><literal type="string">"0123456789abcdef"</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ERROR</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_aes_ctr_init</name><argument_list>(<argument><expr><name>ad</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name><operator>*</operator><operator>)</operator><literal type="string">"0123456789abcdef"</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ERROR</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_aes_ctr_set_random_iv</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>iv</name> <operator>=</operator> <call><name>av_aes_ctr_get_iv</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_aes_ctr_set_full_iv</name><argument_list>(<argument><expr><name>ad</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_aes_ctr_crypt</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>plain</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_aes_ctr_crypt</name><argument_list>(<argument><expr><name>ad</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>plain</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"test failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>ERROR</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"test passed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>ERROR</name>:</label>
<expr_stmt><expr><call><name>av_aes_ctr_free</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_aes_ctr_free</name><argument_list>(<argument><expr><name>ad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
