<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\tests\color_utils.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/color_utils.c"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>test_data</name><index>[]</index></name> <init>= <expr><block>{
<expr><operator>-</operator><literal type="number">0.1</literal></expr>, <expr><operator>-</operator><literal type="number">0.018053968510807</literal></expr>, <expr><operator>-</operator><literal type="number">0.01</literal></expr>, <expr><operator>-</operator><literal type="number">0.00449</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">0.00316227760</literal></expr>, <expr><literal type="number">0.005</literal></expr>,
<expr><literal type="number">0.009</literal></expr>, <expr><literal type="number">0.015</literal></expr>, <expr><literal type="number">0.1</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">52.37</literal></expr>, <expr><literal type="number">125.098765</literal></expr>, <expr><literal type="number">1999.11123</literal></expr>, <expr><literal type="number">6945.443</literal></expr>,
<expr><literal type="number">15123.4567</literal></expr>, <expr><literal type="number">19845.88923</literal></expr>, <expr><literal type="number">98678.4231</literal></expr>, <expr><literal type="number">99999.899998</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AVCOL_TRC_NB</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>avpriv_trc_function</name></type> <name>func</name> <init>= <expr><call><name>avpriv_get_trc_function_from_trc</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>test_data</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>func</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>result</name> <init>= <expr><call><name>func</name><argument_list>(<argument><expr><name><name>test_data</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"AVColorTransferCharacteristic=%d calling func(%f) expected=%f\n"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>test_data</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

</block_content>}</block></function>
</unit>
