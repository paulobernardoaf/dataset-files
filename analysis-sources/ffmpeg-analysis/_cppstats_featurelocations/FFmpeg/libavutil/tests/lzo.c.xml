<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\tests\lzo.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lzo/lzo1x.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/lzo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXSZ</name></cpp:macro> <cpp:value>(10*1024*1024)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BENCHMARK_LIBLZO_SAFE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BENCHMARK_LIBLZO_UNSAFE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>comp_level</name> <init>= <expr><ternary><condition><expr><name>argc</name> <operator>&gt;</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>orig</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><name>MAXSZ</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>comp</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>MAXSZ</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>decomp</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><name>MAXSZ</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>s</name> <init>= <expr><call><name>fread</name><argument_list>(<argument><expr><name>orig</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>MAXSZ</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lzo_uint</name></type> <name>clen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name><name>tmp</name><index>[<expr><name>LZO1X_MEM_COMPRESS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>inlen</name></decl>, <decl><type ref="prev"/><name>outlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_log_set_level</name><argument_list>(<argument><expr><name>AV_LOG_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>comp_level</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lzo1x_1_compress</name><argument_list>(<argument><expr><name>orig</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clen</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>comp_level</name> <operator>==</operator> <literal type="number">11</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lzo1x_1_11_compress</name><argument_list>(<argument><expr><name>orig</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clen</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>comp_level</name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lzo1x_1_12_compress</name><argument_list>(<argument><expr><name>orig</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clen</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>comp_level</name> <operator>==</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lzo1x_1_15_compress</name><argument_list>(<argument><expr><name>orig</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clen</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lzo1x_999_compress</name><argument_list>(<argument><expr><name>orig</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clen</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">300</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>START_TIMER</name></type>
<name>inlen</name> <init>= <expr><name>clen</name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>outlen</name> <operator>=</operator> <name>MAXSZ</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BENCHMARK_LIBLZO_SAFE</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>lzo1x_decompress_safe</name><argument_list>(<argument><expr><name>comp</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>, <argument><expr><name>decomp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outlen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>BENCHMARK_LIBLZO_UNSAFE</name></expr></cpp:elif>
<if_stmt><if>if <condition>(<expr><call><name>lzo1x_decompress</name><argument_list>(<argument><expr><name>comp</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>, <argument><expr><name>decomp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outlen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>av_lzo1x_decode</name><argument_list>(<argument><expr><name>decomp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outlen</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inlen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"decompression error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<macro><name>STOP_TIMER</name><argument_list>(<argument><literal type="string">"lzod"</literal></argument>)</argument_list></macro>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>orig</name></expr></argument>, <argument><expr><name>decomp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"decompression incorrect\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"decompression OK\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>decomp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
