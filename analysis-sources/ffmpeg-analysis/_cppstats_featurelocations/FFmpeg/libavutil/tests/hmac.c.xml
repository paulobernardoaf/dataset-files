<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\tests\hmac.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hmac.c"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test</name><parameter_list>(<parameter><decl><type><name>AVHMAC</name> <modifier>*</modifier></type><name>hmac</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>datalen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><name>MAX_HASHLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>out</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>key</name><index>[<expr><name>keylen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keylen</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><index>[<expr><name>datalen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>datalen</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>av_hmac_calc</name><argument_list>(<argument><expr><name>hmac</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>datalen</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>out</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>key1</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>key3</name><index>[<expr><literal type="number">131</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>data3</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVHMAC</name> <modifier>*</modifier></type><name>hmac</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVHMACType</name></name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>key2</name><index>[]</index></name> <init>= <expr><literal type="string">"Jefe"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>data1</name><index>[]</index></name> <init>= <expr><literal type="string">"Hi There"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>data2</name><index>[]</index></name> <init>= <expr><literal type="string">"what do ya want for nothing?"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>data4</name><index>[]</index></name> <init>= <expr><literal type="string">"Test Using Larger Than Block-Size Key - Hash Key First"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>data5</name><index>[]</index></name> <init>= <expr><literal type="string">"Test Using Larger Than Block-Size Key and Larger Than One Block-Size Data"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>data6</name><index>[]</index></name> <init>= <expr><literal type="string">"This is a test using a larger than block-size key and a larger "</literal>
<literal type="string">"than block-size data. The key needs to be hashed before being used"</literal>
<literal type="string">" by the HMAC algorithm."</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>key1</name></expr></argument>, <argument><expr><literal type="number">0x0b</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>key3</name></expr></argument>, <argument><expr><literal type="number">0xaa</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key3</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data3</name></expr></argument>, <argument><expr><literal type="number">0xdd</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data3</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>AV_HMAC_MD5</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>AV_HMAC_SHA1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>hmac</name> <operator>=</operator> <call><name>av_hmac_alloc</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hmac</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>hmac</name></expr></argument>, <argument><expr><name>key1</name></expr></argument>, <argument><expr><name><name>hmac</name><operator>-&gt;</operator><name>hashlen</name></name></expr></argument>, <argument><expr><name>data1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>hmac</name></expr></argument>, <argument><expr><name>key2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>data2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>hmac</name></expr></argument>, <argument><expr><name>key3</name></expr></argument>, <argument><expr><name><name>hmac</name><operator>-&gt;</operator><name>hashlen</name></name></expr></argument>, <argument><expr><name>data3</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data3</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>hmac</name></expr></argument>, <argument><expr><name>key3</name></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><name>data4</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data4</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>hmac</name></expr></argument>, <argument><expr><name>key3</name></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><name>data5</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data5</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_hmac_free</name><argument_list>(<argument><expr><name>hmac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>AV_HMAC_SHA224</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>AV_HMAC_SHA512</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>hmac</name> <operator>=</operator> <call><name>av_hmac_alloc</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hmac</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>hmac</name></expr></argument>, <argument><expr><name>key1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>data1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>hmac</name></expr></argument>, <argument><expr><name>key2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>data2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>hmac</name></expr></argument>, <argument><expr><name>key3</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>data3</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data3</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>hmac</name></expr></argument>, <argument><expr><name>key3</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key3</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>data4</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data4</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>hmac</name></expr></argument>, <argument><expr><name>key3</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key3</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>data6</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data6</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_hmac_free</name><argument_list>(<argument><expr><name>hmac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
