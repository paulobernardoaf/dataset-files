<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\tests\pixelutils.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixelutils.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W1</name></cpp:macro> <cpp:value>320</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H1</name></cpp:macro> <cpp:value>240</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W2</name></cpp:macro> <cpp:value>640</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2</name></cpp:macro> <cpp:value>480</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>run_single_test</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>test</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block1</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block2</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>align</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>out</name></decl>, <decl><type ref="prev"/><name>ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>av_pixelutils_sad_fn</name></type> <name>f_ref</name> <init>= <expr><name><name>sad_c</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>av_pixelutils_sad_fn</name></type> <name>f_out</name> <init>= <expr><call><name>av_pixelutils_get_sad_fn</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>align</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>align</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name>block1</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>block2</name><operator>++</operator></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>block2</name><operator>++</operator></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> <break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>f_out</name><argument_list>(<argument><expr><name>block1</name></expr></argument>, <argument><expr><name>stride1</name></expr></argument>, <argument><expr><name>block2</name></expr></argument>, <argument><expr><name>stride2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ref</name> <operator>=</operator> <call><name>f_ref</name><argument_list>(<argument><expr><name>block1</name></expr></argument>, <argument><expr><name>stride1</name></expr></argument>, <argument><expr><name>block2</name></expr></argument>, <argument><expr><name>stride2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[%s] [%c%c] SAD [%s] %dx%d=%d ref=%d\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>out</name> <operator>==</operator> <name>ref</name></expr> ?</condition><then> <expr><literal type="string">"OK"</literal></expr> </then><else>: <expr><literal type="string">"FAIL"</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>align</name></expr> ?</condition><then> <expr><literal type="char">'A'</literal></expr> </then><else>: <expr><literal type="char">'U'</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>align</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="char">'A'</literal></expr> </then><else>: <expr><literal type="char">'U'</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>test</name></expr></argument>, <argument><expr><literal type="number">1</literal><operator>&lt;&lt;</operator><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal><operator>&lt;&lt;</operator><name>n</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>out</name> <operator>!=</operator> <name>ref</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>run_test</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>test</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>b1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>b2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>a</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>a</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block1</name> <init>= <expr><name>b1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block2</name> <init>= <expr><name>b2</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>a</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name>block1</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>block2</name><operator>++</operator></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>block2</name><operator>++</operator></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> <break>break;</break>
</block_content>}</block></switch>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>sad_c</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>run_single_test</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>, <argument><expr><name>W1</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>, <argument><expr><name>W2</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>align</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf1</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><name>W1</name><operator>*</operator><name>H1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf2</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><name>W2</name><operator>*</operator><name>H2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>state</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf1</name> <operator>||</operator> <operator>!</operator><name>buf2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"malloc failure\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_check_pixfmt_descriptors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RANDOM_INIT</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int k; for (k = 0; k &lt; size; k++) { state = state * 1664525 + 1013904223; buf[k] = state&gt;&gt;24; } } while (0)</cpp:value></cpp:define>








<expr_stmt><expr><call><name>RANDOM_INIT</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>W1</name><operator>*</operator><name>H1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RANDOM_INIT</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><name>W2</name><operator>*</operator><name>H2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>run_test</name><argument_list>(<argument><expr><literal type="string">"random"</literal></expr></argument>, <argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><name>W1</name><operator>*</operator><name>H1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><name>W2</name><operator>*</operator><name>H2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>run_test</name><argument_list>(<argument><expr><literal type="string">"max"</literal></expr></argument>, <argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="number">0x90</literal></expr></argument>, <argument><expr><name>W1</name><operator>*</operator><name>H1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><literal type="number">0x90</literal></expr></argument>, <argument><expr><name>W2</name><operator>*</operator><name>H2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>run_test</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>, <argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>align</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>align</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>align</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size1</name></decl>, <decl><type ref="prev"/><name>size2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size1</name> <operator>=</operator> <name>size2</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>align</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name>size1</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>size2</name><operator>++</operator></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>size2</name><operator>++</operator></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> <break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name>buf1</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>size1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf2</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>size2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf1</name> <operator>||</operator> <operator>!</operator><name>buf2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"malloc failure\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>RANDOM_INIT</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>size1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RANDOM_INIT</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><name>size2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>run_single_test</name><argument_list>(<argument><expr><literal type="string">"small"</literal></expr></argument>, <argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="number">1</literal><operator>&lt;&lt;</operator><name>i</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>, <argument><expr><literal type="number">1</literal><operator>&lt;&lt;</operator><name>i</name></expr></argument>, <argument><expr><name>align</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
