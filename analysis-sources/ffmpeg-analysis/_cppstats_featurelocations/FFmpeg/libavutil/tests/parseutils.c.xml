<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\tests\parseutils.c">

















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/parseutils.c"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/rational.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>randomv</name> <init>= <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'L'</literal></expr></argument>,<argument><expr><literal type="char">'A'</literal></expr></argument>,<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'U'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>av_get_random_seed_deterministic</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>randomv</name> <operator>=</operator> <name>randomv</name> <operator>*</operator> <literal type="number">1664525</literal> <operator>+</operator> <literal type="number">1013904223</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_av_parse_video_rate</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>rates</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"-inf"</literal></expr>,
<expr><literal type="string">"inf"</literal></expr>,
<expr><literal type="string">"nan"</literal></expr>,
<expr><literal type="string">"123/0"</literal></expr>,
<expr><literal type="string">"-123 / 0"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">"/"</literal></expr>,
<expr><literal type="string">" 123 / 321"</literal></expr>,
<expr><literal type="string">"foo/foo"</literal></expr>,
<expr><literal type="string">"foo/1"</literal></expr>,
<expr><literal type="string">"1/foo"</literal></expr>,
<expr><literal type="string">"0/0"</literal></expr>,
<expr><literal type="string">"/0"</literal></expr>,
<expr><literal type="string">"1/"</literal></expr>,
<expr><literal type="string">"1"</literal></expr>,
<expr><literal type="string">"0"</literal></expr>,
<expr><literal type="string">"-123/123"</literal></expr>,
<expr><literal type="string">"-foo"</literal></expr>,
<expr><literal type="string">"123.23"</literal></expr>,
<expr><literal type="string">".23"</literal></expr>,
<expr><literal type="string">"-.23"</literal></expr>,
<expr><literal type="string">"-0.234"</literal></expr>,
<expr><literal type="string">"-0.0000001"</literal></expr>,
<expr><literal type="string">" 21332.2324 "</literal></expr>,
<expr><literal type="string">" -21332.2324 "</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>rates</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVRational</name></type> <name>q</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_parse_video_rate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><name><name>rates</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"'%s' -&gt; %d/%d %s\n"</literal></expr></argument>,
<argument><expr><name><name>rates</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>q</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>q</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>ret</name></expr> ?</condition><then> <expr><literal type="string">"ERROR"</literal></expr> </then><else>: <expr><literal type="string">"OK"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_av_parse_color</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>rgba</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>color_names</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"bikeshed"</literal></expr>,
<expr><literal type="string">"RaNdOm"</literal></expr>,
<expr><literal type="string">"foo"</literal></expr>,
<expr><literal type="string">"red"</literal></expr>,
<expr><literal type="string">"Red "</literal></expr>,
<expr><literal type="string">"RED"</literal></expr>,
<expr><literal type="string">"Violet"</literal></expr>,
<expr><literal type="string">"Yellow"</literal></expr>,
<expr><literal type="string">"Red"</literal></expr>,
<expr><literal type="string">"0x000000"</literal></expr>,
<expr><literal type="string">"0x0000000"</literal></expr>,
<expr><literal type="string">"0xff000000"</literal></expr>,
<expr><literal type="string">"0x3e34ff"</literal></expr>,
<expr><literal type="string">"0x3e34ffaa"</literal></expr>,
<expr><literal type="string">"0xffXXee"</literal></expr>,
<expr><literal type="string">"0xfoobar"</literal></expr>,
<expr><literal type="string">"0xffffeeeeeeee"</literal></expr>,
<expr><literal type="string">"#ff0000"</literal></expr>,
<expr><literal type="string">"#ffXX00"</literal></expr>,
<expr><literal type="string">"ff0000"</literal></expr>,
<expr><literal type="string">"ffXX00"</literal></expr>,
<expr><literal type="string">"red@foo"</literal></expr>,
<expr><literal type="string">"random@10"</literal></expr>,
<expr><literal type="string">"0xff0000@1.0"</literal></expr>,
<expr><literal type="string">"red@"</literal></expr>,
<expr><literal type="string">"red@0xfff"</literal></expr>,
<expr><literal type="string">"red@0xf"</literal></expr>,
<expr><literal type="string">"red@2"</literal></expr>,
<expr><literal type="string">"red@0.1"</literal></expr>,
<expr><literal type="string">"red@-1"</literal></expr>,
<expr><literal type="string">"red@0.5"</literal></expr>,
<expr><literal type="string">"red@1.0"</literal></expr>,
<expr><literal type="string">"red@256"</literal></expr>,
<expr><literal type="string">"red@10foo"</literal></expr>,
<expr><literal type="string">"red@-1.0"</literal></expr>,
<expr><literal type="string">"red@-0.0"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log_set_level</name><argument_list>(<argument><expr><name>AV_LOG_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>color_names</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>av_parse_color</name><argument_list>(<argument><expr><name>rgba</name></expr></argument>, <argument><expr><name><name>color_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s -&gt; R(%d) G(%d) B(%d) A(%d)\n"</literal></expr></argument>,
<argument><expr><name><name>color_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>rgba</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>rgba</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>rgba</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>rgba</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s -&gt; error\n"</literal></expr></argument>, <argument><expr><name><name>color_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_av_small_strptime</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<struct>struct <name>fmt_timespec_entry</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>timespec</name></decl>;</decl_stmt>
}</block> <decl><name><name>fmt_timespec_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"%Y-%m-%d"</literal></expr>, <expr><literal type="string">"2012-12-21"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"%Y - %m - %d"</literal></expr>, <expr><literal type="string">"2012-12-21"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"%Y-%m-%d %H:%M:%S"</literal></expr>, <expr><literal type="string">"2012-12-21 20:12:21"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">" %Y - %m - %d %H : %M : %S"</literal></expr>, <expr><literal type="string">" 2012 - 12 - 21 20 : 12 : 21"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">" %Y - %b - %d %H : %M : %S"</literal></expr>, <expr><literal type="string">" 2012 - nOV - 21 20 : 12 : 21"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">" %Y - %B - %d %H : %M : %S"</literal></expr>, <expr><literal type="string">" 2012 - nOVemBeR - 21 20 : 12 : 21"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">" %Y - %B%d %H : %M : %S"</literal></expr>, <expr><literal type="string">" 2012 - may21 20 : 12 : 21"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">" %Y - %B%d %H : %M : %S"</literal></expr>, <expr><literal type="string">" 2012 - mby21 20 : 12 : 21"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">" %Y - %B - %d %H : %M : %S"</literal></expr>, <expr><literal type="string">" 2012 - JunE - 21 20 : 12 : 21"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">" %Y - %B - %d %H : %M : %S"</literal></expr>, <expr><literal type="string">" 2012 - Jane - 21 20 : 12 : 21"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">" %Y - %B - %d %H : %M : %S"</literal></expr>, <expr><literal type="string">" 2012 - January - 21 20 : 12 : 21"</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>

<expr_stmt><expr><call><name>av_log_set_level</name><argument_list>(<argument><expr><name>AV_LOG_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>fmt_timespec_entries</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fmt_timespec_entry</name></name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>&amp;</operator><name><name>fmt_timespec_entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"fmt:'%s' spec:'%s' -&gt; "</literal></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>timespec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>av_small_strptime</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>timespec</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%04d-%02d-%2d %02d:%02d:%02d\n"</literal></expr></argument>,
<argument><expr><literal type="number">1900</literal><operator>+</operator><name><name>tm</name><operator>.</operator><name>tm_year</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_mday</name></name></expr></argument>,
<argument><expr><name><name>tm</name><operator>.</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_min</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_av_parse_time</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>tv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>tvi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>tzstr</name><index>[]</index></name> <init>= <expr><literal type="string">"TZ=CET-1"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>time_string</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"now"</literal></expr>,
<expr><literal type="string">"12:35:46"</literal></expr>,
<expr><literal type="string">"2000-12-20 0:02:47.5z"</literal></expr>,
<expr><literal type="string">"2012 - 02-22 17:44:07"</literal></expr>,
<expr><literal type="string">"2000-12-20T010247.6"</literal></expr>,
<expr><literal type="string">"2000-12-12 1:35:46+05:30"</literal></expr>,
<expr><literal type="string">"2002-12-12 22:30:40-02"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>duration_string</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"2:34:56.79"</literal></expr>,
<expr><literal type="string">"-1:23:45.67"</literal></expr>,
<expr><literal type="string">"42.1729"</literal></expr>,
<expr><literal type="string">"-1729.42"</literal></expr>,
<expr><literal type="string">"12:34"</literal></expr>,
<expr><literal type="string">"2147483648s"</literal></expr>,
<expr><literal type="string">"4294967296ms"</literal></expr>,
<expr><literal type="string">"8589934592us"</literal></expr>,
<expr><literal type="string">"9223372036854775808us"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log_set_level</name><argument_list>(<argument><expr><name>AV_LOG_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putenv</name><argument_list>(<argument><expr><name>tzstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(now is 2012-03-17 09:14:13.2 +0100, local time is UTC+1)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>time_string</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-24s -&gt; "</literal></expr></argument>, <argument><expr><name><name>time_string</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_parse_time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name><name>time_string</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>tvi</name> <operator>=</operator> <name>tv</name> <operator>/</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>gmtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tvi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%14"</literal><name>PRIi64</name><literal type="string">".%06d = %04d-%02d-%02dT%02d:%02d:%02dZ\n"</literal></expr></argument>,
<argument><expr><name>tv</name> <operator>/</operator> <literal type="number">1000000</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>tv</name> <operator>%</operator> <literal type="number">1000000</literal><operator>)</operator></expr></argument>,
<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>,
<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>duration_string</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-24s -&gt; "</literal></expr></argument>, <argument><expr><name><name>duration_string</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_parse_time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name><name>duration_string</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%+21"</literal><name>PRIi64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_av_get_known_color_name</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>rgba</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>color_table</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>color</name> <operator>=</operator> <call><name>av_get_known_color_name</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rgba</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>color</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s -&gt; R(%d) G(%d) B(%d) A(%d)\n"</literal></expr></argument>,
<argument><expr><name>color</name></expr></argument>, <argument><expr><name><name>rgba</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>rgba</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>rgba</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>rgba</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Color ID: %d not found\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_av_find_info_tag</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>args</name><index>[]</index></name> <init>= <expr><literal type="string">"?tag1=val1&amp;tag2=val2&amp;tag3=val3&amp;tag41=value 41&amp;tag42=random1"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>tags</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"tag1"</literal></expr>, <expr><literal type="string">"tag2"</literal></expr>, <expr><literal type="string">"tag3"</literal></expr>, <expr><literal type="string">"tag4"</literal></expr>, <expr><literal type="string">"tag41"</literal></expr>, <expr><literal type="string">"41"</literal></expr>, <expr><literal type="string">"random1"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>av_find_info_tag</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>tags</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d. %s found: %s\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>tags</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d. %s not found\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>tags</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Testing av_parse_video_rate()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_av_parse_video_rate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nTesting av_parse_color()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_av_parse_color</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nTesting av_small_strptime()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_av_small_strptime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nTesting av_parse_time()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_av_parse_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nTesting av_get_known_color_name()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_av_get_known_color_name</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nTesting av_find_info_tag()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_av_find_info_tag</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
