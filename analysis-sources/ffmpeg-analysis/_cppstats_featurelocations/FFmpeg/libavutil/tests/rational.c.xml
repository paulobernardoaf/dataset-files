<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\tests\rational.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/rational.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/integer.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVRational</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int64_t</name></type> <name><name>numlist</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>INT64_MIN</name></expr>, <expr><name>INT64_MIN</name><operator>+</operator><literal type="number">1</literal></expr>, <expr><name>INT64_MAX</name></expr>, <expr><name>INT32_MIN</name></expr>, <expr><name>INT32_MAX</name></expr>, <expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><literal type="number">123456789</literal></expr>, <expr><name>INT32_MAX</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT32_MAX</name><operator>+</operator><literal type="number">1LL</literal></expr>, <expr><name>UINT32_MAX</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>UINT32_MAX</name></expr>, <expr><name>UINT32_MAX</name><operator>+</operator><literal type="number">1LL</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name><name>a</name><operator>.</operator><name>num</name></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name><name>a</name><operator>.</operator><name>num</name></name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name><name>a</name><operator>.</operator><name>num</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name><name>a</name><operator>.</operator><name>den</name></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name><name>a</name><operator>.</operator><name>den</name></name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name><name>a</name><operator>.</operator><name>den</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name><name>b</name><operator>.</operator><name>num</name></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name><name>b</name><operator>.</operator><name>num</name></name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name><name>b</name><operator>.</operator><name>num</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name><name>b</name><operator>.</operator><name>den</name></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name><name>b</name><operator>.</operator><name>den</name></name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name><name>b</name><operator>.</operator><name>den</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>av_cmp_q</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><ternary><condition><expr><call><name>av_q2d</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr> ?</condition><then>
<expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><call><name>av_q2d</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>d</name> <operator>!=</operator> <name>d</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>=</operator> <name>INT_MIN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>d</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%d/%d %d/%d, %d %f\n"</literal></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>num</name></name></expr></argument>,
<argument><expr><name><name>a</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>av_sub_q</name><argument_list>(<argument><expr><call><name>av_add_q</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>b</name><operator>.</operator><name>den</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>r</name><operator>.</operator><name>num</name></name><operator>*</operator><name><name>a</name><operator>.</operator><name>den</name></name> <operator>!=</operator> <name><name>a</name><operator>.</operator><name>num</name></name><operator>*</operator><name><name>r</name><operator>.</operator><name>den</name></name> <operator>||</operator> <operator>!</operator><name><name>r</name><operator>.</operator><name>num</name></name> <operator>!=</operator> <operator>!</operator><name><name>a</name><operator>.</operator><name>num</name></name> <operator>||</operator> <operator>!</operator><name><name>r</name><operator>.</operator><name>den</name></name> <operator>!=</operator> <operator>!</operator><name><name>a</name><operator>.</operator><name>den</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%d/%d "</literal></expr></argument>, <argument><expr><name><name>r</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>numlist</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>a</name> <init>= <expr><name><name>numlist</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>numlist</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>b</name> <init>= <expr><name><name>numlist</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name><operator>&lt;=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>numlist</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>c</name> <init>= <expr><name><name>numlist</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVInteger</name></type> <name>ai</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name><operator>&lt;=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>av_rescale_rnd</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_ROUND_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ai</name> <operator>=</operator> <call><name>av_mul_i</name><argument_list>(<argument><expr><call><name>av_int2i</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>av_int2i</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ai</name> <operator>=</operator> <call><name>av_div_i</name><argument_list>(<argument><expr><name>ai</name></expr></argument>, <argument><expr><call><name>av_int2i</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_cmp_i</name><argument_list>(<argument><expr><name>ai</name></expr></argument>, <argument><expr><call><name>av_int2i</name><argument_list>(<argument><expr><name>INT64_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>res</name> <operator>==</operator> <name>INT64_MIN</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_cmp_i</name><argument_list>(<argument><expr><name>ai</name></expr></argument>, <argument><expr><call><name>av_int2i</name><argument_list>(<argument><expr><name>INT64_MIN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>res</name> <operator>==</operator> <name>INT64_MIN</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_cmp_i</name><argument_list>(<argument><expr><name>ai</name></expr></argument>, <argument><expr><call><name>av_int2i</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>av_cmp_i</name><argument_list>(<argument><expr><name>ai</name></expr></argument>, <argument><expr><call><name>av_int2i</name><argument_list>(<argument><expr><name>res</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>a</name> <operator>==</operator> <name>INT64_MIN</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRId64</name><literal type="string">" * %"</literal><name>PRId64</name><literal type="string">" / %"</literal><name>PRId64</name><literal type="string">" = %"</literal><name>PRId64</name><literal type="string">" or %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><call><name>av_i2int</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>

<for>for <control>(<init><expr><name><name>a</name><operator>.</operator><name>num</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name><name>a</name><operator>.</operator><name>num</name></name> <operator>&lt;=</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name><name>a</name><operator>.</operator><name>num</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name><name>a</name><operator>.</operator><name>den</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name><name>a</name><operator>.</operator><name>den</name></name> <operator>&lt;=</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name><name>a</name><operator>.</operator><name>den</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>av_gcd</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name><name>b</name><operator>.</operator><name>num</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name><name>b</name><operator>.</operator><name>num</name></name> <operator>&lt;=</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name><name>b</name><operator>.</operator><name>num</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name><name>b</name><operator>.</operator><name>den</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name><name>b</name><operator>.</operator><name>den</name></name> <operator>&lt;=</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name><name>b</name><operator>.</operator><name>den</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_gcd</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_cmp_q</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>start</name> <operator>&lt;</operator> <literal type="number">10</literal></expr> ;</condition> <incr><expr><name>start</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>acc</name><init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">100</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>exact</name> <init>= <expr><name>start</name> <operator>+</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>acc</name> <operator>=</operator> <call><name>av_add_stable</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>acc</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name>acc</name> <operator>-</operator> <name>exact</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%d/%d %d/%d, %d %d\n"</literal></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>num</name></name></expr></argument>,
<argument><expr><name><name>a</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name>acc</name></expr></argument>, <argument><expr><name>exact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>

<for>for <control>(<init><expr><name><name>a</name><operator>.</operator><name>den</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name><name>a</name><operator>.</operator><name>den</name></name> <operator>&lt;</operator> <literal type="number">0x100000000U</literal><operator>/</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name><name>a</name><operator>.</operator><name>den</name></name><operator>*=</operator><literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name><name>a</name><operator>.</operator><name>num</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name><name>a</name><operator>.</operator><name>num</name></name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">27</literal><operator>)</operator></expr>;</condition> <incr><expr><name><name>a</name><operator>.</operator><name>num</name></name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>a</name><operator>.</operator><name>num</name></name><operator>/</operator><literal type="number">100</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>f</name> <init>= <expr><call><name>av_int2float</name><argument_list>(<argument><expr><call><name>av_q2intfloat</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f2</name> <init>= <expr><call><name>av_q2d</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>f</name> <operator>-</operator> <name>f2</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">5000000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%d/%d %f %f\n"</literal></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>num</name></name></expr></argument>,
<argument><expr><name><name>a</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
