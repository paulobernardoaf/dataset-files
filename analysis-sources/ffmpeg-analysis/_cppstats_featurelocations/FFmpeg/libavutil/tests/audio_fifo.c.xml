<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\tests\audio_fifo.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/audio_fifo.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CHANNELS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct <name>TestStruct</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nb_ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <specifier>const</specifier> <modifier>*</modifier></type><name><name>data_planes</name><index>[<expr><name>MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nb_samples_pch</name></decl>;</decl_stmt>
}</block></struct></type> <name>TestStruct</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>data_U8</name> <index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name></type> <name><name>data_S16</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>data_FLT</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">3.0</literal></expr>, <expr><literal type="number">4.0</literal></expr>, <expr><literal type="number">5.0</literal></expr>, <expr><literal type="number">6.0</literal></expr>, <expr><literal type="number">7.0</literal></expr>, <expr><literal type="number">8.0</literal></expr>, <expr><literal type="number">9.0</literal></expr>, <expr><literal type="number">10.0</literal></expr>, <expr><literal type="number">11.0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TestStruct</name></type> <name><name>test_struct</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><operator>.</operator><name>format</name> <operator>=</operator> <name>AV_SAMPLE_FMT_U8</name></expr> , <expr><operator>.</operator><name>nb_ch</name> <operator>=</operator> <literal type="number">1</literal></expr>, <expr><operator>.</operator><name>data_planes</name> <operator>=</operator> <block>{<expr><name>data_U8</name></expr> , }</block></expr>, <expr><operator>.</operator><name>nb_samples_pch</name> <operator>=</operator> <literal type="number">12</literal></expr>}</block></expr>,
<expr><block>{<expr><operator>.</operator><name>format</name> <operator>=</operator> <name>AV_SAMPLE_FMT_U8P</name></expr> , <expr><operator>.</operator><name>nb_ch</name> <operator>=</operator> <literal type="number">2</literal></expr>, <expr><operator>.</operator><name>data_planes</name> <operator>=</operator> <block>{<expr><name>data_U8</name></expr> , <expr><name>data_U8</name> <operator>+</operator><literal type="number">6</literal></expr>, }</block></expr>, <expr><operator>.</operator><name>nb_samples_pch</name> <operator>=</operator> <literal type="number">6</literal></expr> }</block></expr>,
<expr><block>{<expr><operator>.</operator><name>format</name> <operator>=</operator> <name>AV_SAMPLE_FMT_S16</name></expr> , <expr><operator>.</operator><name>nb_ch</name> <operator>=</operator> <literal type="number">1</literal></expr>, <expr><operator>.</operator><name>data_planes</name> <operator>=</operator> <block>{<expr><name>data_S16</name></expr>, }</block></expr>, <expr><operator>.</operator><name>nb_samples_pch</name> <operator>=</operator> <literal type="number">12</literal></expr>}</block></expr>,
<expr><block>{<expr><operator>.</operator><name>format</name> <operator>=</operator> <name>AV_SAMPLE_FMT_S16P</name></expr> , <expr><operator>.</operator><name>nb_ch</name> <operator>=</operator> <literal type="number">2</literal></expr>, <expr><operator>.</operator><name>data_planes</name> <operator>=</operator> <block>{<expr><name>data_S16</name></expr>, <expr><name>data_S16</name><operator>+</operator><literal type="number">6</literal></expr>, }</block></expr>, <expr><operator>.</operator><name>nb_samples_pch</name> <operator>=</operator> <literal type="number">6</literal></expr> }</block></expr>,
<expr><block>{<expr><operator>.</operator><name>format</name> <operator>=</operator> <name>AV_SAMPLE_FMT_FLT</name></expr> , <expr><operator>.</operator><name>nb_ch</name> <operator>=</operator> <literal type="number">1</literal></expr>, <expr><operator>.</operator><name>data_planes</name> <operator>=</operator> <block>{<expr><name>data_FLT</name></expr>, }</block></expr>, <expr><operator>.</operator><name>nb_samples_pch</name> <operator>=</operator> <literal type="number">12</literal></expr>}</block></expr>,
<expr><block>{<expr><operator>.</operator><name>format</name> <operator>=</operator> <name>AV_SAMPLE_FMT_FLTP</name></expr> , <expr><operator>.</operator><name>nb_ch</name> <operator>=</operator> <literal type="number">2</literal></expr>, <expr><operator>.</operator><name>data_planes</name> <operator>=</operator> <block>{<expr><name>data_FLT</name></expr>, <expr><name>data_FLT</name><operator>+</operator><literal type="number">6</literal></expr>, }</block></expr>, <expr><operator>.</operator><name>nb_samples_pch</name> <operator>=</operator> <literal type="number">6</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_data_planes</name><parameter_list>(<parameter><decl><type><name>AVAudioFifo</name> <modifier>*</modifier></type><name>afifo</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>output_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>afifo</name><operator>-&gt;</operator><name>nb_buffers</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ERROR</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_audio_bytes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TestStruct</name> <modifier>*</modifier></type><name>test_sample</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>data_planes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>byte_offset</name> <init>= <expr><call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name><name>test_sample</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buffers</name> <init>= <expr><ternary><condition><expr><call><name>av_sample_fmt_is_planar</name><argument_list>(<argument><expr><name><name>test_sample</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name><name>test_sample</name><operator>-&gt;</operator><name>nb_ch</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line_size</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>buffers</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>nb_samples</name> <operator>*</operator> <name>byte_offset</name></expr>
</then><else>: <expr><name>nb_samples</name> <operator>*</operator> <name>byte_offset</name> <operator>*</operator> <name><name>test_sample</name><operator>-&gt;</operator><name>nb_ch</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>buffers</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block>{<block_content>
<for>for<control>(<init><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name>line_size</name></expr>;</condition> <incr><expr><name>b</name><operator>+=</operator><name>byte_offset</name></expr></incr>)</control><block>{<block_content>
<for>for <control>(<init><expr><name>f</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>f</name> <operator>&lt;</operator> <name>byte_offset</name></expr>;</condition> <incr><expr><name>f</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>order</name> <init>= <expr><ternary><condition><expr><operator>!</operator><name>HAVE_BIGENDIAN</name></expr> ?</condition><then> <expr><operator>(</operator><name>byte_offset</name> <operator>-</operator> <name>f</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><name>f</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>data_planes</name><index>[<expr><name>p</name></expr>]</index></name> <operator>+</operator> <name>b</name> <operator>+</operator> <name>order</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_samples_from_audio_fifo</name><parameter_list>(<parameter><decl><type><name>AVAudioFifo</name><modifier>*</modifier></type> <name>afifo</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>samples</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>nb_samples</name></expr></argument>, <argument><expr><name><name>afifo</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tot_elements</name> <init>= <expr><ternary><condition><expr><operator>!</operator><call><name>av_sample_fmt_is_planar</name><argument_list>(<argument><expr><name><name>afifo</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name>samples</name></expr> </then><else>: <expr><name><name>afifo</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name>samples</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>data_planes</name> <init>= <expr><call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>afifo</name><operator>-&gt;</operator><name>nb_buffers</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data_planes</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ERROR</name><argument_list>(<argument><expr><literal type="string">"failed to allocate memory!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>output</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free_data_planes</name><argument_list>(<argument><expr><name>afifo</name></expr></argument>, <argument><expr><operator>*</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>output</name> <operator>=</operator> <name>data_planes</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>afifo</name><operator>-&gt;</operator><name>nb_buffers</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name><name>data_planes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>tot_elements</name></expr></argument>, <argument><expr><name><name>afifo</name><operator>-&gt;</operator><name>sample_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data_planes</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ERROR</name><argument_list>(<argument><expr><literal type="string">"failed to allocate memory!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><call><name>av_audio_fifo_read</name><argument_list>(<argument><expr><name>afifo</name></expr></argument>, <argument><expr><operator>*</operator><name>output</name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_samples_to_audio_fifo</name><parameter_list>(<parameter><decl><type><name>AVAudioFifo</name><modifier>*</modifier></type> <name>afifo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TestStruct</name> <modifier>*</modifier></type><name>test_sample</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>offset_size</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>data_planes</name><index>[<expr><name>MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>nb_samples</name> <operator>&gt;</operator> <name><name>test_sample</name><operator>-&gt;</operator><name>nb_samples_pch</name></name> <operator>-</operator> <name>offset</name></expr>)</condition><block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>offset</name> <operator>&gt;=</operator> <name><name>test_sample</name><operator>-&gt;</operator><name>nb_samples_pch</name></name></expr>)</condition><block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>offset_size</name> <operator>=</operator> <name>offset</name> <operator>*</operator> <name><name>afifo</name><operator>-&gt;</operator><name>sample_size</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>afifo</name><operator>-&gt;</operator><name>nb_buffers</name></name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name><name>data_planes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>test_sample</name><operator>-&gt;</operator><name>data_planes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>offset_size</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><call><name>av_audio_fifo_write</name><argument_list>(<argument><expr><name>afifo</name></expr></argument>, <argument><expr><name>data_planes</name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_function</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TestStruct</name> <modifier>*</modifier></type><name>test_sample</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>output_data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVAudioFifo</name> <modifier>*</modifier></type><name>afifo</name> <init>= <expr><call><name>av_audio_fifo_alloc</name><argument_list>(<argument><expr><name><name>test_sample</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>test_sample</name><operator>-&gt;</operator><name>nb_ch</name></name></expr></argument>,
<argument><expr><name><name>test_sample</name><operator>-&gt;</operator><name>nb_samples_pch</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>afifo</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ERROR</name><argument_list>(<argument><expr><literal type="string">"ERROR: av_audio_fifo_alloc returned NULL!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_samples_to_audio_fifo</name><argument_list>(<argument><expr><name>afifo</name></expr></argument>, <argument><expr><name>test_sample</name></expr></argument>, <argument><expr><name><name>test_sample</name><operator>-&gt;</operator><name>nb_samples_pch</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>ERROR</name><argument_list>(<argument><expr><literal type="string">"ERROR: av_audio_fifo_write failed!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"written: %d\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_samples_to_audio_fifo</name><argument_list>(<argument><expr><name>afifo</name></expr></argument>, <argument><expr><name>test_sample</name></expr></argument>, <argument><expr><name><name>test_sample</name><operator>-&gt;</operator><name>nb_samples_pch</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>ERROR</name><argument_list>(<argument><expr><literal type="string">"ERROR: av_audio_fifo_write failed!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"written: %d\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"remaining samples in audio_fifo: %d\n\n"</literal></expr></argument>, <argument><expr><call><name>av_audio_fifo_size</name><argument_list>(<argument><expr><name>afifo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>read_samples_from_audio_fifo</name><argument_list>(<argument><expr><name>afifo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_data</name></expr></argument>, <argument><expr><name><name>test_sample</name><operator>-&gt;</operator><name>nb_samples_pch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>ERROR</name><argument_list>(<argument><expr><literal type="string">"ERROR: av_audio_fifo_read failed!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"read: %d\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_audio_bytes</name><argument_list>(<argument><expr><name>test_sample</name></expr></argument>, <argument><expr><name>output_data</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"remaining samples in audio_fifo: %d\n\n"</literal></expr></argument>, <argument><expr><call><name>av_audio_fifo_size</name><argument_list>(<argument><expr><name>afifo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_audio_fifo_peek</name><argument_list>(<argument><expr><name>afifo</name></expr></argument>, <argument><expr><name>output_data</name></expr></argument>, <argument><expr><name><name>afifo</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>ERROR</name><argument_list>(<argument><expr><literal type="string">"ERROR: av_audio_fifo_peek failed!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"peek:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_audio_bytes</name><argument_list>(<argument><expr><name>test_sample</name></expr></argument>, <argument><expr><name>output_data</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"peek_at:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>afifo</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_audio_fifo_peek_at</name><argument_list>(<argument><expr><name>afifo</name></expr></argument>, <argument><expr><name>output_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>ERROR</name><argument_list>(<argument><expr><literal type="string">"ERROR: av_audio_fifo_peek_at failed!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d:\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_audio_bytes</name><argument_list>(<argument><expr><name>test_sample</name></expr></argument>, <argument><expr><name>output_data</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_audio_fifo_drain</name><argument_list>(<argument><expr><name>afifo</name></expr></argument>, <argument><expr><name><name>afifo</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>ERROR</name><argument_list>(<argument><expr><literal type="string">"ERROR: av_audio_fifo_drain failed!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>afifo</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>ERROR</name><argument_list>(<argument><expr><literal type="string">"drain failed to flush all samples in audio_fifo!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>free_data_planes</name><argument_list>(<argument><expr><name>afifo</name></expr></argument>, <argument><expr><name>output_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_audio_fifo_free</name><argument_list>(<argument><expr><name>afifo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>tests</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>test_struct</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>test_struct</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>tests</name></expr>;</condition> <incr><expr><operator>++</operator><name>t</name></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nTEST: %d\n\n"</literal></expr></argument>, <argument><expr><name>t</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_function</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>test_struct</name><index>[<expr><name>t</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
