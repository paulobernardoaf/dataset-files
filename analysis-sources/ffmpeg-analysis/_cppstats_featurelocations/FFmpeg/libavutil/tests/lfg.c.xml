<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\tests\lfg.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/timer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/lfg.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>Z_TABLE</name><index>[<expr><literal type="number">31</literal></expr>]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="number">0.5000</literal></expr>, <expr><literal type="number">0.5040</literal></expr>, <expr><literal type="number">0.5080</literal></expr>, <expr><literal type="number">0.5120</literal></expr>, <expr><literal type="number">0.5160</literal></expr>, <expr><literal type="number">0.5199</literal></expr>, <expr><literal type="number">0.5239</literal></expr>, <expr><literal type="number">0.5279</literal></expr>, <expr><literal type="number">0.5319</literal></expr>, <expr><literal type="number">0.5359</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0.5398</literal></expr>, <expr><literal type="number">0.5438</literal></expr>, <expr><literal type="number">0.5478</literal></expr>, <expr><literal type="number">0.5517</literal></expr>, <expr><literal type="number">0.5557</literal></expr>, <expr><literal type="number">0.5596</literal></expr>, <expr><literal type="number">0.5636</literal></expr>, <expr><literal type="number">0.5675</literal></expr>, <expr><literal type="number">0.5714</literal></expr>, <expr><literal type="number">0.5753</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0.5793</literal></expr>, <expr><literal type="number">0.5832</literal></expr>, <expr><literal type="number">0.5871</literal></expr>, <expr><literal type="number">0.5910</literal></expr>, <expr><literal type="number">0.5948</literal></expr>, <expr><literal type="number">0.5987</literal></expr>, <expr><literal type="number">0.6026</literal></expr>, <expr><literal type="number">0.6064</literal></expr>, <expr><literal type="number">0.6103</literal></expr>, <expr><literal type="number">0.6141</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0.6179</literal></expr>, <expr><literal type="number">0.6217</literal></expr>, <expr><literal type="number">0.6255</literal></expr>, <expr><literal type="number">0.6293</literal></expr>, <expr><literal type="number">0.6331</literal></expr>, <expr><literal type="number">0.6368</literal></expr>, <expr><literal type="number">0.6406</literal></expr>, <expr><literal type="number">0.6443</literal></expr>, <expr><literal type="number">0.6480</literal></expr>, <expr><literal type="number">0.6517</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0.6554</literal></expr>, <expr><literal type="number">0.6591</literal></expr>, <expr><literal type="number">0.6628</literal></expr>, <expr><literal type="number">0.6664</literal></expr>, <expr><literal type="number">0.6700</literal></expr>, <expr><literal type="number">0.6736</literal></expr>, <expr><literal type="number">0.6772</literal></expr>, <expr><literal type="number">0.6808</literal></expr>, <expr><literal type="number">0.6844</literal></expr>, <expr><literal type="number">0.6879</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0.6915</literal></expr>, <expr><literal type="number">0.6950</literal></expr>, <expr><literal type="number">0.6985</literal></expr>, <expr><literal type="number">0.7019</literal></expr>, <expr><literal type="number">0.7054</literal></expr>, <expr><literal type="number">0.7088</literal></expr>, <expr><literal type="number">0.7123</literal></expr>, <expr><literal type="number">0.7157</literal></expr>, <expr><literal type="number">0.7190</literal></expr>, <expr><literal type="number">0.7224</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0.7257</literal></expr>, <expr><literal type="number">0.7291</literal></expr>, <expr><literal type="number">0.7324</literal></expr>, <expr><literal type="number">0.7357</literal></expr>, <expr><literal type="number">0.7389</literal></expr>, <expr><literal type="number">0.7422</literal></expr>, <expr><literal type="number">0.7454</literal></expr>, <expr><literal type="number">0.7486</literal></expr>, <expr><literal type="number">0.7517</literal></expr>, <expr><literal type="number">0.7549</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0.7580</literal></expr>, <expr><literal type="number">0.7611</literal></expr>, <expr><literal type="number">0.7642</literal></expr>, <expr><literal type="number">0.7673</literal></expr>, <expr><literal type="number">0.7704</literal></expr>, <expr><literal type="number">0.7734</literal></expr>, <expr><literal type="number">0.7764</literal></expr>, <expr><literal type="number">0.7794</literal></expr>, <expr><literal type="number">0.7823</literal></expr>, <expr><literal type="number">0.7852</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0.7881</literal></expr>, <expr><literal type="number">0.7910</literal></expr>, <expr><literal type="number">0.7939</literal></expr>, <expr><literal type="number">0.7967</literal></expr>, <expr><literal type="number">0.7995</literal></expr>, <expr><literal type="number">0.8023</literal></expr>, <expr><literal type="number">0.8051</literal></expr>, <expr><literal type="number">0.8078</literal></expr>, <expr><literal type="number">0.8106</literal></expr>, <expr><literal type="number">0.8133</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0.8159</literal></expr>, <expr><literal type="number">0.8186</literal></expr>, <expr><literal type="number">0.8212</literal></expr>, <expr><literal type="number">0.8238</literal></expr>, <expr><literal type="number">0.8264</literal></expr>, <expr><literal type="number">0.8289</literal></expr>, <expr><literal type="number">0.8315</literal></expr>, <expr><literal type="number">0.8340</literal></expr>, <expr><literal type="number">0.8365</literal></expr>, <expr><literal type="number">0.8389</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0.8413</literal></expr>, <expr><literal type="number">0.8438</literal></expr>, <expr><literal type="number">0.8461</literal></expr>, <expr><literal type="number">0.8485</literal></expr>, <expr><literal type="number">0.8508</literal></expr>, <expr><literal type="number">0.8531</literal></expr>, <expr><literal type="number">0.8554</literal></expr>, <expr><literal type="number">0.8577</literal></expr>, <expr><literal type="number">0.8599</literal></expr>, <expr><literal type="number">0.8621</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0.8643</literal></expr>, <expr><literal type="number">0.8665</literal></expr>, <expr><literal type="number">0.8686</literal></expr>, <expr><literal type="number">0.8708</literal></expr>, <expr><literal type="number">0.8729</literal></expr>, <expr><literal type="number">0.8749</literal></expr>, <expr><literal type="number">0.8770</literal></expr>, <expr><literal type="number">0.8790</literal></expr>, <expr><literal type="number">0.8810</literal></expr>, <expr><literal type="number">0.8830</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0.8849</literal></expr>, <expr><literal type="number">0.8869</literal></expr>, <expr><literal type="number">0.8888</literal></expr>, <expr><literal type="number">0.8907</literal></expr>, <expr><literal type="number">0.8925</literal></expr>, <expr><literal type="number">0.8944</literal></expr>, <expr><literal type="number">0.8962</literal></expr>, <expr><literal type="number">0.8980</literal></expr>, <expr><literal type="number">0.8997</literal></expr>, <expr><literal type="number">0.9015</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0.9032</literal></expr>, <expr><literal type="number">0.9049</literal></expr>, <expr><literal type="number">0.9066</literal></expr>, <expr><literal type="number">0.9082</literal></expr>, <expr><literal type="number">0.9099</literal></expr>, <expr><literal type="number">0.9115</literal></expr>, <expr><literal type="number">0.9131</literal></expr>, <expr><literal type="number">0.9147</literal></expr>, <expr><literal type="number">0.9162</literal></expr>, <expr><literal type="number">0.9177</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0.9192</literal></expr>, <expr><literal type="number">0.9207</literal></expr>, <expr><literal type="number">0.9222</literal></expr>, <expr><literal type="number">0.9236</literal></expr>, <expr><literal type="number">0.9251</literal></expr>, <expr><literal type="number">0.9265</literal></expr>, <expr><literal type="number">0.9279</literal></expr>, <expr><literal type="number">0.9292</literal></expr>, <expr><literal type="number">0.9306</literal></expr>, <expr><literal type="number">0.9319</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0.9332</literal></expr>, <expr><literal type="number">0.9345</literal></expr>, <expr><literal type="number">0.9357</literal></expr>, <expr><literal type="number">0.9370</literal></expr>, <expr><literal type="number">0.9382</literal></expr>, <expr><literal type="number">0.9394</literal></expr>, <expr><literal type="number">0.9406</literal></expr>, <expr><literal type="number">0.9418</literal></expr>, <expr><literal type="number">0.9429</literal></expr>, <expr><literal type="number">0.9441</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0.9452</literal></expr>, <expr><literal type="number">0.9463</literal></expr>, <expr><literal type="number">0.9474</literal></expr>, <expr><literal type="number">0.9484</literal></expr>, <expr><literal type="number">0.9495</literal></expr>, <expr><literal type="number">0.9505</literal></expr>, <expr><literal type="number">0.9515</literal></expr>, <expr><literal type="number">0.9525</literal></expr>, <expr><literal type="number">0.9535</literal></expr>, <expr><literal type="number">0.9545</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0.9554</literal></expr>, <expr><literal type="number">0.9564</literal></expr>, <expr><literal type="number">0.9573</literal></expr>, <expr><literal type="number">0.9582</literal></expr>, <expr><literal type="number">0.9591</literal></expr>, <expr><literal type="number">0.9599</literal></expr>, <expr><literal type="number">0.9608</literal></expr>, <expr><literal type="number">0.9616</literal></expr>, <expr><literal type="number">0.9625</literal></expr>, <expr><literal type="number">0.9633</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0.9641</literal></expr>, <expr><literal type="number">0.9649</literal></expr>, <expr><literal type="number">0.9656</literal></expr>, <expr><literal type="number">0.9664</literal></expr>, <expr><literal type="number">0.9671</literal></expr>, <expr><literal type="number">0.9678</literal></expr>, <expr><literal type="number">0.9686</literal></expr>, <expr><literal type="number">0.9693</literal></expr>, <expr><literal type="number">0.9699</literal></expr>, <expr><literal type="number">0.9706</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0.9713</literal></expr>, <expr><literal type="number">0.9719</literal></expr>, <expr><literal type="number">0.9726</literal></expr>, <expr><literal type="number">0.9732</literal></expr>, <expr><literal type="number">0.9738</literal></expr>, <expr><literal type="number">0.9744</literal></expr>, <expr><literal type="number">0.9750</literal></expr>, <expr><literal type="number">0.9756</literal></expr>, <expr><literal type="number">0.9761</literal></expr>, <expr><literal type="number">0.9767</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0.9772</literal></expr>, <expr><literal type="number">0.9778</literal></expr>, <expr><literal type="number">0.9783</literal></expr>, <expr><literal type="number">0.9788</literal></expr>, <expr><literal type="number">0.9793</literal></expr>, <expr><literal type="number">0.9798</literal></expr>, <expr><literal type="number">0.9803</literal></expr>, <expr><literal type="number">0.9808</literal></expr>, <expr><literal type="number">0.9812</literal></expr>, <expr><literal type="number">0.9817</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0.9821</literal></expr>, <expr><literal type="number">0.9826</literal></expr>, <expr><literal type="number">0.9830</literal></expr>, <expr><literal type="number">0.9834</literal></expr>, <expr><literal type="number">0.9838</literal></expr>, <expr><literal type="number">0.9842</literal></expr>, <expr><literal type="number">0.9846</literal></expr>, <expr><literal type="number">0.9850</literal></expr>, <expr><literal type="number">0.9854</literal></expr>, <expr><literal type="number">0.9857</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0.9861</literal></expr>, <expr><literal type="number">0.9864</literal></expr>, <expr><literal type="number">0.9868</literal></expr>, <expr><literal type="number">0.9871</literal></expr>, <expr><literal type="number">0.9875</literal></expr>, <expr><literal type="number">0.9878</literal></expr>, <expr><literal type="number">0.9881</literal></expr>, <expr><literal type="number">0.9884</literal></expr>, <expr><literal type="number">0.9887</literal></expr>, <expr><literal type="number">0.9890</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0.9893</literal></expr>, <expr><literal type="number">0.9896</literal></expr>, <expr><literal type="number">0.9898</literal></expr>, <expr><literal type="number">0.9901</literal></expr>, <expr><literal type="number">0.9904</literal></expr>, <expr><literal type="number">0.9906</literal></expr>, <expr><literal type="number">0.9909</literal></expr>, <expr><literal type="number">0.9911</literal></expr>, <expr><literal type="number">0.9913</literal></expr>, <expr><literal type="number">0.9916</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0.9918</literal></expr>, <expr><literal type="number">0.9920</literal></expr>, <expr><literal type="number">0.9922</literal></expr>, <expr><literal type="number">0.9925</literal></expr>, <expr><literal type="number">0.9927</literal></expr>, <expr><literal type="number">0.9929</literal></expr>, <expr><literal type="number">0.9931</literal></expr>, <expr><literal type="number">0.9932</literal></expr>, <expr><literal type="number">0.9934</literal></expr>, <expr><literal type="number">0.9936</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0.9938</literal></expr>, <expr><literal type="number">0.9940</literal></expr>, <expr><literal type="number">0.9941</literal></expr>, <expr><literal type="number">0.9943</literal></expr>, <expr><literal type="number">0.9945</literal></expr>, <expr><literal type="number">0.9946</literal></expr>, <expr><literal type="number">0.9948</literal></expr>, <expr><literal type="number">0.9949</literal></expr>, <expr><literal type="number">0.9951</literal></expr>, <expr><literal type="number">0.9952</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0.9953</literal></expr>, <expr><literal type="number">0.9955</literal></expr>, <expr><literal type="number">0.9956</literal></expr>, <expr><literal type="number">0.9957</literal></expr>, <expr><literal type="number">0.9959</literal></expr>, <expr><literal type="number">0.9960</literal></expr>, <expr><literal type="number">0.9961</literal></expr>, <expr><literal type="number">0.9962</literal></expr>, <expr><literal type="number">0.9963</literal></expr>, <expr><literal type="number">0.9964</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0.9965</literal></expr>, <expr><literal type="number">0.9966</literal></expr>, <expr><literal type="number">0.9967</literal></expr>, <expr><literal type="number">0.9968</literal></expr>, <expr><literal type="number">0.9969</literal></expr>, <expr><literal type="number">0.9970</literal></expr>, <expr><literal type="number">0.9971</literal></expr>, <expr><literal type="number">0.9972</literal></expr>, <expr><literal type="number">0.9973</literal></expr>, <expr><literal type="number">0.9974</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0.9974</literal></expr>, <expr><literal type="number">0.9975</literal></expr>, <expr><literal type="number">0.9976</literal></expr>, <expr><literal type="number">0.9977</literal></expr>, <expr><literal type="number">0.9977</literal></expr>, <expr><literal type="number">0.9978</literal></expr>, <expr><literal type="number">0.9979</literal></expr>, <expr><literal type="number">0.9979</literal></expr>, <expr><literal type="number">0.9980</literal></expr>, <expr><literal type="number">0.9981</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0.9981</literal></expr>, <expr><literal type="number">0.9982</literal></expr>, <expr><literal type="number">0.9982</literal></expr>, <expr><literal type="number">0.9983</literal></expr>, <expr><literal type="number">0.9984</literal></expr>, <expr><literal type="number">0.9984</literal></expr>, <expr><literal type="number">0.9985</literal></expr>, <expr><literal type="number">0.9985</literal></expr>, <expr><literal type="number">0.9986</literal></expr>, <expr><literal type="number">0.9986</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0.9987</literal></expr>, <expr><literal type="number">0.9987</literal></expr>, <expr><literal type="number">0.9987</literal></expr>, <expr><literal type="number">0.9988</literal></expr>, <expr><literal type="number">0.9988</literal></expr>, <expr><literal type="number">0.9989</literal></expr>, <expr><literal type="number">0.9989</literal></expr>, <expr><literal type="number">0.9989</literal></expr>, <expr><literal type="number">0.9990</literal></expr>, <expr><literal type="number">0.9990</literal></expr>}</block></expr> }</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>double</name></type> <name>inv_cdf</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>u</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">2.50662823884</literal></expr>,
<expr><operator>-</operator><literal type="number">18.61500062529</literal></expr>,
<expr><literal type="number">41.39119773534</literal></expr>,
<expr><operator>-</operator><literal type="number">25.44106049637</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><operator>-</operator><literal type="number">8.47351093090</literal></expr>,
<expr><literal type="number">23.08336743743</literal></expr>,
<expr><operator>-</operator><literal type="number">21.06224101826</literal></expr>,
<expr><literal type="number">3.13082909833</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name><name>c</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0.3374754822726147</literal></expr>,
<expr><literal type="number">0.9761690190917186</literal></expr>,
<expr><literal type="number">0.1607979714918209</literal></expr>,
<expr><literal type="number">0.0276438810333863</literal></expr>,
<expr><literal type="number">0.0038405729373609</literal></expr>,
<expr><literal type="number">0.0003951896511919</literal></expr>,
<expr><literal type="number">0.0000321767881768</literal></expr>,
<expr><literal type="number">0.0000002888167364</literal></expr>,
<expr><literal type="number">0.0000003960315187</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><name>u</name> <operator>-</operator> <literal type="number">0.5</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0.42</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>y</name> <init>= <expr><name>x</name> <operator>*</operator> <name>x</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>x</name> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>*</operator><name>y</name><operator>+</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>*</operator><name>y</name><operator>+</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>*</operator><name>y</name><operator>+</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>/</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>*</operator><name>y</name><operator>+</operator><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>*</operator><name>y</name><operator>+</operator><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>*</operator><name>y</name><operator>+</operator><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>*</operator><name>y</name><operator>+</operator><literal type="number">1.0</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>-</operator> <name>u</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>log</name><argument_list>(<argument><expr><operator>-</operator><call><name>log</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>r</name><operator>*</operator><operator>(</operator><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name>r</name><operator>*</operator><operator>(</operator><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>+</operator><name>r</name><operator>*</operator><operator>(</operator><name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>+</operator><name>r</name><operator>*</operator><operator>(</operator><name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>+</operator><name>r</name><operator>*</operator><operator>(</operator><name><name>c</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>+</operator><name>r</name><operator>*</operator><operator>(</operator><name><name>c</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>+</operator>
<name>r</name><operator>*</operator><operator>(</operator><name><name>c</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>+</operator><name>r</name><operator>*</operator><name><name>c</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>-</operator><name>r</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVLFG</name></type> <name>state</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_lfg_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><literal type="number">0xdeadbeef</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">10000</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">624</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <call><name>av_lfg_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"final value:%X\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>mean</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>stddev</name> <init>= <expr><literal type="number">53</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>samp_mean</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>, <decl><type ref="prev"/><name>samp_stddev</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>, <decl><type ref="prev"/><name>QH</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>Z</name></decl>, <decl><type ref="prev"/><name>p_value</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>tot_samp</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>PRN_arr</name> <init>= <expr><call><name>av_malloc_array</name><argument_list>(<argument><expr><name>tot_samp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>PRN_arr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"failed to allocate memory!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_lfg_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tot_samp</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name><name>bmg_out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_bmg_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>bmg_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>PRN_arr</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>=</operator> <name><name>bmg_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>stddev</name> <operator>+</operator> <name>mean</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>PRN_arr</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>bmg_out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>stddev</name> <operator>+</operator> <name>mean</name></expr>;</expr_stmt>
<expr_stmt><expr><name>samp_mean</name> <operator>+=</operator> <name><name>PRN_arr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>PRN_arr</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>samp_stddev</name> <operator>+=</operator> <name><name>PRN_arr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>PRN_arr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>PRN_arr</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>PRN_arr</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"PRN%d : %f\n"</literal>
<literal type="string">"PRN%d : %f\n"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>PRN_arr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>PRN_arr</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>samp_mean</name> <operator>/=</operator> <name>tot_samp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>samp_stddev</name> <operator>/=</operator> <operator>(</operator><name>tot_samp</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>samp_stddev</name> <operator>-=</operator> <operator>(</operator><name>tot_samp</name> <operator>*</operator> <literal type="number">1.0</literal> <operator>/</operator> <operator>(</operator><name>tot_samp</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><name>samp_mean</name><operator>*</operator><name>samp_mean</name></expr>;</expr_stmt>
<expr_stmt><expr><name>samp_stddev</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name>samp_stddev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Z</name> <operator>=</operator> <operator>(</operator><name>mean</name> <operator>-</operator> <name>samp_mean</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>stddev</name> <operator>/</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name>tot_samp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>Z</name> <operator>&lt;</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <operator>!</operator><name>flag</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Z</name> <operator>=</operator> <name>Z</name> <operator>*</operator> <operator>-</operator><literal type="number">1.0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>Z</name> <operator>*</operator> <literal type="number">100</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>Z</name> <operator>*</operator> <literal type="number">100</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>Z</name> <operator>*</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>b</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>a</name> <operator>%</operator> <name>b</name></expr> </then><else>: <expr><name>a</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>y</name> <operator>%</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <literal type="number">30</literal> <operator>||</operator> <name>y</name> <operator>&gt;</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"error: out of bounds! tried to access"</literal>
<literal type="string">"Z_TABLE[%d][%d]\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>SKIP</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p_value</name> <operator>=</operator> <ternary><condition><expr><name>flag</name></expr> ?</condition><then> <expr><literal type="number">1</literal> <operator>-</operator> <name><name>Z_TABLE</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr> </then><else>: <expr><name><name>Z_TABLE</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block>

<label><name>SKIP</name>:</label> <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tot_samp</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>tot_samp</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>H_diff</name></decl>;</decl_stmt>
<expr_stmt><expr><name>H_diff</name> <operator>=</operator> <call><name>inv_cdf</name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">2.0</literal> <operator>-</operator> <operator>(</operator><literal type="number">3.0</literal><operator>/</operator><literal type="number">8.0</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <operator>(</operator><name>tot_samp</name> <operator>+</operator> <operator>(</operator><literal type="number">1.0</literal><operator>/</operator><literal type="number">4.0</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>H_diff</name> <operator>-=</operator> <call><name>inv_cdf</name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1.0</literal> <operator>-</operator> <operator>(</operator><literal type="number">3.0</literal><operator>/</operator><literal type="number">8.0</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <operator>(</operator><name>tot_samp</name> <operator>+</operator> <operator>(</operator><literal type="number">1.0</literal><operator>/</operator><literal type="number">4.0</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>QH</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name><name>PRN_arr</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>PRN_arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <name>H_diff</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>QH</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>-</operator> <name>QH</name> <operator>/</operator> <operator>(</operator><operator>(</operator><name>tot_samp</name> <operator>-</operator> <literal type="number">1.0</literal><operator>)</operator> <operator>*</operator> <name>samp_stddev</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"sample mean : %f\n"</literal>
<literal type="string">"true mean : %f\n"</literal>
<literal type="string">"sample stddev: %f\n"</literal>
<literal type="string">"true stddev : %f\n"</literal>
<literal type="string">"z-score : %f\n"</literal>
<literal type="string">"p-value : %f\n"</literal>
<literal type="string">"QH[normality]: %f\n"</literal></expr></argument>,
<argument><expr><name>samp_mean</name></expr></argument>, <argument><expr><name>mean</name></expr></argument>, <argument><expr><name>samp_stddev</name></expr></argument>, <argument><expr><name>stddev</name></expr></argument>, <argument><expr><name>Z</name></expr></argument>, <argument><expr><name>p_value</name></expr></argument>, <argument><expr><name>QH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PRN_arr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
