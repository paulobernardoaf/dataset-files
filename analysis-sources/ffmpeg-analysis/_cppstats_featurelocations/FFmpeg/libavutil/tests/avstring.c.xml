<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\tests\avstring.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fullpath</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>strings</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"''"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">":"</literal></expr>,
<expr><literal type="string">"\\"</literal></expr>,
<expr><literal type="string">"'"</literal></expr>,
<expr><literal type="string">" '' :"</literal></expr>,
<expr><literal type="string">" '' '' :"</literal></expr>,
<expr><literal type="string">"foo '' :"</literal></expr>,
<expr><literal type="string">"'foo'"</literal></expr>,
<expr><literal type="string">"foo "</literal></expr>,
<expr><literal type="string">" ' foo ' "</literal></expr>,
<expr><literal type="string">"foo\\"</literal></expr>,
<expr><literal type="string">"foo': blah:blah"</literal></expr>,
<expr><literal type="string">"foo\\: blah:blah"</literal></expr>,
<expr><literal type="string">"foo\'"</literal></expr>,
<expr><literal type="string">"'foo : ' :blahblah"</literal></expr>,
<expr><literal type="string">"\\ :blah"</literal></expr>,
<expr><literal type="string">" foo"</literal></expr>,
<expr><literal type="string">" foo "</literal></expr>,
<expr><literal type="string">" foo \\ "</literal></expr>,
<expr><literal type="string">"foo ':blah"</literal></expr>,
<expr><literal type="string">" foo bar : blahblah"</literal></expr>,
<expr><literal type="string">"\\f\\o\\o"</literal></expr>,
<expr><literal type="string">"'foo : \\ \\ ' : blahblah"</literal></expr>,
<expr><literal type="string">"'\\fo\\o:': blahblah"</literal></expr>,
<expr><literal type="string">"\\'fo\\o\\:': foo ' :blahblah"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>haystack</name> <init>= <expr><literal type="string">"Education consists mainly in what we have unlearned."</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>needle</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"learned."</literal></expr>, <expr><literal type="string">"unlearned."</literal></expr>, <expr><literal type="string">"Unlearned"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Testing av_get_token()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>strings</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>strings</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"|%s|"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>av_get_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" -&gt; |%s|"</literal></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" + |%s|\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Testing av_append_path_component()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_APPEND_PATH_COMPONENT</name><parameter_list>(<parameter><type><name>path</name></type></parameter>, <parameter><type><name>component</name></type></parameter>, <parameter><type><name>expected</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fullpath = av_append_path_component((path), (component)); printf("%s = %s\n", fullpath ? fullpath : "(null)", expected); av_free(fullpath);</cpp:value></cpp:define>



<macro><name>TEST_APPEND_PATH_COMPONENT</name><argument_list>(<argument>NULL</argument>, <argument>NULL</argument>, <argument><literal type="string">"(null)"</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>TEST_APPEND_PATH_COMPONENT</name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_APPEND_PATH_COMPONENT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"comp"</literal></expr></argument>, <argument><expr><literal type="string">"comp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_APPEND_PATH_COMPONENT</name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><literal type="string">"comp"</literal></expr></argument>, <argument><expr><literal type="string">"path/comp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_APPEND_PATH_COMPONENT</name><argument_list>(<argument><expr><literal type="string">"path/"</literal></expr></argument>, <argument><expr><literal type="string">"comp"</literal></expr></argument>, <argument><expr><literal type="string">"path/comp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_APPEND_PATH_COMPONENT</name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><literal type="string">"/comp"</literal></expr></argument>, <argument><expr><literal type="string">"path/comp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_APPEND_PATH_COMPONENT</name><argument_list>(<argument><expr><literal type="string">"path/"</literal></expr></argument>, <argument><expr><literal type="string">"/comp"</literal></expr></argument>, <argument><expr><literal type="string">"path/comp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_APPEND_PATH_COMPONENT</name><argument_list>(<argument><expr><literal type="string">"path/path2/"</literal></expr></argument>, <argument><expr><literal type="string">"/comp/comp2"</literal></expr></argument>, <argument><expr><literal type="string">"path/path2/comp/comp2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_STRNSTR</name><parameter_list>(<parameter><type><name>haystack</name></type></parameter>, <parameter><type><name>needle</name></type></parameter>, <parameter><type><name>hay_length</name></type></parameter>, <parameter><type><name>expected</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ptr = av_strnstr(haystack, needle, hay_length); if (ptr != expected){ printf("expected: %p, received %p\n", expected, ptr); }</cpp:value></cpp:define>




<expr_stmt><expr><call><name>TEST_STRNSTR</name><argument_list>(<argument><expr><name>haystack</name></expr></argument>, <argument><expr><name><name>needle</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>haystack</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>haystack</name><operator>+</operator><literal type="number">44</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_STRNSTR</name><argument_list>(<argument><expr><name>haystack</name></expr></argument>, <argument><expr><name><name>needle</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>haystack</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>haystack</name><operator>+</operator><literal type="number">42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_STRNSTR</name><argument_list>(<argument><expr><name>haystack</name></expr></argument>, <argument><expr><name><name>needle</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>haystack</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_STRNSTR</name><argument_list>(<argument><expr><name>haystack</name></expr></argument>, <argument><expr><name><name>strings</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>haystack</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>haystack</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_STRIREPLACE</name><parameter_list>(<parameter><type><name>haystack</name></type></parameter>, <parameter><type><name>needle</name></type></parameter>, <parameter><type><name>expected</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ptr = av_strireplace(haystack, needle, "instead"); if (ptr == NULL) { printf("error, received null pointer!\n"); } else { if (strcmp(ptr, expected) != 0) printf( "expected: %s, received: %s\n", expected, ptr); av_free(ptr); }</cpp:value></cpp:define>









<expr_stmt><expr><call><name>TEST_STRIREPLACE</name><argument_list>(<argument><expr><name>haystack</name></expr></argument>, <argument><expr><name><name>needle</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Education consists mainly in what we have uninstead"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_STRIREPLACE</name><argument_list>(<argument><expr><name>haystack</name></expr></argument>, <argument><expr><name><name>needle</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Education consists mainly in what we have instead"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_STRIREPLACE</name><argument_list>(<argument><expr><name>haystack</name></expr></argument>, <argument><expr><name><name>needle</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Education consists mainly in what we have instead."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_STRIREPLACE</name><argument_list>(<argument><expr><name>haystack</name></expr></argument>, <argument><expr><name><name>needle</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Education consists mainly in what we have instead"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_D2STR</name><parameter_list>(<parameter><type><name>value</name></type></parameter>, <parameter><type><name>expected</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if((ptr = av_d2str(value)) == NULL){ printf("error, received null pointer!\n"); } else { if(strcmp(ptr, expected) != 0) printf( "expected: %s, received: %s\n", expected, ptr); av_free(ptr); }</cpp:value></cpp:define>







<expr_stmt><expr><call><name>TEST_D2STR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><literal type="string">"0.000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_D2STR</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.2333234</literal></expr></argument>, <argument><expr><literal type="string">"-1.233323"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TEST_D2STR</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.2333237</literal></expr></argument>, <argument><expr><literal type="string">"-1.233324"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
