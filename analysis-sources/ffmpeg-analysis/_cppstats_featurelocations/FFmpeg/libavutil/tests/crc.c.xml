<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\tests\crc.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/crc.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><literal type="number">1999</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name><name>p</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>AV_CRC_32_IEEE_LE</name></expr>, <expr><literal type="number">0xEDB88320</literal></expr>, <expr><literal type="number">0x3D5CDD04</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CRC_32_IEEE</name></expr> , <expr><literal type="number">0x04C11DB7</literal></expr>, <expr><literal type="number">0xC0F5BAE0</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CRC_24_IEEE</name></expr> , <expr><literal type="number">0x864CFB</literal></expr> , <expr><literal type="number">0xB704CE</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CRC_16_ANSI_LE</name></expr>, <expr><literal type="number">0xA001</literal></expr> , <expr><literal type="number">0xBFD8</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CRC_16_ANSI</name></expr> , <expr><literal type="number">0x8005</literal></expr> , <expr><literal type="number">0x1FBB</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CRC_8_ATM</name></expr> , <expr><literal type="number">0x07</literal></expr> , <expr><literal type="number">0xE3</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>AV_CRC_8_EBU</name></expr> , <expr><literal type="number">0x1D</literal></expr> , <expr><literal type="number">0xD6</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVCRC</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>av_crc_get_table</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"crc %08X = %X\n"</literal></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_crc</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
