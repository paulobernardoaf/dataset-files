<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\tests\integer.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/integer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intmath.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>a</name><operator>=</operator><literal type="number">7</literal></expr>;</init> <condition><expr><name>a</name><operator>&lt;</operator><literal type="number">256</literal><operator>*</operator><literal type="number">256</literal><operator>*</operator><literal type="number">256</literal></expr>;</condition> <incr><expr><name>a</name><operator>+=</operator><literal type="number">13215</literal></expr></incr>)</control><block>{<block_content>
<for>for<control>(<init><expr><name>b</name><operator>=</operator><literal type="number">3</literal></expr>;</init> <condition><expr><name>b</name><operator>&lt;</operator><literal type="number">256</literal><operator>*</operator><literal type="number">256</literal><operator>*</operator><literal type="number">256</literal></expr>;</condition> <incr><expr><name>b</name><operator>+=</operator><literal type="number">27118</literal></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>AVInteger</name></type> <name>ai</name><init>= <expr><call><name>av_int2i</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVInteger</name></type> <name>bi</name><init>= <expr><call><name>av_int2i</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><call><name>av_i2int</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><call><name>av_i2int</name><argument_list>(<argument><expr><name>bi</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><call><name>av_i2int</name><argument_list>(<argument><expr><call><name>av_add_i</name><argument_list>(<argument><expr><name>ai</name></expr></argument>,<argument><expr><name>bi</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>a</name><operator>+</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><call><name>av_i2int</name><argument_list>(<argument><expr><call><name>av_sub_i</name><argument_list>(<argument><expr><name>ai</name></expr></argument>,<argument><expr><name>bi</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>a</name><operator>-</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><call><name>av_i2int</name><argument_list>(<argument><expr><call><name>av_mul_i</name><argument_list>(<argument><expr><name>ai</name></expr></argument>,<argument><expr><name>bi</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>a</name><operator>*</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><call><name>av_i2int</name><argument_list>(<argument><expr><call><name>av_shr_i</name><argument_list>(<argument><expr><name>ai</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>a</name><operator>&gt;&gt;</operator><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><call><name>av_i2int</name><argument_list>(<argument><expr><call><name>av_shr_i</name><argument_list>(<argument><expr><name>ai</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>a</name><operator>&lt;&lt;</operator><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><call><name>av_i2int</name><argument_list>(<argument><expr><call><name>av_shr_i</name><argument_list>(<argument><expr><name>ai</name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>a</name><operator>&gt;&gt;</operator><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><call><name>av_i2int</name><argument_list>(<argument><expr><call><name>av_shr_i</name><argument_list>(<argument><expr><name>ai</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">17</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>a</name><operator>&lt;&lt;</operator><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><call><name>av_log2_i</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><call><name>av_i2int</name><argument_list>(<argument><expr><call><name>av_div_i</name><argument_list>(<argument><expr><name>ai</name></expr></argument>,<argument><expr><name>bi</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>a</name><operator>/</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
