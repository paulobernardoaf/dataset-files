<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\softfloat_ieee754.h">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVUTIL_SOFTFLOAT_IEEE754_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVUTIL_SOFTFLOAT_IEEE754_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXP_BIAS</name></cpp:macro> <cpp:value>127</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANT_BITS</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>SoftFloat_IEEE754</name> <block>{
<decl_stmt><decl><type><name>int32_t</name></type> <name>sign</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>mant</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>exp</name></decl>;</decl_stmt>
}</block></struct></type> <name>SoftFloat_IEEE754</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SoftFloat_IEEE754</name></type> <name>FLOAT_0</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">126</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SoftFloat_IEEE754</name></type> <name>FLOAT_1</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>SoftFloat_IEEE754</name></type> <name>av_normalize_sf_ieee754</name><parameter_list>(<parameter><decl><type><name>SoftFloat_IEEE754</name></type> <name>sf</name></decl></parameter>)</parameter_list> <block>{<block_content>
<while>while<condition>( <expr><name><name>sf</name><operator>.</operator><name>mant</name></name> <operator>&gt;=</operator> <literal type="number">0x1000000UL</literal></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sf</name><operator>.</operator><name>exp</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sf</name><operator>.</operator><name>mant</name></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>sf</name><operator>.</operator><name>mant</name></name> <operator>&amp;=</operator> <literal type="number">0x007fffffUL</literal></expr>;</expr_stmt>
<return>return <expr><name>sf</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>SoftFloat_IEEE754</name></type> <name>av_int2sf_ieee754</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <macro><name>av_normalize_sf_ieee754</name><argument_list>(<argument>(SoftFloat_IEEE754) {sign</argument>, <argument>n &lt;&lt; MANT_BITS</argument>, <argument><literal type="number">0</literal> + e}</argument>)</argument_list></macro>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>SoftFloat_IEEE754</name></type> <name>av_bits2sf_ieee754</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>SoftFloat_IEEE754</name><operator>)</operator> <block>{ <expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0x80000000UL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>, <expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0x7FFFFFUL</literal><operator>)</operator></expr>, <expr><operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0x7F800000UL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">23</literal><operator>)</operator></expr>}</block><operator>)</operator></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>av_sf2int_ieee754</name><parameter_list>(<parameter><decl><type><name>SoftFloat_IEEE754</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>a</name><operator>.</operator><name>exp</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>a</name><operator>.</operator><name>mant</name></name> <operator>&lt;&lt;</operator> <name><name>a</name><operator>.</operator><name>exp</name></name></expr> ;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><name><name>a</name><operator>.</operator><name>mant</name></name> <operator>&gt;&gt;</operator><operator>(</operator><operator>-</operator><name><name>a</name><operator>.</operator><name>exp</name></name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>SoftFloat_IEEE754</name></type> <name>av_div_sf_ieee754</name><parameter_list>(<parameter><decl><type><name>SoftFloat_IEEE754</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>SoftFloat_IEEE754</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>mant</name></decl>, <decl><type ref="prev"/><name>exp</name></decl>, <decl><type ref="prev"/><name>sign</name></decl>;</decl_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>av_normalize_sf_ieee754</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>av_normalize_sf_ieee754</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>sign</name></name> <operator>^</operator> <name><name>b</name><operator>.</operator><name>sign</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mant</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>mant</name></name> <operator>|</operator> <literal type="number">0x00800000UL</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <name>MANT_BITS</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>b</name><operator>.</operator><name>mant</name></name><operator>|</operator> <literal type="number">0x00800000UL</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>exp</name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>exp</name></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>exp</name></name></expr>;</expr_stmt>
<return>return <macro><name>av_normalize_sf_ieee754</name><argument_list>(<argument>(SoftFloat_IEEE754) {sign</argument>, <argument>mant</argument>, <argument>exp}</argument>)</argument_list></macro>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>SoftFloat_IEEE754</name></type> <name>av_mul_sf_ieee754</name><parameter_list>(<parameter><decl><type><name>SoftFloat_IEEE754</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>SoftFloat_IEEE754</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>sign</name></decl>, <decl><type ref="prev"/><name>mant</name></decl>, <decl><type ref="prev"/><name>exp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>av_normalize_sf_ieee754</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>av_normalize_sf_ieee754</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>sign</name></name> <operator>^</operator> <name><name>b</name><operator>.</operator><name>sign</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mant</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><operator>.</operator><name>mant</name></name><operator>|</operator><literal type="number">0x00800000UL</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>b</name><operator>.</operator><name>mant</name></name><operator>|</operator><literal type="number">0x00800000UL</literal><operator>)</operator><operator>)</operator><operator>&gt;&gt;</operator><name>MANT_BITS</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>exp</name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>exp</name></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>exp</name></name></expr>;</expr_stmt>
<return>return <macro><name>av_normalize_sf_ieee754</name><argument_list>(<argument>(SoftFloat_IEEE754) {sign</argument>, <argument>mant</argument>, <argument>exp}</argument>)</argument_list></macro>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>av_cmp_sf_ieee754</name><parameter_list>(<parameter><decl><type><name>SoftFloat_IEEE754</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>SoftFloat_IEEE754</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>av_normalize_sf_ieee754</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>av_normalize_sf_ieee754</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>.</operator><name>sign</name></name> <operator>!=</operator> <name><name>b</name><operator>.</operator><name>sign</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>.</operator><name>mant</name></name> <operator>!=</operator> <name><name>b</name><operator>.</operator><name>mant</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>.</operator><name>exp</name></name> <operator>!=</operator> <name><name>b</name><operator>.</operator><name>exp</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
