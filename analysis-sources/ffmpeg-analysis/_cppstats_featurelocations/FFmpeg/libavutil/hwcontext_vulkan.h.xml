<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\hwcontext_vulkan.h">

















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVUTIL_HWCONTEXT_VULKAN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVUTIL_HWCONTEXT_VULKAN_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vulkan/vulkan.h&gt;</cpp:file></cpp:include>













<typedef>typedef <type><struct>struct <name>AVVulkanDeviceContext</name> <block>{



<decl_stmt><decl><type><specifier>const</specifier> <name>VkAllocationCallbacks</name> <modifier>*</modifier></type><name>alloc</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>VkInstance</name></type> <name>inst</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>VkPhysicalDevice</name></type> <name>phys_dev</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>VkDevice</name></type> <name>act_dev</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>int</name></type> <name>queue_family_index</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>queue_family_tx_index</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>queue_family_comp_index</name></decl>;</decl_stmt>
}</block></struct></type> <name>AVVulkanDeviceContext</name>;</typedef>




<typedef>typedef <type><struct>struct <name>AVVulkanFramesContext</name> <block>{



<decl_stmt><decl><type><name>VkImageTiling</name></type> <name>tiling</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>VkImageUsageFlagBits</name></type> <name>usage</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>create_pnext</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>alloc_pnext</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>AVVulkanFramesContext</name>;</typedef>










<typedef>typedef <type><struct>struct <name>AVVkFrame</name> <block>{



<decl_stmt><decl><type><name>VkImage</name></type> <name><name>img</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>VkImageTiling</name></type> <name>tiling</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>VkDeviceMemory</name></type> <name><name>mem</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name><name>size</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>VkMemoryPropertyFlagBits</name></type> <name>flags</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>VkAccessFlagBits</name></type> <name><name>access</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkImageLayout</name></type> <name><name>layout</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>VkSemaphore</name></type> <name><name>sem</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name></decl>;</decl_stmt>




<decl_stmt><decl><type><name><name>struct</name> <name>AVVkFrameInternal</name></name> <modifier>*</modifier></type><name>internal</name></decl>;</decl_stmt>
}</block></struct></type> <name>AVVkFrame</name>;</typedef>





<function_decl><type><name>AVVkFrame</name> <modifier>*</modifier></type><name>av_vk_frame_alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><specifier>const</specifier> <name>VkFormat</name> <modifier>*</modifier></type><name>av_vkfmt_from_pixfmt</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
