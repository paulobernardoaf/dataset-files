<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\rational.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathematics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rational.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>av_reduce</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dst_num</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dst_den</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>den</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVRational</name></type> <name>a0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>a1</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><operator>(</operator><name>num</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>den</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>gcd</name> <init>= <expr><call><name>av_gcd</name><argument_list>(<argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name>den</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>gcd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>gcd</name></expr>;</expr_stmt>
<expr_stmt><expr><name>den</name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>den</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>gcd</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;=</operator> <name>max</name> <operator>&amp;&amp;</operator> <name>den</name> <operator>&lt;=</operator> <name>max</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a1</name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator> <block>{ <expr><name>num</name></expr>, <expr><name>den</name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name>den</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>den</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>x</name> <init>= <expr><name>num</name> <operator>/</operator> <name>den</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>next_den</name> <init>= <expr><name>num</name> <operator>-</operator> <name>den</name> <operator>*</operator> <name>x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>a2n</name> <init>= <expr><name>x</name> <operator>*</operator> <name><name>a1</name><operator>.</operator><name>num</name></name> <operator>+</operator> <name><name>a0</name><operator>.</operator><name>num</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>a2d</name> <init>= <expr><name>x</name> <operator>*</operator> <name><name>a1</name><operator>.</operator><name>den</name></name> <operator>+</operator> <name><name>a0</name><operator>.</operator><name>den</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>a2n</name> <operator>&gt;</operator> <name>max</name> <operator>||</operator> <name>a2d</name> <operator>&gt;</operator> <name>max</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>a1</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>max</name> <operator>-</operator> <name><name>a0</name><operator>.</operator><name>num</name></name><operator>)</operator> <operator>/</operator> <name><name>a1</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a1</name><operator>.</operator><name>den</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><operator>(</operator><name>max</name> <operator>-</operator> <name><name>a0</name><operator>.</operator><name>den</name></name><operator>)</operator> <operator>/</operator> <name><name>a1</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>den</name> <operator>*</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>x</name> <operator>*</operator> <name><name>a1</name><operator>.</operator><name>den</name></name> <operator>+</operator> <name><name>a0</name><operator>.</operator><name>den</name></name><operator>)</operator> <operator>&gt;</operator> <name>num</name> <operator>*</operator> <name><name>a1</name><operator>.</operator><name>den</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>a1</name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator> <block>{ <expr><name>x</name> <operator>*</operator> <name><name>a1</name><operator>.</operator><name>num</name></name> <operator>+</operator> <name><name>a0</name><operator>.</operator><name>num</name></name></expr>, <expr><name>x</name> <operator>*</operator> <name><name>a1</name><operator>.</operator><name>den</name></name> <operator>+</operator> <name><name>a0</name><operator>.</operator><name>den</name></name></expr> }</block></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>a0</name> <operator>=</operator> <name>a1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a1</name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator> <block>{ <expr><name>a2n</name></expr>, <expr><name>a2d</name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <name>den</name></expr>;</expr_stmt>
<expr_stmt><expr><name>den</name> <operator>=</operator> <name>next_den</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><call><name>av_gcd</name><argument_list>(<argument><expr><name><name>a1</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>a1</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>a1</name><operator>.</operator><name>num</name></name> <operator>&lt;=</operator> <name>max</name> <operator>&amp;&amp;</operator> <name><name>a1</name><operator>.</operator><name>den</name></name> <operator>&lt;=</operator> <name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst_num</name> <operator>=</operator> <ternary><condition><expr><name>sign</name></expr> ?</condition><then> <expr><operator>-</operator><name><name>a1</name><operator>.</operator><name>num</name></name></expr> </then><else>: <expr><name><name>a1</name><operator>.</operator><name>num</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst_den</name> <operator>=</operator> <name><name>a1</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>

<return>return <expr><name>den</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>AVRational</name></type> <name>av_mul_q</name><parameter_list>(<parameter><decl><type><name>AVRational</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>.</operator><name>den</name></name></expr></argument>,
<argument><expr><name><name>b</name><operator>.</operator><name>num</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <name><name>c</name><operator>.</operator><name>num</name></name></expr></argument>,
<argument><expr><name><name>b</name><operator>.</operator><name>den</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <name><name>c</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>AVRational</name></type> <name>av_div_q</name><parameter_list>(<parameter><decl><type><name>AVRational</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <macro><name>av_mul_q</name><argument_list>(<argument>b</argument>, <argument>(AVRational) { c.den</argument>, <argument>c.num }</argument>)</argument_list></macro>;</return>
</block_content>}</block></function>

<function><type><name>AVRational</name></type> <name>av_add_q</name><parameter_list>(<parameter><decl><type><name>AVRational</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>.</operator><name>den</name></name></expr></argument>,
<argument><expr><name><name>b</name><operator>.</operator><name>num</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <name><name>c</name><operator>.</operator><name>den</name></name> <operator>+</operator>
<name><name>c</name><operator>.</operator><name>num</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <name><name>b</name><operator>.</operator><name>den</name></name></expr></argument>,
<argument><expr><name><name>b</name><operator>.</operator><name>den</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <name><name>c</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>AVRational</name></type> <name>av_sub_q</name><parameter_list>(<parameter><decl><type><name>AVRational</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <macro><name>av_add_q</name><argument_list>(<argument>b</argument>, <argument>(AVRational) { -c.num</argument>, <argument>c.den }</argument>)</argument_list></macro>;</return>
</block_content>}</block></function>

<function><type><name>AVRational</name></type> <name>av_d2q</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVRational</name></type> <name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>exponent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>den</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>AVRational</name><operator>)</operator> <block>{ <expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>INT_MAX</name> <operator>+</operator> <literal type="number">3LL</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>AVRational</name><operator>)</operator> <block>{ <expr><name>d</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>?</operator> <operator>-</operator><literal type="number">1</literal> <operator>:</operator> <literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>frexp</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exponent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>exponent</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>exponent</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>den</name> <operator>=</operator> <literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">61</literal> <operator>-</operator> <name>exponent</name><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><call><name>floor</name><argument_list>(<argument><expr><name>d</name> <operator>*</operator> <name>den</name> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>den</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>a</name><operator>.</operator><name>num</name></name> <operator>||</operator> <operator>!</operator><name><name>a</name><operator>.</operator><name>den</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name>d</name> <operator>&amp;&amp;</operator> <name>max</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>max</name><operator>&lt;</operator><name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><call><name>floor</name><argument_list>(<argument><expr><name>d</name> <operator>*</operator> <name>den</name> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>den</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>a</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_nearer_q</name><parameter_list>(<parameter><decl><type><name>AVRational</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>q1</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>q2</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>a</name> <init>= <expr><name><name>q1</name><operator>.</operator><name>num</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>q2</name><operator>.</operator><name>den</name></name> <operator>+</operator> <name><name>q2</name><operator>.</operator><name>num</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>q1</name><operator>.</operator><name>den</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>b</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>q1</name><operator>.</operator><name>den</name></name> <operator>*</operator> <name><name>q2</name><operator>.</operator><name>den</name></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int64_t</name></type> <name>x_up</name> <init>= <expr><call><name>av_rescale_rnd</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>q</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>AV_ROUND_UP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int64_t</name></type> <name>x_down</name> <init>= <expr><call><name>av_rescale_rnd</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>q</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>AV_ROUND_DOWN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>x_up</name> <operator>&gt;</operator> <name><name>q</name><operator>.</operator><name>num</name></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>x_down</name> <operator>&lt;</operator> <name><name>q</name><operator>.</operator><name>num</name></name><operator>)</operator><operator>)</operator> <operator>*</operator> <call><name>av_cmp_q</name><argument_list>(<argument><expr><name>q2</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_find_nearest_q_idx</name><parameter_list>(<parameter><decl><type><name>AVRational</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVRational</name><modifier>*</modifier></type> <name>q_list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nearest_q_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>q_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>den</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>av_nearer_q</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name><name>q_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>q_list</name><index>[<expr><name>nearest_q_idx</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nearest_q_idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>nearest_q_idx</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>av_q2intfloat</name><parameter_list>(<parameter><decl><type><name>AVRational</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>.</operator><name>den</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>q</name><operator>.</operator><name>den</name></name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>.</operator><name>num</name></name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>.</operator><name>num</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>q</name><operator>.</operator><name>num</name></name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>q</name><operator>.</operator><name>num</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>q</name><operator>.</operator><name>den</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0xFFC00000</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>q</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>q</name><operator>.</operator><name>den</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0x7F800000</literal> <operator>|</operator> <operator>(</operator><name><name>q</name><operator>.</operator><name>num</name></name> <operator>&amp;</operator> <literal type="number">0x80000000</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">23</literal> <operator>+</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name><name>q</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name><name>q</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>av_rescale</name><argument_list>(<argument><expr><name><name>q</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><literal type="number">1LL</literal><operator>&lt;&lt;</operator><name>shift</name></expr></argument>, <argument><expr><name><name>q</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>av_rescale</name><argument_list>(<argument><expr><name><name>q</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>q</name><operator>.</operator><name>den</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <operator>-</operator><name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>shift</name> <operator>-=</operator> <name>n</name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>shift</name> <operator>+=</operator> <name>n</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">23</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>av_rescale</name><argument_list>(<argument><expr><name><name>q</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><literal type="number">1LL</literal><operator>&lt;&lt;</operator><name>shift</name></expr></argument>, <argument><expr><name><name>q</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>av_rescale</name><argument_list>(<argument><expr><name><name>q</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>q</name><operator>.</operator><name>den</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <operator>-</operator><name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>n</name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">23</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>sign</name><operator>&lt;&lt;</operator><literal type="number">31</literal> <operator>|</operator> <operator>(</operator><literal type="number">150</literal><operator>-</operator><name>shift</name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">23</literal> <operator>|</operator> <operator>(</operator><name>n</name> <operator>-</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">23</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
