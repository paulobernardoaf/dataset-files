<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\lfg.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lfg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"crc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"md5.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"attributes.h"</cpp:file></cpp:include>

<function><type><name>av_cold</name> <name>void</name></type> <name>av_lfg_init</name><parameter_list>(<parameter><decl><type><name>AVLFG</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_md5_sum</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_bmg_get</name><parameter_list>(<parameter><decl><type><name>AVLFG</name> <modifier>*</modifier></type><name>lfg</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>x1</name></decl>, <decl><type ref="prev"/><name>x2</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><name>x1</name> <operator>=</operator> <literal type="number">2.0</literal> <operator>/</operator> <name>UINT_MAX</name> <operator>*</operator> <call><name>av_lfg_get</name><argument_list>(<argument><expr><name>lfg</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x2</name> <operator>=</operator> <literal type="number">2.0</literal> <operator>/</operator> <name>UINT_MAX</name> <operator>*</operator> <call><name>av_lfg_get</name><argument_list>(<argument><expr><name>lfg</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name>x1</name> <operator>*</operator> <name>x1</name> <operator>+</operator> <name>x2</name> <operator>*</operator> <name>x2</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>w</name> <operator>&gt;=</operator> <literal type="number">1.0</literal></expr>)</condition>;</do>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><operator>(</operator><operator>-</operator><literal type="number">2.0</literal> <operator>*</operator> <call><name>log</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>x1</name> <operator>*</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>x2</name> <operator>*</operator> <name>w</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_lfg_init_from_data</name><parameter_list>(<parameter><decl><type><name>AVLFG</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>beg</name></decl>, <decl><type ref="prev"/><name>end</name></decl>, <decl><type ref="prev"/><name>segm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVCRC</name> <modifier>*</modifier></type><name>avcrc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>crc</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;</operator> <operator>(</operator><name>UINT_MAX</name> <operator>/</operator> <literal type="number">128U</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>avcrc</name> <operator>=</operator> <call><name>av_crc_get_table</name><argument_list>(<argument><expr><name>AV_CRC_32_IEEE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 




<expr_stmt><expr><name>beg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>segm</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition><expr><name>segm</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition><incr><expr><name>segm</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>segm</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>length</name><operator>)</operator> <operator>/</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>av_crc</name><argument_list>(<argument><expr><name>avcrc</name></expr></argument>, <argument><expr><name>crc</name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>beg</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>beg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>segm</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>crc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>beg</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
