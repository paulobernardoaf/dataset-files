<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\cpu.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cpu_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SCHED_GETAFFINITY</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_GNU_SOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sched.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_GETPROCESSAFFINITYMASK</name> <operator>||</operator> <name>HAVE_WINRT</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SYSCTL</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SYS_PARAM_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysctl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_UNISTD_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>atomic_int</name></type> <name>cpu_flags</name> <init>= <expr><call><name>ATOMIC_VAR_INIT</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_cpu_flags</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ARCH_AARCH64</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ff_get_cpu_flags_aarch64</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_ARM</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ff_get_cpu_flags_arm</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_PPC</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ff_get_cpu_flags_ppc</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ff_get_cpu_flags_x86</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_force_cpu_flags</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>arg</name></decl></parameter>)</parameter_list><block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>arg</name> <operator>&amp;</operator> <operator>(</operator> <name>AV_CPU_FLAG_3DNOW</name> <operator>|</operator>
<name>AV_CPU_FLAG_3DNOWEXT</name> <operator>|</operator>
<name>AV_CPU_FLAG_MMXEXT</name> <operator>|</operator>
<name>AV_CPU_FLAG_SSE</name> <operator>|</operator>
<name>AV_CPU_FLAG_SSE2</name> <operator>|</operator>
<name>AV_CPU_FLAG_SSE2SLOW</name> <operator>|</operator>
<name>AV_CPU_FLAG_SSE3</name> <operator>|</operator>
<name>AV_CPU_FLAG_SSE3SLOW</name> <operator>|</operator>
<name>AV_CPU_FLAG_SSSE3</name> <operator>|</operator>
<name>AV_CPU_FLAG_SSE4</name> <operator>|</operator>
<name>AV_CPU_FLAG_SSE42</name> <operator>|</operator>
<name>AV_CPU_FLAG_AVX</name> <operator>|</operator>
<name>AV_CPU_FLAG_AVXSLOW</name> <operator>|</operator>
<name>AV_CPU_FLAG_XOP</name> <operator>|</operator>
<name>AV_CPU_FLAG_FMA3</name> <operator>|</operator>
<name>AV_CPU_FLAG_FMA4</name> <operator>|</operator>
<name>AV_CPU_FLAG_AVX2</name> <operator>|</operator>
<name>AV_CPU_FLAG_AVX512</name> <operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>arg</name> <operator>&amp;</operator> <name>AV_CPU_FLAG_MMX</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"MMX implied by specified flags\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>arg</name> <operator>|=</operator> <name>AV_CPU_FLAG_MMX</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>atomic_store_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cpu_flags</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_get_cpu_flags</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><call><name>atomic_load_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cpu_flags</name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>get_cpu_flags</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_store_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cpu_flags</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>flags</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_set_cpu_flags_mask</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>atomic_store_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cpu_flags</name></expr></argument>, <argument><expr><call><name>get_cpu_flags</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>mask</name></expr></argument>,
<argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_parse_cpu_flags</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPUFLAG_MMXEXT</name></cpp:macro> <cpp:value>(AV_CPU_FLAG_MMX | AV_CPU_FLAG_MMXEXT | AV_CPU_FLAG_CMOV)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPUFLAG_3DNOW</name></cpp:macro> <cpp:value>(AV_CPU_FLAG_3DNOW | AV_CPU_FLAG_MMX)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPUFLAG_3DNOWEXT</name></cpp:macro> <cpp:value>(AV_CPU_FLAG_3DNOWEXT | CPUFLAG_3DNOW)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPUFLAG_SSE</name></cpp:macro> <cpp:value>(AV_CPU_FLAG_SSE | CPUFLAG_MMXEXT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPUFLAG_SSE2</name></cpp:macro> <cpp:value>(AV_CPU_FLAG_SSE2 | CPUFLAG_SSE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPUFLAG_SSE2SLOW</name></cpp:macro> <cpp:value>(AV_CPU_FLAG_SSE2SLOW | CPUFLAG_SSE2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPUFLAG_SSE3</name></cpp:macro> <cpp:value>(AV_CPU_FLAG_SSE3 | CPUFLAG_SSE2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPUFLAG_SSE3SLOW</name></cpp:macro> <cpp:value>(AV_CPU_FLAG_SSE3SLOW | CPUFLAG_SSE3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPUFLAG_SSSE3</name></cpp:macro> <cpp:value>(AV_CPU_FLAG_SSSE3 | CPUFLAG_SSE3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPUFLAG_SSE4</name></cpp:macro> <cpp:value>(AV_CPU_FLAG_SSE4 | CPUFLAG_SSSE3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPUFLAG_SSE42</name></cpp:macro> <cpp:value>(AV_CPU_FLAG_SSE42 | CPUFLAG_SSE4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPUFLAG_AVX</name></cpp:macro> <cpp:value>(AV_CPU_FLAG_AVX | CPUFLAG_SSE42)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPUFLAG_AVXSLOW</name></cpp:macro> <cpp:value>(AV_CPU_FLAG_AVXSLOW | CPUFLAG_AVX)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPUFLAG_XOP</name></cpp:macro> <cpp:value>(AV_CPU_FLAG_XOP | CPUFLAG_AVX)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPUFLAG_FMA3</name></cpp:macro> <cpp:value>(AV_CPU_FLAG_FMA3 | CPUFLAG_AVX)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPUFLAG_FMA4</name></cpp:macro> <cpp:value>(AV_CPU_FLAG_FMA4 | CPUFLAG_AVX)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPUFLAG_AVX2</name></cpp:macro> <cpp:value>(AV_CPU_FLAG_AVX2 | CPUFLAG_AVX)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPUFLAG_BMI2</name></cpp:macro> <cpp:value>(AV_CPU_FLAG_BMI2 | AV_CPU_FLAG_BMI1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPUFLAG_AESNI</name></cpp:macro> <cpp:value>(AV_CPU_FLAG_AESNI | CPUFLAG_SSE42)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPUFLAG_AVX512</name></cpp:macro> <cpp:value>(AV_CPU_FLAG_AVX512 | CPUFLAG_AVX2)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>cpuflags_opts</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"flags"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_FLAGS</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><name>INT64_MIN</name></expr>, <expr><name>INT64_MAX</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_PPC</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"altivec"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_ALTIVEC</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCH_X86</name></expr></cpp:elif>
<expr><block>{ <expr><literal type="string">"mmx"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_MMX</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"mmxext"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>CPUFLAG_MMXEXT</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sse"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>CPUFLAG_SSE</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sse2"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>CPUFLAG_SSE2</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sse2slow"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>CPUFLAG_SSE2SLOW</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sse3"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>CPUFLAG_SSE3</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sse3slow"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>CPUFLAG_SSE3SLOW</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ssse3"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>CPUFLAG_SSSE3</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"atom"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_ATOM</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sse4.1"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>CPUFLAG_SSE4</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sse4.2"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>CPUFLAG_SSE42</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"avx"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>CPUFLAG_AVX</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"avxslow"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>CPUFLAG_AVXSLOW</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"xop"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>CPUFLAG_XOP</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fma3"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>CPUFLAG_FMA3</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fma4"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>CPUFLAG_FMA4</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"avx2"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>CPUFLAG_AVX2</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bmi1"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_BMI1</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bmi2"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>CPUFLAG_BMI2</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"3dnow"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>CPUFLAG_3DNOW</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"3dnowext"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>CPUFLAG_3DNOWEXT</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cmov"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_CMOV</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"aesni"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>CPUFLAG_AESNI</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"avx512"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>CPUFLAG_AVX512</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCH_ARM</name></expr></cpp:elif>
<expr><block>{ <expr><literal type="string">"armv5te"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_ARMV5TE</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"armv6"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_ARMV6</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"armv6t2"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_ARMV6T2</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"vfp"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_VFP</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"vfp_vm"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_VFP_VM</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"vfpv3"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_VFPV3</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"neon"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_NEON</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCH_AARCH64</name></expr></cpp:elif>
<expr><block>{ <expr><literal type="string">"armv8"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_ARMV8</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"neon"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_NEON</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"vfp"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_VFP</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"cpuflags"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>cpuflags_opts</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>pclass</name> <init>= <expr><operator>&amp;</operator><name>class</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_opt_eval_flags</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pclass</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cpuflags_opts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>flags</name> <operator>&amp;</operator> <name>INT_MAX</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_parse_cpu_caps</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>cpuflags_opts</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"flags"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_FLAGS</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><name>INT64_MIN</name></expr>, <expr><name>INT64_MAX</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_PPC</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"altivec"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_ALTIVEC</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCH_X86</name></expr></cpp:elif>
<expr><block>{ <expr><literal type="string">"mmx"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_MMX</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"mmx2"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_MMX2</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"mmxext"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_MMX2</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sse"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_SSE</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sse2"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_SSE2</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sse2slow"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_SSE2SLOW</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sse3"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_SSE3</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sse3slow"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_SSE3SLOW</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ssse3"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_SSSE3</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"atom"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_ATOM</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sse4.1"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_SSE4</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sse4.2"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_SSE42</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"avx"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_AVX</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"avxslow"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_AVXSLOW</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"xop"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_XOP</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fma3"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_FMA3</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fma4"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_FMA4</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"avx2"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_AVX2</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bmi1"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_BMI1</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bmi2"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_BMI2</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"3dnow"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_3DNOW</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"3dnowext"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_3DNOWEXT</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cmov"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_CMOV</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"aesni"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_AESNI</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"avx512"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_AVX512</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPU_FLAG_P2</name></cpp:macro> <cpp:value>AV_CPU_FLAG_CMOV | AV_CPU_FLAG_MMX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPU_FLAG_P3</name></cpp:macro> <cpp:value>CPU_FLAG_P2 | AV_CPU_FLAG_MMX2 | AV_CPU_FLAG_SSE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPU_FLAG_P4</name></cpp:macro> <cpp:value>CPU_FLAG_P3| AV_CPU_FLAG_SSE2</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"pentium2"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>CPU_FLAG_P2</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pentium3"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>CPU_FLAG_P3</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pentium4"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>CPU_FLAG_P4</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPU_FLAG_K62</name></cpp:macro> <cpp:value>AV_CPU_FLAG_MMX | AV_CPU_FLAG_3DNOW</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPU_FLAG_ATHLON</name></cpp:macro> <cpp:value>CPU_FLAG_K62 | AV_CPU_FLAG_CMOV | AV_CPU_FLAG_3DNOWEXT | AV_CPU_FLAG_MMX2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPU_FLAG_ATHLONXP</name></cpp:macro> <cpp:value>CPU_FLAG_ATHLON | AV_CPU_FLAG_SSE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPU_FLAG_K8</name></cpp:macro> <cpp:value>CPU_FLAG_ATHLONXP | AV_CPU_FLAG_SSE2</cpp:value></cpp:define>
<expr><block>{ <expr><literal type="string">"k6"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_MMX</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"k62"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>CPU_FLAG_K62</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"athlon"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>CPU_FLAG_ATHLON</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"athlonxp"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>CPU_FLAG_ATHLONXP</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"k8"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>CPU_FLAG_K8</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCH_ARM</name></expr></cpp:elif>
<expr><block>{ <expr><literal type="string">"armv5te"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_ARMV5TE</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"armv6"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_ARMV6</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"armv6t2"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_ARMV6T2</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"vfp"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_VFP</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"vfp_vm"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_VFP_VM</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"vfpv3"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_VFPV3</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"neon"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_NEON</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"setend"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_SETEND</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCH_AARCH64</name></expr></cpp:elif>
<expr><block>{ <expr><literal type="string">"armv8"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_ARMV8</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"neon"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_NEON</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"vfp"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CPU_FLAG_VFP</name></expr> }</block></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"flags"</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"cpuflags"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>cpuflags_opts</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>pclass</name> <init>= <expr><operator>&amp;</operator><name>class</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>av_opt_eval_flags</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pclass</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cpuflags_opts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_cpu_count</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>printed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_cpus</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_WINRT</name></expr></cpp:if>
<decl_stmt><decl><type><name>SYSTEM_INFO</name></type> <name>sysinfo</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SCHED_GETAFFINITY</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CPU_COUNT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>cpu_set_t</name></type> <name>cpuset</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CPU_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cpuset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sched_getaffinity</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cpuset</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>cpuset</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nb_cpus</name> <operator>=</operator> <call><name>CPU_COUNT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cpuset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_GETPROCESSAFFINITYMASK</name></expr></cpp:elif>
<decl_stmt><decl><type><name>DWORD_PTR</name></type> <name>proc_aff</name></decl>, <decl><type ref="prev"/><name>sys_aff</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GetProcessAffinityMask</name><argument_list>(<argument><expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>proc_aff</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sys_aff</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nb_cpus</name> <operator>=</operator> <call><name>av_popcount64</name><argument_list>(<argument><expr><name>proc_aff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_SYSCTL</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HW_NCPU</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>int</name></type> <name><name>mib</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>CTL_HW</name></expr>, <expr><name>HW_NCPU</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>nb_cpus</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sysctl</name><argument_list>(<argument><expr><name>mib</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nb_cpus</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nb_cpus</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_SYSCONF</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_SC_NPROC_ONLN</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name>nb_cpus</name> <operator>=</operator> <call><name>sysconf</name><argument_list>(<argument><expr><name>_SC_NPROC_ONLN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_SYSCONF</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_SC_NPROCESSORS_ONLN</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name>nb_cpus</name> <operator>=</operator> <call><name>sysconf</name><argument_list>(<argument><expr><name>_SC_NPROCESSORS_ONLN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_WINRT</name></expr></cpp:elif>
<expr_stmt><expr><call><name>GetNativeSystemInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sysinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nb_cpus</name> <operator>=</operator> <name><name>sysinfo</name><operator>.</operator><name>dwNumberOfProcessors</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>printed</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"detected %d logical cores\n"</literal></expr></argument>, <argument><expr><name>nb_cpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>printed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>nb_cpus</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>av_cpu_max_align</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ARCH_AARCH64</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ff_get_cpu_max_align_aarch64</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_ARM</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ff_get_cpu_max_align_arm</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_PPC</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ff_get_cpu_max_align_ppc</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ff_get_cpu_max_align_x86</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">8</literal></expr>;</return>
</block_content>}</block></function>
</unit>
