<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\color_utils.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/color_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixfmt.h"</cpp:file></cpp:include>

<function><type><name>double</name></type> <name>avpriv_get_gamma_from_trc</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVColorTransferCharacteristic</name></name></type> <name>trc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>gamma</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>trc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVCOL_TRC_BT709</name></expr>:</case>
<case>case <expr><name>AVCOL_TRC_SMPTE170M</name></expr>:</case>
<case>case <expr><name>AVCOL_TRC_SMPTE240M</name></expr>:</case>
<case>case <expr><name>AVCOL_TRC_BT1361_ECG</name></expr>:</case>
<case>case <expr><name>AVCOL_TRC_BT2020_10</name></expr>:</case>
<case>case <expr><name>AVCOL_TRC_BT2020_12</name></expr>:</case>


<expr_stmt><expr><name>gamma</name> <operator>=</operator> <literal type="number">1.961</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVCOL_TRC_GAMMA22</name></expr>:</case>
<case>case <expr><name>AVCOL_TRC_IEC61966_2_1</name></expr>:</case>
<expr_stmt><expr><name>gamma</name> <operator>=</operator> <literal type="number">2.2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVCOL_TRC_GAMMA28</name></expr>:</case>
<expr_stmt><expr><name>gamma</name> <operator>=</operator> <literal type="number">2.8</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVCOL_TRC_LINEAR</name></expr>:</case>
<expr_stmt><expr><name>gamma</name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>gamma</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt> 
</block_content>}</block></switch>
<return>return <expr><name>gamma</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BT709_alpha</name></cpp:macro> <cpp:value>1.099296826809442</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BT709_beta</name></cpp:macro> <cpp:value>0.018053968510807</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>double</name></type> <name>avpriv_trc_bt709</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>Lc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>a</name> <init>= <expr><name>BT709_alpha</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>b</name> <init>= <expr><name>BT709_beta</name></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><literal type="number">0.0</literal> <operator>&gt;</operator> <name>Lc</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0.0</literal></expr>
</then><else>: <expr><ternary><condition><expr><operator>(</operator> <name>b</name> <operator>&gt;</operator> <name>Lc</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4.500</literal> <operator>*</operator> <name>Lc</name></expr>
</then><else>: <expr><name>a</name> <operator>*</operator> <call><name>pow</name><argument_list>(<argument><expr><name>Lc</name></expr></argument>, <argument><expr><literal type="number">0.45</literal></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>a</name> <operator>-</operator> <literal type="number">1.0</literal><operator>)</operator></expr></else></ternary></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>avpriv_trc_gamma22</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>Lc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><literal type="number">0.0</literal> <operator>&gt;</operator> <name>Lc</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0.0</literal></expr> </then><else>: <expr><call><name>pow</name><argument_list>(<argument><expr><name>Lc</name></expr></argument>, <argument><expr><literal type="number">1.0</literal><operator>/</operator> <literal type="number">2.2</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>avpriv_trc_gamma28</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>Lc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><literal type="number">0.0</literal> <operator>&gt;</operator> <name>Lc</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0.0</literal></expr> </then><else>: <expr><call><name>pow</name><argument_list>(<argument><expr><name>Lc</name></expr></argument>, <argument><expr><literal type="number">1.0</literal><operator>/</operator> <literal type="number">2.8</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>avpriv_trc_smpte240M</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>Lc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>a</name> <init>= <expr><literal type="number">1.1115</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>b</name> <init>= <expr><literal type="number">0.0228</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><literal type="number">0.0</literal> <operator>&gt;</operator> <name>Lc</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0.0</literal></expr>
</then><else>: <expr><ternary><condition><expr><operator>(</operator> <name>b</name> <operator>&gt;</operator> <name>Lc</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4.000</literal> <operator>*</operator> <name>Lc</name></expr>
</then><else>: <expr><name>a</name> <operator>*</operator> <call><name>pow</name><argument_list>(<argument><expr><name>Lc</name></expr></argument>, <argument><expr><literal type="number">0.45</literal></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>a</name> <operator>-</operator> <literal type="number">1.0</literal><operator>)</operator></expr></else></ternary></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>avpriv_trc_linear</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>Lc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>Lc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>avpriv_trc_log</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>Lc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><literal type="number">0.01</literal> <operator>&gt;</operator> <name>Lc</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0.0</literal></expr> </then><else>: <expr><literal type="number">1.0</literal> <operator>+</operator> <call><name>log10</name><argument_list>(<argument><expr><name>Lc</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2.0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>avpriv_trc_log_sqrt</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>Lc</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><literal type="number">0.00316227766</literal> <operator>&gt;</operator> <name>Lc</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0.0</literal></expr> </then><else>: <expr><literal type="number">1.0</literal> <operator>+</operator> <call><name>log10</name><argument_list>(<argument><expr><name>Lc</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2.5</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>avpriv_trc_iec61966_2_4</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>Lc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>a</name> <init>= <expr><name>BT709_alpha</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>b</name> <init>= <expr><name>BT709_beta</name></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><operator>-</operator><name>b</name> <operator>&gt;=</operator> <name>Lc</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><name>a</name> <operator>*</operator> <call><name>pow</name><argument_list>(<argument><expr><operator>-</operator><name>Lc</name></expr></argument>, <argument><expr><literal type="number">0.45</literal></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>a</name> <operator>-</operator> <literal type="number">1.0</literal><operator>)</operator></expr>
</then><else>: <expr><ternary><condition><expr><operator>(</operator> <name>b</name> <operator>&gt;</operator> <name>Lc</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4.500</literal> <operator>*</operator> <name>Lc</name></expr>
</then><else>: <expr><name>a</name> <operator>*</operator> <call><name>pow</name><argument_list>( <argument><expr><name>Lc</name></expr></argument>, <argument><expr><literal type="number">0.45</literal></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>a</name> <operator>-</operator> <literal type="number">1.0</literal><operator>)</operator></expr></else></ternary></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>avpriv_trc_bt1361</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>Lc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>a</name> <init>= <expr><name>BT709_alpha</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>b</name> <init>= <expr><name>BT709_beta</name></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><operator>-</operator><literal type="number">0.0045</literal> <operator>&gt;=</operator> <name>Lc</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><operator>(</operator><name>a</name> <operator>*</operator> <call><name>pow</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">4.0</literal> <operator>*</operator> <name>Lc</name></expr></argument>, <argument><expr><literal type="number">0.45</literal></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>a</name> <operator>-</operator> <literal type="number">1.0</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">4.0</literal></expr>
</then><else>: <expr><ternary><condition><expr><operator>(</operator> <name>b</name> <operator>&gt;</operator> <name>Lc</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4.500</literal> <operator>*</operator> <name>Lc</name></expr>
</then><else>: <expr><name>a</name> <operator>*</operator> <call><name>pow</name><argument_list>( <argument><expr><name>Lc</name></expr></argument>, <argument><expr><literal type="number">0.45</literal></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>a</name> <operator>-</operator> <literal type="number">1.0</literal><operator>)</operator></expr></else></ternary></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>avpriv_trc_iec61966_2_1</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>Lc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>a</name> <init>= <expr><literal type="number">1.055</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>b</name> <init>= <expr><literal type="number">0.0031308</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><literal type="number">0.0</literal> <operator>&gt;</operator> <name>Lc</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0.0</literal></expr>
</then><else>: <expr><ternary><condition><expr><operator>(</operator> <name>b</name> <operator>&gt;</operator> <name>Lc</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">12.92</literal> <operator>*</operator> <name>Lc</name></expr>
</then><else>: <expr><name>a</name> <operator>*</operator> <call><name>pow</name><argument_list>(<argument><expr><name>Lc</name></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">2.4</literal></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>a</name> <operator>-</operator> <literal type="number">1.0</literal><operator>)</operator></expr></else></ternary></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>avpriv_trc_smpte_st2084</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>Lc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>c1</name> <init>= <expr><literal type="number">3424.0</literal> <operator>/</operator> <literal type="number">4096.0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>c2</name> <init>= <expr><literal type="number">32.0</literal> <operator>*</operator> <literal type="number">2413.0</literal> <operator>/</operator> <literal type="number">4096.0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>c3</name> <init>= <expr><literal type="number">32.0</literal> <operator>*</operator> <literal type="number">2392.0</literal> <operator>/</operator> <literal type="number">4096.0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>m</name> <init>= <expr><literal type="number">128.0</literal> <operator>*</operator> <literal type="number">2523.0</literal> <operator>/</operator> <literal type="number">4096.0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>n</name> <init>= <expr><literal type="number">0.25</literal> <operator>*</operator> <literal type="number">2610.0</literal> <operator>/</operator> <literal type="number">4096.0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>L</name> <init>= <expr><name>Lc</name> <operator>/</operator> <literal type="number">10000.0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>Ln</name> <init>= <expr><call><name>pow</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><literal type="number">0.0</literal> <operator>&gt;</operator> <name>Lc</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0.0</literal></expr>
</then><else>: <expr><call><name>pow</name><argument_list>(<argument><expr><operator>(</operator><name>c1</name> <operator>+</operator> <name>c2</name> <operator>*</operator> <name>Ln</name><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>+</operator> <name>c3</name> <operator>*</operator> <name>Ln</name><operator>)</operator></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>avpriv_trc_smpte_st428_1</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>Lc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><literal type="number">0.0</literal> <operator>&gt;</operator> <name>Lc</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0.0</literal></expr>
</then><else>: <expr><call><name>pow</name><argument_list>(<argument><expr><literal type="number">48.0</literal> <operator>*</operator> <name>Lc</name> <operator>/</operator> <literal type="number">52.37</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">2.6</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>double</name></type> <name>avpriv_trc_arib_std_b67</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>Lc</name></decl></parameter>)</parameter_list> <block>{<block_content>



<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>a</name> <init>= <expr><literal type="number">0.17883277</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>b</name> <init>= <expr><literal type="number">0.28466892</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>c</name> <init>= <expr><literal type="number">0.55991073</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><literal type="number">0.0</literal> <operator>&gt;</operator> <name>Lc</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0.0</literal></expr> </then><else>:
<expr><operator>(</operator><ternary><condition><expr><name>Lc</name> <operator>&lt;=</operator> <literal type="number">1.0</literal> <operator>/</operator> <literal type="number">12.0</literal></expr> ?</condition><then> <expr><call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">3.0</literal> <operator>*</operator> <name>Lc</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>a</name> <operator>*</operator> <call><name>log</name><argument_list>(<argument><expr><literal type="number">12.0</literal> <operator>*</operator> <name>Lc</name> <operator>-</operator> <name>b</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>c</name></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>avpriv_trc_function</name></type> <name>avpriv_get_trc_function_from_trc</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVColorTransferCharacteristic</name></name></type> <name>trc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>avpriv_trc_function</name></type> <name>func</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>trc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVCOL_TRC_BT709</name></expr>:</case>
<case>case <expr><name>AVCOL_TRC_SMPTE170M</name></expr>:</case>
<case>case <expr><name>AVCOL_TRC_BT2020_10</name></expr>:</case>
<case>case <expr><name>AVCOL_TRC_BT2020_12</name></expr>:</case>
<expr_stmt><expr><name>func</name> <operator>=</operator> <name>avpriv_trc_bt709</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>AVCOL_TRC_GAMMA22</name></expr>:</case>
<expr_stmt><expr><name>func</name> <operator>=</operator> <name>avpriv_trc_gamma22</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVCOL_TRC_GAMMA28</name></expr>:</case>
<expr_stmt><expr><name>func</name> <operator>=</operator> <name>avpriv_trc_gamma28</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>AVCOL_TRC_SMPTE240M</name></expr>:</case>
<expr_stmt><expr><name>func</name> <operator>=</operator> <name>avpriv_trc_smpte240M</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>AVCOL_TRC_LINEAR</name></expr>:</case>
<expr_stmt><expr><name>func</name> <operator>=</operator> <name>avpriv_trc_linear</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>AVCOL_TRC_LOG</name></expr>:</case>
<expr_stmt><expr><name>func</name> <operator>=</operator> <name>avpriv_trc_log</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>AVCOL_TRC_LOG_SQRT</name></expr>:</case>
<expr_stmt><expr><name>func</name> <operator>=</operator> <name>avpriv_trc_log_sqrt</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>AVCOL_TRC_IEC61966_2_4</name></expr>:</case>
<expr_stmt><expr><name>func</name> <operator>=</operator> <name>avpriv_trc_iec61966_2_4</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>AVCOL_TRC_BT1361_ECG</name></expr>:</case>
<expr_stmt><expr><name>func</name> <operator>=</operator> <name>avpriv_trc_bt1361</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>AVCOL_TRC_IEC61966_2_1</name></expr>:</case>
<expr_stmt><expr><name>func</name> <operator>=</operator> <name>avpriv_trc_iec61966_2_1</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>AVCOL_TRC_SMPTEST2084</name></expr>:</case>
<expr_stmt><expr><name>func</name> <operator>=</operator> <name>avpriv_trc_smpte_st2084</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>AVCOL_TRC_SMPTEST428_1</name></expr>:</case>
<expr_stmt><expr><name>func</name> <operator>=</operator> <name>avpriv_trc_smpte_st428_1</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>AVCOL_TRC_ARIB_STD_B67</name></expr>:</case>
<expr_stmt><expr><name>func</name> <operator>=</operator> <name>avpriv_trc_arib_std_b67</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>AVCOL_TRC_RESERVED0</name></expr>:</case>
<case>case <expr><name>AVCOL_TRC_UNSPECIFIED</name></expr>:</case>
<case>case <expr><name>AVCOL_TRC_RESERVED</name></expr>:</case>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>func</name></expr>;</return>
</block_content>}</block></function>
</unit>
