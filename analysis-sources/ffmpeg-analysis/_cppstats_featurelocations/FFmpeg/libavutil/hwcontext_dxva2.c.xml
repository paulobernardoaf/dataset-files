<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\hwcontext_dxva2.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DXVA2API_USE_BITFIELDS</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COBJMACROS</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;d3d9.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dxva2api.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;initguid.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwcontext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwcontext_dxva2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwcontext_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"imgutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pixfmt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/w32dlfcn.h"</cpp:file></cpp:include>

<typedef>typedef <function_decl><type><name>IDirect3D9</name><modifier>*</modifier> <name>WINAPI</name></type> <name>pDirect3DCreate9</name><parameter_list>(<parameter><decl><type><name>UINT</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>HRESULT</name> <name>WINAPI</name></type> <name>pDirect3DCreate9Ex</name><parameter_list>(<parameter><decl><type><name>UINT</name></type></decl></parameter>, <parameter><decl><type><name>IDirect3D9Ex</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>HRESULT</name> <name>WINAPI</name></type> <name>pCreateDeviceManager9</name><parameter_list>(<parameter><decl><type><name>UINT</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>IDirect3DDeviceManager9</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_D3DCREATE_FLAGS</name></cpp:macro> <cpp:value>(D3DCREATE_SOFTWARE_VERTEXPROCESSING | D3DCREATE_MULTITHREADED | D3DCREATE_FPU_PRESERVE)</cpp:value></cpp:define>



<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>D3DPRESENT_PARAMETERS</name></type> <name>dxva2_present_params</name> <init>= <expr><block>{
<expr><operator>.</operator><name>Windowed</name> <operator>=</operator> <name>TRUE</name></expr>,
<expr><operator>.</operator><name>BackBufferWidth</name> <operator>=</operator> <literal type="number">640</literal></expr>,
<expr><operator>.</operator><name>BackBufferHeight</name> <operator>=</operator> <literal type="number">480</literal></expr>,
<expr><operator>.</operator><name>BackBufferCount</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>SwapEffect</name> <operator>=</operator> <name>D3DSWAPEFFECT_DISCARD</name></expr>,
<expr><operator>.</operator><name>Flags</name> <operator>=</operator> <name>D3DPRESENTFLAG_VIDEO</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>DXVA2Mapping</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>palette_dummy</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>DXVA2Mapping</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DXVA2FramesContext</name> <block>{
<decl_stmt><decl><type><name>IDirect3DSurface9</name> <modifier>*</modifier><modifier>*</modifier></type><name>surfaces_internal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_surfaces_used</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>device_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IDirectXVideoAccelerationService</name> <modifier>*</modifier></type><name>service</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3DFORMAT</name></type> <name>format</name></decl>;</decl_stmt>
}</block></struct></type> <name>DXVA2FramesContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DXVA2DevicePriv</name> <block>{
<decl_stmt><decl><type><name>HMODULE</name></type> <name>d3dlib</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HMODULE</name></type> <name>dxva2lib</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>device_handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDirect3D9</name> <modifier>*</modifier></type><name>d3d9</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IDirect3DDevice9</name> <modifier>*</modifier></type><name>d3d9device</name></decl>;</decl_stmt>
}</block></struct></type> <name>DXVA2DevicePriv</name>;</typedef>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name>D3DFORMAT</name></type> <name>d3d_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl>;</decl_stmt>
}</block> <decl><name><name>supported_formats</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'N'</literal></expr></argument>, <argument><expr><literal type="char">'V'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>, <expr><name>AV_PIX_FMT_NV12</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>, <expr><name>AV_PIX_FMT_P010</name></expr> }</block></expr>,
<expr><block>{ <expr><name>D3DFMT_P8</name></expr>, <expr><name>AV_PIX_FMT_PAL8</name></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>

<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>video_decoder_service</name></expr></argument>, <argument><expr><literal type="number">0xfc51a551</literal></expr></argument>, <argument><expr><literal type="number">0xd5e7</literal></expr></argument>, <argument><expr><literal type="number">0x11d9</literal></expr></argument>, <argument><expr><literal type="number">0xaf</literal></expr></argument>, <argument><expr><literal type="number">0x55</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x05</literal></expr></argument>, <argument><expr><literal type="number">0x4e</literal></expr></argument>, <argument><expr><literal type="number">0x43</literal></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><literal type="number">0x02</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>video_processor_service</name></expr></argument>, <argument><expr><literal type="number">0xfc51a552</literal></expr></argument>, <argument><expr><literal type="number">0xd5e7</literal></expr></argument>, <argument><expr><literal type="number">0x11d9</literal></expr></argument>, <argument><expr><literal type="number">0xaf</literal></expr></argument>, <argument><expr><literal type="number">0x55</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x05</literal></expr></argument>, <argument><expr><literal type="number">0x4e</literal></expr></argument>, <argument><expr><literal type="number">0x43</literal></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><literal type="number">0x02</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dxva2_frames_uninit</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVDXVA2DeviceContext</name> <modifier>*</modifier></type><name>device_hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDXVA2FramesContext</name> <modifier>*</modifier></type><name>frames_hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DXVA2FramesContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frames_hwctx</name><operator>-&gt;</operator><name>decoder_to_release</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IDirectXVideoDecoder_Release</name><argument_list>(<argument><expr><name><name>frames_hwctx</name><operator>-&gt;</operator><name>decoder_to_release</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>surfaces_internal</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>frames_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>surfaces_internal</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IDirect3DSurface9_Release</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>surfaces_internal</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>surfaces_internal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>service</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>IDirectXVideoAccelerationService_Release</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>service</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>service</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>device_handle</name></name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>IDirect3DDeviceManager9_CloseDeviceHandle</name><argument_list>(<argument><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>devmgr</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>device_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>device_handle</name></name> <operator>=</operator> <name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dxva2_pool_release_dummy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>



</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AVBufferRef</name> <modifier>*</modifier></type><name>dxva2_pool_alloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name>opaque</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DXVA2FramesContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDXVA2FramesContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_surfaces_used</name></name> <operator>&lt;</operator> <name><name>hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_surfaces_used</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><call><name>av_buffer_create</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>surfaces_internal</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nb_surfaces_used</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>hwctx</name><operator>-&gt;</operator><name>surfaces</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>dxva2_pool_release_dummy</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dxva2_init_pool</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVDXVA2FramesContext</name> <modifier>*</modifier></type><name>frames_hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDXVA2DeviceContext</name> <modifier>*</modifier></type><name>device_hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DXVA2FramesContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>decode</name> <init>= <expr><operator>(</operator><name><name>frames_hwctx</name><operator>-&gt;</operator><name>surface_type</name></name> <operator>==</operator> <name>DXVA2_VideoDecoderRenderTarget</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>initial_pool_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DDeviceManager9_OpenDeviceHandle</name><argument_list>(<argument><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>devmgr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>device_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to open device handle\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DDeviceManager9_GetVideoService</name><argument_list>(<argument><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>devmgr</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>device_handle</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name>decode</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>video_decoder_service</name></expr> </then><else>: <expr><operator>&amp;</operator><name>video_processor_service</name></expr></else></ternary></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>service</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create the video service\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>supported_formats</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>sw_format</name></name> <operator>==</operator> <name><name>supported_formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pix_fmt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>supported_formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>d3d_format</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>supported_formats</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported pixel format: %s\n"</literal></expr></argument>,
<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>surfaces_internal</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>initial_pool_size</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>surfaces_internal</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>surfaces_internal</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirectXVideoAccelerationService_CreateSurface</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>service</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>initial_pool_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>D3DPOOL_DEFAULT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>frames_hwctx</name><operator>-&gt;</operator><name>surface_type</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>surfaces_internal</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not create the surfaces\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>pool_internal</name></name> <operator>=</operator> <call><name>av_buffer_pool_init2</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>surfaces_internal</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>dxva2_pool_alloc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>pool_internal</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>frames_hwctx</name><operator>-&gt;</operator><name>surfaces</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>surfaces_internal</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frames_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>initial_pool_size</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dxva2_frames_init</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVDXVA2FramesContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DXVA2FramesContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hwctx</name><operator>-&gt;</operator><name>surface_type</name></name> <operator>!=</operator> <name>DXVA2_VideoDecoderRenderTarget</name> <operator>&amp;&amp;</operator>
<name><name>hwctx</name><operator>-&gt;</operator><name>surface_type</name></name> <operator>!=</operator> <name>DXVA2_VideoProcessorRenderTarget</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown surface type: %lu\n"</literal></expr></argument>,
<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>surface_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>device_handle</name></name> <operator>=</operator> <name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>pool</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dxva2_init_pool</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error creating an internal frame pool\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dxva2_get_buffer</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_buffer_pool_get</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_DXVA2_VLD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dxva2_transfer_get_formats</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVHWFrameTransferDirection</name></name></type> <name>dir</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>formats</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier></type><name>fmts</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fmts</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>fmts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fmts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>sw_format</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>formats</name> <operator>=</operator> <name>fmts</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dxva2_unmap_frame</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>HWMapDescriptor</name> <modifier>*</modifier></type><name>hwmap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>IDirect3DSurface9</name> <modifier>*</modifier></type><name>surface</name> <init>= <expr><operator>(</operator><name>IDirect3DSurface9</name><operator>*</operator><operator>)</operator><name><name>hwmap</name><operator>-&gt;</operator><name>source</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>IDirect3DSurface9_UnlockRect</name><argument_list>(<argument><expr><name>surface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hwmap</name><operator>-&gt;</operator><name>priv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dxva2_map_frame</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>IDirect3DSurface9</name> <modifier>*</modifier></type><name>surface</name> <init>= <expr><operator>(</operator><name>IDirect3DSurface9</name><operator>*</operator><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DXVA2Mapping</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>D3DSURFACE_DESC</name></type> <name>surfaceDesc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>D3DLOCKED_RECT</name></type> <name>LockedRect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>err</name></decl>, <decl><type ref="prev"/><name>nb_planes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lock_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>nb_planes</name> <operator>=</operator> <call><name>av_pix_fmt_count_planes</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DSurface9_GetDesc</name><argument_list>(<argument><expr><name>surface</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>surfaceDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error getting a surface description\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>AV_HWFRAME_MAP_WRITE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lock_flags</name> <operator>|=</operator> <name>D3DLOCK_READONLY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>AV_HWFRAME_MAP_OVERWRITE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lock_flags</name> <operator>|=</operator> <name>D3DLOCK_DISCARD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DSurface9_LockRect</name><argument_list>(<argument><expr><name>surface</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>LockedRect</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>lock_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to lock DXVA2 surface\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>map</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>map</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>map</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_hwframe_map_create</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>,
<argument><expr><name>dxva2_unmap_frame</name></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_planes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>LockedRect</name><operator>.</operator><name>Pitch</name></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_image_fill_pointers</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>surfaceDesc</name><operator>.</operator><name>Height</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>LockedRect</name><operator>.</operator><name>pBits</name></name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_PAL8</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>map</name><operator>-&gt;</operator><name>palette_dummy</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>IDirect3DSurface9_UnlockRect</name><argument_list>(<argument><expr><name>surface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dxva2_transfer_data_to</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>sw_format</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>map</name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>map</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dxva2_map_frame</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>AV_HWFRAME_MAP_WRITE</name> <operator>|</operator> <name>AV_HWFRAME_MAP_OVERWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_image_copy</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dxva2_transfer_data_from</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name><name>src_linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>dst_linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>sw_format</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>map</name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>map</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dxva2_map_frame</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>AV_HWFRAME_MAP_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst_linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src_linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_image_copy_uc_from</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>dst_linesize</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>map</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>src_linesize</name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dxva2_map_from</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name>AV_PIX_FMT_NONE</name> <operator>&amp;&amp;</operator> <name><name>dst</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>sw_format</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>sw_format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>dxva2_map_frame</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dxva2_device_free</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVDXVA2DeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DXVA2DevicePriv</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>user_opaque</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hwctx</name><operator>-&gt;</operator><name>devmgr</name></name> <operator>&amp;&amp;</operator> <name><name>priv</name><operator>-&gt;</operator><name>device_handle</name></name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IDirect3DDeviceManager9_CloseDeviceHandle</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>devmgr</name></name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>device_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hwctx</name><operator>-&gt;</operator><name>devmgr</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IDirect3DDeviceManager9_Release</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>devmgr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>d3d9device</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IDirect3DDevice9_Release</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>d3d9device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>d3d9</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IDirect3D9_Release</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>d3d9</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>d3dlib</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dlclose</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>d3dlib</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>dxva2lib</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dlclose</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>dxva2lib</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>user_opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dxva2_device_create9</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>adapter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DXVA2DevicePriv</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>user_opaque</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>D3DPRESENT_PARAMETERS</name></type> <name>d3dpp</name> <init>= <expr><name>dxva2_present_params</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>D3DDISPLAYMODE</name></type> <name>d3ddm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pDirect3DCreate9</name> <modifier>*</modifier></type><name>createD3D</name> <init>= <expr><operator>(</operator><name>pDirect3DCreate9</name> <operator>*</operator><operator>)</operator><call><name>dlsym</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>d3dlib</name></name></expr></argument>, <argument><expr><literal type="string">"Direct3DCreate9"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>createD3D</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to locate Direct3DCreate9\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>d3d9</name></name> <operator>=</operator> <call><name>createD3D</name><argument_list>(<argument><expr><name>D3D_SDK_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>d3d9</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create IDirect3D object\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>IDirect3D9_GetAdapterDisplayMode</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>d3d9</name></name></expr></argument>, <argument><expr><name>adapter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d3ddm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d3dpp</name><operator>.</operator><name>BackBufferFormat</name></name> <operator>=</operator> <name><name>d3ddm</name><operator>.</operator><name>Format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3D9_CreateDevice</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>d3d9</name></name></expr></argument>, <argument><expr><name>adapter</name></expr></argument>, <argument><expr><name>D3DDEVTYPE_HAL</name></expr></argument>, <argument><expr><call><name>GetDesktopWindow</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>FF_D3DCREATE_FLAGS</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>d3dpp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>d3d9device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create Direct3D device\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dxva2_device_create9ex</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>adapter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DXVA2DevicePriv</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>user_opaque</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>D3DPRESENT_PARAMETERS</name></type> <name>d3dpp</name> <init>= <expr><name>dxva2_present_params</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>D3DDISPLAYMODEEX</name></type> <name>modeex</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IDirect3D9Ex</name> <modifier>*</modifier></type><name>d3d9ex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IDirect3DDevice9Ex</name> <modifier>*</modifier></type><name>exdev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pDirect3DCreate9Ex</name> <modifier>*</modifier></type><name>createD3DEx</name> <init>= <expr><operator>(</operator><name>pDirect3DCreate9Ex</name> <operator>*</operator><operator>)</operator><call><name>dlsym</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>d3dlib</name></name></expr></argument>, <argument><expr><literal type="string">"Direct3DCreate9Ex"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>createD3DEx</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>createD3DEx</name><argument_list>(<argument><expr><name>D3D_SDK_VERSION</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d3d9ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>modeex</name><operator>.</operator><name>Size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>D3DDISPLAYMODEEX</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3D9Ex_GetAdapterDisplayModeEx</name><argument_list>(<argument><expr><name>d3d9ex</name></expr></argument>, <argument><expr><name>adapter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>modeex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>IDirect3D9Ex_Release</name><argument_list>(<argument><expr><name>d3d9ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>d3dpp</name><operator>.</operator><name>BackBufferFormat</name></name> <operator>=</operator> <name><name>modeex</name><operator>.</operator><name>Format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3D9Ex_CreateDeviceEx</name><argument_list>(<argument><expr><name>d3d9ex</name></expr></argument>, <argument><expr><name>adapter</name></expr></argument>, <argument><expr><name>D3DDEVTYPE_HAL</name></expr></argument>, <argument><expr><call><name>GetDesktopWindow</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>FF_D3DCREATE_FLAGS</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>d3dpp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>IDirect3D9Ex_Release</name><argument_list>(<argument><expr><name>d3d9ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Using D3D9Ex device.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>d3d9</name></name> <operator>=</operator> <operator>(</operator><name>IDirect3D9</name> <operator>*</operator><operator>)</operator><name>d3d9ex</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>d3d9device</name></name> <operator>=</operator> <operator>(</operator><name>IDirect3DDevice9</name> <operator>*</operator><operator>)</operator><name>exdev</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dxva2_device_create</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>,
<parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVDXVA2DeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DXVA2DevicePriv</name> <modifier>*</modifier></type><name>priv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pCreateDeviceManager9</name> <modifier>*</modifier></type><name>createDeviceManager</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>resetToken</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINT</name></type> <name>adapter</name> <init>= <expr><name>D3DADAPTER_DEFAULT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>device</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>adapter</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>priv</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>priv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>priv</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>user_opaque</name></name> <operator>=</operator> <name>priv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>dxva2_device_free</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>device_handle</name></name> <operator>=</operator> <name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>d3dlib</name></name> <operator>=</operator> <call><name>dlopen</name><argument_list>(<argument><expr><literal type="string">"d3d9.dll"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>d3dlib</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to load D3D9 library\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>dxva2lib</name></name> <operator>=</operator> <call><name>dlopen</name><argument_list>(<argument><expr><literal type="string">"dxva2.dll"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>dxva2lib</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to load DXVA2 library\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>createDeviceManager</name> <operator>=</operator> <operator>(</operator><name>pCreateDeviceManager9</name> <operator>*</operator><operator>)</operator><call><name>dlsym</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>dxva2lib</name></name></expr></argument>,
<argument><expr><literal type="string">"DXVA2CreateDirect3DDeviceManager9"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>createDeviceManager</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to locate DXVA2CreateDirect3DDeviceManager9\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dxva2_device_create9ex</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>adapter</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>dxva2_device_create9</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>createDeviceManager</name><argument_list>(<argument><expr><operator>&amp;</operator><name>resetToken</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hwctx</name><operator>-&gt;</operator><name>devmgr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create Direct3D device manager\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DDeviceManager9_ResetDevice</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>devmgr</name></name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>d3d9device</name></name></expr></argument>, <argument><expr><name>resetToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to bind Direct3D device to device manager\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DDeviceManager9_OpenDeviceHandle</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>devmgr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>device_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to open device handle\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>HWContextType</name></type> <name>ff_hwcontext_type_dxva2</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AV_HWDEVICE_TYPE_DXVA2</name></expr>,
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"DXVA2"</literal></expr>,

<expr><operator>.</operator><name>device_hwctx_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AVDXVA2DeviceContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>frames_hwctx_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AVDXVA2FramesContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>frames_priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DXVA2FramesContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>device_create</name> <operator>=</operator> <name>dxva2_device_create</name></expr>,
<expr><operator>.</operator><name>frames_init</name> <operator>=</operator> <name>dxva2_frames_init</name></expr>,
<expr><operator>.</operator><name>frames_uninit</name> <operator>=</operator> <name>dxva2_frames_uninit</name></expr>,
<expr><operator>.</operator><name>frames_get_buffer</name> <operator>=</operator> <name>dxva2_get_buffer</name></expr>,
<expr><operator>.</operator><name>transfer_get_formats</name> <operator>=</operator> <name>dxva2_transfer_get_formats</name></expr>,
<expr><operator>.</operator><name>transfer_data_to</name> <operator>=</operator> <name>dxva2_transfer_data_to</name></expr>,
<expr><operator>.</operator><name>transfer_data_from</name> <operator>=</operator> <name>dxva2_transfer_data_from</name></expr>,
<expr><operator>.</operator><name>map_from</name> <operator>=</operator> <name>dxva2_map_from</name></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator><block>{ <expr><name>AV_PIX_FMT_DXVA2_VLD</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
