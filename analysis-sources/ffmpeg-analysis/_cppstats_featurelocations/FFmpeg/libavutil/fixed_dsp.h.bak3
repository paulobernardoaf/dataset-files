














































#ifndef AVUTIL_FIXED_DSP_H
#define AVUTIL_FIXED_DSP_H

#include <stdint.h>
#include "attributes.h"
#include "common.h"
#include "libavcodec/mathops.h"

typedef struct AVFixedDSPContext {























void (*vector_fmul_window_scaled)(int16_t *dst, const int32_t *src0, const int32_t *src1, const int32_t *win, int len, uint8_t bits);

















void (*vector_fmul_window)(int32_t *dst, const int32_t *src0, const int32_t *src1, const int32_t *win, int len);














void (*vector_fmul)(int *dst, const int *src0, const int *src1,
int len);

void (*vector_fmul_reverse)(int *dst, const int *src0, const int *src1, int len);















void (*vector_fmul_add)(int *dst, const int *src0, const int *src1,
const int *src2, int len);










int (*scalarproduct_fixed)(const int *v1, const int *v2, int len);








void (*butterflies_fixed)(int *av_restrict v1, int *av_restrict v2, int len);
} AVFixedDSPContext;







AVFixedDSPContext * avpriv_alloc_fixed_dsp(int strict);

void ff_fixed_dsp_init_x86(AVFixedDSPContext *fdsp);











static av_always_inline int fixed_sqrt(int x, int bits)
{
int retval, bit_mask, guess, square, i;
int64_t accu;
int shift1 = 30 - bits;
int shift2 = bits - 15;

if (shift1 > 0) retval = ff_sqrt(x << shift1);
else retval = ff_sqrt(x >> -shift1);

if (shift2 > 0) {
retval = retval << shift2;
bit_mask = (1 << (shift2 - 1));

for (i=0; i<shift2; i++){
guess = retval + bit_mask;
accu = (int64_t)guess * guess;
square = (int)((accu + bit_mask) >> bits);
if (x >= square)
retval += bit_mask;
bit_mask >>= 1;
}

}
else retval >>= (-shift2);

return retval;
}

#endif 
