<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\pixelutils.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pixelutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_PIXELUTILS</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"x86/pixelutils.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>sad_wxh</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>src1</name><index>[<expr><name>x</name></expr>]</index></name> <operator>-</operator> <name><name>src2</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>src1</name> <operator>+=</operator> <name>stride1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>+=</operator> <name>stride2</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>sum</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_BLOCK_FUNCTIONS</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static int block_sad_##size##x##size##_c(const uint8_t *src1, ptrdiff_t stride1, const uint8_t *src2, ptrdiff_t stride2) { return sad_wxh(src1, stride1, src2, stride2, size, size); }</cpp:value></cpp:define>






<macro><name>DECLARE_BLOCK_FUNCTIONS</name><argument_list>(<argument><literal type="number">2</literal></argument>)</argument_list></macro>
<macro><name>DECLARE_BLOCK_FUNCTIONS</name><argument_list>(<argument><literal type="number">4</literal></argument>)</argument_list></macro>
<macro><name>DECLARE_BLOCK_FUNCTIONS</name><argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>DECLARE_BLOCK_FUNCTIONS</name><argument_list>(<argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>DECLARE_BLOCK_FUNCTIONS</name><argument_list>(<argument><literal type="number">32</literal></argument>)</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>av_pixelutils_sad_fn</name></type> <name><name>sad_c</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>block_sad_2x2_c</name></expr>,
<expr><name>block_sad_4x4_c</name></expr>,
<expr><name>block_sad_8x8_c</name></expr>,
<expr><name>block_sad_16x16_c</name></expr>,
<expr><name>block_sad_32x32_c</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>av_pixelutils_sad_fn</name></type> <name>av_pixelutils_get_sad_fn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>w_bits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h_bits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>aligned</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>CONFIG_PIXELUTILS</name></expr></cpp:if>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"pixelutils support is required "</literal>
<literal type="string">"but libavutil is not compiled with it\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>av_pixelutils_sad_fn</name></type> <name><name>sad</name><index>[<expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>sad_c</name></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>sad</name></expr></argument>, <argument><expr><name>sad_c</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sad</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>w_bits</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>w_bits</name></expr></argument> &gt;</argument_list></name> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>sad</name></expr></argument>)</argument_list></call> <operator>||</operator>
<name><name>h_bits</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>h_bits</name></expr></argument> &gt;</argument_list></name> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>sad</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>w_bits</name> <operator>!=</operator> <name>h_bits</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86</name></expr></cpp:if>
<expr_stmt><expr><call><name>ff_pixelutils_sad_init_x86</name><argument_list>(<argument><expr><name>sad</name></expr></argument>, <argument><expr><name>aligned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name><name>sad</name><index>[<expr><name>w_bits</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
