<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\hwcontext_d3d11va.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COBJMACROS</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;initguid.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;d3d11.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dxgi1_2.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_DXGIDEBUG_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dxgidebug.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwcontext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwcontext_d3d11va.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwcontext_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"imgutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pixfmt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/w32dlfcn.h"</cpp:file></cpp:include>

<typedef>typedef <function_decl><type><name>HRESULT</name></type>(<name>WINAPI</name> <modifier>*</modifier><name>PFN_CREATE_DXGI_FACTORY</name>)<parameter_list>(<parameter><decl><type><name>REFIID</name></type> <name>riid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppFactory</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>AVOnce</name></type> <name>functions_loaded</name> <init>= <expr><name>AV_ONCE_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PFN_CREATE_DXGI_FACTORY</name></type> <name>mCreateDXGIFactory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PFN_D3D11_CREATE_DEVICE</name></type> <name>mD3D11CreateDevice</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>load_functions</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_UWP</name></expr></cpp:if>



<decl_stmt><decl><type><name>HANDLE</name></type> <name>d3dlib</name></decl>, <decl><type ref="prev"/><name>dxgilib</name></decl>;</decl_stmt>

<expr_stmt><expr><name>d3dlib</name> <operator>=</operator> <call><name>dlopen</name><argument_list>(<argument><expr><literal type="string">"d3d11.dll"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dxgilib</name> <operator>=</operator> <call><name>dlopen</name><argument_list>(<argument><expr><literal type="string">"dxgi.dll"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>d3dlib</name> <operator>||</operator> <operator>!</operator><name>dxgilib</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mD3D11CreateDevice</name> <operator>=</operator> <operator>(</operator><name>PFN_D3D11_CREATE_DEVICE</name><operator>)</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name>d3dlib</name></expr></argument>, <argument><expr><literal type="string">"D3D11CreateDevice"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mCreateDXGIFactory</name> <operator>=</operator> <operator>(</operator><name>PFN_CREATE_DXGI_FACTORY</name><operator>)</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name>dxgilib</name></expr></argument>, <argument><expr><literal type="string">"CreateDXGIFactory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<expr_stmt><expr><name>mD3D11CreateDevice</name> <operator>=</operator> <operator>(</operator><name>PFN_D3D11_CREATE_DEVICE</name><operator>)</operator> <name>D3D11CreateDevice</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mCreateDXGIFactory</name> <operator>=</operator> <operator>(</operator><name>PFN_CREATE_DXGI_FACTORY</name><operator>)</operator> <name>CreateDXGIFactory1</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>D3D11VAFramesContext</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>nb_surfaces_used</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DXGI_FORMAT</name></type> <name>format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ID3D11Texture2D</name> <modifier>*</modifier></type><name>staging_texture</name></decl>;</decl_stmt>
}</block></struct></type> <name>D3D11VAFramesContext</name>;</typedef>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name>DXGI_FORMAT</name></type> <name>d3d_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl>;</decl_stmt>
}</block> <decl><name><name>supported_formats</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>DXGI_FORMAT_NV12</name></expr>, <expr><name>AV_PIX_FMT_NV12</name></expr> }</block></expr>,
<expr><block>{ <expr><name>DXGI_FORMAT_P010</name></expr>, <expr><name>AV_PIX_FMT_P010</name></expr> }</block></expr>,


<expr><block>{ <expr><name>DXGI_FORMAT_420_OPAQUE</name></expr>, <expr><name>AV_PIX_FMT_YUV420P</name></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>d3d11va_default_lock</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>WaitForSingleObjectEx</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>d3d11va_default_unlock</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ReleaseMutex</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>d3d11va_frames_uninit</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVD3D11VAFramesContext</name> <modifier>*</modifier></type><name>frames_hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>D3D11VAFramesContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frames_hwctx</name><operator>-&gt;</operator><name>texture</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ID3D11Texture2D_Release</name><argument_list>(<argument><expr><name><name>frames_hwctx</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>frames_hwctx</name><operator>-&gt;</operator><name>texture</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>staging_texture</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ID3D11Texture2D_Release</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>staging_texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>staging_texture</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>d3d11va_frames_get_constraints</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>hwconfig</name></decl></parameter>,
<parameter><decl><type><name>AVHWFramesConstraints</name> <modifier>*</modifier></type><name>constraints</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVD3D11VADeviceContext</name> <modifier>*</modifier></type><name>device_hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_sw_formats</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>constraints</name><operator>-&gt;</operator><name>valid_sw_formats</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>supported_formats</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>constraints</name><operator>-&gt;</operator><name>valid_sw_formats</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>constraints</name><operator>-&gt;</operator><name>valid_sw_formats</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>supported_formats</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>UINT</name></type> <name>format_support</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11Device_CheckFormatSupport</name><argument_list>(<argument><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name><name>supported_formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>d3d_format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>format_support</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>format_support</name> <operator>&amp;</operator> <name>D3D11_FORMAT_SUPPORT_TEXTURE2D</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>constraints</name><operator>-&gt;</operator><name>valid_sw_formats</name><index>[<expr><name>nb_sw_formats</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>supported_formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pix_fmt</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>constraints</name><operator>-&gt;</operator><name>valid_sw_formats</name><index>[<expr><name>nb_sw_formats</name></expr>]</index></name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>constraints</name><operator>-&gt;</operator><name>valid_hw_formats</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>constraints</name><operator>-&gt;</operator><name>valid_hw_formats</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>constraints</name><operator>-&gt;</operator><name>valid_hw_formats</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>constraints</name><operator>-&gt;</operator><name>valid_hw_formats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>AV_PIX_FMT_D3D11</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>constraints</name><operator>-&gt;</operator><name>valid_hw_formats</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_texture</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ID3D11Texture2D_Release</name><argument_list>(<argument><expr><operator>(</operator><name>ID3D11Texture2D</name> <operator>*</operator><operator>)</operator><name>opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AVBufferRef</name> <modifier>*</modifier></type><name>wrap_texture_buf</name><parameter_list>(<parameter><decl><type><name>ID3D11Texture2D</name> <modifier>*</modifier></type><name>tex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVD3D11FrameDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>desc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ID3D11Texture2D_Release</name><argument_list>(<argument><expr><name>tex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>texture</name></name> <operator>=</operator> <name>tex</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>av_buffer_create</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>desc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>free_texture</name></expr></argument>, <argument><expr><name>tex</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ID3D11Texture2D_Release</name><argument_list>(<argument><expr><name>tex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AVBufferRef</name> <modifier>*</modifier></type><name>d3d11va_alloc_single</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>D3D11VAFramesContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVD3D11VAFramesContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVD3D11VADeviceContext</name> <modifier>*</modifier></type><name>device_hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID3D11Texture2D</name> <modifier>*</modifier></type><name>tex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>D3D11_TEXTURE2D_DESC</name></type> <name>texDesc</name> <init>= <expr><block>{
<expr><operator>.</operator><name>Width</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>width</name></name></expr>,
<expr><operator>.</operator><name>Height</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>height</name></name></expr>,
<expr><operator>.</operator><name>MipLevels</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>Format</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>format</name></name></expr>,
<expr><operator>.</operator><name>SampleDesc</name> <operator>=</operator> <block>{ <expr><operator>.</operator><name>Count</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>,
<expr><operator>.</operator><name>ArraySize</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>Usage</name> <operator>=</operator> <name>D3D11_USAGE_DEFAULT</name></expr>,
<expr><operator>.</operator><name>BindFlags</name> <operator>=</operator> <name><name>hwctx</name><operator>-&gt;</operator><name>BindFlags</name></name></expr>,
<expr><operator>.</operator><name>MiscFlags</name> <operator>=</operator> <name><name>hwctx</name><operator>-&gt;</operator><name>MiscFlags</name></name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11Device_CreateTexture2D</name><argument_list>(<argument><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>texDesc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not create the texture (%lx)\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>wrap_texture_buf</name><argument_list>(<argument><expr><name>tex</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AVBufferRef</name> <modifier>*</modifier></type><name>d3d11va_pool_alloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name>opaque</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>D3D11VAFramesContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVD3D11VAFramesContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>D3D11_TEXTURE2D_DESC</name></type> <name>texDesc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hwctx</name><operator>-&gt;</operator><name>texture</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>d3d11va_alloc_single</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ID3D11Texture2D_GetDesc</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>texDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_surfaces_used</name></name> <operator>&gt;=</operator> <name><name>texDesc</name><operator>.</operator><name>ArraySize</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Static surface pool size exceeded.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ID3D11Texture2D_AddRef</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>wrap_texture_buf</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_surfaces_used</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>d3d11va_frames_init</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVD3D11VAFramesContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVD3D11VADeviceContext</name> <modifier>*</modifier></type><name>device_hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>D3D11VAFramesContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>D3D11_TEXTURE2D_DESC</name></type> <name>texDesc</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>supported_formats</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>sw_format</name></name> <operator>==</operator> <name><name>supported_formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pix_fmt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>supported_formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>d3d_format</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>supported_formats</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported pixel format: %s\n"</literal></expr></argument>,
<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>texDesc</name> <operator>=</operator> <operator>(</operator><name>D3D11_TEXTURE2D_DESC</name><operator>)</operator><block>{
<expr><operator>.</operator><name>Width</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>width</name></name></expr>,
<expr><operator>.</operator><name>Height</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>height</name></name></expr>,
<expr><operator>.</operator><name>MipLevels</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>Format</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>format</name></name></expr>,
<expr><operator>.</operator><name>SampleDesc</name> <operator>=</operator> <block>{ <expr><operator>.</operator><name>Count</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>,
<expr><operator>.</operator><name>ArraySize</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>initial_pool_size</name></name></expr>,
<expr><operator>.</operator><name>Usage</name> <operator>=</operator> <name>D3D11_USAGE_DEFAULT</name></expr>,
<expr><operator>.</operator><name>BindFlags</name> <operator>=</operator> <name><name>hwctx</name><operator>-&gt;</operator><name>BindFlags</name></name></expr>,
<expr><operator>.</operator><name>MiscFlags</name> <operator>=</operator> <name><name>hwctx</name><operator>-&gt;</operator><name>MiscFlags</name></name></expr>,
}</block></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hwctx</name><operator>-&gt;</operator><name>texture</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>D3D11_TEXTURE2D_DESC</name></type> <name>texDesc2</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ID3D11Texture2D_GetDesc</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>texDesc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>texDesc</name><operator>.</operator><name>Width</name></name> <operator>!=</operator> <name><name>texDesc2</name><operator>.</operator><name>Width</name></name> <operator>||</operator>
<name><name>texDesc</name><operator>.</operator><name>Height</name></name> <operator>!=</operator> <name><name>texDesc2</name><operator>.</operator><name>Height</name></name> <operator>||</operator>
<name><name>texDesc</name><operator>.</operator><name>Format</name></name> <operator>!=</operator> <name><name>texDesc2</name><operator>.</operator><name>Format</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"User-provided texture has mismatching parameters\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>texDesc</name><operator>.</operator><name>ArraySize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11Device_CreateTexture2D</name><argument_list>(<argument><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>texDesc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hwctx</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not create the texture (%lx)\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>pool_internal</name></name> <operator>=</operator> <call><name>av_buffer_pool_init2</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVD3D11FrameDescriptor</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>d3d11va_pool_alloc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>pool_internal</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>d3d11va_get_buffer</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVD3D11FrameDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_buffer_pool_get</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <operator>(</operator><name>AVD3D11FrameDescriptor</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>desc</name><operator>-&gt;</operator><name>texture</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>desc</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_D3D11</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>d3d11va_transfer_get_formats</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVHWFrameTransferDirection</name></name></type> <name>dir</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>formats</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>D3D11VAFramesContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier></type><name>fmts</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fmts</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>fmts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fmts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>sw_format</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fmts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>DXGI_FORMAT_420_OPAQUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fmts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>formats</name> <operator>=</operator> <name>fmts</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>d3d11va_create_staging_texture</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVD3D11VADeviceContext</name> <modifier>*</modifier></type><name>device_hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>D3D11VAFramesContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>D3D11_TEXTURE2D_DESC</name></type> <name>texDesc</name> <init>= <expr><block>{
<expr><operator>.</operator><name>Width</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>width</name></name></expr>,
<expr><operator>.</operator><name>Height</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>height</name></name></expr>,
<expr><operator>.</operator><name>MipLevels</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>Format</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>format</name></name></expr>,
<expr><operator>.</operator><name>SampleDesc</name> <operator>=</operator> <block>{ <expr><operator>.</operator><name>Count</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>,
<expr><operator>.</operator><name>ArraySize</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>Usage</name> <operator>=</operator> <name>D3D11_USAGE_STAGING</name></expr>,
<expr><operator>.</operator><name>CPUAccessFlags</name> <operator>=</operator> <name>D3D11_CPU_ACCESS_READ</name> <operator>|</operator> <name>D3D11_CPU_ACCESS_WRITE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11Device_CreateTexture2D</name><argument_list>(<argument><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>texDesc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>staging_texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not create the staging texture (%lx)\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_texture_ptrs</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>D3D11_TEXTURE2D_DESC</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>,
<parameter><decl><type><name>D3D11_MAPPED_SUBRESOURCE</name> <modifier>*</modifier></type><name>map</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>RowPitch</name></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_image_fill_pointers</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>Height</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>map</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>d3d11va_transfer_data</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVD3D11VADeviceContext</name> <modifier>*</modifier></type><name>device_hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>D3D11VAFramesContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>download</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_D3D11</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><ternary><condition><expr><name>download</name></expr> ?</condition><then> <expr><name>src</name></expr> </then><else>: <expr><name>dst</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>other</name> <init>= <expr><ternary><condition><expr><name>download</name></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>src</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ID3D11Resource</name> <modifier>*</modifier></type><name>texture</name> <init>= <expr><operator>(</operator><name>ID3D11Resource</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>ID3D11Texture2D</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID3D11Resource</name> <modifier>*</modifier></type><name>staging</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>map_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>map_linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>D3D11_TEXTURE2D_DESC</name></type> <name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>D3D11_MAPPED_SUBRESOURCE</name></type> <name>map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name> <operator>!=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>ctx</name> <operator>||</operator> <name><name>other</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>sw_format</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>device_hwctx</name><operator>-&gt;</operator><name>lock</name></name><argument_list>(<argument><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>lock_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>staging_texture</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>d3d11va_create_staging_texture</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>staging</name> <operator>=</operator> <operator>(</operator><name>ID3D11Resource</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>staging_texture</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ID3D11Texture2D_GetDesc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>staging_texture</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>download</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ID3D11DeviceContext_CopySubresourceRegion</name><argument_list>(<argument><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>device_context</name></name></expr></argument>,
<argument><expr><name>staging</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>texture</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11DeviceContext_Map</name><argument_list>(<argument><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>device_context</name></name></expr></argument>,
<argument><expr><name>staging</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>D3D11_MAP_READ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>map_failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fill_texture_ptrs</name><argument_list>(<argument><expr><name>map_data</name></expr></argument>, <argument><expr><name>map_linesize</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_image_copy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>map_data</name></expr></argument>, <argument><expr><name>map_linesize</name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ID3D11DeviceContext_Unmap</name><argument_list>(<argument><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>device_context</name></name></expr></argument>, <argument><expr><name>staging</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11DeviceContext_Map</name><argument_list>(<argument><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>device_context</name></name></expr></argument>,
<argument><expr><name>staging</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>D3D11_MAP_WRITE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>map_failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fill_texture_ptrs</name><argument_list>(<argument><expr><name>map_data</name></expr></argument>, <argument><expr><name>map_linesize</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_image_copy</name><argument_list>(<argument><expr><name>map_data</name></expr></argument>, <argument><expr><name>map_linesize</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ID3D11DeviceContext_Unmap</name><argument_list>(<argument><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>device_context</name></name></expr></argument>, <argument><expr><name>staging</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ID3D11DeviceContext_CopySubresourceRegion</name><argument_list>(<argument><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>device_context</name></name></expr></argument>,
<argument><expr><name>texture</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>staging</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name><name>device_hwctx</name><operator>-&gt;</operator><name>unlock</name></name><argument_list>(<argument><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>lock_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>map_failed</name>:</label>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to lock D3D11VA surface (%lx)\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>device_hwctx</name><operator>-&gt;</operator><name>unlock</name></name><argument_list>(<argument><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>lock_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>d3d11va_device_init</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>hwdev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVD3D11VADeviceContext</name> <modifier>*</modifier></type><name>device_hwctx</name> <init>= <expr><name><name>hwdev</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>device_hwctx</name><operator>-&gt;</operator><name>lock</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>lock_ctx</name></name> <operator>=</operator> <call><name>CreateMutex</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>lock_ctx</name></name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create a mutex\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>lock</name></name> <operator>=</operator> <name>d3d11va_default_lock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>unlock</name></name> <operator>=</operator> <name>d3d11va_default_unlock</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>device_hwctx</name><operator>-&gt;</operator><name>device_context</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ID3D11Device_GetImmediateContext</name><argument_list>(<argument><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>device_hwctx</name><operator>-&gt;</operator><name>device_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>device_hwctx</name><operator>-&gt;</operator><name>device_context</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>device_hwctx</name><operator>-&gt;</operator><name>video_device</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11DeviceContext_QueryInterface</name><argument_list>(<argument><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_ID3D11VideoDevice</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>device_hwctx</name><operator>-&gt;</operator><name>video_device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>device_hwctx</name><operator>-&gt;</operator><name>video_context</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11DeviceContext_QueryInterface</name><argument_list>(<argument><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>device_context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_ID3D11VideoContext</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>device_hwctx</name><operator>-&gt;</operator><name>video_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>d3d11va_device_uninit</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>hwdev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVD3D11VADeviceContext</name> <modifier>*</modifier></type><name>device_hwctx</name> <init>= <expr><name><name>hwdev</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>device</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ID3D11Device_Release</name><argument_list>(<argument><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>device</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>device_context</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ID3D11DeviceContext_Release</name><argument_list>(<argument><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>device_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>device_context</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>video_device</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ID3D11VideoDevice_Release</name><argument_list>(<argument><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>video_device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>video_device</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>video_context</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ID3D11VideoContext_Release</name><argument_list>(<argument><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>video_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>video_context</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>lock</name></name> <operator>==</operator> <name>d3d11va_default_lock</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>lock_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>lock_ctx</name></name> <operator>=</operator> <name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>lock</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>d3d11va_device_create</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>,
<parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVD3D11VADeviceContext</name> <modifier>*</modifier></type><name>device_hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IDXGIAdapter</name> <modifier>*</modifier></type><name>pAdapter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID3D10Multithread</name> <modifier>*</modifier></type><name>pMultithread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINT</name></type> <name>creationFlags</name> <init>= <expr><name>D3D11_CREATE_DEVICE_VIDEO_SUPPORT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_debug</name> <init>= <expr><operator>!</operator><operator>!</operator><call><name>av_dict_get</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><literal type="string">"debug"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_UWP</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>LoadLibrary</name><argument_list>(<argument><expr><literal type="string">"d3d11_1sdklayers.dll"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>is_debug</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>is_debug</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>creationFlags</name> <operator>|=</operator> <name>D3D11_CREATE_DEVICE_DEBUG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_thread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>functions_loaded</name></expr></argument>, <argument><expr><name>load_functions</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mD3D11CreateDevice</name> <operator>||</operator> <operator>!</operator><name>mCreateDXGIFactory</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to load D3D11 library or its functions\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>device</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>IDXGIFactory2</name> <modifier>*</modifier></type><name>pDXGIFactory</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>mCreateDXGIFactory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>IID_IDXGIFactory2</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pDXGIFactory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>adapter</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><call><name>IDXGIFactory2_EnumAdapters</name><argument_list>(<argument><expr><name>pDXGIFactory</name></expr></argument>, <argument><expr><name>adapter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pAdapter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pAdapter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>IDXGIFactory2_Release</name><argument_list>(<argument><expr><name>pDXGIFactory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pAdapter</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DXGI_ADAPTER_DESC</name></type> <name>desc</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDXGIAdapter2_GetDesc</name><argument_list>(<argument><expr><name>pAdapter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Using device %04x:%04x (%ls).\n"</literal></expr></argument>,
<argument><expr><name><name>desc</name><operator>.</operator><name>VendorId</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>.</operator><name>DeviceId</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>.</operator><name>Description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>mD3D11CreateDevice</name><argument_list>(<argument><expr><name>pAdapter</name></expr></argument>, <argument><expr><ternary><condition><expr><name>pAdapter</name></expr> ?</condition><then> <expr><name>D3D_DRIVER_TYPE_UNKNOWN</name></expr> </then><else>: <expr><name>D3D_DRIVER_TYPE_HARDWARE</name></expr></else></ternary></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>creationFlags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>D3D11_SDK_VERSION</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>device_hwctx</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pAdapter</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IDXGIAdapter_Release</name><argument_list>(<argument><expr><name>pAdapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create Direct3D device (%lx)\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11Device_QueryInterface</name><argument_list>(<argument><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_ID3D10Multithread</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pMultithread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ID3D10Multithread_SetMultithreadProtected</name><argument_list>(<argument><expr><name>pMultithread</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ID3D10Multithread_Release</name><argument_list>(<argument><expr><name>pMultithread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_UWP</name> <operator>&amp;&amp;</operator> <name>HAVE_DXGIDEBUG_H</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>is_debug</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>dxgidebug_dll</name> <init>= <expr><call><name>LoadLibrary</name><argument_list>(<argument><expr><literal type="string">"dxgidebug.dll"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dxgidebug_dll</name></expr>)</condition> <block>{<block_content>
<function_decl><type><name>HRESULT</name></type> (<name>WINAPI</name> <modifier>*</modifier> <name>pf_DXGIGetDebugInterface</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GUID</name> <modifier>*</modifier></type><name>riid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppDebug</name></decl></parameter>)</parameter_list>
<init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>dxgidebug_dll</name></expr></argument>, <literal type="string">"DXGIGetDebugInterface"</literal>)</argument_list></call></expr></init>;</function_decl>
<if_stmt><if>if <condition>(<expr><name>pf_DXGIGetDebugInterface</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>IDXGIDebug</name> <modifier>*</modifier></type><name>dxgi_debug</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>pf_DXGIGetDebugInterface</name><argument_list>(<argument><expr><operator>&amp;</operator><name>IID_IDXGIDebug</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dxgi_debug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>dxgi_debug</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IDXGIDebug_ReportLiveObjects</name><argument_list>(<argument><expr><name>dxgi_debug</name></expr></argument>, <argument><expr><name>DXGI_DEBUG_ALL</name></expr></argument>, <argument><expr><name>DXGI_DEBUG_RLO_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>HWContextType</name></type> <name>ff_hwcontext_type_d3d11va</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AV_HWDEVICE_TYPE_D3D11VA</name></expr>,
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"D3D11VA"</literal></expr>,

<expr><operator>.</operator><name>device_hwctx_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AVD3D11VADeviceContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>frames_hwctx_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AVD3D11VAFramesContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>frames_priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>D3D11VAFramesContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>device_create</name> <operator>=</operator> <name>d3d11va_device_create</name></expr>,
<expr><operator>.</operator><name>device_init</name> <operator>=</operator> <name>d3d11va_device_init</name></expr>,
<expr><operator>.</operator><name>device_uninit</name> <operator>=</operator> <name>d3d11va_device_uninit</name></expr>,
<expr><operator>.</operator><name>frames_get_constraints</name> <operator>=</operator> <name>d3d11va_frames_get_constraints</name></expr>,
<expr><operator>.</operator><name>frames_init</name> <operator>=</operator> <name>d3d11va_frames_init</name></expr>,
<expr><operator>.</operator><name>frames_uninit</name> <operator>=</operator> <name>d3d11va_frames_uninit</name></expr>,
<expr><operator>.</operator><name>frames_get_buffer</name> <operator>=</operator> <name>d3d11va_get_buffer</name></expr>,
<expr><operator>.</operator><name>transfer_get_formats</name> <operator>=</operator> <name>d3d11va_transfer_get_formats</name></expr>,
<expr><operator>.</operator><name>transfer_data_to</name> <operator>=</operator> <name>d3d11va_transfer_data</name></expr>,
<expr><operator>.</operator><name>transfer_data_from</name> <operator>=</operator> <name>d3d11va_transfer_data</name></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator><block>{ <expr><name>AV_PIX_FMT_D3D11</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
