<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\pca.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pca.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>PCA</name><block>{
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>covariance</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>mean</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>z</name></decl>;</decl_stmt>
}</block></struct></type><name>PCA</name>;</typedef>

<function><type><name>PCA</name> <modifier>*</modifier></type><name>ff_pca_init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>PCA</name> <modifier>*</modifier></type><name>pca</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>n</name><operator>&lt;=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pca</name><operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pca</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pca</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pca</name><operator>-&gt;</operator><name>n</name></name><operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pca</name><operator>-&gt;</operator><name>z</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>pca</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pca</name><operator>-&gt;</operator><name>count</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pca</name><operator>-&gt;</operator><name>covariance</name></name><operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name>n</name><operator>*</operator><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pca</name><operator>-&gt;</operator><name>mean</name></name><operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pca</name><operator>-&gt;</operator><name>z</name></name> <operator>||</operator> <operator>!</operator><name><name>pca</name><operator>-&gt;</operator><name>covariance</name></name> <operator>||</operator> <operator>!</operator><name><name>pca</name><operator>-&gt;</operator><name>mean</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_pca_free</name><argument_list>(<argument><expr><name>pca</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>pca</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_pca_free</name><parameter_list>(<parameter><decl><type><name>PCA</name> <modifier>*</modifier></type><name>pca</name></decl></parameter>)</parameter_list><block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pca</name><operator>-&gt;</operator><name>covariance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pca</name><operator>-&gt;</operator><name>mean</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pca</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>pca</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_pca_add</name><parameter_list>(<parameter><decl><type><name>PCA</name> <modifier>*</modifier></type><name>pca</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>n</name><init>= <expr><name><name>pca</name><operator>-&gt;</operator><name>n</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name><name>pca</name><operator>-&gt;</operator><name>mean</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>j</name><operator>=</operator><name>i</name></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pca</name><operator>-&gt;</operator><name>covariance</name><index>[<expr><name>j</name> <operator>+</operator> <name>i</name><operator>*</operator><name>n</name></expr>]</index></name> <operator>+=</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
<expr_stmt><expr><name><name>pca</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_pca</name><parameter_list>(<parameter><decl><type><name>PCA</name> <modifier>*</modifier></type><name>pca</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>eigenvector</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>eigenvalue</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>pass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>n</name><init>= <expr><name><name>pca</name><operator>-&gt;</operator><name>n</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><name><name>pca</name><operator>-&gt;</operator><name>z</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>eigenvector</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>n</name><operator>*</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name><name>pca</name><operator>-&gt;</operator><name>mean</name><index>[<expr><name>j</name></expr>]</index></name> <operator>/=</operator> <name><name>pca</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eigenvector</name><index>[<expr><name>j</name> <operator>+</operator> <name>j</name><operator>*</operator><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>j</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name><name>pca</name><operator>-&gt;</operator><name>covariance</name><index>[<expr><name>j</name> <operator>+</operator> <name>i</name><operator>*</operator><name>n</name></expr>]</index></name> <operator>/=</operator> <name><name>pca</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pca</name><operator>-&gt;</operator><name>covariance</name><index>[<expr><name>j</name> <operator>+</operator> <name>i</name><operator>*</operator><name>n</name></expr>]</index></name> <operator>-=</operator> <name><name>pca</name><operator>-&gt;</operator><name>mean</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>pca</name><operator>-&gt;</operator><name>mean</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pca</name><operator>-&gt;</operator><name>covariance</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name><operator>*</operator><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>pca</name><operator>-&gt;</operator><name>covariance</name><index>[<expr><name>j</name> <operator>+</operator> <name>i</name><operator>*</operator><name>n</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>eigenvalue</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator> <name><name>pca</name><operator>-&gt;</operator><name>covariance</name><index>[<expr><name>j</name> <operator>+</operator> <name>j</name><operator>*</operator><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for<control>(<init><expr><name>pass</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>pass</name> <operator>&lt;</operator> <literal type="number">50</literal></expr>;</condition> <incr><expr><name>pass</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>sum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for<control>(<init><expr><name>j</name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>pca</name><operator>-&gt;</operator><name>covariance</name><index>[<expr><name>j</name> <operator>+</operator> <name>i</name><operator>*</operator><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<if_stmt><if>if<condition>(<expr><name>sum</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>maxvalue</name><init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>j</name><operator>=</operator><name>i</name></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>eigenvalue</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <name>maxvalue</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>maxvalue</name><operator>=</operator> <name><name>eigenvalue</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name><operator>=</operator> <name>j</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>eigenvalue</name><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator> <name><name>eigenvalue</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eigenvalue</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <name>maxvalue</name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>tmp</name><init>= <expr><name><name>eigenvector</name><index>[<expr><name>k</name> <operator>+</operator> <name>j</name><operator>*</operator><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>eigenvector</name><index>[<expr><name>k</name> <operator>+</operator> <name>j</name><operator>*</operator><name>n</name></expr>]</index></name><operator>=</operator> <name><name>eigenvector</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name><operator>*</operator><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eigenvector</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name><operator>*</operator><name>n</name></expr>]</index></name><operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<return>return <expr><name>pass</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<for>for<control>(<init><expr><name>j</name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>covar</name><init>= <expr><name><name>pca</name><operator>-&gt;</operator><name>covariance</name><index>[<expr><name>j</name> <operator>+</operator> <name>i</name><operator>*</operator><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>t</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>s</name></decl>,<decl><type ref="prev"/><name>tau</name></decl>,<decl><type ref="prev"/><name>theta</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>pass</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>covar</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>sum</name> <operator>/</operator> <operator>(</operator><literal type="number">5</literal><operator>*</operator><name>n</name><operator>*</operator><name>n</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> 
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>covar</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content> 
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>pass</name> <operator>&gt;=</operator><literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>fabs</name><argument_list>(<argument><expr><operator>(</operator><name><name>eigenvalue</name><index>[<expr><name>j</name></expr>]</index></name><operator>+</operator><name><name>z</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>/</operator><name>covar</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><literal type="number">32</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>fabs</name><argument_list>(<argument><expr><operator>(</operator><name><name>eigenvalue</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>/</operator><name>covar</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><literal type="number">32</literal><operator>)</operator></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>pca</name><operator>-&gt;</operator><name>covariance</name><index>[<expr><name>j</name> <operator>+</operator> <name>i</name><operator>*</operator><name>n</name></expr>]</index></name><operator>=</operator><literal type="number">0.0</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>h</name><operator>=</operator> <operator>(</operator><name><name>eigenvalue</name><index>[<expr><name>j</name></expr>]</index></name><operator>+</operator><name><name>z</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>eigenvalue</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>theta</name><operator>=</operator><literal type="number">0.5</literal><operator>*</operator><name>h</name><operator>/</operator><name>covar</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name><operator>=</operator><literal type="number">1.0</literal><operator>/</operator><operator>(</operator><call><name>fabs</name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">1.0</literal><operator>+</operator><name>theta</name><operator>*</operator><name>theta</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>theta</name> <operator>&lt;</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>-</operator><name>t</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name><operator>=</operator><literal type="number">1.0</literal><operator>/</operator><call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>+</operator><name>t</name><operator>*</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name><operator>=</operator><name>t</name><operator>*</operator><name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tau</name><operator>=</operator><name>s</name><operator>/</operator><operator>(</operator><literal type="number">1.0</literal><operator>+</operator><name>c</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name>t</name><operator>*</operator><name>covar</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <name>t</name><operator>*</operator><name>covar</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROTATE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>i</name></type></parameter>,<parameter><type><name>j</name></type></parameter>,<parameter><type><name>k</name></type></parameter>,<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{double g=a[j + i*n];double h=a[l + k*n];a[j + i*n]=g-s*(h+g*tau);a[l + k*n]=h+s*(g-h*tau); }</cpp:value></cpp:define>




<for>for<control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>k</name><operator>!=</operator><name>i</name> <operator>&amp;&amp;</operator> <name>k</name><operator>!=</operator><name>j</name></expr>)</condition><block>{<block_content>
<macro><name>ROTATE</name><argument_list>(<argument>pca-&gt;covariance</argument>,<argument>FFMIN(k,i)</argument>,<argument>FFMAX(k,i)</argument>,<argument>FFMIN(k,j)</argument>,<argument>FFMAX(k,j)</argument>)</argument_list></macro>
</block_content>}</block></if></if_stmt>
<macro><name>ROTATE</name><argument_list>(<argument>eigenvector</argument>,<argument>k</argument>,<argument>i</argument>,<argument>k</argument>,<argument>j</argument>)</argument_list></macro>
</block_content>}</block></for>
<expr_stmt><expr><name><name>pca</name><operator>-&gt;</operator><name>covariance</name><index>[<expr><name>j</name> <operator>+</operator> <name>i</name><operator>*</operator><name>n</name></expr>]</index></name><operator>=</operator><literal type="number">0.0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>eigenvalue</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0.0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
</unit>
