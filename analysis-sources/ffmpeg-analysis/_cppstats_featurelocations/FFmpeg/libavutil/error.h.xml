<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\error.h">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVUTIL_ERROR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVUTIL_ERROR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EDOM</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVERROR</name><parameter_list>(<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(-(e))</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVUNERROR</name><parameter_list>(<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(-(e))</cpp:value></cpp:define> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVERROR</name><parameter_list>(<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(e)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVUNERROR</name><parameter_list>(<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(e)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFERRTAG</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(-(int)MKTAG(a, b, c, d))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVERROR_BSF_NOT_FOUND</name></cpp:macro> <cpp:value>FFERRTAG(0xF8,'B','S','F')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVERROR_BUG</name></cpp:macro> <cpp:value>FFERRTAG( 'B','U','G','!')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVERROR_BUFFER_TOO_SMALL</name></cpp:macro> <cpp:value>FFERRTAG( 'B','U','F','S')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVERROR_DECODER_NOT_FOUND</name></cpp:macro> <cpp:value>FFERRTAG(0xF8,'D','E','C')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVERROR_DEMUXER_NOT_FOUND</name></cpp:macro> <cpp:value>FFERRTAG(0xF8,'D','E','M')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVERROR_ENCODER_NOT_FOUND</name></cpp:macro> <cpp:value>FFERRTAG(0xF8,'E','N','C')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVERROR_EOF</name></cpp:macro> <cpp:value>FFERRTAG( 'E','O','F',' ')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVERROR_EXIT</name></cpp:macro> <cpp:value>FFERRTAG( 'E','X','I','T')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVERROR_EXTERNAL</name></cpp:macro> <cpp:value>FFERRTAG( 'E','X','T',' ')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVERROR_FILTER_NOT_FOUND</name></cpp:macro> <cpp:value>FFERRTAG(0xF8,'F','I','L')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVERROR_INVALIDDATA</name></cpp:macro> <cpp:value>FFERRTAG( 'I','N','D','A')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVERROR_MUXER_NOT_FOUND</name></cpp:macro> <cpp:value>FFERRTAG(0xF8,'M','U','X')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVERROR_OPTION_NOT_FOUND</name></cpp:macro> <cpp:value>FFERRTAG(0xF8,'O','P','T')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVERROR_PATCHWELCOME</name></cpp:macro> <cpp:value>FFERRTAG( 'P','A','W','E')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVERROR_PROTOCOL_NOT_FOUND</name></cpp:macro> <cpp:value>FFERRTAG(0xF8,'P','R','O')</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVERROR_STREAM_NOT_FOUND</name></cpp:macro> <cpp:value>FFERRTAG(0xF8,'S','T','R')</cpp:value></cpp:define> 




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVERROR_BUG2</name></cpp:macro> <cpp:value>FFERRTAG( 'B','U','G',' ')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVERROR_UNKNOWN</name></cpp:macro> <cpp:value>FFERRTAG( 'U','N','K','N')</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVERROR_EXPERIMENTAL</name></cpp:macro> <cpp:value>(-0x2bb2afa8)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVERROR_INPUT_CHANGED</name></cpp:macro> <cpp:value>(-0x636e6701)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVERROR_OUTPUT_CHANGED</name></cpp:macro> <cpp:value>(-0x636e6702)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVERROR_HTTP_BAD_REQUEST</name></cpp:macro> <cpp:value>FFERRTAG(0xF8,'4','0','0')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVERROR_HTTP_UNAUTHORIZED</name></cpp:macro> <cpp:value>FFERRTAG(0xF8,'4','0','1')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVERROR_HTTP_FORBIDDEN</name></cpp:macro> <cpp:value>FFERRTAG(0xF8,'4','0','3')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVERROR_HTTP_NOT_FOUND</name></cpp:macro> <cpp:value>FFERRTAG(0xF8,'4','0','4')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVERROR_HTTP_OTHER_4XX</name></cpp:macro> <cpp:value>FFERRTAG(0xF8,'4','X','X')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVERROR_HTTP_SERVER_ERROR</name></cpp:macro> <cpp:value>FFERRTAG(0xF8,'5','X','X')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_ERROR_MAX_STRING_SIZE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>













<function_decl><type><name>int</name></type> <name>av_strerror</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>errnum</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>errbuf_size</name></decl></parameter>)</parameter_list>;</function_decl>











<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name> <modifier>*</modifier></type><name>av_make_error_string</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>errbuf_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>errnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_strerror</name><argument_list>(<argument><expr><name>errnum</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errbuf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>errbuf</name></expr>;</return>
</block_content>}</block></function>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_err2str</name><parameter_list>(<parameter><type><name>errnum</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>av_make_error_string((char[AV_ERROR_MAX_STRING_SIZE]){0}, AV_ERROR_MAX_STRING_SIZE, errnum)</cpp:value></cpp:define>






<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
