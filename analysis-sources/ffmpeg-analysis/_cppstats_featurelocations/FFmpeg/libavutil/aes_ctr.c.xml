<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\aes_ctr.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aes_ctr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"random_seed.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AES_BLOCK_SIZE</name></cpp:macro> <cpp:value>(16)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>AVAESCTR</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>AVAES</name></name><modifier>*</modifier></type> <name>aes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>counter</name><index>[<expr><name>AES_BLOCK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>encrypted_counter</name><index>[<expr><name>AES_BLOCK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_offset</name></decl>;</decl_stmt>
}</block></struct></type> <name>AVAESCTR</name>;</typedef>

<function><type><name><name>struct</name> <name>AVAESCTR</name></name> <modifier>*</modifier></type><name>av_aes_ctr_alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>AVAESCTR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_aes_ctr_set_iv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVAESCTR</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>iv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>AES_CTR_IV_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>counter</name></name> <operator>+</operator> <name>AES_CTR_IV_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>AES_CTR_IV_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>block_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_aes_ctr_set_full_iv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVAESCTR</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>iv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>block_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>av_aes_ctr_get_iv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVAESCTR</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>a</name><operator>-&gt;</operator><name>counter</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_aes_ctr_set_random_iv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVAESCTR</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>iv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>iv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_get_random_seed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_get_random_seed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_aes_ctr_set_iv</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_aes_ctr_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVAESCTR</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>aes</name></name> <operator>=</operator> <call><name>av_aes_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>a</name><operator>-&gt;</operator><name>aes</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_aes_init</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>aes</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>block_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_aes_ctr_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVAESCTR</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>a</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>aes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>av_aes_ctr_increment_be64</name><parameter_list>(<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>counter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>cur_pos</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>cur_pos</name> <operator>=</operator> <name>counter</name> <operator>+</operator> <literal type="number">7</literal></expr>;</init> <condition><expr><name>cur_pos</name> <operator>&gt;=</operator> <name>counter</name></expr>;</condition> <incr><expr><name>cur_pos</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>cur_pos</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cur_pos</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_aes_ctr_increment_iv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVAESCTR</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_aes_ctr_increment_be64</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>counter</name></name> <operator>+</operator> <name>AES_CTR_IV_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>AES_CTR_IV_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>block_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_aes_ctr_crypt</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVAESCTR</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>src_end</name> <init>= <expr><name>src</name> <operator>+</operator> <name>count</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>cur_end_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>encrypted_counter_pos</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>src</name> <operator>&lt;</operator> <name>src_end</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>block_offset</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_aes_crypt</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>aes</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>encrypted_counter</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_aes_ctr_increment_be64</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>counter</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>encrypted_counter_pos</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>encrypted_counter</name></name> <operator>+</operator> <name><name>a</name><operator>-&gt;</operator><name>block_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_end_pos</name> <operator>=</operator> <name>src</name> <operator>+</operator> <name>AES_BLOCK_SIZE</name> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>block_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_end_pos</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>cur_end_pos</name></expr></argument>, <argument><expr><name>src_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>block_offset</name></name> <operator>+=</operator> <name>cur_end_pos</name> <operator>-</operator> <name>src</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>block_offset</name></name> <operator>&amp;=</operator> <operator>(</operator><name>AES_BLOCK_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><name>src</name> <operator>&lt;</operator> <name>cur_end_pos</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator> <operator>^</operator> <operator>*</operator><name>encrypted_counter_pos</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></while>
</block_content>}</block></function>
</unit>
