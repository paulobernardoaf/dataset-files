<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\imgutils.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"imgutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"imgutils_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathematics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rational.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>av_image_fill_max_pixsteps</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name><name>max_pixsteps</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>max_pixstep_comps</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>pixdesc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>max_pixsteps</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>max_pixsteps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>max_pixstep_comps</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>max_pixstep_comps</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>max_pixstep_comps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVComponentDescriptor</name> <modifier>*</modifier></type><name>comp</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>pixdesc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>comp</name><operator>-&gt;</operator><name>step</name></name> <operator>&gt;</operator> <name><name>max_pixsteps</name><index>[<expr><name><name>comp</name><operator>-&gt;</operator><name>plane</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>max_pixsteps</name><index>[<expr><name><name>comp</name><operator>-&gt;</operator><name>plane</name></name></expr>]</index></name> <operator>=</operator> <name><name>comp</name><operator>-&gt;</operator><name>step</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>max_pixstep_comps</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>max_pixstep_comps</name><index>[<expr><name><name>comp</name><operator>-&gt;</operator><name>plane</name></name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier>
<name>int</name></type> <name>image_get_linesize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>max_step</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_step_comp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>shifted_w</name></decl>, <decl><type ref="prev"/><name>linesize</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>max_step_comp</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>max_step_comp</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>shifted_w</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>width</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>s</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>shifted_w</name> <operator>&amp;&amp;</operator> <name>max_step</name> <operator>&gt;</operator> <name>INT_MAX</name> <operator>/</operator> <name>shifted_w</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>linesize</name> <operator>=</operator> <name>max_step</name> <operator>*</operator> <name>shifted_w</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_BITSTREAM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>linesize</name> <operator>=</operator> <operator>(</operator><name>linesize</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>linesize</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_image_get_linesize</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>max_step</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>max_step_comp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name> <operator>||</operator> <name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_HWACCEL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_image_fill_max_pixsteps</name><argument_list>(<argument><expr><name>max_step</name></expr></argument>, <argument><expr><name>max_step_comp</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>image_get_linesize</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name><name>max_step</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>max_step_comp</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_image_fill_linesizes</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name><name>linesizes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>max_step</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>max_step_comp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>linesizes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>linesizes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name> <operator>||</operator> <name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_HWACCEL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_image_fill_max_pixsteps</name><argument_list>(<argument><expr><name>max_step</name></expr></argument>, <argument><expr><name>max_step_comp</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>image_get_linesize</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>max_step</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>max_step_comp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>linesizes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_image_fill_pointers</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>linesizes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>total_size</name></decl>, <decl><type ref="prev"/><name><name>size</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name><name>has_plane</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name> <operator>||</operator> <name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_HWACCEL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>linesizes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <operator>(</operator><name>INT_MAX</name> <operator>-</operator> <literal type="number">1024</literal><operator>)</operator> <operator>/</operator> <name>height</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>linesizes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>height</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_PAL</name> <operator>||</operator>
<name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_PSEUDOPAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <name><name>size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> 
<return>return <expr><name><name>size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">256</literal> <operator>*</operator> <literal type="number">4</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>has_plane</name><index>[<expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>plane</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>total_size</name> <operator>=</operator> <name><name>size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>has_plane</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>s</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>size</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>s</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>linesizes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>INT_MAX</name> <operator>/</operator> <name>h</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>h</name> <operator>*</operator> <name><name>linesizes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>total_size</name> <operator>&gt;</operator> <name>INT_MAX</name> <operator>-</operator> <name><name>size</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>total_size</name> <operator>+=</operator> <name><name>size</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>total_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>avpriv_set_systematic_pal2</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name><name>pal</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>pix_fmt</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_RGB8</name></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>i</name><operator>&gt;&gt;</operator><literal type="number">5</literal> <operator>)</operator><operator>*</operator><literal type="number">36</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>i</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator><operator>&amp;</operator><literal type="number">7</literal><operator>)</operator><operator>*</operator><literal type="number">36</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">3</literal> <operator>)</operator><operator>*</operator><literal type="number">85</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR8</name></expr>:</case>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>i</name><operator>&gt;&gt;</operator><literal type="number">6</literal> <operator>)</operator><operator>*</operator><literal type="number">85</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>i</name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator><operator>&amp;</operator><literal type="number">7</literal><operator>)</operator><operator>*</operator><literal type="number">36</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">7</literal> <operator>)</operator><operator>*</operator><literal type="number">36</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB4_BYTE</name></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>i</name><operator>&gt;&gt;</operator><literal type="number">3</literal> <operator>)</operator><operator>*</operator><literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>i</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>&amp;</operator><literal type="number">3</literal><operator>)</operator><operator>*</operator><literal type="number">85</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">1</literal> <operator>)</operator><operator>*</operator><literal type="number">255</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR4_BYTE</name></expr>:</case>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>i</name><operator>&gt;&gt;</operator><literal type="number">3</literal> <operator>)</operator><operator>*</operator><literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>i</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>&amp;</operator><literal type="number">3</literal><operator>)</operator><operator>*</operator><literal type="number">85</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">1</literal> <operator>)</operator><operator>*</operator><literal type="number">255</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_GRAY8</name></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>b</name> <operator>=</operator> <name>g</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>pal</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>b</name> <operator>+</operator> <operator>(</operator><name>g</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>r</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">0xFFU</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_image_alloc</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>pointers</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>linesizes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>align</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_image_check_size</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_image_fill_linesizes</name><argument_list>(<argument><expr><name>linesizes</name></expr></argument>, <argument><expr><name>pix_fmt</name></expr></argument>, <argument><expr><ternary><condition><expr><name>align</name><operator>&gt;</operator><literal type="number">7</literal></expr> ?</condition><then> <expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>w</name></expr></else></ternary></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>linesizes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>linesizes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_image_fill_pointers</name><argument_list>(<argument><expr><name>pointers</name></expr></argument>, <argument><expr><name>pix_fmt</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>linesizes</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>ret</name> <operator>+</operator> <name>align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_image_fill_pointers</name><argument_list>(<argument><expr><name>pointers</name></expr></argument>, <argument><expr><name>pix_fmt</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>linesizes</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_PAL</name> <operator>||</operator> <operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_PSEUDOPAL</name> <operator>&amp;&amp;</operator> <name><name>pointers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_set_systematic_pal2</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name><name>pointers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>align</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Formats with a palette require a minimum alignment of 4\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_PAL</name> <operator>||</operator>
<name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_PSEUDOPAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>pointers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator>
<name><name>pointers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>pointers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>linesizes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>h</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pointers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>linesizes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>pointers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>pointers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>linesizes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>ImgUtils</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>log_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl>;</decl_stmt>
}</block></struct></type> <name>ImgUtils</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>imgutils_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"IMGUTILS"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
<expr><operator>.</operator><name>log_level_offset_offset</name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>ImgUtils</name></expr></argument>, <argument><expr><name>log_offset</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>parent_log_context_offset</name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>ImgUtils</name></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>av_image_check_size2</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>max_pixels</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>log_offset</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ImgUtils</name></type> <name>imgutils</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class</name> <operator>=</operator> <operator>&amp;</operator><name>imgutils_class</name></expr>,
<expr><operator>.</operator><name>log_offset</name> <operator>=</operator> <name>log_offset</name></expr>,
<expr><operator>.</operator><name>log_ctx</name> <operator>=</operator> <name>log_ctx</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>stride</name> <init>= <expr><call><name>av_image_get_linesize</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>stride</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>stride</name> <operator>=</operator> <literal type="number">8LL</literal><operator>*</operator><name>w</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>stride</name> <operator>+=</operator> <literal type="number">128</literal><operator>*</operator><literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name>w</name><operator>&lt;=</operator><literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>int</name><operator>)</operator><name>h</name><operator>&lt;=</operator><literal type="number">0</literal> <operator>||</operator> <name>stride</name> <operator>&gt;=</operator> <name>INT_MAX</name> <operator>||</operator> <name>stride</name><operator>*</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>h</name><operator>+</operator><literal type="number">128</literal><operator>)</operator> <operator>&gt;=</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><operator>&amp;</operator><name>imgutils</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Picture size %ux%u is invalid\n"</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>max_pixels</name> <operator>&lt;</operator> <name>INT64_MAX</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>w</name><operator>*</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>h</name> <operator>&gt;</operator> <name>max_pixels</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><operator>&amp;</operator><name>imgutils</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Picture size %ux%u exceeds specified max pixel count %"</literal><name>PRId64</name><literal type="string">", see the documentation if you wish to increase it\n"</literal></expr></argument>,
<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>max_pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_image_check_size</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>log_offset</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>av_image_check_size2</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>INT64_MAX</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_NONE</name></expr></argument>, <argument><expr><name>log_offset</name></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_image_check_sar</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>sar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>scaled_dim</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sar</name><operator>.</operator><name>den</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>sar</name><operator>.</operator><name>num</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sar</name><operator>.</operator><name>num</name></name> <operator>||</operator> <name><name>sar</name><operator>.</operator><name>num</name></name> <operator>==</operator> <name><name>sar</name><operator>.</operator><name>den</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sar</name><operator>.</operator><name>num</name></name> <operator>&lt;</operator> <name><name>sar</name><operator>.</operator><name>den</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>scaled_dim</name> <operator>=</operator> <call><name>av_rescale_rnd</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>sar</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>sar</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name>AV_ROUND_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>scaled_dim</name> <operator>=</operator> <call><name>av_rescale_rnd</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>sar</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name><name>sar</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name>AV_ROUND_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>scaled_dim</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>image_copy_plane</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dst_linesize</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>src_linesize</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>bytewidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst</name> <operator>||</operator> <operator>!</operator><name>src</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name>src_linesize</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>bytewidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name>dst_linesize</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>bytewidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition><expr><name>height</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>height</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>bytewidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_linesize</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>image_copy_plane_uc_from</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dst_linesize</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>src_linesize</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>bytewidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86</name></expr></cpp:if>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_image_copy_plane_uc_from_x86</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_linesize</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_linesize</name></expr></argument>,
<argument><expr><name>bytewidth</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>image_copy_plane</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_linesize</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_linesize</name></expr></argument>, <argument><expr><name>bytewidth</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_image_copy_plane</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_linesize</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_linesize</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>bytewidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>image_copy_plane</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_linesize</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_linesize</name></expr></argument>, <argument><expr><name>bytewidth</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>image_copy</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name><name>dst_linesizes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name><name>src_linesizes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>copy_plane</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name> <operator>||</operator> <name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_HWACCEL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_PAL</name> <operator>||</operator>
<name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_PSEUDOPAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>copy_plane</name><argument_list>(<argument><expr><name><name>dst_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst_linesizes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>src_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src_linesizes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_PAL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>dst_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>src_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal><operator>*</operator><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>planes_nb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>planes_nb</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>planes_nb</name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>planes_nb</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name>height</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>bwidth</name> <init>= <expr><call><name>av_image_get_linesize</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bwidth</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"av_image_get_linesize failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>copy_plane</name><argument_list>(<argument><expr><name><name>dst_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst_linesizes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>src_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>src_linesizes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>bwidth</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_image_copy</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>dst_linesizes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>src_linesizes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name><name>dst_linesizes1</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>src_linesizes1</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst_linesizes1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dst_linesizes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src_linesizes1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src_linesizes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>image_copy</name><argument_list>(<argument><expr><name>dst_data</name></expr></argument>, <argument><expr><name>dst_linesizes1</name></expr></argument>, <argument><expr><name>src_data</name></expr></argument>, <argument><expr><name>src_linesizes1</name></expr></argument>, <argument><expr><name>pix_fmt</name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>image_copy_plane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_image_copy_uc_from</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name><name>dst_linesizes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name><name>src_linesizes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>image_copy</name><argument_list>(<argument><expr><name>dst_data</name></expr></argument>, <argument><expr><name>dst_linesizes</name></expr></argument>, <argument><expr><name>src_data</name></expr></argument>, <argument><expr><name>src_linesizes</name></expr></argument>, <argument><expr><name>pix_fmt</name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>image_copy_plane_uc_from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_image_fill_arrays</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>dst_linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>align</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_image_check_size</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_image_fill_linesizes</name><argument_list>(<argument><expr><name>dst_linesize</name></expr></argument>, <argument><expr><name>pix_fmt</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst_linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>dst_linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><call><name>av_image_fill_pointers</name><argument_list>(<argument><expr><name>dst_data</name></expr></argument>, <argument><expr><name>pix_fmt</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>src</name></expr></argument>, <argument><expr><name>dst_linesize</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_image_get_buffer_size</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>align</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_image_check_size</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_PSEUDOPAL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>align</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>height</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>av_image_fill_arrays</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pix_fmt</name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>align</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_image_copy_to_buffer</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>src_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>src_linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>align</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>nb_planes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name><name>linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>av_image_get_buffer_size</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>align</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>dst_size</name> <operator>||</operator> <name>size</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>desc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>nb_planes</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>plane</name></expr></argument>, <argument><expr><name>nb_planes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>nb_planes</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_image_fill_linesizes</name><argument_list>(<argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>pix_fmt</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_planes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>shift</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>src_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name><name>src_linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_PAL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>d32</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>d32</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><call><name>AV_RN32</name><argument_list>(<argument><expr><name><name>src_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>memset_bytes</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dst_size</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>clear</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>clear_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>same</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>clear_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>clear_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>clear</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>clear</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>same</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>same</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>clear_size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>clear_size</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>clear</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dst_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>clear_size</name> <operator>&gt;</operator> <name>dst_size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>clear_size</name> <operator>=</operator> <name>dst_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>clear</name></expr></argument>, <argument><expr><name>clear_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_memcpy_backptr</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>clear_size</name></expr></argument>, <argument><expr><name>clear_size</name></expr></argument>, <argument><expr><name>dst_size</name> <operator>-</operator> <name>clear_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_BLOCK_SIZE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>av_image_fill_black</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name><name>dst_linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVColorRange</name></name></type> <name>range</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_planes</name> <init>= <expr><call><name>av_pix_fmt_count_planes</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>clear_block</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>MAX_BLOCK_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>clear_block_size</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name><name>plane_line_bytes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rgb</name></decl>, <decl><type ref="prev"/><name>limited</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>plane</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name> <operator>||</operator> <name><name>nb_planes</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>nb_planes</name></expr></argument> &gt;</argument_list></name> <literal type="number">4</literal> <operator>||</operator> <name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_HWACCEL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rgb</name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_RGB</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>limited</name> <operator>=</operator> <operator>!</operator><name>rgb</name> <operator>&amp;&amp;</operator> <name>range</name> <operator>!=</operator> <name>AVCOL_RANGE_JPEG</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_BITSTREAM</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>bytewidth</name> <init>= <expr><call><name>av_image_get_linesize</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mono</name> <init>= <expr><name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_MONOWHITE</name> <operator>||</operator> <name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_MONOBLACK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fill</name> <init>= <expr><ternary><condition><expr><name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_MONOWHITE</name></expr> ?</condition><then> <expr><literal type="number">0xFF</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>nb_planes</name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><name>rgb</name> <operator>||</operator> <name>mono</name><operator>)</operator> <operator>||</operator> <name>bytewidth</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst_data</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>dst_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>


<for>for <control>(<init>;</init><condition><expr><name>height</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>height</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>fill</name></expr></argument>, <argument><expr><name>bytewidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name><name>dst_linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVComponentDescriptor</name></type> <name>comp</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>c</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name><name>clear_block_size</name><index>[<expr><name><name>comp</name><operator>.</operator><name>plane</name></name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>clear_block_size</name><index>[<expr><name><name>comp</name><operator>.</operator><name>plane</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>comp</name><operator>.</operator><name>step</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>clear_block_size</name><index>[<expr><name><name>comp</name><operator>.</operator><name>plane</name></name></expr>]</index></name> <operator>&gt;</operator> <name>MAX_BLOCK_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVComponentDescriptor</name></type> <name>comp</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>c</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name><name>clear_block_size</name><index>[<expr><name><name>comp</name><operator>.</operator><name>plane</name></name></expr>]</index></name> <operator>/</operator> <name><name>comp</name><operator>.</operator><name>step</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>c_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>c_linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>src_array</name><index>[<expr><name>MAX_BLOCK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>src</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>comp</name><operator>.</operator><name>depth</name></name> <operator>&gt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rgb</name> <operator>&amp;&amp;</operator> <name><name>comp</name><operator>.</operator><name>depth</name></name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>limited</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>src</name> <operator>=</operator> <literal type="number">16</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>comp</name><operator>.</operator><name>depth</name></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>rgb</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>src</name> <operator>=</operator> <literal type="number">128</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>comp</name><operator>.</operator><name>depth</name></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>comp</name><operator>.</operator><name>depth</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>src_array</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c_data</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>clear_block</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_write_image_line</name><argument_list>(<argument><expr><name>src_array</name></expr></argument>, <argument><expr><name>c_data</name></expr></argument>, <argument><expr><name>c_linesize</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <name>nb_planes</name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>plane_line_bytes</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>=</operator> <call><name>av_image_get_linesize</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>plane_line_bytes</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst_data</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <name>nb_planes</name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytewidth</name> <init>= <expr><name><name>plane_line_bytes</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>dst_data</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>chroma_div</name> <init>= <expr><ternary><condition><expr><name>plane</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>plane</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>plane_h</name> <init>= <expr><operator>(</operator><operator>(</operator><name>height</name> <operator>+</operator> <operator>(</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>chroma_div</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>chroma_div</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>plane_h</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>plane_h</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memset_bytes</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>bytewidth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>clear_block</name><index>[<expr><name>plane</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>clear_block_size</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>+=</operator> <name><name>dst_linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
