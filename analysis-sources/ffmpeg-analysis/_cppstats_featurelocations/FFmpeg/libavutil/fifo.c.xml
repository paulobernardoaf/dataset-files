<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\fifo.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fifo.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>AVFifoBuffer</name> <modifier>*</modifier></type><name>fifo_alloc_common</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFifoBuffer</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVFifoBuffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_fifo_reset</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>AVFifoBuffer</name> <modifier>*</modifier></type><name>av_fifo_alloc</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>fifo_alloc_common</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>AVFifoBuffer</name> <modifier>*</modifier></type><name>av_fifo_alloc_array</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>av_malloc_array</name><argument_list>(<argument><expr><name>nmemb</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>fifo_alloc_common</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>nmemb</name> <operator>*</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_fifo_free</name><parameter_list>(<parameter><decl><type><name>AVFifoBuffer</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_fifo_freep</name><parameter_list>(<parameter><decl><type><name>AVFifoBuffer</name> <modifier>*</modifier><modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_fifo_free</name><argument_list>(<argument><expr><operator>*</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>f</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_fifo_reset</name><parameter_list>(<parameter><decl><type><name>AVFifoBuffer</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>wptr</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>rptr</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>wndx</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>rndx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_fifo_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVFifoBuffer</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>wndx</name></name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>rndx</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_fifo_space</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVFifoBuffer</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>f</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>buffer</name></name> <operator>-</operator> <call><name>av_fifo_size</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_fifo_realloc2</name><parameter_list>(<parameter><decl><type><name>AVFifoBuffer</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>new_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>old_size</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>buffer</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>old_size</name> <operator>&lt;</operator> <name>new_size</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>av_fifo_size</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFifoBuffer</name> <modifier>*</modifier></type><name>f2</name> <init>= <expr><call><name>av_fifo_alloc</name><argument_list>(<argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_fifo_generic_read</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>f2</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f2</name><operator>-&gt;</operator><name>wptr</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f2</name><operator>-&gt;</operator><name>wndx</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>f</name> <operator>=</operator> <operator>*</operator><name>f2</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_fifo_grow</name><parameter_list>(<parameter><decl><type><name>AVFifoBuffer</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>old_size</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>buffer</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>size</name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>av_fifo_size</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>av_fifo_size</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>old_size</name> <operator>&lt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>av_fifo_realloc2</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>old_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>av_fifo_generic_write</name><parameter_list>(<parameter><decl><type><name>AVFifoBuffer</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>total</name> <init>= <expr><name>size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>wndx</name><init>= <expr><name><name>f</name><operator>-&gt;</operator><name>wndx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>wptr</name><init>= <expr><name><name>f</name><operator>-&gt;</operator><name>wptr</name></name></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name>wptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>func</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>func</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>wptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>wptr</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>wptr</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wptr</name> <operator>&gt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>wptr</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>wndx</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>wndx</name></name><operator>=</operator> <name>wndx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>wptr</name></name><operator>=</operator> <name>wptr</name></expr>;</expr_stmt>
<return>return <expr><name>total</name> <operator>-</operator> <name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_fifo_generic_peek_at</name><parameter_list>(<parameter><decl><type><name>AVFifoBuffer</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rptr</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>rptr</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>offset</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>buf_size</name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>offset</name> <operator>&lt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>wndx</name></name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>rndx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name>rptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rptr</name> <operator>+=</operator> <name>offset</name> <operator>-</operator> <operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>buffer</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>rptr</name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><name>buf_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rptr</name> <operator>&gt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rptr</name> <operator>-=</operator> <name><name>f</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name>rptr</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>func</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>func</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>rptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>rptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>dest</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>buf_size</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rptr</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_fifo_generic_peek</name><parameter_list>(<parameter><decl><type><name>AVFifoBuffer</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rptr</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>rptr</name></name></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name>rptr</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>func</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>func</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>rptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>rptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>dest</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>rptr</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rptr</name> <operator>&gt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rptr</name> <operator>-=</operator> <name><name>f</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>buf_size</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>buf_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_fifo_generic_read</name><parameter_list>(<parameter><decl><type><name>AVFifoBuffer</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>

<do>do <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>rptr</name></name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>func</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>func</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>rptr</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>rptr</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>dest</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_fifo_drain</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_size</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>buf_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>av_fifo_drain</name><parameter_list>(<parameter><decl><type><name>AVFifoBuffer</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><call><name>av_fifo_size</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>rptr</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>rptr</name></name> <operator>&gt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>rptr</name></name> <operator>-=</operator> <name><name>f</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>rndx</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
