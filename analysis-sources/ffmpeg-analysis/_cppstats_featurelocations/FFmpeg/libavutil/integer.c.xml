<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\integer.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"integer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avassert.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVInteger</name></type> <name>zero_i</name></decl>;</decl_stmt>

<function><type><name>AVInteger</name></type> <name>av_add_i</name><parameter_list>(<parameter><decl><type><name>AVInteger</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>AVInteger</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>carry</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>AV_INTEGER_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name>carry</name><operator>=</operator> <operator>(</operator><name>carry</name><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator> <operator>+</operator> <name><name>a</name><operator>.</operator><name>v</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <name>carry</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>a</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>AVInteger</name></type> <name>av_sub_i</name><parameter_list>(<parameter><decl><type><name>AVInteger</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>AVInteger</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>carry</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>AV_INTEGER_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name>carry</name><operator>=</operator> <operator>(</operator><name>carry</name><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator> <operator>+</operator> <name><name>a</name><operator>.</operator><name>v</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <name>carry</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>a</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_log2_i</name><parameter_list>(<parameter><decl><type><name>AVInteger</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><name>AV_INTEGER_SIZE</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>a</name><operator>.</operator><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>av_log2_16bit</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">16</literal><operator>*</operator><name>i</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>AVInteger</name></type> <name>av_mul_i</name><parameter_list>(<parameter><decl><type><name>AVInteger</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>AVInteger</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>AVInteger</name></type> <name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>na</name><init>= <expr><operator>(</operator><call><name>av_log2_i</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">16</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb</name><init>= <expr><operator>(</operator><call><name>av_log2_i</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">16</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>na</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>carry</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>a</name><operator>.</operator><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<for>for<control>(<init><expr><name>j</name><operator>=</operator><name>i</name></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>AV_INTEGER_SIZE</name> <operator>&amp;&amp;</operator> <name>j</name><operator>-</operator><name>i</name><operator>&lt;=</operator><name>nb</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name>carry</name><operator>=</operator> <operator>(</operator><name>carry</name><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator> <operator>+</operator> <name><name>out</name><operator>.</operator><name>v</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>a</name><operator>.</operator><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>b</name><operator>.</operator><name>v</name><index>[<expr><name>j</name><operator>-</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>.</operator><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator> <name>carry</name></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_cmp_i</name><parameter_list>(<parameter><decl><type><name>AVInteger</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>AVInteger</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v</name><init>= <expr><operator>(</operator><name>int16_t</name><operator>)</operator><name><name>a</name><operator>.</operator><name>v</name><index>[<expr><name>AV_INTEGER_SIZE</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name><name>b</name><operator>.</operator><name>v</name><index>[<expr><name>AV_INTEGER_SIZE</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>v</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>v</name><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator><operator>|</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><name>AV_INTEGER_SIZE</name><operator>-</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name><init>= <expr><name><name>a</name><operator>.</operator><name>v</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>v</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>v</name><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator><operator>|</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>AVInteger</name></type> <name>av_shr_i</name><parameter_list>(<parameter><decl><type><name>AVInteger</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>AVInteger</name></type> <name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>AV_INTEGER_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name><init>= <expr><name>i</name> <operator>+</operator> <operator>(</operator><name>s</name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>v</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>index</name><operator>+</operator><literal type="number">1</literal><operator>&lt;</operator><name>AV_INTEGER_SIZE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>v</name><index>[<expr><name>index</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>index</name> <operator>&lt;</operator><name>AV_INTEGER_SIZE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>v</name><operator>+=</operator> <name><name>a</name><operator>.</operator><name>v</name><index>[<expr><name>index</name></expr> ]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>out</name><operator>.</operator><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <name>v</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>s</name><operator>&amp;</operator><literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>AVInteger</name></type> <name>av_mod_i</name><parameter_list>(<parameter><decl><type><name>AVInteger</name> <modifier>*</modifier></type><name>quot</name></decl></parameter>, <parameter><decl><type><name>AVInteger</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>AVInteger</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name><init>= <expr><call><name>av_log2_i</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>av_log2_i</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVInteger</name></type> <name>quot_temp</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>quot</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>quot</name> <operator>=</operator> <operator>&amp;</operator><name>quot_temp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int16_t</name><operator>)</operator><name><name>a</name><operator>.</operator><name>v</name><index>[<expr><name>AV_INTEGER_SIZE</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>av_mod_i</name><argument_list>(<argument><expr><name>quot</name></expr></argument>, <argument><expr><call><name>av_sub_i</name><argument_list>(<argument><expr><name>zero_i</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>quot</name> <operator>=</operator> <call><name>av_sub_i</name><argument_list>(<argument><expr><name>zero_i</name></expr></argument>, <argument><expr><operator>*</operator><name>quot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>av_sub_i</name><argument_list>(<argument><expr><name>zero_i</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator><name><name>a</name><operator>.</operator><name>v</name><index>[<expr><name>AV_INTEGER_SIZE</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name><name>b</name><operator>.</operator><name>v</name><index>[<expr><name>AV_INTEGER_SIZE</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><call><name>av_log2_i</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>&gt;=</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b</name><operator>=</operator> <call><name>av_shr_i</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>-</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>quot</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVInteger</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><name>i</name><operator>--</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>quot</name><operator>=</operator> <call><name>av_shr_i</name><argument_list>(<argument><expr><operator>*</operator><name>quot</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>av_cmp_i</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>a</name><operator>=</operator> <call><name>av_sub_i</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>quot</name><operator>-&gt;</operator><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>b</name><operator>=</operator> <call><name>av_shr_i</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>a</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>AVInteger</name></type> <name>av_div_i</name><parameter_list>(<parameter><decl><type><name>AVInteger</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>AVInteger</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>AVInteger</name></type> <name>quot</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_mod_i</name><argument_list>(<argument><expr><operator>&amp;</operator><name>quot</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>quot</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>AVInteger</name></type> <name>av_int2i</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>AVInteger</name></type> <name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>AV_INTEGER_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name><name>out</name><operator>.</operator><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name><operator>&gt;&gt;=</operator><literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>av_i2int</name><parameter_list>(<parameter><decl><type><name>AVInteger</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>out</name><init>=<expr><operator>(</operator><name>int8_t</name><operator>)</operator><name><name>a</name><operator>.</operator><name>v</name><index>[<expr><name>AV_INTEGER_SIZE</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator> <name>AV_INTEGER_SIZE</name><operator>-</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>out</name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>+</operator> <name><name>a</name><operator>.</operator><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>
</unit>
