<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\tx.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tx_priv.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>ff_tx_type_is_mdct</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVTXType</name></name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_TX_FLOAT_MDCT</name></expr>:</case>
<case>case <expr><name>AV_TX_DOUBLE_MDCT</name></expr>:</case>
<case>case <expr><name>AV_TX_INT32_MDCT</name></expr>:</case>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>mulinv</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>%</operator> <name>m</name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>n</name> <operator>*</operator> <name>x</name><operator>)</operator> <operator>%</operator> <name>m</name><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>x</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>


<function><type><name>int</name></type> <name>ff_tx_gen_compound_mapping</name><parameter_list>(<parameter><decl><type><name>AVTXContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>in_map</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>out_map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>n</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>n</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>m</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>m</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>inv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>len</name> <init>= <expr><name>n</name><operator>*</operator><name>m</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>m_inv</name> <init>= <expr><call><name>mulinv</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>n_inv</name> <init>= <expr><call><name>mulinv</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mdct</name> <init>= <expr><call><name>ff_tx_type_is_mdct</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>pfatab</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>len</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>pfatab</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>in_map</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pfatab</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>out_map</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pfatab</name></name> <operator>+</operator> <name>n</name><operator>*</operator><name>m</name></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>in_map</name><index>[<expr><name>j</name><operator>*</operator><name>n</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>i</name><operator>*</operator><name>m</name> <operator>+</operator> <name>j</name><operator>*</operator><name>n</name><operator>)</operator> <operator>%</operator> <name>len</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>mdct</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_map</name><index>[<expr><operator>(</operator><name>i</name><operator>*</operator><name>m</name><operator>*</operator><name>m_inv</name> <operator>+</operator> <name>j</name><operator>*</operator><name>n</name><operator>*</operator><name>n_inv</name><operator>)</operator> <operator>%</operator> <name>len</name></expr>]</index></name> <operator>=</operator> <name>i</name><operator>*</operator><name>m</name> <operator>+</operator> <name>j</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name>inv</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><operator>&amp;</operator><name><name>in_map</name><index>[<expr><name>i</name><operator>*</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt> 
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><name>n</name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name><name>tmp</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>in_map</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">15</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">15</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>in_map</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">15</literal> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name><name>tmp</name><index>[<expr><operator>(</operator><name>i</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <name>j</name><operator>*</operator><literal type="number">5</literal><operator>)</operator> <operator>%</operator> <literal type="number">15</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_tx_gen_ptwo_revtab</name><parameter_list>(<parameter><decl><type><name>AVTXContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>m</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>m</name></name></expr></init></decl>, <decl><type ref="prev"/><name>inv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>inv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>revtab</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>m</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>revtab</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><operator>-</operator><call><name>split_radix_permutation</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>inv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name>m</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>revtab</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>av_tx_uninit</name><parameter_list>(<parameter><decl><type><name>AVTXContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>pfatab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>exptab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>revtab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>tmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>av_tx_init</name><parameter_list>(<parameter><decl><type><name>AVTXContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>av_tx_fn</name> <modifier>*</modifier></type><name>tx</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVTXType</name></name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>inv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>scale</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVTXContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_TX_FLOAT_FFT</name></expr>:</case>
<case>case <expr><name>AV_TX_FLOAT_MDCT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ff_tx_init_mdct_fft_float</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tx</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>inv</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AV_TX_DOUBLE_FFT</name></expr>:</case>
<case>case <expr><name>AV_TX_DOUBLE_MDCT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ff_tx_init_mdct_fft_double</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tx</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>inv</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AV_TX_INT32_FFT</name></expr>:</case>
<case>case <expr><name>AV_TX_INT32_MDCT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ff_tx_init_mdct_fft_int32</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tx</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>inv</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></switch>

<expr_stmt><expr><operator>*</operator><name>ctx</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_tx_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tx</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>
</unit>
