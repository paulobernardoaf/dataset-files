<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\xtea.c">





























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avutil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xtea.h"</cpp:file></cpp:include>

<function><type><name>AVXTEA</name> <modifier>*</modifier></type><name>av_xtea_alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>AVXTEA</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_xtea_init</name><parameter_list>(<parameter><decl><type><name>AVXTEA</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>key</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>key</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_xtea_le_init</name><parameter_list>(<parameter><decl><type><name>AVXTEA</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>key</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>key</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xtea_crypt_ecb</name><parameter_list>(<parameter><decl><type><name>AVXTEA</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>decrypt</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>v0</name></decl>, <decl><type ref="prev"/><name>v1</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>CONFIG_SMALL</name></expr></cpp:if>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>k0</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>k1</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>k2</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>key</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>k3</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>key</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>v0</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v1</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>decrypt</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SMALL</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>delta</name> <init>= <expr><literal type="number">0x9E3779B9U</literal></expr></init></decl>, <decl><type ref="prev"/><name>sum</name> <init>= <expr><name>delta</name> <operator>*</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>v1</name> <operator>-=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>v0</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>v0</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name>v0</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name>sum</name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>key</name><index>[<expr><operator>(</operator><name>sum</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>-=</operator> <name>delta</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v0</name> <operator>-=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>v1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>v1</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name>v1</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name>sum</name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>sum</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DSTEP</name><parameter_list>(<parameter><type><name>SUM</name></type></parameter>, <parameter><type><name>K0</name></type></parameter>, <parameter><type><name>K1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v1 -= (((v0 &lt;&lt; 4) ^ (v0 &gt;&gt; 5)) + v0) ^ (SUM + K0); v0 -= (((v1 &lt;&lt; 4) ^ (v1 &gt;&gt; 5)) + v1) ^ (SUM - 0x9E3779B9U + K1)</cpp:value></cpp:define>



<expr_stmt><expr><call><name>DSTEP</name><argument_list>(<argument><expr><literal type="number">0xC6EF3720U</literal></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DSTEP</name><argument_list>(<argument><expr><literal type="number">0x28B7BD67U</literal></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DSTEP</name><argument_list>(<argument><expr><literal type="number">0x8A8043AEU</literal></expr></argument>, <argument><expr><name>k0</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DSTEP</name><argument_list>(<argument><expr><literal type="number">0xEC48C9F5U</literal></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DSTEP</name><argument_list>(<argument><expr><literal type="number">0x4E11503CU</literal></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DSTEP</name><argument_list>(<argument><expr><literal type="number">0xAFD9D683U</literal></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DSTEP</name><argument_list>(<argument><expr><literal type="number">0x11A25CCAU</literal></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DSTEP</name><argument_list>(<argument><expr><literal type="number">0x736AE311U</literal></expr></argument>, <argument><expr><name>k0</name></expr></argument>, <argument><expr><name>k0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DSTEP</name><argument_list>(<argument><expr><literal type="number">0xD5336958U</literal></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DSTEP</name><argument_list>(<argument><expr><literal type="number">0x36FBEF9FU</literal></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DSTEP</name><argument_list>(<argument><expr><literal type="number">0x98C475E6U</literal></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DSTEP</name><argument_list>(<argument><expr><literal type="number">0xFA8CFC2DU</literal></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>k0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DSTEP</name><argument_list>(<argument><expr><literal type="number">0x5C558274U</literal></expr></argument>, <argument><expr><name>k0</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DSTEP</name><argument_list>(<argument><expr><literal type="number">0xBE1E08BBU</literal></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DSTEP</name><argument_list>(<argument><expr><literal type="number">0x1FE68F02U</literal></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DSTEP</name><argument_list>(<argument><expr><literal type="number">0x81AF1549U</literal></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DSTEP</name><argument_list>(<argument><expr><literal type="number">0xE3779B90U</literal></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DSTEP</name><argument_list>(<argument><expr><literal type="number">0x454021D7U</literal></expr></argument>, <argument><expr><name>k0</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DSTEP</name><argument_list>(<argument><expr><literal type="number">0xA708A81EU</literal></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DSTEP</name><argument_list>(<argument><expr><literal type="number">0x08D12E65U</literal></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DSTEP</name><argument_list>(<argument><expr><literal type="number">0x6A99B4ACU</literal></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DSTEP</name><argument_list>(<argument><expr><literal type="number">0xCC623AF3U</literal></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DSTEP</name><argument_list>(<argument><expr><literal type="number">0x2E2AC13AU</literal></expr></argument>, <argument><expr><name>k0</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DSTEP</name><argument_list>(<argument><expr><literal type="number">0x8FF34781U</literal></expr></argument>, <argument><expr><name>k0</name></expr></argument>, <argument><expr><name>k0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DSTEP</name><argument_list>(<argument><expr><literal type="number">0xF1BBCDC8U</literal></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DSTEP</name><argument_list>(<argument><expr><literal type="number">0x5384540FU</literal></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DSTEP</name><argument_list>(<argument><expr><literal type="number">0xB54CDA56U</literal></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DSTEP</name><argument_list>(<argument><expr><literal type="number">0x1715609DU</literal></expr></argument>, <argument><expr><name>k0</name></expr></argument>, <argument><expr><name>k0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DSTEP</name><argument_list>(<argument><expr><literal type="number">0x78DDE6E4U</literal></expr></argument>, <argument><expr><name>k0</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DSTEP</name><argument_list>(<argument><expr><literal type="number">0xDAA66D2BU</literal></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DSTEP</name><argument_list>(<argument><expr><literal type="number">0x3C6EF372U</literal></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DSTEP</name><argument_list>(<argument><expr><literal type="number">0x9E3779B9U</literal></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>k0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>iv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v0</name> <operator>^=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v1</name> <operator>^=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>iv</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SMALL</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>delta</name> <init>= <expr><literal type="number">0x9E3779B9U</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>v0</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>v1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>v1</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name>v1</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name>sum</name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>sum</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v1</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>v0</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>v0</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name>v0</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name>sum</name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>key</name><index>[<expr><operator>(</operator><name>sum</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ESTEP</name><parameter_list>(<parameter><type><name>SUM</name></type></parameter>, <parameter><type><name>K0</name></type></parameter>, <parameter><type><name>K1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v0 += (((v1 &lt;&lt; 4) ^ (v1 &gt;&gt; 5)) + v1) ^ (SUM + K0);v1 += (((v0 &lt;&lt; 4) ^ (v0 &gt;&gt; 5)) + v0) ^ (SUM + 0x9E3779B9U + K1)</cpp:value></cpp:define>


<expr_stmt><expr><call><name>ESTEP</name><argument_list>(<argument><expr><literal type="number">0x00000000U</literal></expr></argument>, <argument><expr><name>k0</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESTEP</name><argument_list>(<argument><expr><literal type="number">0x9E3779B9U</literal></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESTEP</name><argument_list>(<argument><expr><literal type="number">0x3C6EF372U</literal></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESTEP</name><argument_list>(<argument><expr><literal type="number">0xDAA66D2BU</literal></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>k0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESTEP</name><argument_list>(<argument><expr><literal type="number">0x78DDE6E4U</literal></expr></argument>, <argument><expr><name>k0</name></expr></argument>, <argument><expr><name>k0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESTEP</name><argument_list>(<argument><expr><literal type="number">0x1715609DU</literal></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESTEP</name><argument_list>(<argument><expr><literal type="number">0xB54CDA56U</literal></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESTEP</name><argument_list>(<argument><expr><literal type="number">0x5384540FU</literal></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESTEP</name><argument_list>(<argument><expr><literal type="number">0xF1BBCDC8U</literal></expr></argument>, <argument><expr><name>k0</name></expr></argument>, <argument><expr><name>k0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESTEP</name><argument_list>(<argument><expr><literal type="number">0x8FF34781U</literal></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESTEP</name><argument_list>(<argument><expr><literal type="number">0x2E2AC13AU</literal></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESTEP</name><argument_list>(<argument><expr><literal type="number">0xCC623AF3U</literal></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESTEP</name><argument_list>(<argument><expr><literal type="number">0x6A99B4ACU</literal></expr></argument>, <argument><expr><name>k0</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESTEP</name><argument_list>(<argument><expr><literal type="number">0x08D12E65U</literal></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESTEP</name><argument_list>(<argument><expr><literal type="number">0xA708A81EU</literal></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESTEP</name><argument_list>(<argument><expr><literal type="number">0x454021D7U</literal></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESTEP</name><argument_list>(<argument><expr><literal type="number">0xE3779B90U</literal></expr></argument>, <argument><expr><name>k0</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESTEP</name><argument_list>(<argument><expr><literal type="number">0x81AF1549U</literal></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESTEP</name><argument_list>(<argument><expr><literal type="number">0x1FE68F02U</literal></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESTEP</name><argument_list>(<argument><expr><literal type="number">0xBE1E08BBU</literal></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>k0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESTEP</name><argument_list>(<argument><expr><literal type="number">0x5C558274U</literal></expr></argument>, <argument><expr><name>k0</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESTEP</name><argument_list>(<argument><expr><literal type="number">0xFA8CFC2DU</literal></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESTEP</name><argument_list>(<argument><expr><literal type="number">0x98C475E6U</literal></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESTEP</name><argument_list>(<argument><expr><literal type="number">0x36FBEF9FU</literal></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESTEP</name><argument_list>(<argument><expr><literal type="number">0xD5336958U</literal></expr></argument>, <argument><expr><name>k0</name></expr></argument>, <argument><expr><name>k0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESTEP</name><argument_list>(<argument><expr><literal type="number">0x736AE311U</literal></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESTEP</name><argument_list>(<argument><expr><literal type="number">0x11A25CCAU</literal></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESTEP</name><argument_list>(<argument><expr><literal type="number">0xAFD9D683U</literal></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESTEP</name><argument_list>(<argument><expr><literal type="number">0x4E11503CU</literal></expr></argument>, <argument><expr><name>k0</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESTEP</name><argument_list>(<argument><expr><literal type="number">0xEC48C9F5U</literal></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESTEP</name><argument_list>(<argument><expr><literal type="number">0x8A8043AEU</literal></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ESTEP</name><argument_list>(<argument><expr><literal type="number">0x28B7BD67U</literal></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xtea_le_crypt_ecb</name><parameter_list>(<parameter><decl><type><name>AVXTEA</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>decrypt</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>v0</name></decl>, <decl><type ref="prev"/><name>v1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>v0</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v1</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>decrypt</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>delta</name> <init>= <expr><literal type="number">0x9E3779B9</literal></expr></init></decl>, <decl><type ref="prev"/><name>sum</name> <init>= <expr><name>delta</name> <operator>*</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>v1</name> <operator>-=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>v0</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>v0</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name>v0</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name>sum</name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>key</name><index>[<expr><operator>(</operator><name>sum</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>-=</operator> <name>delta</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v0</name> <operator>-=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>v1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>v1</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name>v1</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name>sum</name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>sum</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>iv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v0</name> <operator>^=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v1</name> <operator>^=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>iv</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>delta</name> <init>= <expr><literal type="number">0x9E3779B9</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>v0</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>v1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>v1</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name>v1</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name>sum</name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>sum</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v1</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>v0</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>v0</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name>v0</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name>sum</name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>key</name><index>[<expr><operator>(</operator><name>sum</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xtea_crypt</name><parameter_list>(<parameter><decl><type><name>AVXTEA</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>decrypt</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>crypt</name>)<parameter_list>(<parameter><decl><type><name>AVXTEA</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>decrypt</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>count</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>crypt</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>decrypt</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<while>while <condition>(<expr><name>count</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>iv</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>iv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>crypt</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>decrypt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>crypt</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>decrypt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_xtea_crypt</name><parameter_list>(<parameter><decl><type><name>AVXTEA</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>decrypt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>xtea_crypt</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>decrypt</name></expr></argument>, <argument><expr><name>xtea_crypt_ecb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_xtea_le_crypt</name><parameter_list>(<parameter><decl><type><name>AVXTEA</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>decrypt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>xtea_crypt</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>decrypt</name></expr></argument>, <argument><expr><name>xtea_le_crypt_ecb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
