<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\sh4\bswap.h">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVUTIL_SH4_BSWAP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVUTIL_SH4_BSWAP_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_bswap16</name></cpp:macro> <cpp:value>av_bswap16</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>uint16_t</name></type> <name>av_bswap16</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<asm>__asm__("swap.b %0,%0" : "+r"(x));</asm>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_bswap32</name></cpp:macro> <cpp:value>av_bswap32</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>uint32_t</name></type> <name>av_bswap32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<asm>__asm__("swap.b %0,%0\n"
"swap.w %0,%0\n"
"swap.b %0,%0\n"
: "+r"(x));</asm>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
