<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\sha.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avutil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bswap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sha.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mem.h"</cpp:file></cpp:include>


<typedef>typedef <type><struct>struct <name>AVSHA</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>digest_len</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint64_t</name></type> <name>count</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buffer</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>state</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> 

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>transform</name>)<parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>buffer</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>AVSHA</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>av_sha_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVSHA</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<function><type><name><name>struct</name> <name>AVSHA</name></name> <modifier>*</modifier></type><name>av_sha_alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>AVSHA</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rol</name><parameter_list>(<parameter><type><name>value</name></type></parameter>, <parameter><type><name>bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((value) &lt;&lt; (bits)) | ((value) &gt;&gt; (32 - (bits))))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>blk0</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(block[i] = AV_RB32(buffer + 4 * (i)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>blk</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(block[i] = rol(block[(i)-3] ^ block[(i)-8] ^ block[(i)-14] ^ block[(i)-16], 1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>w</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>z += (((w)&amp;((x)^(y)))^(y)) + blk0(i) + 0x5A827999 + rol(v, 5); w = rol(w, 30);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>w</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>z += (((w)&amp;((x)^(y)))^(y)) + blk (i) + 0x5A827999 + rol(v, 5); w = rol(w, 30);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R2</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>w</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>z += ( (w)^(x) ^(y)) + blk (i) + 0x6ED9EBA1 + rol(v, 5); w = rol(w, 30);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R3</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>w</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>z += ((((w)|(x))&amp;(y))|((w)&amp;(x))) + blk (i) + 0x8F1BBCDC + rol(v, 5); w = rol(w, 30);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R4</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>w</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>z += ( (w)^(x) ^(y)) + blk (i) + 0xCA62C1D6 + rol(v, 5); w = rol(w, 30);</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>void</name></type> <name>sha1_transform</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name><name>state</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>buffer</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>block</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>e</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SMALL</name></expr></cpp:if>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">80</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>rol</name><argument_list>(<argument><expr><name><name>block</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>^</operator> <name><name>block</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">8</literal></expr>]</index></name> <operator>^</operator> <name><name>block</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">14</literal></expr>]</index></name> <operator>^</operator> <name><name>block</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">16</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>+=</operator> <name>e</name> <operator>+</operator> <call><name>rol</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">40</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>b</name><operator>&amp;</operator><operator>(</operator><name>c</name><operator>^</operator><name>d</name><operator>)</operator><operator>)</operator><operator>^</operator><name>d</name><operator>)</operator> <operator>+</operator> <literal type="number">0x5A827999</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>(</operator> <name>b</name><operator>^</operator><name>c</name> <operator>^</operator><name>d</name><operator>)</operator> <operator>+</operator> <literal type="number">0x6ED9EBA1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">60</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>b</name><operator>|</operator><name>c</name><operator>)</operator><operator>&amp;</operator><name>d</name><operator>)</operator><operator>|</operator><operator>(</operator><name>b</name><operator>&amp;</operator><name>c</name><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">0x8F1BBCDC</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>(</operator> <name>b</name><operator>^</operator><name>c</name> <operator>^</operator><name>d</name><operator>)</operator> <operator>+</operator> <literal type="number">0xCA62C1D6</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>rol</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R1_0</name></cpp:macro> <cpp:value>R0(a, b, c, d, e, 0 + i); R0(e, a, b, c, d, 1 + i); R0(d, e, a, b, c, 2 + i); R0(c, d, e, a, b, 3 + i); R0(b, c, d, e, a, 4 + i); i += 5</cpp:value></cpp:define>







<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>R1_0</name></expr>;</expr_stmt> <expr_stmt><expr><name>R1_0</name></expr>;</expr_stmt> <expr_stmt><expr><name>R1_0</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R0</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R1</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R1</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R1</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>R1</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R1_20</name></cpp:macro> <cpp:value>R2(a, b, c, d, e, 0 + i); R2(e, a, b, c, d, 1 + i); R2(d, e, a, b, c, 2 + i); R2(c, d, e, a, b, 3 + i); R2(b, c, d, e, a, 4 + i); i += 5</cpp:value></cpp:define>







<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>R1_20</name></expr>;</expr_stmt> <expr_stmt><expr><name>R1_20</name></expr>;</expr_stmt> <expr_stmt><expr><name>R1_20</name></expr>;</expr_stmt> <expr_stmt><expr><name>R1_20</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R1_40</name></cpp:macro> <cpp:value>R3(a, b, c, d, e, 0 + i); R3(e, a, b, c, d, 1 + i); R3(d, e, a, b, c, 2 + i); R3(c, d, e, a, b, 3 + i); R3(b, c, d, e, a, 4 + i); i += 5</cpp:value></cpp:define>







<expr_stmt><expr><name>R1_40</name></expr>;</expr_stmt> <expr_stmt><expr><name>R1_40</name></expr>;</expr_stmt> <expr_stmt><expr><name>R1_40</name></expr>;</expr_stmt> <expr_stmt><expr><name>R1_40</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R1_60</name></cpp:macro> <cpp:value>R4(a, b, c, d, e, 0 + i); R4(e, a, b, c, d, 1 + i); R4(d, e, a, b, c, 2 + i); R4(c, d, e, a, b, 3 + i); R4(b, c, d, e, a, 4 + i); i += 5</cpp:value></cpp:define>







<expr_stmt><expr><name>R1_60</name></expr>;</expr_stmt> <expr_stmt><expr><name>R1_60</name></expr>;</expr_stmt> <expr_stmt><expr><name>R1_60</name></expr>;</expr_stmt> <expr_stmt><expr><name>R1_60</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+=</operator> <name>e</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>K256</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x428a2f98</literal></expr>, <expr><literal type="number">0x71374491</literal></expr>, <expr><literal type="number">0xb5c0fbcf</literal></expr>, <expr><literal type="number">0xe9b5dba5</literal></expr>,
<expr><literal type="number">0x3956c25b</literal></expr>, <expr><literal type="number">0x59f111f1</literal></expr>, <expr><literal type="number">0x923f82a4</literal></expr>, <expr><literal type="number">0xab1c5ed5</literal></expr>,
<expr><literal type="number">0xd807aa98</literal></expr>, <expr><literal type="number">0x12835b01</literal></expr>, <expr><literal type="number">0x243185be</literal></expr>, <expr><literal type="number">0x550c7dc3</literal></expr>,
<expr><literal type="number">0x72be5d74</literal></expr>, <expr><literal type="number">0x80deb1fe</literal></expr>, <expr><literal type="number">0x9bdc06a7</literal></expr>, <expr><literal type="number">0xc19bf174</literal></expr>,
<expr><literal type="number">0xe49b69c1</literal></expr>, <expr><literal type="number">0xefbe4786</literal></expr>, <expr><literal type="number">0x0fc19dc6</literal></expr>, <expr><literal type="number">0x240ca1cc</literal></expr>,
<expr><literal type="number">0x2de92c6f</literal></expr>, <expr><literal type="number">0x4a7484aa</literal></expr>, <expr><literal type="number">0x5cb0a9dc</literal></expr>, <expr><literal type="number">0x76f988da</literal></expr>,
<expr><literal type="number">0x983e5152</literal></expr>, <expr><literal type="number">0xa831c66d</literal></expr>, <expr><literal type="number">0xb00327c8</literal></expr>, <expr><literal type="number">0xbf597fc7</literal></expr>,
<expr><literal type="number">0xc6e00bf3</literal></expr>, <expr><literal type="number">0xd5a79147</literal></expr>, <expr><literal type="number">0x06ca6351</literal></expr>, <expr><literal type="number">0x14292967</literal></expr>,
<expr><literal type="number">0x27b70a85</literal></expr>, <expr><literal type="number">0x2e1b2138</literal></expr>, <expr><literal type="number">0x4d2c6dfc</literal></expr>, <expr><literal type="number">0x53380d13</literal></expr>,
<expr><literal type="number">0x650a7354</literal></expr>, <expr><literal type="number">0x766a0abb</literal></expr>, <expr><literal type="number">0x81c2c92e</literal></expr>, <expr><literal type="number">0x92722c85</literal></expr>,
<expr><literal type="number">0xa2bfe8a1</literal></expr>, <expr><literal type="number">0xa81a664b</literal></expr>, <expr><literal type="number">0xc24b8b70</literal></expr>, <expr><literal type="number">0xc76c51a3</literal></expr>,
<expr><literal type="number">0xd192e819</literal></expr>, <expr><literal type="number">0xd6990624</literal></expr>, <expr><literal type="number">0xf40e3585</literal></expr>, <expr><literal type="number">0x106aa070</literal></expr>,
<expr><literal type="number">0x19a4c116</literal></expr>, <expr><literal type="number">0x1e376c08</literal></expr>, <expr><literal type="number">0x2748774c</literal></expr>, <expr><literal type="number">0x34b0bcb5</literal></expr>,
<expr><literal type="number">0x391c0cb3</literal></expr>, <expr><literal type="number">0x4ed8aa4a</literal></expr>, <expr><literal type="number">0x5b9cca4f</literal></expr>, <expr><literal type="number">0x682e6ff3</literal></expr>,
<expr><literal type="number">0x748f82ee</literal></expr>, <expr><literal type="number">0x78a5636f</literal></expr>, <expr><literal type="number">0x84c87814</literal></expr>, <expr><literal type="number">0x8cc70208</literal></expr>,
<expr><literal type="number">0x90befffa</literal></expr>, <expr><literal type="number">0xa4506ceb</literal></expr>, <expr><literal type="number">0xbef9a3f7</literal></expr>, <expr><literal type="number">0xc67178f2</literal></expr>
}</block></expr></init></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ch</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; ((y) ^ (z))) ^ (z))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Maj</name><parameter_list>(<parameter><type><name>z</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((x) | (y)) &amp; (z)) | ((x) &amp; (y)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Sigma0_256</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(rol((x), 30) ^ rol((x), 19) ^ rol((x), 10))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Sigma1_256</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(rol((x), 26) ^ rol((x), 21) ^ rol((x), 7))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sigma0_256</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(rol((x), 25) ^ rol((x), 14) ^ ((x) &gt;&gt; 3))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sigma1_256</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(rol((x), 15) ^ rol((x), 13) ^ ((x) &gt;&gt; 10))</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>blk</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>blk</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(block[i] = block[i - 16] + sigma0_256(block[i - 15]) + sigma1_256(block[i - 2]) + block[i - 7])</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUND256</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>g</name></type></parameter>,<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>T1 += (h) + Sigma1_256(e) + Ch((e), (f), (g)) + K256[i]; (d) += T1; (h) = T1 + Sigma0_256(a) + Maj((a), (b), (c)); i++</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUND256_0_TO_15</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>g</name></type></parameter>,<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>T1 = blk0(i); ROUND256(a,b,c,d,e,f,g,h)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUND256_16_TO_63</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>g</name></type></parameter>,<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>T1 = blk(i); ROUND256(a,b,c,d,e,f,g,h)</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>void</name></type> <name>sha256_transform</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>buffer</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>f</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>block</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>T1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SMALL</name></expr></cpp:if>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>T2</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>T1</name> <operator>=</operator> <call><name>blk0</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>T1</name> <operator>=</operator> <call><name>blk</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>T1</name> <operator>+=</operator> <name>h</name> <operator>+</operator> <call><name>Sigma1_256</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>Ch</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>K256</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>T2</name> <operator>=</operator> <call><name>Sigma0_256</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>Maj</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>d</name> <operator>+</operator> <name>T1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>T1</name> <operator>+</operator> <name>T2</name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R256_0</name></cpp:macro> <cpp:value>ROUND256_0_TO_15(a, b, c, d, e, f, g, h); ROUND256_0_TO_15(h, a, b, c, d, e, f, g); ROUND256_0_TO_15(g, h, a, b, c, d, e, f); ROUND256_0_TO_15(f, g, h, a, b, c, d, e); ROUND256_0_TO_15(e, f, g, h, a, b, c, d); ROUND256_0_TO_15(d, e, f, g, h, a, b, c); ROUND256_0_TO_15(c, d, e, f, g, h, a, b); ROUND256_0_TO_15(b, c, d, e, f, g, h, a)</cpp:value></cpp:define>









<expr_stmt><expr><name>R256_0</name></expr>;</expr_stmt> <expr_stmt><expr><name>R256_0</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R256_16</name></cpp:macro> <cpp:value>ROUND256_16_TO_63(a, b, c, d, e, f, g, h); ROUND256_16_TO_63(h, a, b, c, d, e, f, g); ROUND256_16_TO_63(g, h, a, b, c, d, e, f); ROUND256_16_TO_63(f, g, h, a, b, c, d, e); ROUND256_16_TO_63(e, f, g, h, a, b, c, d); ROUND256_16_TO_63(d, e, f, g, h, a, b, c); ROUND256_16_TO_63(c, d, e, f, g, h, a, b); ROUND256_16_TO_63(b, c, d, e, f, g, h, a)</cpp:value></cpp:define>









<expr_stmt><expr><name>R256_16</name></expr>;</expr_stmt> <expr_stmt><expr><name>R256_16</name></expr>;</expr_stmt> <expr_stmt><expr><name>R256_16</name></expr>;</expr_stmt>
<expr_stmt><expr><name>R256_16</name></expr>;</expr_stmt> <expr_stmt><expr><name>R256_16</name></expr>;</expr_stmt> <expr_stmt><expr><name>R256_16</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+=</operator> <name>e</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+=</operator> <name>f</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+=</operator> <name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+=</operator> <name>h</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>av_cold</name> <name>int</name></type> <name>av_sha_init</name><parameter_list>(<parameter><decl><type><name>AVSHA</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>digest_len</name></name> <operator>=</operator> <name>bits</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>bits</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">160</literal></expr>:</case> 
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x67452301</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xEFCDAB89</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x98BADCFE</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x10325476</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xC3D2E1F0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>transform</name></name> <operator>=</operator> <name>sha1_transform</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">224</literal></expr>:</case> 
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xC1059ED8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x367CD507</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x3070DD17</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xF70E5939</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xFFC00B31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x68581511</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x64F98FA7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xBEFA4FA4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>transform</name></name> <operator>=</operator> <name>sha256_transform</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">256</literal></expr>:</case> 
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x6A09E667</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xBB67AE85</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x3C6EF372</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xA54FF53A</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x510E527F</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x9B05688C</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x1F83D9AB</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x5BE0CD19</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>transform</name></name> <operator>=</operator> <name>sha256_transform</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CRYPTO_SIZE_T</name></expr></cpp:if>
<decl_stmt><decl><type><name>void</name></type> <name>av_sha_update</name><argument_list>(<argument><expr>struct <name>AVSHA</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><name>data</name></expr></argument>, <argument><expr><name>unsigned</name> <name>int</name> <name>len</name></expr></argument>)</argument_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>void</name> <name>av_sha_update</name><argument_list>(<argument><expr>struct <name>AVSHA</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><name>data</name></expr></argument>, <argument><expr><name>size_t</name> <name>len</name></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>count</name></name> <operator>&amp;</operator> <literal type="number">63</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SMALL</name></expr></cpp:if>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">64</literal> <operator>==</operator> <name>j</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>transform</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>j</name> <operator>+</operator> <name>len</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">63</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>i</name> <operator>=</operator> <literal type="number">64</literal> <operator>-</operator> <name>j</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>transform</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>+</operator> <literal type="number">63</literal> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">64</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>transform</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>av_sha_final</name><parameter_list>(<parameter><decl><type><name>AVSHA</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>finalcount</name> <init>= <expr><call><name>av_be2ne64</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_sha_update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"\200"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>count</name></name> <operator>&amp;</operator> <literal type="number">63</literal><operator>)</operator> <operator>!=</operator> <literal type="number">56</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_sha_update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>av_sha_update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>finalcount</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>digest_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>digest</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>
</unit>
