<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\softfloat.h">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVUTIL_SOFTFLOAT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVUTIL_SOFTFLOAT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"softfloat_tables.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_EXP</name></cpp:macro> <cpp:value>-149</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_EXP</name></cpp:macro> <cpp:value>126</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONE_BITS</name></cpp:macro> <cpp:value>29</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>SoftFloat</name><block>{
<decl_stmt><decl><type><name>int32_t</name></type> <name>mant</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>exp</name></decl>;</decl_stmt>
}</block></struct></type><name>SoftFloat</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SoftFloat</name></type> <name>FLOAT_0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>MIN_EXP</name></expr>}</block></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SoftFloat</name></type> <name>FLOAT_05</name> <init>= <expr><block>{ <expr><literal type="number">0x20000000</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SoftFloat</name></type> <name>FLOAT_1</name> <init>= <expr><block>{ <expr><literal type="number">0x20000000</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SoftFloat</name></type> <name>FLOAT_EPSILON</name> <init>= <expr><block>{ <expr><literal type="number">0x29F16B12</literal></expr>, <expr><operator>-</operator><literal type="number">16</literal></expr>}</block></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SoftFloat</name></type> <name>FLOAT_1584893192</name> <init>= <expr><block>{ <expr><literal type="number">0x32B771ED</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SoftFloat</name></type> <name>FLOAT_100000</name> <init>= <expr><block>{ <expr><literal type="number">0x30D40000</literal></expr>, <expr><literal type="number">17</literal></expr>}</block></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SoftFloat</name></type> <name>FLOAT_0999999</name> <init>= <expr><block>{ <expr><literal type="number">0x3FFFFBCE</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SoftFloat</name></type> <name>FLOAT_MIN</name> <init>= <expr><block>{ <expr><literal type="number">0x20000000</literal></expr>, <expr><name>MIN_EXP</name></expr>}</block></expr></init></decl>;</decl_stmt>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>av_const</name> <name>double</name></type> <name>av_sf2double</name><parameter_list>(<parameter><decl><type><name>SoftFloat</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>.</operator><name>exp</name></name> <operator>-=</operator> <name>ONE_BITS</name> <operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><call><name>ldexp</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>mant</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>exp</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_const</name> <name>SoftFloat</name></type> <name>av_normalize_sf</name><parameter_list>(<parameter><decl><type><name>SoftFloat</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>a</name><operator>.</operator><name>mant</name></name></expr>)</condition><block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
<while>while<condition>(<expr><operator>(</operator><name><name>a</name><operator>.</operator><name>mant</name></name> <operator>+</operator> <literal type="number">0x1FFFFFFFU</literal><operator>)</operator><operator>&lt;</operator><literal type="number">0x3FFFFFFFU</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>mant</name></name> <operator>+=</operator> <name><name>a</name><operator>.</operator><name>mant</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>exp</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>s</name><init>=<expr><name>ONE_BITS</name> <operator>-</operator> <call><name>av_log2</name><argument_list>(<argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>mant</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>exp</name></name> <operator>-=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>mant</name></name> <operator>&lt;&lt;=</operator> <name>s</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if<condition>(<expr><name><name>a</name><operator>.</operator><name>exp</name></name> <operator>&lt;</operator> <name>MIN_EXP</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>exp</name></name> <operator>=</operator> <name>MIN_EXP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>mant</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if><else>else<block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>exp</name></name><operator>=</operator> <name>MIN_EXP</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>a</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>av_const</name> <name>SoftFloat</name></type> <name>av_normalize1_sf</name><parameter_list>(<parameter><decl><type><name>SoftFloat</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name><name>a</name><operator>.</operator><name>mant</name></name> <operator>+</operator> <literal type="number">0x40000000U</literal><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>exp</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>mant</name></name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>mant</name></name> <operator>&lt;</operator> <literal type="number">0x40000000</literal> <operator>&amp;&amp;</operator> <name><name>a</name><operator>.</operator><name>mant</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">0x40000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>exp</name></name> <operator>&lt;=</operator> <name>MAX_EXP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>a</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:elif>
<decl_stmt><decl><type><name>int</name></type> <name>t</name><init>= <expr><name><name>a</name><operator>.</operator><name>mant</name></name> <operator>+</operator> <literal type="number">0x40000000</literal> <operator>&lt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>SoftFloat</name><operator>)</operator><block>{ <expr><name><name>a</name><operator>.</operator><name>mant</name></name><operator>&gt;&gt;</operator><name>t</name></expr>, <expr><name><name>a</name><operator>.</operator><name>exp</name></name><operator>+</operator><name>t</name></expr>}</block></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>t</name><init>= <expr><operator>(</operator><name><name>a</name><operator>.</operator><name>mant</name></name> <operator>+</operator> <literal type="number">0x3FFFFFFFU</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">31</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>SoftFloat</name><operator>)</operator><block>{<expr><name><name>a</name><operator>.</operator><name>mant</name></name><operator>&gt;&gt;</operator><name>t</name></expr>, <expr><name><name>a</name><operator>.</operator><name>exp</name></name><operator>+</operator><name>t</name></expr>}</block></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>av_const</name> <name>SoftFloat</name></type> <name>av_mul_sf</name><parameter_list>(<parameter><decl><type><name>SoftFloat</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>SoftFloat</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>exp</name></name> <operator>+=</operator> <name><name>b</name><operator>.</operator><name>exp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>a</name><operator>.</operator><name>mant</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>b</name><operator>.</operator><name>mant</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <name>ONE_BITS</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>mant</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>b</name><operator>.</operator><name>mant</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <name>ONE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>mant</name></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>mant</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>b</name><operator>.</operator><name>mant</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <name>ONE_BITS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <macro><name>av_normalize1_sf</name><argument_list>(<argument>(SoftFloat){a.mant</argument>, <argument>a.exp - <literal type="number">1</literal>}</argument>)</argument_list></macro></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>a</name><operator>.</operator><name>mant</name></name> <operator>||</operator> <name><name>a</name><operator>.</operator><name>exp</name></name> <operator>&lt;</operator> <name>MIN_EXP</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FLOAT_0</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>a</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>av_const</name> <name>SoftFloat</name></type> <name>av_div_sf</name><parameter_list>(<parameter><decl><type><name>SoftFloat</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>SoftFloat</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>temp</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>a</name><operator>.</operator><name>mant</name></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>ONE_BITS</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>temp</name> <operator>/=</operator> <name><name>b</name><operator>.</operator><name>mant</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>exp</name></name> <operator>-=</operator> <name><name>b</name><operator>.</operator><name>exp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>mant</name></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>a</name><operator>.</operator><name>mant</name></name> <operator>!=</operator> <name>temp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>temp</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>exp</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>mant</name></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>av_normalize1_sf</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>a</name><operator>.</operator><name>mant</name></name> <operator>||</operator> <name><name>a</name><operator>.</operator><name>exp</name></name> <operator>&lt;</operator> <name>MIN_EXP</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FLOAT_0</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>a</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>av_const</name> <name>int</name></type> <name>av_cmp_sf</name><parameter_list>(<parameter><decl><type><name>SoftFloat</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>SoftFloat</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>t</name><init>= <expr><name><name>a</name><operator>.</operator><name>exp</name></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>exp</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&lt;</operator><operator>-</operator><literal type="number">31</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator> <name><name>b</name><operator>.</operator><name>mant</name></name></expr> ;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>t</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name><name>a</name><operator>.</operator><name>mant</name></name> <operator>&gt;&gt;</operator> <operator>(</operator><operator>-</operator><name>t</name><operator>)</operator><operator>)</operator> <operator>-</operator> <name><name>b</name><operator>.</operator><name>mant</name></name></expr> ;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>t</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>a</name><operator>.</operator><name>mant</name></name> <operator>-</operator> <operator>(</operator><name><name>b</name><operator>.</operator><name>mant</name></name> <operator>&gt;&gt;</operator> <name>t</name><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><name><name>a</name><operator>.</operator><name>mant</name></name></expr> ;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>av_const</name> <name>int</name></type> <name>av_gt_sf</name><parameter_list>(<parameter><decl><type><name>SoftFloat</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>SoftFloat</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>t</name><init>= <expr><name><name>a</name><operator>.</operator><name>exp</name></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>exp</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&lt;</operator><operator>-</operator><literal type="number">31</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>mant</name></name></expr> ;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>t</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name><name>a</name><operator>.</operator><name>mant</name></name> <operator>&gt;&gt;</operator> <operator>(</operator><operator>-</operator><name>t</name><operator>)</operator><operator>)</operator> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>mant</name></name></expr> ;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>t</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>a</name><operator>.</operator><name>mant</name></name> <operator>&gt;</operator> <operator>(</operator><name><name>b</name><operator>.</operator><name>mant</name></name> <operator>&gt;&gt;</operator> <name>t</name><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><name><name>a</name><operator>.</operator><name>mant</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>av_const</name> <name>SoftFloat</name></type> <name>av_add_sf</name><parameter_list>(<parameter><decl><type><name>SoftFloat</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>SoftFloat</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>t</name><init>= <expr><name><name>a</name><operator>.</operator><name>exp</name></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>exp</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&lt;</operator><operator>-</operator><literal type="number">31</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>b</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>t</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <macro><name>av_normalize_sf</name><argument_list>(<argument>av_normalize1_sf((SoftFloat){ b.mant + (a.mant &gt;&gt; (-t)), b.exp})</argument>)</argument_list></macro>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>t</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <macro><name>av_normalize_sf</name><argument_list>(<argument>av_normalize1_sf((SoftFloat){ a.mant + (b.mant &gt;&gt; t ), a.exp})</argument>)</argument_list></macro>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><name>a</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>av_const</name> <name>SoftFloat</name></type> <name>av_sub_sf</name><parameter_list>(<parameter><decl><type><name>SoftFloat</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>SoftFloat</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<block_content>
<return>return <macro><name>av_add_sf</name><argument_list>(<argument>a</argument>, <argument>(SoftFloat){ -b.mant</argument>, <argument>b.exp}</argument>)</argument_list></macro>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>av_const</name> <name>SoftFloat</name></type> <name>av_int2sf</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>frac_bits</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>exp_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>v</name> <operator>&lt;=</operator> <name>INT_MIN</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>exp_offset</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <macro><name>av_normalize_sf</name><argument_list>(<argument>av_normalize1_sf((SoftFloat){v, ONE_BITS + <literal type="number">1</literal> - frac_bits + exp_offset})</argument>)</argument_list></macro>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>av_const</name> <name>int</name></type> <name>av_sf2int</name><parameter_list>(<parameter><decl><type><name>SoftFloat</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>frac_bits</name></decl></parameter>)</parameter_list><block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>.</operator><name>exp</name></name> <operator>+=</operator> <name>frac_bits</name> <operator>-</operator> <operator>(</operator><name>ONE_BITS</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>v</name><operator>.</operator><name>exp</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>v</name><operator>.</operator><name>mant</name></name> <operator>&lt;&lt;</operator> <name><name>v</name><operator>.</operator><name>exp</name></name></expr> ;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><name><name>v</name><operator>.</operator><name>mant</name></name> <operator>&gt;&gt;</operator><operator>(</operator><operator>-</operator><name><name>v</name><operator>.</operator><name>exp</name></name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>SoftFloat</name></type> <name>av_sqrt_sf</name><parameter_list>(<parameter><decl><type><name>SoftFloat</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tabIndex</name></decl>, <decl><type ref="prev"/><name>rem</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>.</operator><name>mant</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>exp</name></name> <operator>=</operator> <name>MIN_EXP</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>val</name><operator>.</operator><name>mant</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>tabIndex</name> <operator>=</operator> <operator>(</operator><name><name>val</name><operator>.</operator><name>mant</name></name> <operator>-</operator> <literal type="number">0x20000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rem</name> <operator>=</operator> <name><name>val</name><operator>.</operator><name>mant</name></name> <operator>&amp;</operator> <literal type="number">0xFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>mant</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>av_sqrttbl_sf</name><index>[<expr><name>tabIndex</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">0x100000</literal> <operator>-</operator> <name>rem</name><operator>)</operator> <operator>+</operator>
<operator>(</operator><name>int64_t</name><operator>)</operator><name><name>av_sqrttbl_sf</name><index>[<expr><name>tabIndex</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>rem</name> <operator>+</operator>
<literal type="number">0x80000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>mant</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>av_sqr_exp_multbl_sf</name><index>[<expr><name><name>val</name><operator>.</operator><name>exp</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>val</name><operator>.</operator><name>mant</name></name> <operator>+</operator>
<literal type="number">0x10000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">29</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>.</operator><name>mant</name></name> <operator>&lt;</operator> <literal type="number">0x40000000</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>exp</name></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>mant</name></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>val</name><operator>.</operator><name>exp</name></name> <operator>=</operator> <operator>(</operator><name><name>val</name><operator>.</operator><name>exp</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>av_unused</name> <name>void</name></type> <name>av_sincos_sf</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>, <decl><type ref="prev"/><name>sign</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sv</name></decl>, <decl><type ref="prev"/><name>cv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>st</name></decl>, <decl><type ref="prev"/><name>ct</name></decl>;</decl_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>a</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>idx</name> <operator>&lt;&lt;</operator> <literal type="number">27</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cv</name> <operator>=</operator> <name><name>av_costbl_1_sf</name><index>[<expr><name>idx</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cv</name> <operator>=</operator> <operator>(</operator><name>cv</name> <operator>^</operator> <name>sign</name><operator>)</operator> <operator>-</operator> <name>sign</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>idx</name> <operator>&lt;&lt;</operator> <literal type="number">27</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sv</name> <operator>=</operator> <name><name>av_costbl_1_sf</name><index>[<expr><name>idx</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sv</name> <operator>=</operator> <operator>(</operator><name>sv</name> <operator>^</operator> <name>sign</name><operator>)</operator> <operator>-</operator> <name>sign</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>a</name> <operator>&gt;&gt;</operator> <literal type="number">21</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ct</name> <operator>=</operator> <name><name>av_costbl_2_sf</name><index>[<expr><name>idx</name> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>av_sintbl_2_sf</name><index>[<expr><name>idx</name> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>cv</name> <operator>*</operator> <name>ct</name> <operator>-</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>sv</name> <operator>*</operator> <name>st</name> <operator>+</operator> <literal type="number">0x20000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>sv</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>cv</name> <operator>*</operator> <name>st</name> <operator>+</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>sv</name> <operator>*</operator> <name>ct</name> <operator>+</operator> <literal type="number">0x20000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cv</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>a</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ct</name> <operator>=</operator> <name><name>av_costbl_3_sf</name><index>[<expr><name>idx</name> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>av_sintbl_3_sf</name><index>[<expr><name>idx</name> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>cv</name> <operator>*</operator> <name>ct</name> <operator>-</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>sv</name> <operator>*</operator> <name>st</name> <operator>+</operator> <literal type="number">0x20000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>sv</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>cv</name> <operator>*</operator> <name>st</name> <operator>+</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>sv</name> <operator>*</operator> <name>ct</name> <operator>+</operator> <literal type="number">0x20000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>cv</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>a</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ct</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>av_costbl_4_sf</name><index>[<expr><name>idx</name> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">0x800</literal> <operator>-</operator> <operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0x7ff</literal><operator>)</operator><operator>)</operator> <operator>+</operator>
<operator>(</operator><name>int64_t</name><operator>)</operator><name><name>av_costbl_4_sf</name><index>[<expr><operator>(</operator><name>idx</name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0x7ff</literal><operator>)</operator> <operator>+</operator>
<literal type="number">0x400</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>st</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>av_sintbl_4_sf</name><index>[<expr><name>idx</name> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">0x800</literal> <operator>-</operator> <operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0x7ff</literal><operator>)</operator><operator>)</operator> <operator>+</operator>
<operator>(</operator><name>int64_t</name><operator>)</operator><name><name>av_sintbl_4_sf</name><index>[<expr><operator>(</operator><name>idx</name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0x7ff</literal><operator>)</operator> <operator>+</operator>
<literal type="number">0x400</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>cv</name> <operator>*</operator> <name>ct</name> <operator>+</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>sv</name> <operator>*</operator> <name>st</name> <operator>+</operator> <literal type="number">0x20000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>cv</name> <operator>*</operator> <name>st</name> <operator>+</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>sv</name> <operator>*</operator> <name>ct</name> <operator>+</operator> <literal type="number">0x20000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
