<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\samplefmt.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"samplefmt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>SampleFmtInfo</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>planar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>altform</name></decl>;</decl_stmt> 
}</block></struct></type> <name>SampleFmtInfo</name>;</typedef>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SampleFmtInfo</name></type> <name><name>sample_fmt_info</name><index>[<expr><name>AV_SAMPLE_FMT_NB</name></expr>]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>AV_SAMPLE_FMT_U8</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"u8"</literal></expr>, <expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">8</literal></expr>, <expr><operator>.</operator><name>planar</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>altform</name> <operator>=</operator> <name>AV_SAMPLE_FMT_U8P</name></expr> }</block></expr>,
<expr><index>[<expr><name>AV_SAMPLE_FMT_S16</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"s16"</literal></expr>, <expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">16</literal></expr>, <expr><operator>.</operator><name>planar</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>altform</name> <operator>=</operator> <name>AV_SAMPLE_FMT_S16P</name></expr> }</block></expr>,
<expr><index>[<expr><name>AV_SAMPLE_FMT_S32</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"s32"</literal></expr>, <expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">32</literal></expr>, <expr><operator>.</operator><name>planar</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>altform</name> <operator>=</operator> <name>AV_SAMPLE_FMT_S32P</name></expr> }</block></expr>,
<expr><index>[<expr><name>AV_SAMPLE_FMT_S64</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"s64"</literal></expr>, <expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">64</literal></expr>, <expr><operator>.</operator><name>planar</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>altform</name> <operator>=</operator> <name>AV_SAMPLE_FMT_S64P</name></expr> }</block></expr>,
<expr><index>[<expr><name>AV_SAMPLE_FMT_FLT</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"flt"</literal></expr>, <expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">32</literal></expr>, <expr><operator>.</operator><name>planar</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>altform</name> <operator>=</operator> <name>AV_SAMPLE_FMT_FLTP</name></expr> }</block></expr>,
<expr><index>[<expr><name>AV_SAMPLE_FMT_DBL</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"dbl"</literal></expr>, <expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">64</literal></expr>, <expr><operator>.</operator><name>planar</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>altform</name> <operator>=</operator> <name>AV_SAMPLE_FMT_DBLP</name></expr> }</block></expr>,
<expr><index>[<expr><name>AV_SAMPLE_FMT_U8P</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"u8p"</literal></expr>, <expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">8</literal></expr>, <expr><operator>.</operator><name>planar</name> <operator>=</operator> <literal type="number">1</literal></expr>, <expr><operator>.</operator><name>altform</name> <operator>=</operator> <name>AV_SAMPLE_FMT_U8</name></expr> }</block></expr>,
<expr><index>[<expr><name>AV_SAMPLE_FMT_S16P</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"s16p"</literal></expr>, <expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">16</literal></expr>, <expr><operator>.</operator><name>planar</name> <operator>=</operator> <literal type="number">1</literal></expr>, <expr><operator>.</operator><name>altform</name> <operator>=</operator> <name>AV_SAMPLE_FMT_S16</name></expr> }</block></expr>,
<expr><index>[<expr><name>AV_SAMPLE_FMT_S32P</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"s32p"</literal></expr>, <expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">32</literal></expr>, <expr><operator>.</operator><name>planar</name> <operator>=</operator> <literal type="number">1</literal></expr>, <expr><operator>.</operator><name>altform</name> <operator>=</operator> <name>AV_SAMPLE_FMT_S32</name></expr> }</block></expr>,
<expr><index>[<expr><name>AV_SAMPLE_FMT_S64P</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"s64p"</literal></expr>, <expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">64</literal></expr>, <expr><operator>.</operator><name>planar</name> <operator>=</operator> <literal type="number">1</literal></expr>, <expr><operator>.</operator><name>altform</name> <operator>=</operator> <name>AV_SAMPLE_FMT_S64</name></expr> }</block></expr>,
<expr><index>[<expr><name>AV_SAMPLE_FMT_FLTP</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"fltp"</literal></expr>, <expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">32</literal></expr>, <expr><operator>.</operator><name>planar</name> <operator>=</operator> <literal type="number">1</literal></expr>, <expr><operator>.</operator><name>altform</name> <operator>=</operator> <name>AV_SAMPLE_FMT_FLT</name></expr> }</block></expr>,
<expr><index>[<expr><name>AV_SAMPLE_FMT_DBLP</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"dblp"</literal></expr>, <expr><operator>.</operator><name>bits</name> <operator>=</operator> <literal type="number">64</literal></expr>, <expr><operator>.</operator><name>planar</name> <operator>=</operator> <literal type="number">1</literal></expr>, <expr><operator>.</operator><name>altform</name> <operator>=</operator> <name>AV_SAMPLE_FMT_DBL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>av_get_sample_fmt_name</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>sample_fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sample_fmt</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>sample_fmt</name> <operator>&gt;=</operator> <name>AV_SAMPLE_FMT_NB</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>sample_fmt_info</name><index>[<expr><name>sample_fmt</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>av_get_sample_fmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AV_SAMPLE_FMT_NB</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>sample_fmt_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>AV_SAMPLE_FMT_NONE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>av_get_alt_sample_fmt</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>sample_fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>planar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sample_fmt</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>sample_fmt</name> <operator>&gt;=</operator> <name>AV_SAMPLE_FMT_NB</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AV_SAMPLE_FMT_NONE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sample_fmt_info</name><index>[<expr><name>sample_fmt</name></expr>]</index></name><operator>.</operator><name>planar</name> <operator>==</operator> <name>planar</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>sample_fmt</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>sample_fmt_info</name><index>[<expr><name>sample_fmt</name></expr>]</index></name><operator>.</operator><name>altform</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>av_get_packed_sample_fmt</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>sample_fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sample_fmt</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>sample_fmt</name> <operator>&gt;=</operator> <name>AV_SAMPLE_FMT_NB</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AV_SAMPLE_FMT_NONE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sample_fmt_info</name><index>[<expr><name>sample_fmt</name></expr>]</index></name><operator>.</operator><name>planar</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>sample_fmt_info</name><index>[<expr><name>sample_fmt</name></expr>]</index></name><operator>.</operator><name>altform</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>sample_fmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>av_get_planar_sample_fmt</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>sample_fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sample_fmt</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>sample_fmt</name> <operator>&gt;=</operator> <name>AV_SAMPLE_FMT_NB</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AV_SAMPLE_FMT_NONE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sample_fmt_info</name><index>[<expr><name>sample_fmt</name></expr>]</index></name><operator>.</operator><name>planar</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>sample_fmt</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>sample_fmt_info</name><index>[<expr><name>sample_fmt</name></expr>]</index></name><operator>.</operator><name>altform</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>av_get_sample_fmt_string</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>sample_fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sample_fmt</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="string">"name "</literal> <literal type="string">" depth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>sample_fmt</name> <operator>&lt;</operator> <name>AV_SAMPLE_FMT_NB</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>SampleFmtInfo</name></type> <name>info</name> <init>= <expr><name><name>sample_fmt_info</name><index>[<expr><name>sample_fmt</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="string">"%-6s"</literal> <literal type="string">" %2d "</literal></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_get_bytes_per_sample</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>sample_fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>sample_fmt</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>sample_fmt</name> <operator>&gt;=</operator> <name>AV_SAMPLE_FMT_NB</name></expr> ?</condition><then>
<expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>sample_fmt_info</name><index>[<expr><name>sample_fmt</name></expr>]</index></name><operator>.</operator><name>bits</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_sample_fmt_is_planar</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>sample_fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sample_fmt</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>sample_fmt</name> <operator>&gt;=</operator> <name>AV_SAMPLE_FMT_NB</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>sample_fmt_info</name><index>[<expr><name>sample_fmt</name></expr>]</index></name><operator>.</operator><name>planar</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_samples_get_buffer_size</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>linesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>sample_fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>align</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>line_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sample_size</name> <init>= <expr><call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name>sample_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>planar</name> <init>= <expr><call><name>av_sample_fmt_is_planar</name><argument_list>(<argument><expr><name>sample_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sample_size</name> <operator>||</operator> <name>nb_samples</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>nb_channels</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>align</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nb_samples</name> <operator>&gt;</operator> <name>INT_MAX</name> <operator>-</operator> <literal type="number">31</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>align</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nb_samples</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>nb_samples</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>nb_channels</name> <operator>&gt;</operator> <name>INT_MAX</name> <operator>/</operator> <name>align</name> <operator>||</operator>
<operator>(</operator><name>int64_t</name><operator>)</operator><name>nb_channels</name> <operator>*</operator> <name>nb_samples</name> <operator>&gt;</operator> <operator>(</operator><name>INT_MAX</name> <operator>-</operator> <operator>(</operator><name>align</name> <operator>*</operator> <name>nb_channels</name><operator>)</operator><operator>)</operator> <operator>/</operator> <name>sample_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>line_size</name> <operator>=</operator> <ternary><condition><expr><name>planar</name></expr> ?</condition><then> <expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name>nb_samples</name> <operator>*</operator> <name>sample_size</name></expr></argument>, <argument><expr><name>align</name></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name>nb_samples</name> <operator>*</operator> <name>sample_size</name> <operator>*</operator> <name>nb_channels</name></expr></argument>, <argument><expr><name>align</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>linesize</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>linesize</name> <operator>=</operator> <name>line_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name>planar</name></expr> ?</condition><then> <expr><name>line_size</name> <operator>*</operator> <name>nb_channels</name></expr> </then><else>: <expr><name>line_size</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_samples_fill_arrays</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>audio_data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>linesize</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>sample_fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>align</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>planar</name></decl>, <decl><type ref="prev"/><name>buf_size</name></decl>, <decl><type ref="prev"/><name>line_size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>planar</name> <operator>=</operator> <call><name>av_sample_fmt_is_planar</name><argument_list>(<argument><expr><name>sample_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <call><name>av_samples_get_buffer_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line_size</name></expr></argument>, <argument><expr><name>nb_channels</name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>,
<argument><expr><name>sample_fmt</name></expr></argument>, <argument><expr><name>align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>buf_size</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>audio_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>planar</name> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;</operator> <name>nb_channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>audio_data</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name><name>audio_data</name><index>[<expr><name>ch</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>line_size</name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>linesize</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>linesize</name> <operator>=</operator> <name>line_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_samples_alloc</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>audio_data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>linesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_channels</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>sample_fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>align</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>av_samples_get_buffer_size</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>nb_channels</name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>,
<argument><expr><name>sample_fmt</name></expr></argument>, <argument><expr><name>align</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>size</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>av_samples_fill_arrays</name><argument_list>(<argument><expr><name>audio_data</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>nb_channels</name></expr></argument>,
<argument><expr><name>nb_samples</name></expr></argument>, <argument><expr><name>sample_fmt</name></expr></argument>, <argument><expr><name>align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_samples_set_silence</name><argument_list>(<argument><expr><name>audio_data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>, <argument><expr><name>nb_channels</name></expr></argument>, <argument><expr><name>sample_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_samples_alloc_array_and_samples</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>audio_data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>linesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_channels</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>sample_fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>align</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>nb_planes</name> <init>= <expr><ternary><condition><expr><call><name>av_sample_fmt_is_planar</name><argument_list>(<argument><expr><name>sample_fmt</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>nb_channels</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>audio_data</name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name>nb_planes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>audio_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>audio_data</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_samples_alloc</name><argument_list>(<argument><expr><operator>*</operator><name>audio_data</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>nb_channels</name></expr></argument>,
<argument><expr><name>nb_samples</name></expr></argument>, <argument><expr><name>sample_fmt</name></expr></argument>, <argument><expr><name>align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>audio_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_samples_copy</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_offset</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>src_offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_channels</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>sample_fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>planar</name> <init>= <expr><call><name>av_sample_fmt_is_planar</name><argument_list>(<argument><expr><name>sample_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>planes</name> <init>= <expr><ternary><condition><expr><name>planar</name></expr> ?</condition><then> <expr><name>nb_channels</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_align</name> <init>= <expr><call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name>sample_fmt</name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>planar</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>nb_channels</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>data_size</name> <init>= <expr><name>nb_samples</name> <operator>*</operator> <name>block_align</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dst_offset</name> <operator>*=</operator> <name>block_align</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src_offset</name> <operator>*=</operator> <name>block_align</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><ternary><condition><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary><operator>)</operator> <operator>&gt;=</operator> <name>data_size</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>planes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>dst_offset</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>src_offset</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>planes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>dst_offset</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>src_offset</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_samples_set_silence</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>audio_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>nb_channels</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>sample_fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>planar</name> <init>= <expr><call><name>av_sample_fmt_is_planar</name><argument_list>(<argument><expr><name>sample_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>planes</name> <init>= <expr><ternary><condition><expr><name>planar</name></expr> ?</condition><then> <expr><name>nb_channels</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_align</name> <init>= <expr><call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name>sample_fmt</name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>planar</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>nb_channels</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>data_size</name> <init>= <expr><name>nb_samples</name> <operator>*</operator> <name>block_align</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fill_char</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>sample_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_U8</name> <operator>||</operator>
<name>sample_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_U8P</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0x80</literal></expr> </then><else>: <expr><literal type="number">0x00</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>offset</name> <operator>*=</operator> <name>block_align</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>planes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>audio_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>fill_char</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
