<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\tx.h">

















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVUTIL_TX_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVUTIL_TX_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>AVTXContext</name></name></type> <name>AVTXContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>AVComplexFloat</name> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>re</name></decl>, <name>im</name>;</decl_stmt>
}</block></struct></type> <name>AVComplexFloat</name>;</typedef>

<typedef>typedef <type><struct>struct <name>AVComplexDouble</name> <block>{
<decl_stmt><decl><type><name>double</name></type> <name>re</name></decl>, <name>im</name>;</decl_stmt>
}</block></struct></type> <name>AVComplexDouble</name>;</typedef>

<typedef>typedef <type><struct>struct <name>AVComplexInt32</name> <block>{
<decl_stmt><decl><type><name>int32_t</name></type> <name>re</name></decl>, <name>im</name>;</decl_stmt>
}</block></struct></type> <name>AVComplexInt32</name>;</typedef>

<enum>enum <name>AVTXType</name> <block>{





<decl><name>AV_TX_FLOAT_FFT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,









<decl><name>AV_TX_FLOAT_MDCT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,



<decl><name>AV_TX_DOUBLE_FFT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,




<decl><name>AV_TX_DOUBLE_MDCT</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,



<decl><name>AV_TX_INT32_FFT</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,





<decl><name>AV_TX_INT32_MDCT</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
}</block>;</enum>
















<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>av_tx_fn</name>)<parameter_list>(<parameter><decl><type><name>AVTXContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
















<function_decl><type><name>int</name></type> <name>av_tx_init</name><parameter_list>(<parameter><decl><type><name>AVTXContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>av_tx_fn</name> <modifier>*</modifier></type><name>tx</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVTXType</name></name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>inv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>scale</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>av_tx_uninit</name><parameter_list>(<parameter><decl><type><name>AVTXContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
