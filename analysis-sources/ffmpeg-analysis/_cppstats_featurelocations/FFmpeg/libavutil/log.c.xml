<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\log.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_UNISTD_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_IO_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avutil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bprint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>AVMutex</name></type> <name>mutex</name> <init>= <expr><name>AV_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINE_SZ</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_VALGRIND_VALGRIND_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;valgrind/valgrind.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BACKTRACE_LOGLEVEL</name></cpp:macro> <cpp:value>AV_LOG_ERROR</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>av_log_level</name> <init>= <expr><name>AV_LOG_INFO</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NB_LEVELS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>HAVE_SETCONSOLETEXTATTRIBUTE</name> <operator>&amp;&amp;</operator> <name>HAVE_GETSTDHANDLE</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>color</name><index>[<expr><literal type="number">16</literal> <operator>+</operator> <name>AV_CLASS_CATEGORY_NB</name></expr>]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>AV_LOG_PANIC</name> <operator>/</operator><literal type="number">8</literal></expr>]</index> <operator>=</operator> <literal type="number">12</literal></expr>,
<expr><index>[<expr><name>AV_LOG_FATAL</name> <operator>/</operator><literal type="number">8</literal></expr>]</index> <operator>=</operator> <literal type="number">12</literal></expr>,
<expr><index>[<expr><name>AV_LOG_ERROR</name> <operator>/</operator><literal type="number">8</literal></expr>]</index> <operator>=</operator> <literal type="number">12</literal></expr>,
<expr><index>[<expr><name>AV_LOG_WARNING</name><operator>/</operator><literal type="number">8</literal></expr>]</index> <operator>=</operator> <literal type="number">14</literal></expr>,
<expr><index>[<expr><name>AV_LOG_INFO</name> <operator>/</operator><literal type="number">8</literal></expr>]</index> <operator>=</operator> <literal type="number">7</literal></expr>,
<expr><index>[<expr><name>AV_LOG_VERBOSE</name><operator>/</operator><literal type="number">8</literal></expr>]</index> <operator>=</operator> <literal type="number">10</literal></expr>,
<expr><index>[<expr><name>AV_LOG_DEBUG</name> <operator>/</operator><literal type="number">8</literal></expr>]</index> <operator>=</operator> <literal type="number">10</literal></expr>,
<expr><index>[<expr><name>AV_LOG_TRACE</name> <operator>/</operator><literal type="number">8</literal></expr>]</index> <operator>=</operator> <literal type="number">8</literal></expr>,
<expr><index>[<expr><literal type="number">16</literal><operator>+</operator><name>AV_CLASS_CATEGORY_NA</name></expr> ]</index> <operator>=</operator> <literal type="number">7</literal></expr>,
<expr><index>[<expr><literal type="number">16</literal><operator>+</operator><name>AV_CLASS_CATEGORY_INPUT</name></expr> ]</index> <operator>=</operator> <literal type="number">13</literal></expr>,
<expr><index>[<expr><literal type="number">16</literal><operator>+</operator><name>AV_CLASS_CATEGORY_OUTPUT</name></expr> ]</index> <operator>=</operator> <literal type="number">5</literal></expr>,
<expr><index>[<expr><literal type="number">16</literal><operator>+</operator><name>AV_CLASS_CATEGORY_MUXER</name></expr> ]</index> <operator>=</operator> <literal type="number">13</literal></expr>,
<expr><index>[<expr><literal type="number">16</literal><operator>+</operator><name>AV_CLASS_CATEGORY_DEMUXER</name></expr> ]</index> <operator>=</operator> <literal type="number">5</literal></expr>,
<expr><index>[<expr><literal type="number">16</literal><operator>+</operator><name>AV_CLASS_CATEGORY_ENCODER</name></expr> ]</index> <operator>=</operator> <literal type="number">11</literal></expr>,
<expr><index>[<expr><literal type="number">16</literal><operator>+</operator><name>AV_CLASS_CATEGORY_DECODER</name></expr> ]</index> <operator>=</operator> <literal type="number">3</literal></expr>,
<expr><index>[<expr><literal type="number">16</literal><operator>+</operator><name>AV_CLASS_CATEGORY_FILTER</name></expr> ]</index> <operator>=</operator> <literal type="number">10</literal></expr>,
<expr><index>[<expr><literal type="number">16</literal><operator>+</operator><name>AV_CLASS_CATEGORY_BITSTREAM_FILTER</name></expr>]</index> <operator>=</operator> <literal type="number">9</literal></expr>,
<expr><index>[<expr><literal type="number">16</literal><operator>+</operator><name>AV_CLASS_CATEGORY_SWSCALER</name></expr> ]</index> <operator>=</operator> <literal type="number">7</literal></expr>,
<expr><index>[<expr><literal type="number">16</literal><operator>+</operator><name>AV_CLASS_CATEGORY_SWRESAMPLER</name></expr> ]</index> <operator>=</operator> <literal type="number">7</literal></expr>,
<expr><index>[<expr><literal type="number">16</literal><operator>+</operator><name>AV_CLASS_CATEGORY_DEVICE_VIDEO_OUTPUT</name></expr> ]</index> <operator>=</operator> <literal type="number">13</literal></expr>,
<expr><index>[<expr><literal type="number">16</literal><operator>+</operator><name>AV_CLASS_CATEGORY_DEVICE_VIDEO_INPUT</name></expr> ]</index> <operator>=</operator> <literal type="number">5</literal></expr>,
<expr><index>[<expr><literal type="number">16</literal><operator>+</operator><name>AV_CLASS_CATEGORY_DEVICE_AUDIO_OUTPUT</name></expr> ]</index> <operator>=</operator> <literal type="number">13</literal></expr>,
<expr><index>[<expr><literal type="number">16</literal><operator>+</operator><name>AV_CLASS_CATEGORY_DEVICE_AUDIO_INPUT</name></expr> ]</index> <operator>=</operator> <literal type="number">5</literal></expr>,
<expr><index>[<expr><literal type="number">16</literal><operator>+</operator><name>AV_CLASS_CATEGORY_DEVICE_OUTPUT</name></expr> ]</index> <operator>=</operator> <literal type="number">13</literal></expr>,
<expr><index>[<expr><literal type="number">16</literal><operator>+</operator><name>AV_CLASS_CATEGORY_DEVICE_INPUT</name></expr> ]</index> <operator>=</operator> <literal type="number">5</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int16_t</name></type> <name>background</name></decl>, <decl><type ref="prev"/><name>attr_orig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>HANDLE</name></type> <name>con</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>color</name><index>[<expr><literal type="number">16</literal> <operator>+</operator> <name>AV_CLASS_CATEGORY_NB</name></expr>]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>AV_LOG_PANIC</name> <operator>/</operator><literal type="number">8</literal></expr>]</index> <operator>=</operator> <literal type="number">52</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator> <literal type="number">196</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <literal type="number">0x41</literal></expr>,
<expr><index>[<expr><name>AV_LOG_FATAL</name> <operator>/</operator><literal type="number">8</literal></expr>]</index> <operator>=</operator> <literal type="number">208</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <literal type="number">0x41</literal></expr>,
<expr><index>[<expr><name>AV_LOG_ERROR</name> <operator>/</operator><literal type="number">8</literal></expr>]</index> <operator>=</operator> <literal type="number">196</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <literal type="number">0x11</literal></expr>,
<expr><index>[<expr><name>AV_LOG_WARNING</name><operator>/</operator><literal type="number">8</literal></expr>]</index> <operator>=</operator> <literal type="number">226</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <literal type="number">0x03</literal></expr>,
<expr><index>[<expr><name>AV_LOG_INFO</name> <operator>/</operator><literal type="number">8</literal></expr>]</index> <operator>=</operator> <literal type="number">253</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <literal type="number">0x09</literal></expr>,
<expr><index>[<expr><name>AV_LOG_VERBOSE</name><operator>/</operator><literal type="number">8</literal></expr>]</index> <operator>=</operator> <literal type="number">40</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <literal type="number">0x02</literal></expr>,
<expr><index>[<expr><name>AV_LOG_DEBUG</name> <operator>/</operator><literal type="number">8</literal></expr>]</index> <operator>=</operator> <literal type="number">34</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <literal type="number">0x02</literal></expr>,
<expr><index>[<expr><name>AV_LOG_TRACE</name> <operator>/</operator><literal type="number">8</literal></expr>]</index> <operator>=</operator> <literal type="number">34</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <literal type="number">0x07</literal></expr>,
<expr><index>[<expr><literal type="number">16</literal><operator>+</operator><name>AV_CLASS_CATEGORY_NA</name></expr> ]</index> <operator>=</operator> <literal type="number">250</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <literal type="number">0x09</literal></expr>,
<expr><index>[<expr><literal type="number">16</literal><operator>+</operator><name>AV_CLASS_CATEGORY_INPUT</name></expr> ]</index> <operator>=</operator> <literal type="number">219</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <literal type="number">0x15</literal></expr>,
<expr><index>[<expr><literal type="number">16</literal><operator>+</operator><name>AV_CLASS_CATEGORY_OUTPUT</name></expr> ]</index> <operator>=</operator> <literal type="number">201</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <literal type="number">0x05</literal></expr>,
<expr><index>[<expr><literal type="number">16</literal><operator>+</operator><name>AV_CLASS_CATEGORY_MUXER</name></expr> ]</index> <operator>=</operator> <literal type="number">213</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <literal type="number">0x15</literal></expr>,
<expr><index>[<expr><literal type="number">16</literal><operator>+</operator><name>AV_CLASS_CATEGORY_DEMUXER</name></expr> ]</index> <operator>=</operator> <literal type="number">207</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <literal type="number">0x05</literal></expr>,
<expr><index>[<expr><literal type="number">16</literal><operator>+</operator><name>AV_CLASS_CATEGORY_ENCODER</name></expr> ]</index> <operator>=</operator> <literal type="number">51</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <literal type="number">0x16</literal></expr>,
<expr><index>[<expr><literal type="number">16</literal><operator>+</operator><name>AV_CLASS_CATEGORY_DECODER</name></expr> ]</index> <operator>=</operator> <literal type="number">39</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <literal type="number">0x06</literal></expr>,
<expr><index>[<expr><literal type="number">16</literal><operator>+</operator><name>AV_CLASS_CATEGORY_FILTER</name></expr> ]</index> <operator>=</operator> <literal type="number">155</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <literal type="number">0x12</literal></expr>,
<expr><index>[<expr><literal type="number">16</literal><operator>+</operator><name>AV_CLASS_CATEGORY_BITSTREAM_FILTER</name></expr>]</index> <operator>=</operator> <literal type="number">192</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <literal type="number">0x14</literal></expr>,
<expr><index>[<expr><literal type="number">16</literal><operator>+</operator><name>AV_CLASS_CATEGORY_SWSCALER</name></expr> ]</index> <operator>=</operator> <literal type="number">153</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <literal type="number">0x14</literal></expr>,
<expr><index>[<expr><literal type="number">16</literal><operator>+</operator><name>AV_CLASS_CATEGORY_SWRESAMPLER</name></expr> ]</index> <operator>=</operator> <literal type="number">147</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <literal type="number">0x14</literal></expr>,
<expr><index>[<expr><literal type="number">16</literal><operator>+</operator><name>AV_CLASS_CATEGORY_DEVICE_VIDEO_OUTPUT</name></expr> ]</index> <operator>=</operator> <literal type="number">213</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <literal type="number">0x15</literal></expr>,
<expr><index>[<expr><literal type="number">16</literal><operator>+</operator><name>AV_CLASS_CATEGORY_DEVICE_VIDEO_INPUT</name></expr> ]</index> <operator>=</operator> <literal type="number">207</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <literal type="number">0x05</literal></expr>,
<expr><index>[<expr><literal type="number">16</literal><operator>+</operator><name>AV_CLASS_CATEGORY_DEVICE_AUDIO_OUTPUT</name></expr> ]</index> <operator>=</operator> <literal type="number">213</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <literal type="number">0x15</literal></expr>,
<expr><index>[<expr><literal type="number">16</literal><operator>+</operator><name>AV_CLASS_CATEGORY_DEVICE_AUDIO_INPUT</name></expr> ]</index> <operator>=</operator> <literal type="number">207</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <literal type="number">0x05</literal></expr>,
<expr><index>[<expr><literal type="number">16</literal><operator>+</operator><name>AV_CLASS_CATEGORY_DEVICE_OUTPUT</name></expr> ]</index> <operator>=</operator> <literal type="number">213</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <literal type="number">0x15</literal></expr>,
<expr><index>[<expr><literal type="number">16</literal><operator>+</operator><name>AV_CLASS_CATEGORY_DEVICE_INPUT</name></expr> ]</index> <operator>=</operator> <literal type="number">207</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <literal type="number">0x05</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>use_color</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>HAVE_SETCONSOLETEXTATTRIBUTE</name> <operator>&amp;&amp;</operator> <name>HAVE_GETSTDHANDLE</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>win_console_puts</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>line</name><index>[<expr><name>LINE_SZ</name></expr>]</index></name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>q</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>line</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>nb_chars</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>written</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>q</name> <operator>&amp;&amp;</operator> <name>nb_chars</name> <operator>&lt;</operator> <name>LINE_SZ</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>tmp</name></decl>;</decl_stmt>

<macro><name>GET_UTF8</name><argument_list>(<argument>ch</argument>, <argument>*q ? *q++ : <literal type="number">0</literal></argument>, <argument>ch = <literal type="number">0xfffd</literal>; goto continue_on_invalid;</argument>)</argument_list></macro>
<label><name>continue_on_invalid</name>:</label>
<macro><name>PUT_UTF16</name><argument_list>(<argument>ch</argument>, <argument>tmp</argument>, <argument>*buf++ = tmp; nb_chars++;</argument>)</argument_list></macro>
</block_content>}</block></while>

<expr_stmt><expr><call><name>WriteConsoleW</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>nb_chars</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>written</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_color_terminal</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>term</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"TERM"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>HAVE_SETCONSOLETEXTATTRIBUTE</name> <operator>&amp;&amp;</operator> <name>HAVE_GETSTDHANDLE</name></expr></cpp:if>
<decl_stmt><decl><type><name>CONSOLE_SCREEN_BUFFER_INFO</name></type> <name>con_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dummy</name></decl>;</decl_stmt>
<expr_stmt><expr><name>con</name> <operator>=</operator> <call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_ERROR_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>con</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>GetConsoleMode</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>con</name> <operator>=</operator> <name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>con</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GetConsoleScreenBufferInfo</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>con_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>attr_orig</name> <operator>=</operator> <name><name>con_info</name><operator>.</operator><name>wAttributes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>background</name> <operator>=</operator> <name>attr_orig</name> <operator>&amp;</operator> <literal type="number">0xF0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"AV_LOG_FORCE_NOCOLOR"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>use_color</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"AV_LOG_FORCE_COLOR"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>use_color</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>HAVE_SETCONSOLETEXTATTRIBUTE</name> <operator>&amp;&amp;</operator> <name>HAVE_GETSTDHANDLE</name></expr></cpp:if>
<expr_stmt><expr><name>use_color</name> <operator>=</operator> <operator>(</operator><name>con</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name><operator>)</operator></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_ISATTY</name></expr></cpp:elif>
<expr_stmt><expr><name>use_color</name> <operator>=</operator> <operator>(</operator><name>term</name> <operator>&amp;&amp;</operator> <call><name>isatty</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>use_color</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"AV_LOG_FORCE_256COLOR"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <name>term</name> <operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"256color"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>use_color</name> <operator>*=</operator> <literal type="number">256</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ansi_fputs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tint</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>local_use_color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>local_use_color</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"\033[%"</literal><name>PRIu32</name><literal type="string">";3%"</literal><name>PRIu32</name><literal type="string">"m%s\033[0m"</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>color</name><index>[<expr><name>level</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">15</literal></expr></argument>,
<argument><expr><name><name>color</name><index>[<expr><name>level</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">15</literal></expr></argument>,
<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tint</name> <operator>&amp;&amp;</operator> <name>use_color</name> <operator>==</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"\033[48;5;%"</literal><name>PRIu32</name><literal type="string">"m\033[38;5;%dm%s\033[0m"</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>color</name><index>[<expr><name>level</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>,
<argument><expr><name>tint</name></expr></argument>,
<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>local_use_color</name> <operator>==</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"\033[48;5;%"</literal><name>PRIu32</name><literal type="string">"m\033[38;5;%"</literal><name>PRIu32</name><literal type="string">"m%s\033[0m"</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>color</name><index>[<expr><name>level</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>color</name><index>[<expr><name>level</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>,
<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>colored_fputs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tint</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>local_use_color</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_color</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>check_color_terminal</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <name>AV_LOG_INFO</name><operator>/</operator><literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>local_use_color</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>local_use_color</name> <operator>=</operator> <name>use_color</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>HAVE_SETCONSOLETEXTATTRIBUTE</name> <operator>&amp;&amp;</operator> <name>HAVE_GETSTDHANDLE</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>con</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>local_use_color</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SetConsoleTextAttribute</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>background</name> <operator>|</operator> <name><name>color</name><index>[<expr><name>level</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>win_console_puts</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>local_use_color</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SetConsoleTextAttribute</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>attr_orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ansi_fputs</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>tint</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>local_use_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>ansi_fputs</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>tint</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>local_use_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>av_default_item_name</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>*</operator><operator>(</operator><name>AVClass</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>ptr</name><operator>)</operator><operator>-&gt;</operator><name>class_name</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>AVClassCategory</name></type> <name>av_default_get_category</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>*</operator><operator>(</operator><name>AVClass</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>ptr</name><operator>)</operator><operator>-&gt;</operator><name>category</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sanitize</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list><block>{<block_content>
<while>while<condition>(<expr><operator>*</operator><name>line</name></expr>)</condition><block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>line</name> <operator>&lt;</operator> <literal type="number">0x08</literal> <operator>||</operator> <operator>(</operator><operator>*</operator><name>line</name> <operator>&gt;</operator> <literal type="number">0x0D</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>line</name> <operator>&lt;</operator> <literal type="number">0x20</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>line</name><operator>=</operator><literal type="char">'?'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>line</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_category</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>avc</name> <init>= <expr><operator>*</operator><operator>(</operator><name>AVClass</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>ptr</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><operator>!</operator><name>avc</name>
<operator>||</operator> <operator>(</operator><name><name>avc</name><operator>-&gt;</operator><name>version</name></name><operator>&amp;</operator><literal type="number">0xFF</literal><operator>)</operator><operator>&lt;</operator><literal type="number">100</literal>
<operator>||</operator> <name><name>avc</name><operator>-&gt;</operator><name>version</name></name> <operator>&lt;</operator> <operator>(</operator><literal type="number">51</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator> <literal type="number">59</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator>
<operator>||</operator> <name><name>avc</name><operator>-&gt;</operator><name>category</name></name> <operator>&gt;=</operator> <name>AV_CLASS_CATEGORY_NB</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>AV_CLASS_CATEGORY_NA</name> <operator>+</operator> <literal type="number">16</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>avc</name><operator>-&gt;</operator><name>get_category</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>avc</name><operator>-&gt;</operator><name>get_category</name></name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">16</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>avc</name><operator>-&gt;</operator><name>category</name></name> <operator>+</operator> <literal type="number">16</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_level_str</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>level</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_LOG_QUIET</name></expr>:</case>
<return>return <expr><literal type="string">"quiet"</literal></expr>;</return>
<case>case <expr><name>AV_LOG_DEBUG</name></expr>:</case>
<return>return <expr><literal type="string">"debug"</literal></expr>;</return>
<case>case <expr><name>AV_LOG_TRACE</name></expr>:</case>
<return>return <expr><literal type="string">"trace"</literal></expr>;</return>
<case>case <expr><name>AV_LOG_VERBOSE</name></expr>:</case>
<return>return <expr><literal type="string">"verbose"</literal></expr>;</return>
<case>case <expr><name>AV_LOG_INFO</name></expr>:</case>
<return>return <expr><literal type="string">"info"</literal></expr>;</return>
<case>case <expr><name>AV_LOG_WARNING</name></expr>:</case>
<return>return <expr><literal type="string">"warning"</literal></expr>;</return>
<case>case <expr><name>AV_LOG_ERROR</name></expr>:</case>
<return>return <expr><literal type="string">"error"</literal></expr>;</return>
<case>case <expr><name>AV_LOG_FATAL</name></expr>:</case>
<return>return <expr><literal type="string">"fatal"</literal></expr>;</return>
<case>case <expr><name>AV_LOG_PANIC</name></expr>:</case>
<return>return <expr><literal type="string">"panic"</literal></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="string">""</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>format_line</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>avcl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>vl</name></decl></parameter>,
<parameter><decl><type><name>AVBPrint</name></type> <name><name>part</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>print_prefix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>type</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVClass</name><modifier>*</modifier></type> <name>avc</name> <init>= <expr><ternary><condition><expr><name>avcl</name></expr> ?</condition><then> <expr><operator>*</operator><operator>(</operator><name>AVClass</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>avcl</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><name>part</name><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_AUTOMATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><name>part</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_AUTOMATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><name>part</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_AUTOMATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><name>part</name><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">65536</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>type</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>type</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>type</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>AV_CLASS_CATEGORY_NA</name> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>print_prefix</name> <operator>&amp;&amp;</operator> <name>avc</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>avc</name><operator>-&gt;</operator><name>parent_log_context_offset</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVClass</name><modifier>*</modifier><modifier>*</modifier></type> <name>parent</name> <init>= <expr><operator>*</operator><operator>(</operator><name>AVClass</name> <operator>*</operator><operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>avcl</name><operator>)</operator> <operator>+</operator>
<name><name>avc</name><operator>-&gt;</operator><name>parent_log_context_offset</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>parent</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>part</name><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"[%s @ %p] "</literal></expr></argument>,
<argument><expr><call><name><operator>(</operator><operator>*</operator><name>parent</name><operator>)</operator><operator>-&gt;</operator><name>item_name</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>type</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>type</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_category</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>part</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"[%s @ %p] "</literal></expr></argument>,
<argument><expr><call><name><name>avc</name><operator>-&gt;</operator><name>item_name</name></name><argument_list>(<argument><expr><name>avcl</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>avcl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>type</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>type</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_category</name><argument_list>(<argument><expr><name>avcl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>print_prefix</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>level</name> <operator>&gt;</operator> <name>AV_LOG_QUIET</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>AV_LOG_PRINT_LEVEL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>part</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"[%s] "</literal></expr></argument>, <argument><expr><call><name>get_level_str</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_vbprintf</name><argument_list>(<argument><expr><name>part</name><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name><name>part</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>str</name> <operator>||</operator> <operator>*</operator><name><name>part</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>str</name> <operator>||</operator> <operator>*</operator><name><name>part</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>str</name> <operator>||</operator> <operator>*</operator><name><name>part</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>str</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>lastc</name> <init>= <expr><ternary><condition><expr><name><name>part</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>len</name> <operator>&amp;&amp;</operator> <name><name>part</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>len</name> <operator>&lt;=</operator> <name><name>part</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>size</name></expr> ?</condition><then> <expr><name><name>part</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name><name>str</name><index>[<expr><name><name>part</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>print_prefix</name> <operator>=</operator> <name>lastc</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>lastc</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_log_format_line</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>vl</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>print_prefix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_log_format_line2</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vl</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>print_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_log_format_line2</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>vl</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>print_prefix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVBPrint</name></type> <name><name>part</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>format_line</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vl</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><name>print_prefix</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><literal type="string">"%s%s%s%s"</literal></expr></argument>, <argument><expr><name><name>part</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>, <argument><expr><name><name>part</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>, <argument><expr><name><name>part</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>, <argument><expr><name><name>part</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><name>part</name><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_log_default_callback</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>vl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>print_prefix</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>prev</name><index>[<expr><name>LINE_SZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVBPrint</name></type> <name><name>part</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><name>LINE_SZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>is_atty</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>type</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>tint</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tint</name> <operator>=</operator> <name>level</name> <operator>&amp;</operator> <literal type="number">0xff00</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>level</name> <operator>&amp;=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;</operator> <name>av_log_level</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ff_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>format_line</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vl</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>print_prefix</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%s%s%s"</literal></expr></argument>, <argument><expr><name><name>part</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>, <argument><expr><name><name>part</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>, <argument><expr><name><name>part</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>, <argument><expr><name><name>part</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ISATTY</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_atty</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>is_atty</name> <operator>=</operator> <ternary><condition><expr><call><name>isatty</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>print_prefix</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>AV_LOG_SKIP_REPEATED</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>*</operator><name>line</name> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\r'</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>is_atty</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" Last message repeated %d times\r"</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" Last message repeated %d times\n"</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sanitize</name><argument_list>(<argument><expr><name><name>part</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>colored_fputs</name><argument_list>(<argument><expr><name><name>type</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>part</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sanitize</name><argument_list>(<argument><expr><name><name>part</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>colored_fputs</name><argument_list>(<argument><expr><name><name>type</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>part</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sanitize</name><argument_list>(<argument><expr><name><name>part</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>colored_fputs</name><argument_list>(<argument><expr><call><name>av_clip</name><argument_list>(<argument><expr><name>level</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NB_LEVELS</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tint</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>part</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sanitize</name><argument_list>(<argument><expr><name><name>part</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>colored_fputs</name><argument_list>(<argument><expr><call><name>av_clip</name><argument_list>(<argument><expr><name>level</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NB_LEVELS</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tint</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>part</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VALGRIND_BACKTRACE</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&lt;=</operator> <name>BACKTRACE_LOGLEVEL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>VALGRIND_PRINTF_BACKTRACE</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<label><name>end</name>:</label>
<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><name>part</name><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> (<modifier>*</modifier><name>av_log_callback</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list> <init>=
<expr><name>av_log_default_callback</name></expr></init>;</function_decl>

<function><type><name>void</name></type> <name>av_log</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>avcl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>vl</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vl</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_vlog</name><argument_list>(<argument><expr><name>avcl</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_log_once</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>avcl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>initial_level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>subsequent_level</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>vl</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vl</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_vlog</name><argument_list>(<argument><expr><name>avcl</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>*</operator><name>state</name></expr> ?</condition><then> <expr><name>subsequent_level</name></expr> </then><else>: <expr><name>initial_level</name></expr></else></ternary></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_vlog</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>avcl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>vl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVClass</name><modifier>*</modifier></type> <name>avc</name> <init>= <expr><ternary><condition><expr><name>avcl</name></expr> ?</condition><then> <expr><operator>*</operator><operator>(</operator><name>AVClass</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>avcl</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>log_callback</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list> <init>= <expr><name>av_log_callback</name></expr></init>;</function_decl>
<if_stmt><if>if <condition>(<expr><name>avc</name> <operator>&amp;&amp;</operator> <name><name>avc</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">50</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator> <literal type="number">15</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>avc</name><operator>-&gt;</operator><name>log_level_offset_offset</name></name> <operator>&amp;&amp;</operator> <name>level</name> <operator>&gt;=</operator> <name>AV_LOG_FATAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>level</name> <operator>+=</operator> <operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>avcl</name><operator>)</operator> <operator>+</operator> <name><name>avc</name><operator>-&gt;</operator><name>log_level_offset_offset</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>log_callback</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>log_callback</name><argument_list>(<argument><expr><name>avcl</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_log_get_level</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>av_log_level</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_log_set_level</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>av_log_level</name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_log_set_flags</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_log_get_flags</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>flags</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_log_set_callback</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>av_log_callback</name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>missing_feature_sample</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sample</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>avc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>,
<parameter><decl><type><name>va_list</name></type> <name>argument_list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_vlog</name><argument_list>(<argument><expr><name>avc</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>argument_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avc</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">" is not implemented. Update your FFmpeg "</literal>
<literal type="string">"version to the newest one from Git. If the problem still "</literal>
<literal type="string">"occurs, it means that your file has a feature which has not "</literal>
<literal type="string">"been implemented.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sample</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avc</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"If you want to help, upload a sample "</literal>
<literal type="string">"of this file to ftp://upload.ffmpeg.org/incoming/ "</literal>
<literal type="string">"and contact the ffmpeg-devel mailing list. (ffmpeg-devel@ffmpeg.org)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>avpriv_request_sample</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>avc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>argument_list</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>argument_list</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>missing_feature_sample</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>avc</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>argument_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>argument_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>avpriv_report_missing_feature</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>avc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>argument_list</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>argument_list</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>missing_feature_sample</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>avc</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>argument_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>argument_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
