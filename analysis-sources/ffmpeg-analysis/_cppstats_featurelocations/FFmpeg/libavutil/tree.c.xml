<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\tree.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tree.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>AVTreeNode</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>AVTreeNode</name></name> <modifier>*</modifier></type><name><name>child</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>elem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>state</name></decl>;</decl_stmt>
}</block></struct></type> <name>AVTreeNode</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>av_tree_node_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVTreeNode</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<function><type><name><name>struct</name> <name>AVTreeNode</name></name> <modifier>*</modifier></type><name>av_tree_node_alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>AVTreeNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>av_tree_find</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVTreeNode</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cmp</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name><name>next</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>v</name> <init>= <expr><call><name>cmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>elem</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>next</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>next</name><index>[<expr><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>]</index></name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>elem</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>av_tree_find</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>child</name><index>[<expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>^</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>next</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_tree_find</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_tree_find</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>t</name><operator>-&gt;</operator><name>elem</name></name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>av_tree_insert</name><parameter_list>(<parameter><decl><type><name>AVTreeNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>tp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cmp</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>AVTreeNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>next</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVTreeNode</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><operator>*</operator><name>tp</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>v</name> <init>= <expr><call><name>cmp</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>elem</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>v</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>next</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>t</name><operator>-&gt;</operator><name>elem</name></name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name><name>t</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>!</operator><name><name>t</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>next_elem</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_tree_find</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>next_elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>elem</name></name> <operator>=</operator> <name><name>next_elem</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>-</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>next</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_tree_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>]</index></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>^</operator> <operator>!</operator><operator>!</operator><operator>*</operator><name>next</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVTreeNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>child</name> <init>= <expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>state</name></name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>state</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>




















<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>child</name><operator>)</operator><operator>-&gt;</operator><name>state</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>==</operator> <operator>-</operator><name><name>t</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>tp</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>child</name><operator>)</operator><operator>-&gt;</operator><name>child</name></name><index>[<expr><name>i</name> <operator>^</operator> <literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>child</name><operator>)</operator><operator>-&gt;</operator><name>child</name></name><index>[<expr><name>i</name> <operator>^</operator> <literal type="number">1</literal></expr>]</index> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>tp</name><operator>)</operator><operator>-&gt;</operator><name>child</name></name><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>tp</name><operator>)</operator><operator>-&gt;</operator><name>child</name></name><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <operator>*</operator><name>child</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>child</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>tp</name><operator>)</operator><operator>-&gt;</operator><name>child</name></name><index>[<expr><name>i</name> <operator>^</operator> <literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>tp</name><operator>)</operator><operator>-&gt;</operator><name>child</name></name><index>[<expr><name>i</name> <operator>^</operator> <literal type="number">1</literal></expr>]</index> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>tp</name><operator>)</operator><operator>-&gt;</operator><name>child</name></name><index>[<expr><literal type="number">0</literal></expr>]</index><operator>-&gt;</operator><name>state</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>tp</name><operator>)</operator><operator>-&gt;</operator><name>state</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>tp</name><operator>)</operator><operator>-&gt;</operator><name>child</name></name><index>[<expr><literal type="number">1</literal></expr>]</index><operator>-&gt;</operator><name>state</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>tp</name><operator>)</operator><operator>-&gt;</operator><name>state</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>tp</name><operator>)</operator><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>tp</name> <operator>=</operator> <operator>*</operator><name>child</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>child</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>child</name><operator>)</operator><operator>-&gt;</operator><name>child</name></name><index>[<expr><name>i</name> <operator>^</operator> <literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>tp</name><operator>)</operator><operator>-&gt;</operator><name>child</name></name><index>[<expr><name>i</name> <operator>^</operator> <literal type="number">1</literal></expr>]</index> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>tp</name><operator>)</operator><operator>-&gt;</operator><name>state</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>state</name></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>tp</name><operator>)</operator><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <operator>-</operator><name><name>t</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><operator>(</operator><operator>*</operator><name>tp</name><operator>)</operator><operator>-&gt;</operator><name>state</name></name> <operator>^</operator> <operator>!</operator><operator>!</operator><operator>*</operator><name>next</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>key</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>tp</name> <operator>=</operator> <operator>*</operator><name>next</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>next</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>tp</name><operator>)</operator><operator>-&gt;</operator><name>elem</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><name>key</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_tree_destroy</name><parameter_list>(<parameter><decl><type><name>AVTreeNode</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_tree_destroy</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_tree_destroy</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_tree_enumerate</name><parameter_list>(<parameter><decl><type><name>AVTreeNode</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cmp</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>elem</name></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>enu</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>elem</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><ternary><condition><expr><name>cmp</name></expr> ?</condition><then> <expr><call><name>cmp</name><argument_list>(<argument><expr><name>opaque</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>elem</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_tree_enumerate</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>opaque</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>enu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>enu</name><argument_list>(<argument><expr><name>opaque</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>elem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_tree_enumerate</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>opaque</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>enu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
