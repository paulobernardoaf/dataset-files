<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\tx_template.c">
























<expr_stmt><expr><call><name>COSTABLE</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COSTABLE</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COSTABLE</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COSTABLE</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COSTABLE</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COSTABLE</name><argument_list>(<argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COSTABLE</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COSTABLE</name><argument_list>(<argument><expr><literal type="number">2048</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COSTABLE</name><argument_list>(<argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COSTABLE</name><argument_list>(<argument><expr><literal type="number">8192</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COSTABLE</name><argument_list>(<argument><expr><literal type="number">16384</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COSTABLE</name><argument_list>(<argument><expr><literal type="number">32768</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COSTABLE</name><argument_list>(<argument><expr><literal type="number">65536</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COSTABLE</name><argument_list>(<argument><expr><literal type="number">131072</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>FFTComplex</name></expr></argument>, <argument><expr><call><name>TX_NAME</name><argument_list>(<argument><expr><name>ff_cos_53</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><literal type="number">4</literal></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>FFTSample</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>cos_tabs</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><call><name>TX_NAME</name><argument_list>(<argument><expr><name>ff_cos_16</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>TX_NAME</name><argument_list>(<argument><expr><name>ff_cos_32</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>TX_NAME</name><argument_list>(<argument><expr><name>ff_cos_64</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>TX_NAME</name><argument_list>(<argument><expr><name>ff_cos_128</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>TX_NAME</name><argument_list>(<argument><expr><name>ff_cos_256</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>TX_NAME</name><argument_list>(<argument><expr><name>ff_cos_512</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>TX_NAME</name><argument_list>(<argument><expr><name>ff_cos_1024</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>TX_NAME</name><argument_list>(<argument><expr><name>ff_cos_2048</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>TX_NAME</name><argument_list>(<argument><expr><name>ff_cos_4096</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>TX_NAME</name><argument_list>(<argument><expr><name>ff_cos_8192</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>TX_NAME</name><argument_list>(<argument><expr><name>ff_cos_16384</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>TX_NAME</name><argument_list>(<argument><expr><name>ff_cos_32768</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>TX_NAME</name><argument_list>(<argument><expr><name>ff_cos_65536</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>TX_NAME</name><argument_list>(<argument><expr><name>ff_cos_131072</name></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>init_cos_tabs_idx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>index</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>freq</name> <init>= <expr><literal type="number">2</literal><operator>*</operator><name>M_PI</name><operator>/</operator><name>m</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>tab</name> <init>= <expr><name><name>cos_tabs</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>m</name><operator>/</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>RESCALE</name><argument_list>(<argument><expr><call><name>cos</name><argument_list>(<argument><expr><name>i</name><operator>*</operator><name>freq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name><operator>/</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tab</name><index>[<expr><name>m</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INIT_FF_COS_TABS_FUNC</name><parameter_list>(<parameter><type><name>index</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static av_cold void init_cos_tabs_ ##size (void) { init_cos_tabs_idx(index); }</cpp:value></cpp:define>





<macro><name>INIT_FF_COS_TABS_FUNC</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>INIT_FF_COS_TABS_FUNC</name><argument_list>(<argument><literal type="number">5</literal></argument>, <argument><literal type="number">32</literal></argument>)</argument_list></macro>
<macro><name>INIT_FF_COS_TABS_FUNC</name><argument_list>(<argument><literal type="number">6</literal></argument>, <argument><literal type="number">64</literal></argument>)</argument_list></macro>
<macro><name>INIT_FF_COS_TABS_FUNC</name><argument_list>(<argument><literal type="number">7</literal></argument>, <argument><literal type="number">128</literal></argument>)</argument_list></macro>
<macro><name>INIT_FF_COS_TABS_FUNC</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument><literal type="number">256</literal></argument>)</argument_list></macro>
<macro><name>INIT_FF_COS_TABS_FUNC</name><argument_list>(<argument><literal type="number">9</literal></argument>, <argument><literal type="number">512</literal></argument>)</argument_list></macro>
<macro><name>INIT_FF_COS_TABS_FUNC</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument><literal type="number">1024</literal></argument>)</argument_list></macro>
<macro><name>INIT_FF_COS_TABS_FUNC</name><argument_list>(<argument><literal type="number">11</literal></argument>, <argument><literal type="number">2048</literal></argument>)</argument_list></macro>
<macro><name>INIT_FF_COS_TABS_FUNC</name><argument_list>(<argument><literal type="number">12</literal></argument>, <argument><literal type="number">4096</literal></argument>)</argument_list></macro>
<macro><name>INIT_FF_COS_TABS_FUNC</name><argument_list>(<argument><literal type="number">13</literal></argument>, <argument><literal type="number">8192</literal></argument>)</argument_list></macro>
<macro><name>INIT_FF_COS_TABS_FUNC</name><argument_list>(<argument><literal type="number">14</literal></argument>, <argument><literal type="number">16384</literal></argument>)</argument_list></macro>
<macro><name>INIT_FF_COS_TABS_FUNC</name><argument_list>(<argument><literal type="number">15</literal></argument>, <argument><literal type="number">32768</literal></argument>)</argument_list></macro>
<macro><name>INIT_FF_COS_TABS_FUNC</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument><literal type="number">65536</literal></argument>)</argument_list></macro>
<macro><name>INIT_FF_COS_TABS_FUNC</name><argument_list>(<argument><literal type="number">17</literal></argument>, <argument><literal type="number">131072</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>ff_init_53_tabs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>TX_NAME</name><argument_list>(<argument><expr><name>ff_cos_53</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <operator>(</operator><name>FFTComplex</name><operator>)</operator><block>{ <expr><call><name>RESCALE</name><argument_list>(<argument><expr><call><name>cos</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>M_PI</name> <operator>/</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <macro><name>RESCALE</name><argument_list>(<argument>cos(<literal type="number">2</literal> * M_PI / <literal type="number">12</literal>)</argument>)</argument_list></macro> }</block></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TX_NAME</name><argument_list>(<argument><expr><name>ff_cos_53</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>=</operator> <operator>(</operator><name>FFTComplex</name><operator>)</operator><block>{ <expr><call><name>RESCALE</name><argument_list>(<argument><expr><call><name>cos</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>M_PI</name> <operator>/</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <macro><name>RESCALE</name><argument_list>(<argument>cos(<literal type="number">2</literal> * M_PI / <literal type="number">6</literal>)</argument>)</argument_list></macro> }</block></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TX_NAME</name><argument_list>(<argument><expr><name>ff_cos_53</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>=</operator> <operator>(</operator><name>FFTComplex</name><operator>)</operator><block>{ <expr><call><name>RESCALE</name><argument_list>(<argument><expr><call><name>cos</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>M_PI</name> <operator>/</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <macro><name>RESCALE</name><argument_list>(<argument>sin(<literal type="number">2</literal> * M_PI / <literal type="number">5</literal>)</argument>)</argument_list></macro> }</block></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TX_NAME</name><argument_list>(<argument><expr><name>ff_cos_53</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">3</literal></expr>]</index> <operator>=</operator> <operator>(</operator><name>FFTComplex</name><operator>)</operator><block>{ <expr><call><name>RESCALE</name><argument_list>(<argument><expr><call><name>cos</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>M_PI</name> <operator>/</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <macro><name>RESCALE</name><argument_list>(<argument>sin(<literal type="number">2</literal> * M_PI / <literal type="number">10</literal>)</argument>)</argument_list></macro> }</block></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>CosTabsInitOnce</name></type> <name><name>cos_tabs_init_once</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>ff_init_53_tabs</name></expr>, <expr><name>AV_ONCE_INIT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>init_cos_tabs_16</name></expr>, <expr><name>AV_ONCE_INIT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>init_cos_tabs_32</name></expr>, <expr><name>AV_ONCE_INIT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>init_cos_tabs_64</name></expr>, <expr><name>AV_ONCE_INIT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>init_cos_tabs_128</name></expr>, <expr><name>AV_ONCE_INIT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>init_cos_tabs_256</name></expr>, <expr><name>AV_ONCE_INIT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>init_cos_tabs_512</name></expr>, <expr><name>AV_ONCE_INIT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>init_cos_tabs_1024</name></expr>, <expr><name>AV_ONCE_INIT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>init_cos_tabs_2048</name></expr>, <expr><name>AV_ONCE_INIT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>init_cos_tabs_4096</name></expr>, <expr><name>AV_ONCE_INIT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>init_cos_tabs_8192</name></expr>, <expr><name>AV_ONCE_INIT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>init_cos_tabs_16384</name></expr>, <expr><name>AV_ONCE_INIT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>init_cos_tabs_32768</name></expr>, <expr><name>AV_ONCE_INIT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>init_cos_tabs_65536</name></expr>, <expr><name>AV_ONCE_INIT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>init_cos_tabs_131072</name></expr>, <expr><name>AV_ONCE_INIT</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>init_cos_tabs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_thread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cos_tabs_init_once</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>control</name></expr></argument>,
<argument><expr><name><name>cos_tabs_init_once</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>fft3</name><parameter_list>(<parameter><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FFTComplex</name></type> <name><name>tmp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TX_INT32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int64_t</name></type> <name><name>mtmp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>BF</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>, <argument><expr><name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BF</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>+</operator> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TX_INT32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>mtmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><call><name>TX_NAME</name><argument_list>(<argument><expr><name>ff_cos_53</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>re</name> <operator>*</operator> <name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mtmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><call><name>TX_NAME</name><argument_list>(<argument><expr><name>ff_cos_53</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>im</name> <operator>*</operator> <name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mtmp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><call><name>TX_NAME</name><argument_list>(<argument><expr><name>ff_cos_53</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1</literal></expr>]</index><operator>.</operator><name>re</name> <operator>*</operator> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mtmp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><call><name>TX_NAME</name><argument_list>(<argument><expr><name>ff_cos_53</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1</literal></expr>]</index><operator>.</operator><name>re</name> <operator>*</operator> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>-</operator> <operator>(</operator><name><name>mtmp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>mtmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x40000000</literal> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>-</operator> <operator>(</operator><name><name>mtmp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>mtmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x40000000</literal> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>-</operator> <operator>(</operator><name><name>mtmp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>mtmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x40000000</literal> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>-</operator> <operator>(</operator><name><name>mtmp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>mtmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x40000000</literal> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <call><name>TX_NAME</name><argument_list>(<argument><expr><name>ff_cos_53</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>re</name> <operator>*</operator> <name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <call><name>TX_NAME</name><argument_list>(<argument><expr><name>ff_cos_53</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>im</name> <operator>*</operator> <name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <call><name>TX_NAME</name><argument_list>(<argument><expr><name>ff_cos_53</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1</literal></expr>]</index><operator>.</operator><name>re</name> <operator>*</operator> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <call><name>TX_NAME</name><argument_list>(<argument><expr><name>ff_cos_53</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1</literal></expr>]</index><operator>.</operator><name>re</name> <operator>*</operator> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>-</operator> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>-</operator> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>-</operator> <name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>-</operator> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>-</operator> <name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>-</operator> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>+</operator> <name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECL_FFT5</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>D0</name></type></parameter>, <parameter><type><name>D1</name></type></parameter>, <parameter><type><name>D2</name></type></parameter>, <parameter><type><name>D3</name></type></parameter>, <parameter><type><name>D4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static av_always_inline void NAME(FFTComplex *out, FFTComplex *in, ptrdiff_t stride) { FFTComplex z0[4], t[6]; BF(t[1].im, t[0].re, in[1].re, in[4].re); BF(t[1].re, t[0].im, in[1].im, in[4].im); BF(t[3].im, t[2].re, in[2].re, in[3].re); BF(t[3].re, t[2].im, in[2].im, in[3].im); out[D0*stride].re = in[0].re + t[0].re + t[2].re; out[D0*stride].im = in[0].im + t[0].im + t[2].im; SMUL(t[4].re, t[0].re, TX_NAME(ff_cos_53)[2].re, TX_NAME(ff_cos_53)[3].re, t[2].re, t[0].re); SMUL(t[4].im, t[0].im, TX_NAME(ff_cos_53)[2].re, TX_NAME(ff_cos_53)[3].re, t[2].im, t[0].im); CMUL(t[5].re, t[1].re, TX_NAME(ff_cos_53)[2].im, TX_NAME(ff_cos_53)[3].im, t[3].re, t[1].re); CMUL(t[5].im, t[1].im, TX_NAME(ff_cos_53)[2].im, TX_NAME(ff_cos_53)[3].im, t[3].im, t[1].im); BF(z0[0].re, z0[3].re, t[0].re, t[1].re); BF(z0[0].im, z0[3].im, t[0].im, t[1].im); BF(z0[2].re, z0[1].re, t[4].re, t[5].re); BF(z0[2].im, z0[1].im, t[4].im, t[5].im); out[D1*stride].re = in[0].re + z0[3].re; out[D1*stride].im = in[0].im + z0[0].im; out[D2*stride].re = in[0].re + z0[2].re; out[D2*stride].im = in[0].im + z0[1].im; out[D3*stride].re = in[0].re + z0[1].re; out[D3*stride].im = in[0].im + z0[2].im; out[D4*stride].re = in[0].re + z0[0].re; out[D4*stride].im = in[0].im + z0[3].im; }</cpp:value></cpp:define>

































<macro><name>DECL_FFT5</name><argument_list>(<argument>fft5</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">3</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro>
<macro><name>DECL_FFT5</name><argument_list>(<argument>fft5_m1</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">6</literal></argument>, <argument><literal type="number">12</literal></argument>, <argument><literal type="number">3</literal></argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>
<macro><name>DECL_FFT5</name><argument_list>(<argument>fft5_m2</argument>, <argument><literal type="number">10</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">7</literal></argument>, <argument><literal type="number">13</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro>
<macro><name>DECL_FFT5</name><argument_list>(<argument>fft5_m3</argument>, <argument><literal type="number">5</literal></argument>, <argument><literal type="number">11</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">14</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>fft15</name><parameter_list>(<parameter><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FFTComplex</name></type> <name><name>tmp</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fft3</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>fft5_m1</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fft5_m2</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fft5_m3</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUTTERFLIES</name><parameter_list>(<parameter><type><name>a0</name></type></parameter>,<parameter><type><name>a1</name></type></parameter>,<parameter><type><name>a2</name></type></parameter>,<parameter><type><name>a3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{BF(t3, t5, t5, t1);BF(a2.re, a0.re, a0.re, t5);BF(a3.im, a1.im, a1.im, t3);BF(t4, t6, t2, t6);BF(a3.re, a1.re, a1.re, t4);BF(a2.im, a0.im, a0.im, t6);}</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUTTERFLIES_BIG</name><parameter_list>(<parameter><type><name>a0</name></type></parameter>,<parameter><type><name>a1</name></type></parameter>,<parameter><type><name>a2</name></type></parameter>,<parameter><type><name>a3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{FFTSample r0=a0.re, i0=a0.im, r1=a1.re, i1=a1.im;BF(t3, t5, t5, t1);BF(a2.re, a0.re, r0, t5);BF(a3.im, a1.im, i1, t3);BF(t4, t6, t2, t6);BF(a3.re, a1.re, r1, t4);BF(a2.im, a0.im, i0, t6);}</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSFORM</name><parameter_list>(<parameter><type><name>a0</name></type></parameter>,<parameter><type><name>a1</name></type></parameter>,<parameter><type><name>a2</name></type></parameter>,<parameter><type><name>a3</name></type></parameter>,<parameter><type><name>wre</name></type></parameter>,<parameter><type><name>wim</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{CMUL(t1, t2, a2.re, a2.im, wre, -wim);CMUL(t5, t6, a3.re, a3.im, wre, wim);BUTTERFLIES(a0,a1,a2,a3)}</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSFORM_ZERO</name><parameter_list>(<parameter><type><name>a0</name></type></parameter>,<parameter><type><name>a1</name></type></parameter>,<parameter><type><name>a2</name></type></parameter>,<parameter><type><name>a3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{t1 = a2.re;t2 = a2.im;t5 = a3.re;t6 = a3.im;BUTTERFLIES(a0,a1,a2,a3)}</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PASS</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>static void name(FFTComplex *z, const FFTSample *wre, unsigned int n){FFTSample t1, t2, t3, t4, t5, t6;int o1 = 2*n;int o2 = 4*n;int o3 = 6*n;const FFTSample *wim = wre+o1;n--;TRANSFORM_ZERO(z[0],z[o1],z[o2],z[o3]);TRANSFORM(z[1],z[o1+1],z[o2+1],z[o3+1],wre[1],wim[-1]);do {z += 2;wre += 2;wim -= 2;TRANSFORM(z[0],z[o1],z[o2],z[o3],wre[0],wim[0]);TRANSFORM(z[1],z[o1+1],z[o2+1],z[o3+1],wre[1],wim[-1]);} while(--n);}</cpp:value></cpp:define>




















<macro><name>PASS</name><argument_list>(<argument>pass</argument>)</argument_list></macro>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BUTTERFLIES</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUTTERFLIES</name></cpp:macro> <cpp:value>BUTTERFLIES_BIG</cpp:value></cpp:define>
<macro><name>PASS</name><argument_list>(<argument>pass_big</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECL_FFT</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>n2</name></type></parameter>,<parameter><type><name>n4</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>static void fft##n(FFTComplex *z){fft##n2(z);fft##n4(z+n4*2);fft##n4(z+n4*3);pass(z,TX_NAME(ff_cos_##n),n4/2);}</cpp:value></cpp:define>








<function><type><specifier>static</specifier> <name>void</name></type> <name>fft2</name><parameter_list>(<parameter><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FFTComplex</name></type> <name>tmp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>BF</name><argument_list>(<argument><expr><name><name>tmp</name><operator>.</operator><name>re</name></name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BF</name><argument_list>(<argument><expr><name><name>tmp</name><operator>.</operator><name>im</name></name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fft4</name><parameter_list>(<parameter><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FFTSample</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>, <decl><type ref="prev"/><name>t5</name></decl>, <decl><type ref="prev"/><name>t6</name></decl>, <decl><type ref="prev"/><name>t7</name></decl>, <decl><type ref="prev"/><name>t8</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BF</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BF</name><argument_list>(<argument><expr><name>t8</name></expr></argument>, <argument><expr><name>t6</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BF</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BF</name><argument_list>(<argument><expr><name>t4</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BF</name><argument_list>(<argument><expr><name>t7</name></expr></argument>, <argument><expr><name>t5</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BF</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>, <argument><expr><name>t8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BF</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><name>t7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BF</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fft8</name><parameter_list>(<parameter><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FFTSample</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>, <decl><type ref="prev"/><name>t5</name></decl>, <decl><type ref="prev"/><name>t6</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fft4</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BF</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>, <argument><expr><operator>-</operator><name><name>z</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BF</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><operator>-</operator><name><name>z</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BF</name><argument_list>(<argument><expr><name>t5</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>, <argument><expr><operator>-</operator><name><name>z</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BF</name><argument_list>(<argument><expr><name>t6</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><operator>-</operator><name><name>z</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BUTTERFLIES</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>z</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>z</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>z</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRANSFORM</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>z</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>z</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>z</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>,<argument><expr><call><name>RESCALE</name><argument_list>(<argument><expr><name>M_SQRT1_2</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>RESCALE</name><argument_list>(<argument><expr><name>M_SQRT1_2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fft16</name><parameter_list>(<parameter><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FFTSample</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>, <decl><type ref="prev"/><name>t5</name></decl>, <decl><type ref="prev"/><name>t6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFTSample</name></type> <name>cos_16_1</name> <init>= <expr><call><name>TX_NAME</name><argument_list>(<argument><expr><name>ff_cos_16</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1</literal></expr>]</index></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFTSample</name></type> <name>cos_16_3</name> <init>= <expr><call><name>TX_NAME</name><argument_list>(<argument><expr><name>ff_cos_16</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">3</literal></expr>]</index></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fft8</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fft4</name><argument_list>(<argument><expr><name>z</name><operator>+</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fft4</name><argument_list>(<argument><expr><name>z</name><operator>+</operator><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSFORM_ZERO</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>z</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>z</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>z</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRANSFORM</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>z</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>z</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>z</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>,<argument><expr><call><name>RESCALE</name><argument_list>(<argument><expr><name>M_SQRT1_2</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>RESCALE</name><argument_list>(<argument><expr><name>M_SQRT1_2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRANSFORM</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>z</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>z</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>z</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>,<argument><expr><name>cos_16_1</name></expr></argument>,<argument><expr><name>cos_16_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRANSFORM</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>z</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>z</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>z</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>,<argument><expr><name>cos_16_3</name></expr></argument>,<argument><expr><name>cos_16_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>DECL_FFT</name><argument_list>(<argument><literal type="number">32</literal></argument>,<argument><literal type="number">16</literal></argument>,<argument><literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>DECL_FFT</name><argument_list>(<argument><literal type="number">64</literal></argument>,<argument><literal type="number">32</literal></argument>,<argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>DECL_FFT</name><argument_list>(<argument><literal type="number">128</literal></argument>,<argument><literal type="number">64</literal></argument>,<argument><literal type="number">32</literal></argument>)</argument_list></macro>
<macro><name>DECL_FFT</name><argument_list>(<argument><literal type="number">256</literal></argument>,<argument><literal type="number">128</literal></argument>,<argument><literal type="number">64</literal></argument>)</argument_list></macro>
<macro><name>DECL_FFT</name><argument_list>(<argument><literal type="number">512</literal></argument>,<argument><literal type="number">256</literal></argument>,<argument><literal type="number">128</literal></argument>)</argument_list></macro>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pass</name></cpp:macro> <cpp:value>pass_big</cpp:value></cpp:define>
<macro><name>DECL_FFT</name><argument_list>(<argument><literal type="number">1024</literal></argument>,<argument><literal type="number">512</literal></argument>,<argument><literal type="number">256</literal></argument>)</argument_list></macro>
<macro><name>DECL_FFT</name><argument_list>(<argument><literal type="number">2048</literal></argument>,<argument><literal type="number">1024</literal></argument>,<argument><literal type="number">512</literal></argument>)</argument_list></macro>
<macro><name>DECL_FFT</name><argument_list>(<argument><literal type="number">4096</literal></argument>,<argument><literal type="number">2048</literal></argument>,<argument><literal type="number">1024</literal></argument>)</argument_list></macro>
<macro><name>DECL_FFT</name><argument_list>(<argument><literal type="number">8192</literal></argument>,<argument><literal type="number">4096</literal></argument>,<argument><literal type="number">2048</literal></argument>)</argument_list></macro>
<macro><name>DECL_FFT</name><argument_list>(<argument><literal type="number">16384</literal></argument>,<argument><literal type="number">8192</literal></argument>,<argument><literal type="number">4096</literal></argument>)</argument_list></macro>
<macro><name>DECL_FFT</name><argument_list>(<argument><literal type="number">32768</literal></argument>,<argument><literal type="number">16384</literal></argument>,<argument><literal type="number">8192</literal></argument>)</argument_list></macro>
<macro><name>DECL_FFT</name><argument_list>(<argument><literal type="number">65536</literal></argument>,<argument><literal type="number">32768</literal></argument>,<argument><literal type="number">16384</literal></argument>)</argument_list></macro>
<macro><name>DECL_FFT</name><argument_list>(<argument><literal type="number">131072</literal></argument>,<argument><literal type="number">65536</literal></argument>,<argument><literal type="number">32768</literal></argument>)</argument_list></macro>

<expr_stmt><expr><specifier>static</specifier> <call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator> <specifier>const</specifier> <name><name>fft_dispatch</name><index>[]</index></name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>FFTComplex</name><operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <block>{
<expr><name>NULL</name></expr>, <expr><name>fft2</name></expr>, <expr><name>fft4</name></expr>, <expr><name>fft8</name></expr>, <expr><name>fft16</name></expr>, <expr><name>fft32</name></expr>, <expr><name>fft64</name></expr>, <expr><name>fft128</name></expr>, <expr><name>fft256</name></expr>, <expr><name>fft512</name></expr>,
<expr><name>fft1024</name></expr>, <expr><name>fft2048</name></expr>, <expr><name>fft4096</name></expr>, <expr><name>fft8192</name></expr>, <expr><name>fft16384</name></expr>, <expr><name>fft32768</name></expr>, <expr><name>fft65536</name></expr>, <expr><name>fft131072</name></expr>
}</block></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECL_COMP_FFT</name><parameter_list>(<parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void compound_fft_##N##xM(AVTXContext *s, void *_out, void *_in, ptrdiff_t stride) { const int m = s-&gt;m, *in_map = s-&gt;pfatab, *out_map = in_map + N*m; FFTComplex *in = _in; FFTComplex *out = _out; FFTComplex fft##N##in[N]; void (*fftp)(FFTComplex *z) = fft_dispatch[av_log2(m)]; for (int i = 0; i &lt; m; i++) { for (int j = 0; j &lt; N; j++) fft##N##in[j] = in[in_map[i*N + j]]; fft##N(s-&gt;tmp + s-&gt;revtab[i], fft##N##in, m); } for (int i = 0; i &lt; N; i++) fftp(s-&gt;tmp + m*i); for (int i = 0; i &lt; N*m; i++) out[i] = s-&gt;tmp[out_map[i]]; }</cpp:value></cpp:define>






















<macro><name>DECL_COMP_FFT</name><argument_list>(<argument><literal type="number">3</literal></argument>)</argument_list></macro>
<macro><name>DECL_COMP_FFT</name><argument_list>(<argument><literal type="number">5</literal></argument>)</argument_list></macro>
<macro><name>DECL_COMP_FFT</name><argument_list>(<argument><literal type="number">15</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>void</name></type> <name>monolithic_fft</name><parameter_list>(<parameter><decl><type><name>AVTXContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_out</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_in</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><name>_in</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>_out</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>m</name></name></expr></init></decl>, <decl><type ref="prev"/><name>mb</name> <init>= <expr><call><name>av_log2</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>revtab</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>fft_dispatch</name><index>[<expr><name>mb</name></expr>]</index></name><operator>(</operator><name>out</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECL_COMP_IMDCT</name><parameter_list>(<parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void compound_imdct_##N##xM(AVTXContext *s, void *_dst, void *_src, ptrdiff_t stride) { FFTComplex fft##N##in[N]; FFTComplex *z = _dst, *exp = s-&gt;exptab; const int m = s-&gt;m, len8 = N*m &gt;&gt; 1; const int *in_map = s-&gt;pfatab, *out_map = in_map + N*m; const FFTSample *src = _src, *in1, *in2; void (*fftp)(FFTComplex *) = fft_dispatch[av_log2(m)]; stride /= sizeof(*src); in1 = src; in2 = src + ((N*m*2) - 1) * stride; for (int i = 0; i &lt; m; i++) { for (int j = 0; j &lt; N; j++) { const int k = in_map[i*N + j]; FFTComplex tmp = { in2[-k*stride], in1[k*stride] }; CMUL3(fft##N##in[j], tmp, exp[k &gt;&gt; 1]); } fft##N(s-&gt;tmp + s-&gt;revtab[i], fft##N##in, m); } for (int i = 0; i &lt; N; i++) fftp(s-&gt;tmp + m*i); for (int i = 0; i &lt; len8; i++) { const int i0 = len8 + i, i1 = len8 - i - 1; const int s0 = out_map[i0], s1 = out_map[i1]; FFTComplex src1 = { s-&gt;tmp[s1].im, s-&gt;tmp[s1].re }; FFTComplex src0 = { s-&gt;tmp[s0].im, s-&gt;tmp[s0].re }; CMUL(z[i1].re, z[i0].im, src1.re, src1.im, exp[i1].im, exp[i1].re); CMUL(z[i0].re, z[i1].im, src0.re, src0.im, exp[i0].im, exp[i0].re); } }</cpp:value></cpp:define>





































<macro><name>DECL_COMP_IMDCT</name><argument_list>(<argument><literal type="number">3</literal></argument>)</argument_list></macro>
<macro><name>DECL_COMP_IMDCT</name><argument_list>(<argument><literal type="number">5</literal></argument>)</argument_list></macro>
<macro><name>DECL_COMP_IMDCT</name><argument_list>(<argument><literal type="number">15</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECL_COMP_MDCT</name><parameter_list>(<parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void compound_mdct_##N##xM(AVTXContext *s, void *_dst, void *_src, ptrdiff_t stride) { FFTSample *src = _src, *dst = _dst; FFTComplex *exp = s-&gt;exptab, tmp, fft##N##in[N]; const int m = s-&gt;m, len4 = N*m, len3 = len4 * 3, len8 = len4 &gt;&gt; 1; const int *in_map = s-&gt;pfatab, *out_map = in_map + N*m; void (*fftp)(FFTComplex *) = fft_dispatch[av_log2(m)]; stride /= sizeof(*dst); for (int i = 0; i &lt; m; i++) { for (int j = 0; j &lt; N; j++) { const int k = in_map[i*N + j]; if (k &lt; len4) { tmp.re = FOLD(-src[ len4 + k], src[1*len4 - 1 - k]); tmp.im = FOLD(-src[ len3 + k], -src[1*len3 - 1 - k]); } else { tmp.re = FOLD(-src[ len4 + k], -src[5*len4 - 1 - k]); tmp.im = FOLD( src[-len4 + k], -src[1*len3 - 1 - k]); } CMUL(fft##N##in[j].im, fft##N##in[j].re, tmp.re, tmp.im, exp[k &gt;&gt; 1].re, exp[k &gt;&gt; 1].im); } fft##N(s-&gt;tmp + s-&gt;revtab[i], fft##N##in, m); } for (int i = 0; i &lt; N; i++) fftp(s-&gt;tmp + m*i); for (int i = 0; i &lt; len8; i++) { const int i0 = len8 + i, i1 = len8 - i - 1; const int s0 = out_map[i0], s1 = out_map[i1]; FFTComplex src1 = { s-&gt;tmp[s1].re, s-&gt;tmp[s1].im }; FFTComplex src0 = { s-&gt;tmp[s0].re, s-&gt;tmp[s0].im }; CMUL(dst[2*i1*stride + stride], dst[2*i0*stride], src0.re, src0.im, exp[i0].im, exp[i0].re); CMUL(dst[2*i0*stride + stride], dst[2*i1*stride], src1.re, src1.im, exp[i1].im, exp[i1].re); } }</cpp:value></cpp:define>











































<macro><name>DECL_COMP_MDCT</name><argument_list>(<argument><literal type="number">3</literal></argument>)</argument_list></macro>
<macro><name>DECL_COMP_MDCT</name><argument_list>(<argument><literal type="number">5</literal></argument>)</argument_list></macro>
<macro><name>DECL_COMP_MDCT</name><argument_list>(<argument><literal type="number">15</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>void</name></type> <name>monolithic_imdct</name><parameter_list>(<parameter><decl><type><name>AVTXContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><name>_dst</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>exp</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>exptab</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>m</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>m</name></name></expr></init></decl>, <decl><type ref="prev"/><name>len8</name> <init>= <expr><name>m</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>FFTSample</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>_src</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>in1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>in2</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fftp</name>)<parameter_list>(<parameter><decl><type><name>FFTComplex</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name><name>fft_dispatch</name><index>[<expr><call><name>av_log2</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init>;</function_decl>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>src</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>in1</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in2</name> <operator>=</operator> <name>src</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>m</name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>FFTComplex</name></type> <name>tmp</name> <init>= <expr><block>{ <expr><name><name>in2</name><index>[<expr><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>i</name><operator>*</operator><name>stride</name></expr>]</index></name></expr>, <expr><name><name>in1</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>*</operator><name>stride</name></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CMUL3</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>revtab</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>exp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>fftp</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len8</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i0</name> <init>= <expr><name>len8</name> <operator>+</operator> <name>i</name></expr></init></decl>, <decl><type ref="prev"/><name>i1</name> <init>= <expr><name>len8</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFTComplex</name></type> <name>src1</name> <init>= <expr><block>{ <expr><name><name>z</name><index>[<expr><name>i1</name></expr>]</index></name><operator>.</operator><name>im</name></expr>, <expr><name><name>z</name><index>[<expr><name>i1</name></expr>]</index></name><operator>.</operator><name>re</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFTComplex</name></type> <name>src0</name> <init>= <expr><block>{ <expr><name><name>z</name><index>[<expr><name>i0</name></expr>]</index></name><operator>.</operator><name>im</name></expr>, <expr><name><name>z</name><index>[<expr><name>i0</name></expr>]</index></name><operator>.</operator><name>re</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CMUL</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>i1</name></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><name>i0</name></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><name><name>src1</name><operator>.</operator><name>re</name></name></expr></argument>, <argument><expr><name><name>src1</name><operator>.</operator><name>im</name></name></expr></argument>, <argument><expr><name><name>exp</name><index>[<expr><name>i1</name></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><name><name>exp</name><index>[<expr><name>i1</name></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CMUL</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>i0</name></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><name>i1</name></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><name><name>src0</name><operator>.</operator><name>re</name></name></expr></argument>, <argument><expr><name><name>src0</name><operator>.</operator><name>im</name></name></expr></argument>, <argument><expr><name><name>exp</name><index>[<expr><name>i0</name></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><name><name>exp</name><index>[<expr><name>i0</name></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>monolithic_mdct</name><parameter_list>(<parameter><decl><type><name>AVTXContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>_src</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst</name> <init>= <expr><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>exp</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>exptab</name></name></expr></init></decl>, <decl><type ref="prev"/><name>tmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>z</name> <init>= <expr><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>m</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>m</name></name></expr></init></decl>, <decl><type ref="prev"/><name>len4</name> <init>= <expr><name>m</name></expr></init></decl>, <decl><type ref="prev"/><name>len3</name> <init>= <expr><name>len4</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>, <decl><type ref="prev"/><name>len8</name> <init>= <expr><name>len4</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fftp</name>)<parameter_list>(<parameter><decl><type><name>FFTComplex</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name><name>fft_dispatch</name><index>[<expr><call><name>av_log2</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init>;</function_decl>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dst</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> 
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>k</name> <init>= <expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <name>len4</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>re</name></name> <operator>=</operator> <call><name>FOLD</name><argument_list>(<argument><expr><operator>-</operator><name><name>src</name><index>[ <expr><name>len4</name> <operator>+</operator> <name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>len4</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>im</name></name> <operator>=</operator> <call><name>FOLD</name><argument_list>(<argument><expr><operator>-</operator><name><name>src</name><index>[ <expr><name>len3</name> <operator>+</operator> <name>k</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><name><name>src</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>len3</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>re</name></name> <operator>=</operator> <call><name>FOLD</name><argument_list>(<argument><expr><operator>-</operator><name><name>src</name><index>[ <expr><name>len4</name> <operator>+</operator> <name>k</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><name><name>src</name><index>[<expr><literal type="number">5</literal><operator>*</operator><name>len4</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>im</name></name> <operator>=</operator> <call><name>FOLD</name><argument_list>( <argument><expr><name><name>src</name><index>[<expr><operator>-</operator><name>len4</name> <operator>+</operator> <name>k</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><name><name>src</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>len3</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>CMUL</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>revtab</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>revtab</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>.</operator><name>re</name></name></expr></argument>, <argument><expr><name><name>tmp</name><operator>.</operator><name>im</name></name></expr></argument>,
<argument><expr><name><name>exp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>, <argument><expr><name><name>exp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>fftp</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len8</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i0</name> <init>= <expr><name>len8</name> <operator>+</operator> <name>i</name></expr></init></decl>, <decl><type ref="prev"/><name>i1</name> <init>= <expr><name>len8</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFTComplex</name></type> <name>src1</name> <init>= <expr><block>{ <expr><name><name>z</name><index>[<expr><name>i1</name></expr>]</index></name><operator>.</operator><name>re</name></expr>, <expr><name><name>z</name><index>[<expr><name>i1</name></expr>]</index></name><operator>.</operator><name>im</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFTComplex</name></type> <name>src0</name> <init>= <expr><block>{ <expr><name><name>z</name><index>[<expr><name>i0</name></expr>]</index></name><operator>.</operator><name>re</name></expr>, <expr><name><name>z</name><index>[<expr><name>i0</name></expr>]</index></name><operator>.</operator><name>im</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CMUL</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i1</name><operator>*</operator><name>stride</name> <operator>+</operator> <name>stride</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i0</name><operator>*</operator><name>stride</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>src0</name><operator>.</operator><name>re</name></name></expr></argument>, <argument><expr><name><name>src0</name><operator>.</operator><name>im</name></name></expr></argument>,
<argument><expr><name><name>exp</name><index>[<expr><name>i0</name></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><name><name>exp</name><index>[<expr><name>i0</name></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CMUL</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i0</name><operator>*</operator><name>stride</name> <operator>+</operator> <name>stride</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i1</name><operator>*</operator><name>stride</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>src1</name><operator>.</operator><name>re</name></name></expr></argument>, <argument><expr><name><name>src1</name><operator>.</operator><name>im</name></name></expr></argument>,
<argument><expr><name><name>exp</name><index>[<expr><name>i1</name></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><name><name>exp</name><index>[<expr><name>i1</name></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>gen_mdct_exptab</name><parameter_list>(<parameter><decl><type><name>AVTXContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len4</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>scale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>theta</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>scale</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>len4</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">1.0</literal><operator>/</operator><literal type="number">8.0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>exptab</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>len4</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>exptab</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><call><name>fabs</name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len4</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>alpha</name> <init>= <expr><name>M_PI_2</name> <operator>*</operator> <operator>(</operator><name>i</name> <operator>+</operator> <name>theta</name><operator>)</operator> <operator>/</operator> <name>len4</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>exptab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <call><name>RESCALE</name><argument_list>(<argument><expr><call><name>cos</name><argument_list>(<argument><expr><name>alpha</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>exptab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <call><name>RESCALE</name><argument_list>(<argument><expr><call><name>sin</name><argument_list>(<argument><expr><name>alpha</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name> <name>TX_NAME</name></type>(<name>ff_tx_init_mdct_fft</name>)<parameter_list>(<parameter><decl><type><name>AVTXContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>av_tx_fn</name> <modifier>*</modifier></type><name>tx</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVTXType</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>scale</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>is_mdct</name> <init>= <expr><call><name>ff_tx_type_is_mdct</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>m</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>max_ptwo</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>fft_dispatch</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>is_mdct</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_FACTOR</name><parameter_list>(<parameter><type><name>DST</name></type></parameter>, <parameter><type><name>FACTOR</name></type></parameter>, <parameter><type><name>SRC</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (DST == 1 &amp;&amp; !(SRC % FACTOR)) { DST = FACTOR; SRC /= FACTOR; }</cpp:value></cpp:define>




<macro><name>CHECK_FACTOR</name><argument_list>(<argument>n</argument>, <argument><literal type="number">15</literal></argument>, <argument>len</argument>)</argument_list></macro>
<macro><name>CHECK_FACTOR</name><argument_list>(<argument>n</argument>, <argument><literal type="number">5</literal></argument>, <argument>len</argument>)</argument_list></macro>
<macro><name>CHECK_FACTOR</name><argument_list>(<argument>n</argument>, <argument><literal type="number">3</literal></argument>, <argument>len</argument>)</argument_list></macro>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHECK_FACTOR</name></cpp:undef>


<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>len</name> <operator>&amp;</operator> <operator>(</operator><name>len</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&lt;=</operator> <name>max_ptwo</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>inv</name></name> <operator>=</operator> <name>inv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>m</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported transform size: n = %i, "</literal>
<literal type="string">"m = %i, residual = %i!\n"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>m</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ff_tx_gen_compound_mapping</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>tmp</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>n</name><operator>*</operator><name>m</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>tmp</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>tx</name> <operator>=</operator> <ternary><condition><expr><name>n</name> <operator>==</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name>compound_fft_3xM</name></expr> </then><else>:
<expr><ternary><condition><expr><name>n</name> <operator>==</operator> <literal type="number">5</literal></expr> ?</condition><then> <expr><name>compound_fft_5xM</name></expr> </then><else>:
<expr><name>compound_fft_15xM</name></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>is_mdct</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>tx</name> <operator>=</operator> <ternary><condition><expr><name>n</name> <operator>==</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><ternary><condition><expr><name>inv</name></expr> ?</condition><then> <expr><name>compound_imdct_3xM</name></expr> </then><else>: <expr><name>compound_mdct_3xM</name></expr></else></ternary></expr> </then><else>:
<expr><ternary><condition><expr><name>n</name> <operator>==</operator> <literal type="number">5</literal></expr> ?</condition><then> <expr><ternary><condition><expr><name>inv</name></expr> ?</condition><then> <expr><name>compound_imdct_5xM</name></expr> </then><else>: <expr><name>compound_mdct_5xM</name></expr></else></ternary></expr> </then><else>:
<expr><ternary><condition><expr><name>inv</name></expr> ?</condition><then> <expr><name>compound_imdct_15xM</name></expr> </then><else>: <expr><name>compound_mdct_15xM</name></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><operator>*</operator><name>tx</name> <operator>=</operator> <name>monolithic_fft</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>is_mdct</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>tx</name> <operator>=</operator> <ternary><condition><expr><name>inv</name></expr> ?</condition><then> <expr><name>monolithic_imdct</name></expr> </then><else>: <expr><name>monolithic_mdct</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>init_cos_tabs</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>m</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_tx_gen_ptwo_revtab</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>init_cos_tabs</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_mdct</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>gen_mdct_exptab</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name><operator>*</operator><name>m</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>SCALE_TYPE</name> <operator>*</operator><operator>)</operator><name>scale</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
