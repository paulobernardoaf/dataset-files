<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\mips\float_dsp_mips.c">




















































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/float_dsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mips/asmdefs.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_INLINE_ASM</name> <operator>&amp;&amp;</operator> <name>HAVE_MIPSFPU</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_MIPS32R6</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>HAVE_MIPS64R6</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>vector_fmul_mips</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>src1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>d_end</name> <init>= <expr><name>d</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>s0</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>src0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>s1</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>src1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>src0_0</name></decl>, <decl><type ref="prev"/><name>src0_1</name></decl>, <decl><type ref="prev"/><name>src0_2</name></decl>, <decl><type ref="prev"/><name>src0_3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>src1_0</name></decl>, <decl><type ref="prev"/><name>src1_1</name></decl>, <decl><type ref="prev"/><name>src1_2</name></decl>, <decl><type ref="prev"/><name>src1_3</name></decl>;</decl_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
"1: \n\t"
"lwc1 %[src0_0], 0(%[s0]) \n\t"
"lwc1 %[src1_0], 0(%[s1]) \n\t"
"lwc1 %[src0_1], 4(%[s0]) \n\t"
"lwc1 %[src1_1], 4(%[s1]) \n\t"
"lwc1 %[src0_2], 8(%[s0]) \n\t"
"lwc1 %[src1_2], 8(%[s1]) \n\t"
"lwc1 %[src0_3], 12(%[s0]) \n\t"
"lwc1 %[src1_3], 12(%[s1]) \n\t"
"mul.s %[src0_0], %[src0_0], %[src1_0] \n\t"
"mul.s %[src0_1], %[src0_1], %[src1_1] \n\t"
"mul.s %[src0_2], %[src0_2], %[src1_2] \n\t"
"mul.s %[src0_3], %[src0_3], %[src1_3] \n\t"
"swc1 %[src0_0], 0(%[d]) \n\t"
"swc1 %[src0_1], 4(%[d]) \n\t"
"swc1 %[src0_2], 8(%[d]) \n\t"
"swc1 %[src0_3], 12(%[d]) \n\t"
PTR_ADDIU "%[s0], %[s0], 16 \n\t"
PTR_ADDIU "%[s1], %[s1], 16 \n\t"
PTR_ADDIU "%[d], %[d], 16 \n\t"
"bne %[d], %[d_end], 1b \n\t"

: [src0_0]"=&amp;f"(src0_0), [src0_1]"=&amp;f"(src0_1),
[src0_2]"=&amp;f"(src0_2), [src0_3]"=&amp;f"(src0_3),
[src1_0]"=&amp;f"(src1_0), [src1_1]"=&amp;f"(src1_1),
[src1_2]"=&amp;f"(src1_2), [src1_3]"=&amp;f"(src1_3),
[d]"+r"(d), [s0]"+r"(s0), [s1]"+r"(s1)
: [d_end]"r"(d_end)
: "memory"
);</asm>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vector_fmul_scalar_mips</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>mul</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>temp0</name></decl>, <decl><type ref="prev"/><name>temp1</name></decl>, <decl><type ref="prev"/><name>temp2</name></decl>, <decl><type ref="prev"/><name>temp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>local_src</name> <init>= <expr><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>local_src</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>


<asm>__asm__ <specifier>volatile</specifier>(
".set push \n\t"
".set noreorder \n\t"
"1: \n\t"
"lwc1 %[temp0], 0(%[src]) \n\t"
"lwc1 %[temp1], 4(%[src]) \n\t"
"lwc1 %[temp2], 8(%[src]) \n\t"
"lwc1 %[temp3], 12(%[src]) \n\t"
PTR_ADDIU "%[dst], %[dst], 16 \n\t"
"mul.s %[temp0], %[temp0], %[mul] \n\t"
"mul.s %[temp1], %[temp1], %[mul] \n\t"
"mul.s %[temp2], %[temp2], %[mul] \n\t"
"mul.s %[temp3], %[temp3], %[mul] \n\t"
PTR_ADDIU "%[src], %[src], 16 \n\t"
"swc1 %[temp0], -16(%[dst]) \n\t"
"swc1 %[temp1], -12(%[dst]) \n\t"
"swc1 %[temp2], -8(%[dst]) \n\t"
"bne %[src], %[end], 1b \n\t"
" swc1 %[temp3], -4(%[dst]) \n\t"
".set pop \n\t"

: [temp0]"=&amp;f"(temp0), [temp1]"=&amp;f"(temp1),
[temp2]"=&amp;f"(temp2), [temp3]"=&amp;f"(temp3),
[dst]"+r"(dst), [src]"+r"(local_src)
: [end]"r"(end), [mul]"f"(mul)
: "memory"
);</asm>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vector_fmul_window_mips</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src0</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type> <name>dst_j</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>win_j</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>src0_i</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>src1_j</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst_i</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>win_i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>temp</name></decl>, <decl><type ref="prev"/><name>temp1</name></decl>, <decl><type ref="prev"/><name>temp2</name></decl>, <decl><type ref="prev"/><name>temp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>s0</name></decl>, <decl><type ref="prev"/><name>s01</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>, <decl><type ref="prev"/><name>s11</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>wi</name></decl>, <decl><type ref="prev"/><name>wi1</name></decl>, <decl><type ref="prev"/><name>wi2</name></decl>, <decl><type ref="prev"/><name>wi3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>wj</name></decl>, <decl><type ref="prev"/><name>wj1</name></decl>, <decl><type ref="prev"/><name>wj2</name></decl>, <decl><type ref="prev"/><name>wj3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type> <name>lp_end</name> <init>= <expr><name>win</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>win_i</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>win</name></expr>;</expr_stmt>
<expr_stmt><expr><name>win_j</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>win</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>len</name> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src1_j</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>src1</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src0_i</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>src0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_i</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>dst</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_j</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>dst</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>len</name> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>


<asm>__asm__ <specifier>volatile</specifier> (
"1:"
"lwc1 %[s1], 0(%[src1_j]) \n\t"
"lwc1 %[wi], 0(%[win_i]) \n\t"
"lwc1 %[wj], 0(%[win_j]) \n\t"
"lwc1 %[s11], -4(%[src1_j]) \n\t"
"lwc1 %[wi1], 4(%[win_i]) \n\t"
"lwc1 %[wj1], -4(%[win_j]) \n\t"
"lwc1 %[s0], 0(%[src0_i]) \n\t"
"lwc1 %[s01], 4(%[src0_i]) \n\t"
"mul.s %[temp], %[s1], %[wi] \n\t"
"mul.s %[temp1], %[s1], %[wj] \n\t"
"mul.s %[temp2], %[s11], %[wi1] \n\t"
"mul.s %[temp3], %[s11], %[wj1] \n\t"
"lwc1 %[s1], -8(%[src1_j]) \n\t"
"lwc1 %[wi2], 8(%[win_i]) \n\t"
"lwc1 %[wj2], -8(%[win_j]) \n\t"
"lwc1 %[s11], -12(%[src1_j]) \n\t"
"msub.s %[temp], %[temp], %[s0], %[wj] \n\t"
"madd.s %[temp1], %[temp1], %[s0], %[wi] \n\t"
"msub.s %[temp2], %[temp2], %[s01], %[wj1] \n\t"
"madd.s %[temp3], %[temp3], %[s01], %[wi1] \n\t"
"lwc1 %[wi3], 12(%[win_i]) \n\t"
"lwc1 %[wj3], -12(%[win_j]) \n\t"
"lwc1 %[s0], 8(%[src0_i]) \n\t"
"lwc1 %[s01], 12(%[src0_i]) \n\t"
PTR_ADDIU "%[src1_j],-16 \n\t"
PTR_ADDIU "%[win_i],16 \n\t"
PTR_ADDIU "%[win_j],-16 \n\t"
PTR_ADDIU "%[src0_i],16 \n\t"
"swc1 %[temp], 0(%[dst_i]) \n\t" 
"swc1 %[temp1], 0(%[dst_j]) \n\t" 
"swc1 %[temp2], 4(%[dst_i]) \n\t" 
"swc1 %[temp3], -4(%[dst_j]) \n\t" 
"mul.s %[temp], %[s1], %[wi2] \n\t"
"mul.s %[temp1], %[s1], %[wj2] \n\t"
"mul.s %[temp2], %[s11], %[wi3] \n\t"
"mul.s %[temp3], %[s11], %[wj3] \n\t"
"msub.s %[temp], %[temp], %[s0], %[wj2] \n\t"
"madd.s %[temp1], %[temp1], %[s0], %[wi2] \n\t"
"msub.s %[temp2], %[temp2], %[s01], %[wj3] \n\t"
"madd.s %[temp3], %[temp3], %[s01], %[wi3] \n\t"
"swc1 %[temp], 8(%[dst_i]) \n\t" 
"swc1 %[temp1], -8(%[dst_j]) \n\t" 
"swc1 %[temp2], 12(%[dst_i]) \n\t" 
"swc1 %[temp3], -12(%[dst_j]) \n\t" 
PTR_ADDIU "%[dst_i],16 \n\t"
PTR_ADDIU "%[dst_j],-16 \n\t"
"bne %[win_i], %[lp_end], 1b \n\t"
: [temp]"=&amp;f"(temp), [temp1]"=&amp;f"(temp1), [temp2]"=&amp;f"(temp2),
[temp3]"=&amp;f"(temp3), [src0_i]"+r"(src0_i), [win_i]"+r"(win_i),
[src1_j]"+r"(src1_j), [win_j]"+r"(win_j), [dst_i]"+r"(dst_i),
[dst_j]"+r"(dst_j), [s0] "=&amp;f"(s0), [s01]"=&amp;f"(s01), [s1] "=&amp;f"(s1),
[s11]"=&amp;f"(s11), [wi] "=&amp;f"(wi), [wj] "=&amp;f"(wj), [wi2]"=&amp;f"(wi2),
[wj2]"=&amp;f"(wj2), [wi3]"=&amp;f"(wi3), [wj3]"=&amp;f"(wj3), [wi1]"=&amp;f"(wi1),
[wj1]"=&amp;f"(wj1)
: [lp_end]"r"(lp_end)
: "memory"
);</asm>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>butterflies_float_mips</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier><name>av_restrict</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier><name>av_restrict</name></type> <name>v2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>temp0</name></decl>, <decl><type ref="prev"/><name>temp1</name></decl>, <decl><type ref="prev"/><name>temp2</name></decl>, <decl><type ref="prev"/><name>temp3</name></decl>, <decl><type ref="prev"/><name>temp4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>temp5</name></decl>, <decl><type ref="prev"/><name>temp6</name></decl>, <decl><type ref="prev"/><name>temp7</name></decl>, <decl><type ref="prev"/><name>temp8</name></decl>, <decl><type ref="prev"/><name>temp9</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>temp10</name></decl>, <decl><type ref="prev"/><name>temp11</name></decl>, <decl><type ref="prev"/><name>temp12</name></decl>, <decl><type ref="prev"/><name>temp13</name></decl>, <decl><type ref="prev"/><name>temp14</name></decl>, <decl><type ref="prev"/><name>temp15</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pom</name></decl>;</decl_stmt>
<expr_stmt><expr><name>pom</name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>


<asm>__asm__ <specifier>volatile</specifier> (
"lwc1 %[temp0], 0(%[v1]) \n\t"
"lwc1 %[temp1], 4(%[v1]) \n\t"
"lwc1 %[temp2], 8(%[v1]) \n\t"
"lwc1 %[temp3], 12(%[v1]) \n\t"
"lwc1 %[temp4], 0(%[v2]) \n\t"
"lwc1 %[temp5], 4(%[v2]) \n\t"
"lwc1 %[temp6], 8(%[v2]) \n\t"
"lwc1 %[temp7], 12(%[v2]) \n\t"
"beq %[pom], $zero, 2f \n\t"
"1: \n\t"
"sub.s %[temp8], %[temp0], %[temp4] \n\t"
"add.s %[temp9], %[temp0], %[temp4] \n\t"
"sub.s %[temp10], %[temp1], %[temp5] \n\t"
"add.s %[temp11], %[temp1], %[temp5] \n\t"
"sub.s %[temp12], %[temp2], %[temp6] \n\t"
"add.s %[temp13], %[temp2], %[temp6] \n\t"
"sub.s %[temp14], %[temp3], %[temp7] \n\t"
"add.s %[temp15], %[temp3], %[temp7] \n\t"
PTR_ADDIU "%[v1], %[v1], 16 \n\t"
PTR_ADDIU "%[v2], %[v2], 16 \n\t"
"addiu %[pom], %[pom], -1 \n\t"
"lwc1 %[temp0], 0(%[v1]) \n\t"
"lwc1 %[temp1], 4(%[v1]) \n\t"
"lwc1 %[temp2], 8(%[v1]) \n\t"
"lwc1 %[temp3], 12(%[v1]) \n\t"
"lwc1 %[temp4], 0(%[v2]) \n\t"
"lwc1 %[temp5], 4(%[v2]) \n\t"
"lwc1 %[temp6], 8(%[v2]) \n\t"
"lwc1 %[temp7], 12(%[v2]) \n\t"
"swc1 %[temp9], -16(%[v1]) \n\t"
"swc1 %[temp8], -16(%[v2]) \n\t"
"swc1 %[temp11], -12(%[v1]) \n\t"
"swc1 %[temp10], -12(%[v2]) \n\t"
"swc1 %[temp13], -8(%[v1]) \n\t"
"swc1 %[temp12], -8(%[v2]) \n\t"
"swc1 %[temp15], -4(%[v1]) \n\t"
"swc1 %[temp14], -4(%[v2]) \n\t"
"bgtz %[pom], 1b \n\t"
"2: \n\t"
"sub.s %[temp8], %[temp0], %[temp4] \n\t"
"add.s %[temp9], %[temp0], %[temp4] \n\t"
"sub.s %[temp10], %[temp1], %[temp5] \n\t"
"add.s %[temp11], %[temp1], %[temp5] \n\t"
"sub.s %[temp12], %[temp2], %[temp6] \n\t"
"add.s %[temp13], %[temp2], %[temp6] \n\t"
"sub.s %[temp14], %[temp3], %[temp7] \n\t"
"add.s %[temp15], %[temp3], %[temp7] \n\t"
"swc1 %[temp9], 0(%[v1]) \n\t"
"swc1 %[temp8], 0(%[v2]) \n\t"
"swc1 %[temp11], 4(%[v1]) \n\t"
"swc1 %[temp10], 4(%[v2]) \n\t"
"swc1 %[temp13], 8(%[v1]) \n\t"
"swc1 %[temp12], 8(%[v2]) \n\t"
"swc1 %[temp15], 12(%[v1]) \n\t"
"swc1 %[temp14], 12(%[v2]) \n\t"

: [v1]"+r"(v1), [v2]"+r"(v2), [pom]"+r"(pom), [temp0] "=&amp;f" (temp0),
[temp1]"=&amp;f"(temp1), [temp2]"=&amp;f"(temp2), [temp3]"=&amp;f"(temp3),
[temp4]"=&amp;f"(temp4), [temp5]"=&amp;f"(temp5), [temp6]"=&amp;f"(temp6),
[temp7]"=&amp;f"(temp7), [temp8]"=&amp;f"(temp8), [temp9]"=&amp;f"(temp9),
[temp10]"=&amp;f"(temp10), [temp11]"=&amp;f"(temp11), [temp12]"=&amp;f"(temp12),
[temp13]"=&amp;f"(temp13), [temp14]"=&amp;f"(temp14), [temp15]"=&amp;f"(temp15)
:
: "memory"
);</asm>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vector_fmul_reverse_mips</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>temp0</name></decl>, <decl><type ref="prev"/><name>temp1</name></decl>, <decl><type ref="prev"/><name>temp2</name></decl>, <decl><type ref="prev"/><name>temp3</name></decl>, <decl><type ref="prev"/><name>temp4</name></decl>, <decl><type ref="prev"/><name>temp5</name></decl>, <decl><type ref="prev"/><name>temp6</name></decl>, <decl><type ref="prev"/><name>temp7</name></decl>;</decl_stmt>
<expr_stmt><expr><name>src1</name> <operator>+=</operator> <name>len</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><operator>(</operator><name>len</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>

<asm>__asm__ <specifier>volatile</specifier>(
"lwc1 %[temp0], 0(%[src0]) \n\t"
"lwc1 %[temp1], 0(%[src1]) \n\t"
"lwc1 %[temp2], 4(%[src0]) \n\t"
"lwc1 %[temp3], -4(%[src1]) \n\t"
"lwc1 %[temp4], 8(%[src0]) \n\t"
"lwc1 %[temp5], -8(%[src1]) \n\t"
"lwc1 %[temp6], 12(%[src0]) \n\t"
"lwc1 %[temp7], -12(%[src1]) \n\t"
"mul.s %[temp0], %[temp1], %[temp0] \n\t"
"mul.s %[temp2], %[temp3], %[temp2] \n\t"
"mul.s %[temp4], %[temp5], %[temp4] \n\t"
"mul.s %[temp6], %[temp7], %[temp6] \n\t"
PTR_ADDIU "%[src0], %[src0], 16 \n\t"
PTR_ADDIU "%[src1], %[src1], -16 \n\t"
PTR_ADDIU "%[dst], %[dst], 16 \n\t"
"swc1 %[temp0], -16(%[dst]) \n\t"
"swc1 %[temp2], -12(%[dst]) \n\t"
"swc1 %[temp4], -8(%[dst]) \n\t"
"swc1 %[temp6], -4(%[dst]) \n\t"

: [dst]"+r"(dst), [src0]"+r"(src0), [src1]"+r"(src1),
[temp0]"=&amp;f"(temp0), [temp1]"=&amp;f"(temp1),[temp2]"=&amp;f"(temp2),
[temp3]"=&amp;f"(temp3), [temp4]"=&amp;f"(temp4), [temp5]"=&amp;f"(temp5),
[temp6]"=&amp;f"(temp6), [temp7]"=&amp;f"(temp7)
:
: "memory"
);</asm>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>void</name></type> <name>ff_float_dsp_init_mips</name><parameter_list>(<parameter><decl><type><name>AVFloatDSPContext</name> <modifier>*</modifier></type><name>fdsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_INLINE_ASM</name> <operator>&amp;&amp;</operator> <name>HAVE_MIPSFPU</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_MIPS32R6</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>HAVE_MIPS64R6</name></expr></cpp:if>
<expr_stmt><expr><name><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul</name></name> <operator>=</operator> <name>vector_fmul_mips</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_scalar</name></name> <operator>=</operator> <name>vector_fmul_scalar_mips</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name> <operator>=</operator> <name>vector_fmul_window_mips</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fdsp</name><operator>-&gt;</operator><name>butterflies_float</name></name> <operator>=</operator> <name>butterflies_float_mips</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_reverse</name></name> <operator>=</operator> <name>vector_fmul_reverse_mips</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>
</unit>
