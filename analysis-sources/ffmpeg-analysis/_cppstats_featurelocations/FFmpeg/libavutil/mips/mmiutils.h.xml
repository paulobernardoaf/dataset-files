<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\mips\mmiutils.h">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVUTIL_MIPS_MMIUTILS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVUTIL_MIPS_MMIUTILS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mips/asmdefs.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LOONGSON2</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_VAR_LOW32</name></cpp:macro> <cpp:value>int32_t low32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESTRICT_ASM_LOW32</name></cpp:macro> <cpp:value>[low32]"=&amp;r"(low32),</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_VAR_ALL64</name></cpp:macro> <cpp:value>int64_t all64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESTRICT_ASM_ALL64</name></cpp:macro> <cpp:value>[all64]"=&amp;r"(all64),</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_VAR_ADDRT</name></cpp:macro> <cpp:value>mips_reg addrt</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESTRICT_ASM_ADDRT</name></cpp:macro> <cpp:value>[addrt]"=&amp;r"(addrt),</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMI_LWX</name><parameter_list>(<parameter><type><name>reg</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>stride</name></type></parameter>, <parameter><type><name>bias</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PTR_ADDU "%[addrt], "#addr", "#stride" \n\t" "lw "#reg", "#bias"(%[addrt]) \n\t"</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMI_SWX</name><parameter_list>(<parameter><type><name>reg</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>stride</name></type></parameter>, <parameter><type><name>bias</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PTR_ADDU "%[addrt], "#addr", "#stride" \n\t" "sw "#reg", "#bias"(%[addrt]) \n\t"</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMI_LDX</name><parameter_list>(<parameter><type><name>reg</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>stride</name></type></parameter>, <parameter><type><name>bias</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PTR_ADDU "%[addrt], "#addr", "#stride" \n\t" "ld "#reg", "#bias"(%[addrt]) \n\t"</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMI_SDX</name><parameter_list>(<parameter><type><name>reg</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>stride</name></type></parameter>, <parameter><type><name>bias</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PTR_ADDU "%[addrt], "#addr", "#stride" \n\t" "sd "#reg", "#bias"(%[addrt]) \n\t"</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMI_LWC1</name><parameter_list>(<parameter><type><name>fp</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>bias</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"lwc1 "#fp", "#bias"("#addr") \n\t"</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMI_ULWC1</name><parameter_list>(<parameter><type><name>fp</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>bias</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"ulw %[low32], "#bias"("#addr") \n\t" "mtc1 %[low32], "#fp" \n\t"</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMI_LWXC1</name><parameter_list>(<parameter><type><name>fp</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>stride</name></type></parameter>, <parameter><type><name>bias</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PTR_ADDU "%[addrt], "#addr", "#stride" \n\t" MMI_LWC1(fp, %[addrt], bias)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMI_SWC1</name><parameter_list>(<parameter><type><name>fp</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>bias</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"swc1 "#fp", "#bias"("#addr") \n\t"</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMI_USWC1</name><parameter_list>(<parameter><type><name>fp</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>bias</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"mfc1 %[low32], "#fp" \n\t" "usw %[low32], "#bias"("#addr") \n\t"</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMI_SWXC1</name><parameter_list>(<parameter><type><name>fp</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>stride</name></type></parameter>, <parameter><type><name>bias</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PTR_ADDU "%[addrt], "#addr", "#stride" \n\t" MMI_SWC1(fp, %[addrt], bias)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMI_LDC1</name><parameter_list>(<parameter><type><name>fp</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>bias</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"ldc1 "#fp", "#bias"("#addr") \n\t"</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMI_ULDC1</name><parameter_list>(<parameter><type><name>fp</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>bias</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"uld %[all64], "#bias"("#addr") \n\t" "dmtc1 %[all64], "#fp" \n\t"</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMI_LDXC1</name><parameter_list>(<parameter><type><name>fp</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>stride</name></type></parameter>, <parameter><type><name>bias</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PTR_ADDU "%[addrt], "#addr", "#stride" \n\t" MMI_LDC1(fp, %[addrt], bias)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMI_SDC1</name><parameter_list>(<parameter><type><name>fp</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>bias</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"sdc1 "#fp", "#bias"("#addr") \n\t"</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMI_USDC1</name><parameter_list>(<parameter><type><name>fp</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>bias</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"dmfc1 %[all64], "#fp" \n\t" "usd %[all64], "#bias"("#addr") \n\t"</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMI_SDXC1</name><parameter_list>(<parameter><type><name>fp</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>stride</name></type></parameter>, <parameter><type><name>bias</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PTR_ADDU "%[addrt], "#addr", "#stride" \n\t" MMI_SDC1(fp, %[addrt], bias)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMI_LQ</name><parameter_list>(<parameter><type><name>reg1</name></type></parameter>, <parameter><type><name>reg2</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>bias</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"ld "#reg1", "#bias"("#addr") \n\t" "ld "#reg2", 8+"#bias"("#addr") \n\t"</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMI_SQ</name><parameter_list>(<parameter><type><name>reg1</name></type></parameter>, <parameter><type><name>reg2</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>bias</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"sd "#reg1", "#bias"("#addr") \n\t" "sd "#reg2", 8+"#bias"("#addr") \n\t"</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMI_LQC1</name><parameter_list>(<parameter><type><name>fp1</name></type></parameter>, <parameter><type><name>fp2</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>bias</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"ldc1 "#fp1", "#bias"("#addr") \n\t" "ldc1 "#fp2", 8+"#bias"("#addr") \n\t"</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMI_SQC1</name><parameter_list>(<parameter><type><name>fp1</name></type></parameter>, <parameter><type><name>fp2</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>bias</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"sdc1 "#fp1", "#bias"("#addr") \n\t" "sdc1 "#fp2", 8+"#bias"("#addr") \n\t"</cpp:value></cpp:define>



<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_LOONGSON3</name></expr></cpp:elif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_VAR_ALL64</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESTRICT_ASM_ALL64</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_VAR_ADDRT</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESTRICT_ASM_ADDRT</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMI_LWX</name><parameter_list>(<parameter><type><name>reg</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>stride</name></type></parameter>, <parameter><type><name>bias</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"gslwx "#reg", "#bias"("#addr", "#stride") \n\t"</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMI_SWX</name><parameter_list>(<parameter><type><name>reg</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>stride</name></type></parameter>, <parameter><type><name>bias</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"gsswx "#reg", "#bias"("#addr", "#stride") \n\t"</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMI_LDX</name><parameter_list>(<parameter><type><name>reg</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>stride</name></type></parameter>, <parameter><type><name>bias</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"gsldx "#reg", "#bias"("#addr", "#stride") \n\t"</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMI_SDX</name><parameter_list>(<parameter><type><name>reg</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>stride</name></type></parameter>, <parameter><type><name>bias</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"gssdx "#reg", "#bias"("#addr", "#stride") \n\t"</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMI_LWC1</name><parameter_list>(<parameter><type><name>fp</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>bias</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"lwc1 "#fp", "#bias"("#addr") \n\t"</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MIPS_SIM</name> <operator>==</operator> <name>_ABIO32</name></expr></cpp:if> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_VAR_LOW32</name></cpp:macro> <cpp:value>int32_t low32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESTRICT_ASM_LOW32</name></cpp:macro> <cpp:value>[low32]"=&amp;r"(low32),</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMI_ULWC1</name><parameter_list>(<parameter><type><name>fp</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>bias</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"ulw %[low32], "#bias"("#addr") \n\t" "mtc1 %[low32], "#fp" \n\t"</cpp:value></cpp:define>



<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_VAR_LOW32</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESTRICT_ASM_LOW32</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMI_ULWC1</name><parameter_list>(<parameter><type><name>fp</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>bias</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"gslwlc1 "#fp", 3+"#bias"("#addr") \n\t" "gslwrc1 "#fp", "#bias"("#addr") \n\t"</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMI_LWXC1</name><parameter_list>(<parameter><type><name>fp</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>stride</name></type></parameter>, <parameter><type><name>bias</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"gslwxc1 "#fp", "#bias"("#addr", "#stride") \n\t"</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMI_SWC1</name><parameter_list>(<parameter><type><name>fp</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>bias</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"swc1 "#fp", "#bias"("#addr") \n\t"</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMI_USWC1</name><parameter_list>(<parameter><type><name>fp</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>bias</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"gsswlc1 "#fp", 3+"#bias"("#addr") \n\t" "gsswrc1 "#fp", "#bias"("#addr") \n\t"</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMI_SWXC1</name><parameter_list>(<parameter><type><name>fp</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>stride</name></type></parameter>, <parameter><type><name>bias</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"gsswxc1 "#fp", "#bias"("#addr", "#stride") \n\t"</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMI_LDC1</name><parameter_list>(<parameter><type><name>fp</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>bias</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"ldc1 "#fp", "#bias"("#addr") \n\t"</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMI_ULDC1</name><parameter_list>(<parameter><type><name>fp</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>bias</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"gsldlc1 "#fp", 7+"#bias"("#addr") \n\t" "gsldrc1 "#fp", "#bias"("#addr") \n\t"</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMI_LDXC1</name><parameter_list>(<parameter><type><name>fp</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>stride</name></type></parameter>, <parameter><type><name>bias</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"gsldxc1 "#fp", "#bias"("#addr", "#stride") \n\t"</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMI_SDC1</name><parameter_list>(<parameter><type><name>fp</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>bias</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"sdc1 "#fp", "#bias"("#addr") \n\t"</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMI_USDC1</name><parameter_list>(<parameter><type><name>fp</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>bias</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"gssdlc1 "#fp", 7+"#bias"("#addr") \n\t" "gssdrc1 "#fp", "#bias"("#addr") \n\t"</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMI_SDXC1</name><parameter_list>(<parameter><type><name>fp</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>stride</name></type></parameter>, <parameter><type><name>bias</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"gssdxc1 "#fp", "#bias"("#addr", "#stride") \n\t"</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMI_LQ</name><parameter_list>(<parameter><type><name>reg1</name></type></parameter>, <parameter><type><name>reg2</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>bias</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"gslq "#reg1", "#reg2", "#bias"("#addr") \n\t"</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMI_SQ</name><parameter_list>(<parameter><type><name>reg1</name></type></parameter>, <parameter><type><name>reg2</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>bias</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"gssq "#reg1", "#reg2", "#bias"("#addr") \n\t"</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMI_LQC1</name><parameter_list>(<parameter><type><name>fp1</name></type></parameter>, <parameter><type><name>fp2</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>bias</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"gslqc1 "#fp1", "#fp2", "#bias"("#addr") \n\t"</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMI_SQC1</name><parameter_list>(<parameter><type><name>fp1</name></type></parameter>, <parameter><type><name>fp2</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>bias</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"gssqc1 "#fp1", "#fp2", "#bias"("#addr") \n\t"</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BACKUP_REG</name></cpp:macro> <cpp:value>LOCAL_ALIGNED_16(double, temp_backup_reg, [8]); if (_MIPS_SIM == _ABI64) __asm__ volatile ( "gssqc1 $f25, $f24, 0x00(%[temp]) \n\t" "gssqc1 $f27, $f26, 0x10(%[temp]) \n\t" "gssqc1 $f29, $f28, 0x20(%[temp]) \n\t" "gssqc1 $f31, $f30, 0x30(%[temp]) \n\t" : : [temp]"r"(temp_backup_reg) : "memory" ); else __asm__ volatile ( "gssqc1 $f22, $f20, 0x00(%[temp]) \n\t" "gssqc1 $f26, $f24, 0x10(%[temp]) \n\t" "gssqc1 $f30, $f28, 0x20(%[temp]) \n\t" : : [temp]"r"(temp_backup_reg) : "memory" );</cpp:value></cpp:define>
























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RECOVER_REG</name></cpp:macro> <cpp:value>if (_MIPS_SIM == _ABI64) __asm__ volatile ( "gslqc1 $f25, $f24, 0x00(%[temp]) \n\t" "gslqc1 $f27, $f26, 0x10(%[temp]) \n\t" "gslqc1 $f29, $f28, 0x20(%[temp]) \n\t" "gslqc1 $f31, $f30, 0x30(%[temp]) \n\t" : : [temp]"r"(temp_backup_reg) : "memory" ); else __asm__ volatile ( "gslqc1 $f22, $f20, 0x00(%[temp]) \n\t" "gslqc1 $f26, $f24, 0x10(%[temp]) \n\t" "gslqc1 $f30, $f28, 0x20(%[temp]) \n\t" : : [temp]"r"(temp_backup_reg) : "memory" );</cpp:value></cpp:define>

























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSPOSE_2W</name><parameter_list>(<parameter><type><name>fr_i0</name></type></parameter>, <parameter><type><name>fr_i1</name></type></parameter>, <parameter><type><name>fr_o0</name></type></parameter>, <parameter><type><name>fr_o1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"punpcklwd "#fr_o0", "#fr_i0", "#fr_i1" \n\t" "punpckhwd "#fr_o1", "#fr_i0", "#fr_i1" \n\t"</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSPOSE_4H</name><parameter_list>(<parameter><type><name>fr_i0</name></type></parameter>, <parameter><type><name>fr_i1</name></type></parameter>, <parameter><type><name>fr_i2</name></type></parameter>, <parameter><type><name>fr_i3</name></type></parameter>, <parameter><type><name>fr_t0</name></type></parameter>, <parameter><type><name>fr_t1</name></type></parameter>, <parameter><type><name>fr_t2</name></type></parameter>, <parameter><type><name>fr_t3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"punpcklhw "#fr_t0", "#fr_i0", "#fr_i1" \n\t" "punpckhhw "#fr_t1", "#fr_i0", "#fr_i1" \n\t" "punpcklhw "#fr_t2", "#fr_i2", "#fr_i3" \n\t" "punpckhhw "#fr_t3", "#fr_i2", "#fr_i3" \n\t" "punpcklwd "#fr_i0", "#fr_t0", "#fr_t2" \n\t" "punpckhwd "#fr_i1", "#fr_t0", "#fr_t2" \n\t" "punpcklwd "#fr_i2", "#fr_t1", "#fr_t3" \n\t" "punpckhwd "#fr_i3", "#fr_t1", "#fr_t3" \n\t"</cpp:value></cpp:define>















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSPOSE_8B</name><parameter_list>(<parameter><type><name>fr_i0</name></type></parameter>, <parameter><type><name>fr_i1</name></type></parameter>, <parameter><type><name>fr_i2</name></type></parameter>, <parameter><type><name>fr_i3</name></type></parameter>, <parameter><type><name>fr_i4</name></type></parameter>, <parameter><type><name>fr_i5</name></type></parameter>, <parameter><type><name>fr_i6</name></type></parameter>, <parameter><type><name>fr_i7</name></type></parameter>, <parameter><type><name>fr_t0</name></type></parameter>, <parameter><type><name>fr_t1</name></type></parameter>, <parameter><type><name>fr_t2</name></type></parameter>, <parameter><type><name>fr_t3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"punpcklbh "#fr_t0", "#fr_i0", "#fr_i1" \n\t" "punpckhbh "#fr_t1", "#fr_i0", "#fr_i1" \n\t" "punpcklbh "#fr_t2", "#fr_i2", "#fr_i3" \n\t" "punpckhbh "#fr_t3", "#fr_i2", "#fr_i3" \n\t" "punpcklbh "#fr_i0", "#fr_i4", "#fr_i5" \n\t" "punpckhbh "#fr_i1", "#fr_i4", "#fr_i5" \n\t" "punpcklbh "#fr_i2", "#fr_i6", "#fr_i7" \n\t" "punpckhbh "#fr_i3", "#fr_i6", "#fr_i7" \n\t" "punpcklhw "#fr_i4", "#fr_t0", "#fr_t2" \n\t" "punpckhhw "#fr_i5", "#fr_t0", "#fr_t2" \n\t" "punpcklhw "#fr_i6", "#fr_t1", "#fr_t3" \n\t" "punpckhhw "#fr_i7", "#fr_t1", "#fr_t3" \n\t" "punpcklhw "#fr_t0", "#fr_i0", "#fr_i2" \n\t" "punpckhhw "#fr_t1", "#fr_i0", "#fr_i2" \n\t" "punpcklhw "#fr_t2", "#fr_i1", "#fr_i3" \n\t" "punpckhhw "#fr_t3", "#fr_i1", "#fr_i3" \n\t" "punpcklwd "#fr_i0", "#fr_i4", "#fr_t0" \n\t" "punpckhwd "#fr_i1", "#fr_i4", "#fr_t0" \n\t" "punpcklwd "#fr_i2", "#fr_i5", "#fr_t1" \n\t" "punpckhwd "#fr_i3", "#fr_i5", "#fr_t1" \n\t" "punpcklwd "#fr_i4", "#fr_i6", "#fr_t2" \n\t" "punpckhwd "#fr_i5", "#fr_i6", "#fr_t2" \n\t" "punpcklwd "#fr_i6", "#fr_i7", "#fr_t3" \n\t" "punpckhwd "#fr_i7", "#fr_i7", "#fr_t3" \n\t"</cpp:value></cpp:define>

































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSRAB_MMI</name><parameter_list>(<parameter><type><name>fr_i0</name></type></parameter>, <parameter><type><name>fr_i1</name></type></parameter>, <parameter><type><name>fr_t0</name></type></parameter>, <parameter><type><name>fr_t1</name></type></parameter>, <parameter><type><name>fr_d0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"punpcklbh "#fr_t0", "#fr_t0", "#fr_i0" \n\t" "punpckhbh "#fr_t1", "#fr_t1", "#fr_i0" \n\t" "psrah "#fr_t0", "#fr_t0", "#fr_i1" \n\t" "psrah "#fr_t1", "#fr_t1", "#fr_i1" \n\t" "packsshb "#fr_d0", "#fr_t0", "#fr_t1" \n\t"</cpp:value></cpp:define>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSRLB_MMI</name><parameter_list>(<parameter><type><name>fr_i0</name></type></parameter>, <parameter><type><name>fr_i1</name></type></parameter>, <parameter><type><name>fr_t0</name></type></parameter>, <parameter><type><name>fr_t1</name></type></parameter>, <parameter><type><name>fr_d0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"punpcklbh "#fr_t0", "#fr_t0", "#fr_i0" \n\t" "punpckhbh "#fr_t1", "#fr_t1", "#fr_i0" \n\t" "psrlh "#fr_t0", "#fr_t0", "#fr_i1" \n\t" "psrlh "#fr_t1", "#fr_t1", "#fr_i1" \n\t" "packsshb "#fr_d0", "#fr_t0", "#fr_t1" \n\t"</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSRAH_4_MMI</name><parameter_list>(<parameter><type><name>fp1</name></type></parameter>, <parameter><type><name>fp2</name></type></parameter>, <parameter><type><name>fp3</name></type></parameter>, <parameter><type><name>fp4</name></type></parameter>, <parameter><type><name>shift</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"psrah "#fp1", "#fp1", "#shift" \n\t" "psrah "#fp2", "#fp2", "#shift" \n\t" "psrah "#fp3", "#fp3", "#shift" \n\t" "psrah "#fp4", "#fp4", "#shift" \n\t"</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSRAH_8_MMI</name><parameter_list>(<parameter><type><name>fp1</name></type></parameter>, <parameter><type><name>fp2</name></type></parameter>, <parameter><type><name>fp3</name></type></parameter>, <parameter><type><name>fp4</name></type></parameter>, <parameter><type><name>fp5</name></type></parameter>, <parameter><type><name>fp6</name></type></parameter>, <parameter><type><name>fp7</name></type></parameter>, <parameter><type><name>fp8</name></type></parameter>, <parameter><type><name>shift</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PSRAH_4_MMI(fp1, fp2, fp3, fp4, shift) PSRAH_4_MMI(fp5, fp6, fp7, fp8, shift)</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUND_POWER_OF_TWO_MMI</name><parameter_list>(<parameter><type><name>fr_i0</name></type></parameter>, <parameter><type><name>fr_i1</name></type></parameter>, <parameter><type><name>fr_t0</name></type></parameter>, <parameter><type><name>fr_t1</name></type></parameter>, <parameter><type><name>gr_t0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"li "#gr_t0", 0x01 \n\t" "dmtc1 "#gr_t0", "#fr_t0" \n\t" "punpcklwd "#fr_t0", "#fr_t0", "#fr_t0" \n\t" "psubw "#fr_t1", "#fr_i1", "#fr_t0" \n\t" "psllw "#fr_t1", "#fr_t0", "#fr_t1" \n\t" "paddw "#fr_i0", "#fr_i0", "#fr_t1" \n\t" "psraw "#fr_i0", "#fr_i0", "#fr_i1" \n\t"</cpp:value></cpp:define>








<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
