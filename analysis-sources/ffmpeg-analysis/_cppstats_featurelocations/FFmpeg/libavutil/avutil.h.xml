<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\avutil.h">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVUTIL_AVUTIL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVUTIL_AVUTIL_H</name></cpp:macro></cpp:define>




















































































































































<function_decl><type><name>unsigned</name></type> <name>avutil_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>av_version_info</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>avutil_configuration</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>avutil_license</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>










<enum>enum <name>AVMediaType</name> <block>{
<decl><name>AVMEDIA_TYPE_UNKNOWN</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, 
<decl><name>AVMEDIA_TYPE_VIDEO</name></decl>,
<decl><name>AVMEDIA_TYPE_AUDIO</name></decl>,
<decl><name>AVMEDIA_TYPE_DATA</name></decl>, 
<decl><name>AVMEDIA_TYPE_SUBTITLE</name></decl>,
<decl><name>AVMEDIA_TYPE_ATTACHMENT</name></decl>, 
<decl><name>AVMEDIA_TYPE_NB</name></decl>
}</block>;</enum>





<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>av_get_media_type_string</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVMediaType</name></name></type> <name>media_type</name></decl></parameter>)</parameter_list>;</function_decl>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_LAMBDA_SHIFT</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_LAMBDA_SCALE</name></cpp:macro> <cpp:value>(1&lt;&lt;FF_LAMBDA_SHIFT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_QP2LAMBDA</name></cpp:macro> <cpp:value>118</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_LAMBDA_MAX</name></cpp:macro> <cpp:value>(256*128-1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_QUALITY_SCALE</name></cpp:macro> <cpp:value>FF_LAMBDA_SCALE</cpp:value></cpp:define> 

















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_NOPTS_VALUE</name></cpp:macro> <cpp:value>((int64_t)UINT64_C(0x8000000000000000))</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_TIME_BASE</name></cpp:macro> <cpp:value>1000000</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_TIME_BASE_Q</name></cpp:macro> <cpp:value>(AVRational){1, AV_TIME_BASE}</cpp:value></cpp:define>











<enum>enum <name>AVPictureType</name> <block>{
<decl><name>AV_PICTURE_TYPE_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 
<decl><name>AV_PICTURE_TYPE_I</name></decl>, 
<decl><name>AV_PICTURE_TYPE_P</name></decl>, 
<decl><name>AV_PICTURE_TYPE_B</name></decl>, 
<decl><name>AV_PICTURE_TYPE_S</name></decl>, 
<decl><name>AV_PICTURE_TYPE_SI</name></decl>, 
<decl><name>AV_PICTURE_TYPE_SP</name></decl>, 
<decl><name>AV_PICTURE_TYPE_BI</name></decl>, 
}</block>;</enum>








<function_decl><type><name>char</name></type> <name>av_get_picture_type_char</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPictureType</name></name></type> <name>pict_type</name></decl></parameter>)</parameter_list>;</function_decl>





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rational.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"macros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathematics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pixfmt.h"</cpp:file></cpp:include>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>av_x_if_null</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name></expr> </then><else>: <expr><name>x</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>









<decl_stmt><decl><type><name>unsigned</name></type> <name>av_int_list_length_for_size</name><argument_list>(<argument><expr><name>unsigned</name> <name>elsize</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>list</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>term</name></expr></argument>)</argument_list> <name>av_pure</name></decl>;</decl_stmt>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_int_list_length</name><parameter_list>(<parameter><type><name>list</name></type></parameter>, <parameter><type><name>term</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>av_int_list_length_for_size(sizeof(*(list)), list, term)</cpp:value></cpp:define>







<function_decl><type><name>FILE</name> <modifier>*</modifier></type><name>av_fopen_utf8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>AVRational</name></type> <name>av_get_time_base_q</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_FOURCC_MAX_STRING_SIZE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_fourcc2str</name><parameter_list>(<parameter><type><name>fourcc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>av_fourcc_make_string((char[AV_FOURCC_MAX_STRING_SIZE]){0}, fourcc)</cpp:value></cpp:define>









<function_decl><type><name>char</name> <modifier>*</modifier></type><name>av_fourcc_make_string</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>fourcc</name></decl></parameter>)</parameter_list>;</function_decl>






<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
