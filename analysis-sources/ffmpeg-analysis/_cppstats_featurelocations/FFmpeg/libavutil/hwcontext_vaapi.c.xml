<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\hwcontext_vaapi.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_VAAPI_X11</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;va/va_x11.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_VAAPI_DRM</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;va/va_drm.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBDRM</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;va/va_drmcommon.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xf86drm.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;drm_fourcc.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DRM_FORMAT_MOD_INVALID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRM_FORMAT_MOD_INVALID</name></cpp:macro> <cpp:value>((1ULL &lt;&lt; 56) - 1)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_UNISTD_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"buffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwcontext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwcontext_drm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwcontext_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwcontext_vaapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pixfmt.h"</cpp:file></cpp:include>


<typedef>typedef <type><struct>struct <name>VAAPIDevicePriv</name> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_VAAPI_X11</name></expr></cpp:if>
<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>x11_display</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>drm_fd</name></decl>;</decl_stmt>
}</block></struct></type> <name>VAAPIDevicePriv</name>;</typedef>

<typedef>typedef <type><struct>struct <name>VAAPISurfaceFormat</name> <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAImageFormat</name></type> <name>image_format</name></decl>;</decl_stmt>
}</block></struct></type> <name>VAAPISurfaceFormat</name>;</typedef>

<typedef>typedef <type><struct>struct <name>VAAPIDeviceContext</name> <block>{

<decl_stmt><decl><type><name>VAAPISurfaceFormat</name> <modifier>*</modifier></type><name>formats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_formats</name></decl>;</decl_stmt>
}</block></struct></type> <name>VAAPIDeviceContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>VAAPIFramesContext</name> <block>{

<decl_stmt><decl><type><name>VASurfaceAttrib</name> <modifier>*</modifier></type><name>attributes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_attributes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>rt_format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>derive_works</name></decl>;</decl_stmt>
}</block></struct></type> <name>VAAPIFramesContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>VAAPIMapping</name> <block>{

<decl_stmt><decl><type><name>VAImage</name></type> <name>image</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
}</block></struct></type> <name>VAAPIMapping</name>;</typedef>

<typedef>typedef <type><struct>struct <name>VAAPIFormat</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>fourcc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>rt_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>chroma_planes_swapped</name></decl>;</decl_stmt>
}</block></struct></type> <name>VAAPIFormatDescriptor</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP</name><parameter_list>(<parameter><type><name>va</name></type></parameter>, <parameter><type><name>rt</name></type></parameter>, <parameter><type><name>av</name></type></parameter>, <parameter><type><name>swap_uv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ VA_FOURCC_ ##va, VA_RT_FORMAT_ ##rt, AV_PIX_FMT_ ##av, swap_uv, }</cpp:value></cpp:define>







<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>VAAPIFormatDescriptor</name></type> <name><name>vaapi_format_map</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>NV12</name></expr></argument>, <argument><expr><name>YUV420</name></expr></argument>, <argument><expr><name>NV12</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VA_FOURCC_I420</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>I420</name></expr></argument>, <argument><expr><name>YUV420</name></expr></argument>, <argument><expr><name>YUV420P</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>YV12</name></expr></argument>, <argument><expr><name>YUV420</name></expr></argument>, <argument><expr><name>YUV420P</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>IYUV</name></expr></argument>, <argument><expr><name>YUV420</name></expr></argument>, <argument><expr><name>YUV420P</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MAP</name><argument_list>(<argument><expr><literal type="number">422H</literal></expr></argument>, <argument><expr><name>YUV422</name></expr></argument>, <argument><expr><name>YUV422P</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VA_FOURCC_YV16</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>YV16</name></expr></argument>, <argument><expr><name>YUV422</name></expr></argument>, <argument><expr><name>YUV422P</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>UYVY</name></expr></argument>, <argument><expr><name>YUV422</name></expr></argument>, <argument><expr><name>UYVY422</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>YUY2</name></expr></argument>, <argument><expr><name>YUV422</name></expr></argument>, <argument><expr><name>YUYV422</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VA_FOURCC_Y210</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>Y210</name></expr></argument>, <argument><expr><name>YUV422_10</name></expr></argument>, <argument><expr><name>Y210</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><call><name>MAP</name><argument_list>(<argument><expr><literal type="number">411P</literal></expr></argument>, <argument><expr><name>YUV411</name></expr></argument>, <argument><expr><name>YUV411P</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MAP</name><argument_list>(<argument><expr><literal type="number">422V</literal></expr></argument>, <argument><expr><name>YUV422</name></expr></argument>, <argument><expr><name>YUV440P</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MAP</name><argument_list>(<argument><expr><literal type="number">444P</literal></expr></argument>, <argument><expr><name>YUV444</name></expr></argument>, <argument><expr><name>YUV444P</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>Y800</name></expr></argument>, <argument><expr><name>YUV400</name></expr></argument>, <argument><expr><name>GRAY8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VA_FOURCC_P010</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>P010</name></expr></argument>, <argument><expr><name>YUV420_10BPP</name></expr></argument>, <argument><expr><name>P010</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>BGRA</name></expr></argument>, <argument><expr><name>RGB32</name></expr></argument>, <argument><expr><name>BGRA</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>BGRX</name></expr></argument>, <argument><expr><name>RGB32</name></expr></argument>, <argument><expr><name>BGR0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>RGBA</name></expr></argument>, <argument><expr><name>RGB32</name></expr></argument>, <argument><expr><name>RGBA</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>RGBX</name></expr></argument>, <argument><expr><name>RGB32</name></expr></argument>, <argument><expr><name>RGB0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VA_FOURCC_ABGR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>ABGR</name></expr></argument>, <argument><expr><name>RGB32</name></expr></argument>, <argument><expr><name>ABGR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>XBGR</name></expr></argument>, <argument><expr><name>RGB32</name></expr></argument>, <argument><expr><literal type="number">0BGR</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>ARGB</name></expr></argument>, <argument><expr><name>RGB32</name></expr></argument>, <argument><expr><name>ARGB</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>MAP</name><argument_list>(<argument><expr><name>XRGB</name></expr></argument>, <argument><expr><name>RGB32</name></expr></argument>, <argument><expr><literal type="number">0RGB</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAP</name></cpp:undef>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>VAAPIFormatDescriptor</name> <modifier>*</modifier></type>
<name>vaapi_format_from_fourcc</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>fourcc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>vaapi_format_map</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>vaapi_format_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fourcc</name> <operator>==</operator> <name>fourcc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><name><name>vaapi_format_map</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>VAAPIFormatDescriptor</name> <modifier>*</modifier></type>
<name>vaapi_format_from_pix_fmt</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>vaapi_format_map</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>vaapi_format_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pix_fmt</name> <operator>==</operator> <name>pix_fmt</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><name><name>vaapi_format_map</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>vaapi_pix_fmt_from_fourcc</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>fourcc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>VAAPIFormatDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>
<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>vaapi_format_from_fourcc</name><argument_list>(<argument><expr><name>fourcc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>desc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>desc</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>AV_PIX_FMT_NONE</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_get_image_format</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>hwdev</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>,
<parameter><decl><type><name>VAImageFormat</name> <modifier>*</modifier><modifier>*</modifier></type><name>image_format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAAPIDeviceContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>hwdev</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_formats</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pix_fmt</name> <operator>==</operator> <name>pix_fmt</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>image_format</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>image_format</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>image_format</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_frames_get_constraints</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>hwdev</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>hwconfig</name></decl></parameter>,
<parameter><decl><type><name>AVHWFramesConstraints</name> <modifier>*</modifier></type><name>constraints</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVVAAPIDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>hwdev</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVVAAPIHWConfig</name> <modifier>*</modifier></type><name>config</name> <init>= <expr><name>hwconfig</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAAPIDeviceContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>hwdev</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VASurfaceAttrib</name> <modifier>*</modifier></type><name>attr_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAStatus</name></type> <name>vas</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>fourcc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>attr_count</name></decl>, <decl><type ref="prev"/><name>pix_fmt_count</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>config</name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>hwctx</name><operator>-&gt;</operator><name>driver_quirks</name></name> <operator>&amp;</operator> <name>AV_VAAPI_DRIVER_QUIRK_SURFACE_ATTRIBUTES</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>attr_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaQuerySurfaceAttributes</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>config_id</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to query surface attributes: "</literal>
<literal type="string">"%d (%s).\n"</literal></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>attr_list</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>attr_count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>attr_list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr_list</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaQuerySurfaceAttributes</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>config_id</name></name></expr></argument>,
<argument><expr><name>attr_list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to query surface attributes: "</literal>
<literal type="string">"%d (%s).\n"</literal></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pix_fmt_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>attr_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>attr_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VASurfaceAttribPixelFormat</name></expr>:</case>
<expr_stmt><expr><name>fourcc</name> <operator>=</operator> <name><name>attr_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>value</name><operator>.</operator><name>value</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pix_fmt</name> <operator>=</operator> <call><name>vaapi_pix_fmt_from_fourcc</name><argument_list>(<argument><expr><name>fourcc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pix_fmt</name> <operator>!=</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>pix_fmt_count</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>VASurfaceAttribMinWidth</name></expr>:</case>
<expr_stmt><expr><name><name>constraints</name><operator>-&gt;</operator><name>min_width</name></name> <operator>=</operator> <name><name>attr_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>value</name><operator>.</operator><name>value</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VASurfaceAttribMinHeight</name></expr>:</case>
<expr_stmt><expr><name><name>constraints</name><operator>-&gt;</operator><name>min_height</name></name> <operator>=</operator> <name><name>attr_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>value</name><operator>.</operator><name>value</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VASurfaceAttribMaxWidth</name></expr>:</case>
<expr_stmt><expr><name><name>constraints</name><operator>-&gt;</operator><name>max_width</name></name> <operator>=</operator> <name><name>attr_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>value</name><operator>.</operator><name>value</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VASurfaceAttribMaxHeight</name></expr>:</case>
<expr_stmt><expr><name><name>constraints</name><operator>-&gt;</operator><name>max_height</name></name> <operator>=</operator> <name><name>attr_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>value</name><operator>.</operator><name>value</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>pix_fmt_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>constraints</name><operator>-&gt;</operator><name>valid_sw_formats</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>constraints</name><operator>-&gt;</operator><name>valid_sw_formats</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>pix_fmt_count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>constraints</name><operator>-&gt;</operator><name>valid_sw_formats</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>attr_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>attr_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>VASurfaceAttribPixelFormat</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>fourcc</name> <operator>=</operator> <name><name>attr_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>value</name><operator>.</operator><name>value</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pix_fmt</name> <operator>=</operator> <call><name>vaapi_pix_fmt_from_fourcc</name><argument_list>(<argument><expr><name>fourcc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pix_fmt</name> <operator>!=</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>constraints</name><operator>-&gt;</operator><name>valid_sw_formats</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>pix_fmt</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>j</name> <operator>==</operator> <name>pix_fmt_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>constraints</name><operator>-&gt;</operator><name>valid_sw_formats</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><name><name>constraints</name><operator>-&gt;</operator><name>valid_sw_formats</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_formats</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>constraints</name><operator>-&gt;</operator><name>valid_sw_formats</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_formats</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>constraints</name><operator>-&gt;</operator><name>valid_sw_formats</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pix_fmt</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>constraints</name><operator>-&gt;</operator><name>valid_sw_formats</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>constraints</name><operator>-&gt;</operator><name>valid_hw_formats</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>constraints</name><operator>-&gt;</operator><name>valid_hw_formats</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>constraints</name><operator>-&gt;</operator><name>valid_hw_formats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>AV_PIX_FMT_VAAPI</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>constraints</name><operator>-&gt;</operator><name>valid_hw_formats</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>friendly_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>match_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>quirks</name></decl>;</decl_stmt>
}</block> <decl><name><name>vaapi_driver_quirks_table</name><index>[]</index></name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>VA_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><block>{
<expr><literal type="string">"Intel i965 (Quick Sync)"</literal></expr>,
<expr><literal type="string">"i965"</literal></expr>,
<expr><name>AV_VAAPI_DRIVER_QUIRK_RENDER_PARAM_BUFFERS</name></expr>,
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{
<expr><literal type="string">"Intel iHD"</literal></expr>,
<expr><literal type="string">"ubit"</literal></expr>,
<expr><name>AV_VAAPI_DRIVER_QUIRK_ATTRIB_MEMTYPE</name></expr>,
}</block></expr>,
<expr><block>{
<expr><literal type="string">"VDPAU wrapper"</literal></expr>,
<expr><literal type="string">"Splitted-Desktop Systems VDPAU backend for VA-API"</literal></expr>,
<expr><name>AV_VAAPI_DRIVER_QUIRK_SURFACE_ATTRIBUTES</name></expr>,
}</block></expr>,
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_device_init</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>hwdev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAAPIDeviceContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>hwdev</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVVAAPIDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>hwdev</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAImageFormat</name> <modifier>*</modifier></type><name>image_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAStatus</name></type> <name>vas</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vendor_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>image_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>fourcc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>image_count</name> <operator>=</operator> <call><name>vaMaxNumImageFormats</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>image_count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>image_list</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>image_count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>image_list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>image_list</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaQueryImageFormats</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name>image_list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>image_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>formats</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>image_count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>formats</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>formats</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_formats</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>image_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>fourcc</name> <operator>=</operator> <name><name>image_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fourcc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pix_fmt</name> <operator>=</operator> <call><name>vaapi_pix_fmt_from_fourcc</name><argument_list>(<argument><expr><name>fourcc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Format %#x -&gt; unknown.\n"</literal></expr></argument>,
<argument><expr><name>fourcc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Format %#x -&gt; %s.\n"</literal></expr></argument>,
<argument><expr><name>fourcc</name></expr></argument>, <argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>formats</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_formats</name></name></expr>]</index></name><operator>.</operator><name>pix_fmt</name> <operator>=</operator> <name>pix_fmt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>formats</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_formats</name></name></expr>]</index></name><operator>.</operator><name>image_format</name> <operator>=</operator> <name><name>image_list</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>ctx</name><operator>-&gt;</operator><name>nb_formats</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>vendor_string</name> <operator>=</operator> <call><name>vaQueryVendorString</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vendor_string</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"VAAPI driver: %s.\n"</literal></expr></argument>, <argument><expr><name>vendor_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hwctx</name><operator>-&gt;</operator><name>driver_quirks</name></name> <operator>&amp;</operator> <name>AV_VAAPI_DRIVER_QUIRK_USER_SET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Using quirks set by user (%#x).\n"</literal></expr></argument>,
<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>driver_quirks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>hwctx</name><operator>-&gt;</operator><name>driver_quirks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vendor_string</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>vaapi_driver_quirks_table</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>vendor_string</name></expr></argument>,
<argument><expr><name><name>vaapi_driver_quirks_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>match_string</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Matched driver string "</literal>
<literal type="string">"as known nonstandard driver \"%s\", setting "</literal>
<literal type="string">"quirks (%#x).\n"</literal></expr></argument>,
<argument><expr><name><name>vaapi_driver_quirks_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>friendly_name</name></expr></argument>,
<argument><expr><name><name>vaapi_driver_quirks_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>quirks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hwctx</name><operator>-&gt;</operator><name>driver_quirks</name></name> <operator>|=</operator>
<name><name>vaapi_driver_quirks_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>quirks</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>vaapi_driver_quirks_table</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Driver not found in known "</literal>
<literal type="string">"nonstandard list, using standard behaviour.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwdev</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Driver has no vendor string, "</literal>
<literal type="string">"assuming standard behaviour.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>image_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>formats</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>image_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vaapi_device_uninit</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>hwdev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAAPIDeviceContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>hwdev</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>formats</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vaapi_buffer_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVVAAPIDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VASurfaceID</name></type> <name>surface_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAStatus</name></type> <name>vas</name></decl>;</decl_stmt>

<expr_stmt><expr><name>surface_id</name> <operator>=</operator> <operator>(</operator><name>VASurfaceID</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaDestroySurfaces</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>surface_id</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to destroy surface %#x: "</literal>
<literal type="string">"%d (%s).\n"</literal></expr></argument>, <argument><expr><name>surface_id</name></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AVBufferRef</name> <modifier>*</modifier></type><name>vaapi_pool_alloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAAPIFramesContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVVAAPIDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVVAAPIFramesContext</name> <modifier>*</modifier></type><name>avfc</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VASurfaceID</name></type> <name>surface_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAStatus</name></type> <name>vas</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hwfc</name><operator>-&gt;</operator><name>initial_pool_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>avfc</name><operator>-&gt;</operator><name>nb_surfaces</name></name> <operator>&gt;=</operator> <name><name>hwfc</name><operator>-&gt;</operator><name>initial_pool_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaCreateSurfaces</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rt_format</name></name></expr></argument>,
<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>surface_id</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>attributes</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_attributes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create surface: "</literal>
<literal type="string">"%d (%s).\n"</literal></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Created surface %#x.\n"</literal></expr></argument>, <argument><expr><name>surface_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <call><name>av_buffer_create</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>surface_id</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>surface_id</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>vaapi_buffer_free</name></expr></argument>,
<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_BUFFER_FLAG_READONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ref</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vaDestroySurfaces</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>surface_id</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hwfc</name><operator>-&gt;</operator><name>initial_pool_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>avfc</name><operator>-&gt;</operator><name>nb_surfaces</name></name> <operator>&lt;</operator> <name><name>hwfc</name><operator>-&gt;</operator><name>initial_pool_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avfc</name><operator>-&gt;</operator><name>surface_ids</name><index>[<expr><name><name>avfc</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr>]</index></name> <operator>=</operator> <name>surface_id</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>avfc</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ref</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_frames_init</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVVAAPIFramesContext</name> <modifier>*</modifier></type><name>avfc</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAAPIFramesContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVVAAPIDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VAAPIFormatDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAImageFormat</name> <modifier>*</modifier></type><name>expected_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>test_surface</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VASurfaceID</name></type> <name>test_surface_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAImage</name></type> <name>test_image</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAStatus</name></type> <name>vas</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>vaapi_format_from_pix_fmt</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported format: %s.\n"</literal></expr></argument>,
<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hwfc</name><operator>-&gt;</operator><name>pool</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>hwctx</name><operator>-&gt;</operator><name>driver_quirks</name></name> <operator>&amp;</operator> <name>AV_VAAPI_DRIVER_QUIRK_SURFACE_ATTRIBUTES</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>need_memory_type</name> <init>= <expr><operator>!</operator><operator>(</operator><name><name>hwctx</name><operator>-&gt;</operator><name>driver_quirks</name></name> <operator>&amp;</operator> <name>AV_VAAPI_DRIVER_QUIRK_ATTRIB_MEMTYPE</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>need_pixel_format</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avfc</name><operator>-&gt;</operator><name>nb_attributes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>avfc</name><operator>-&gt;</operator><name>attributes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>VASurfaceAttribMemoryType</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>need_memory_type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avfc</name><operator>-&gt;</operator><name>attributes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>VASurfaceAttribPixelFormat</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>need_pixel_format</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_attributes</name></name> <operator>=</operator>
<name><name>avfc</name><operator>-&gt;</operator><name>nb_attributes</name></name> <operator>+</operator> <name>need_memory_type</name> <operator>+</operator> <name>need_pixel_format</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>attributes</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_attributes</name></name> <operator>*</operator>
<sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>attributes</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>attributes</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avfc</name><operator>-&gt;</operator><name>nb_attributes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>attributes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>avfc</name><operator>-&gt;</operator><name>attributes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>need_memory_type</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>attributes</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>VASurfaceAttrib</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>VASurfaceAttribMemoryType</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>VA_SURFACE_ATTRIB_SETTABLE</name></expr>,
<expr><operator>.</operator><name><name>value</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>VAGenericValueTypeInteger</name></expr>,
<expr><operator>.</operator><name><name>value</name><operator>.</operator><name>value</name><operator>.</operator><name>i</name></name> <operator>=</operator> <name>VA_SURFACE_ATTRIB_MEM_TYPE_VA</name></expr>,
}</block></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>need_pixel_format</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>attributes</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>VASurfaceAttrib</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>VASurfaceAttribPixelFormat</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>VA_SURFACE_ATTRIB_SETTABLE</name></expr>,
<expr><operator>.</operator><name><name>value</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>VAGenericValueTypeInteger</name></expr>,
<expr><operator>.</operator><name><name>value</name><operator>.</operator><name>value</name><operator>.</operator><name>i</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>fourcc</name></name></expr>,
}</block></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>i</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_attributes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>attributes</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_attributes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rt_format</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>rt_format</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hwfc</name><operator>-&gt;</operator><name>initial_pool_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name><name>avfc</name><operator>-&gt;</operator><name>nb_surfaces</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avfc</name><operator>-&gt;</operator><name>surface_ids</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>initial_pool_size</name></name> <operator>*</operator>
<sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>avfc</name><operator>-&gt;</operator><name>surface_ids</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avfc</name><operator>-&gt;</operator><name>surface_ids</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><name><name>avfc</name><operator>-&gt;</operator><name>nb_surfaces</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avfc</name><operator>-&gt;</operator><name>surface_ids</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>hwfc</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>pool_internal</name></name> <operator>=</operator>
<call><name>av_buffer_pool_init2</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VASurfaceID</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>hwfc</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>vaapi_pool_alloc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hwfc</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>pool_internal</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create VAAPI surface pool.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>hwfc</name><operator>-&gt;</operator><name>pool</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>test_surface</name> <operator>=</operator> <call><name>av_buffer_pool_get</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>test_surface</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to allocate a surface from "</literal>
<literal type="string">"user-configured buffer pool.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>test_surface</name> <operator>=</operator> <call><name>av_buffer_pool_get</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>pool_internal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>test_surface</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to allocate a surface from "</literal>
<literal type="string">"internal buffer pool.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>test_surface_id</name> <operator>=</operator> <operator>(</operator><name>VASurfaceID</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>test_surface</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>derive_works</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_get_image_format</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>device_ctx</name></name></expr></argument>,
<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>expected_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaDeriveImage</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name>test_surface_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>test_image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>==</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>expected_format</name><operator>-&gt;</operator><name>fourcc</name></name> <operator>==</operator> <name><name>test_image</name><operator>.</operator><name>format</name><operator>.</operator><name>fourcc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Direct mapping possible.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>derive_works</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Direct mapping disabled: "</literal>
<literal type="string">"derived image format %08x does not match "</literal>
<literal type="string">"expected format %08x.\n"</literal></expr></argument>,
<argument><expr><name><name>expected_format</name><operator>-&gt;</operator><name>fourcc</name></name></expr></argument>, <argument><expr><name><name>test_image</name><operator>.</operator><name>format</name><operator>.</operator><name>fourcc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>vaDestroyImage</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>test_image</name><operator>.</operator><name>image_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Direct mapping disabled: "</literal>
<literal type="string">"deriving image does not work: "</literal>
<literal type="string">"%d (%s).\n"</literal></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Direct mapping disabled: "</literal>
<literal type="string">"image format is not supported.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_surface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_surface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avfc</name><operator>-&gt;</operator><name>surface_ids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>attributes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vaapi_frames_uninit</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVVAAPIFramesContext</name> <modifier>*</modifier></type><name>avfc</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAAPIFramesContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avfc</name><operator>-&gt;</operator><name>surface_ids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>attributes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_get_buffer</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_buffer_pool_get</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_VAAPI</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>hwfc</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>hwfc</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_transfer_get_formats</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVHWFrameTransferDirection</name></name></type> <name>dir</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>formats</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAAPIDeviceContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier></type><name>pix_fmts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>sw_format_available</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sw_format_available</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_formats</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pix_fmt</name> <operator>==</operator> <name><name>hwfc</name><operator>-&gt;</operator><name>sw_format</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sw_format_available</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>pix_fmts</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>nb_formats</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pix_fmts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pix_fmts</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sw_format_available</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pix_fmts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>hwfc</name><operator>-&gt;</operator><name>sw_format</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_formats</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pix_fmt</name> <operator>==</operator> <name><name>hwfc</name><operator>-&gt;</operator><name>sw_format</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>k</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_formats</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pix_fmts</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pix_fmt</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>pix_fmts</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>formats</name> <operator>=</operator> <name>pix_fmts</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vaapi_unmap_frame</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>,
<parameter><decl><type><name>HWMapDescriptor</name> <modifier>*</modifier></type><name>hwmap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVVAAPIDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAAPIMapping</name> <modifier>*</modifier></type><name>map</name> <init>= <expr><name><name>hwmap</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VASurfaceID</name></type> <name>surface_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAStatus</name></type> <name>vas</name></decl>;</decl_stmt>

<expr_stmt><expr><name>surface_id</name> <operator>=</operator> <operator>(</operator><name>VASurfaceID</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>hwmap</name><operator>-&gt;</operator><name>source</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Unmap surface %#x.\n"</literal></expr></argument>, <argument><expr><name>surface_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaUnmapBuffer</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to unmap image from surface "</literal>
<literal type="string">"%#x: %d (%s).\n"</literal></expr></argument>, <argument><expr><name>surface_id</name></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>map</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_HWFRAME_MAP_WRITE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>map</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_HWFRAME_MAP_DIRECT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaPutImage</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name>surface_id</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>image_id</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to write image to surface "</literal>
<literal type="string">"%#x: %d (%s).\n"</literal></expr></argument>, <argument><expr><name>surface_id</name></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaDestroyImage</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>image_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to destroy image from surface "</literal>
<literal type="string">"%#x: %d (%s).\n"</literal></expr></argument>, <argument><expr><name>surface_id</name></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_map_frame</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>,
<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVVAAPIDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAAPIFramesContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VASurfaceID</name></type> <name>surface_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VAAPIFormatDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAImageFormat</name> <modifier>*</modifier></type><name>image_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAAPIMapping</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAStatus</name></type> <name>vas</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>address</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>surface_id</name> <operator>=</operator> <operator>(</operator><name>VASurfaceID</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Map surface %#x.\n"</literal></expr></argument>, <argument><expr><name>surface_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>derive_works</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>AV_HWFRAME_MAP_DIRECT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>hwfc</name><operator>-&gt;</operator><name>sw_format</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name><name>hwfc</name><operator>-&gt;</operator><name>sw_format</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>AV_HWFRAME_MAP_DIRECT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_get_image_format</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>device_ctx</name></name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>image_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>map</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>map</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>map</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>image_id</name></name> <operator>=</operator> <name>VA_INVALID_ID</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaSyncSurface</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name>surface_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to sync surface "</literal>
<literal type="string">"%#x: %d (%s).\n"</literal></expr></argument>, <argument><expr><name>surface_id</name></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>








<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>derive_works</name></name> <operator>&amp;&amp;</operator> <name><name>dst</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name><name>hwfc</name><operator>-&gt;</operator><name>sw_format</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>AV_HWFRAME_MAP_DIRECT</name><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>AV_HWFRAME_MAP_READ</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaDeriveImage</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name>surface_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to derive image from "</literal>
<literal type="string">"surface %#x: %d (%s).\n"</literal></expr></argument>,
<argument><expr><name>surface_id</name></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>format</name><operator>.</operator><name>fourcc</name></name> <operator>!=</operator> <name><name>image_format</name><operator>-&gt;</operator><name>fourcc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Derive image of surface %#x "</literal>
<literal type="string">"is in wrong format: expected %#08x, got %#08x.\n"</literal></expr></argument>,
<argument><expr><name>surface_id</name></expr></argument>, <argument><expr><name><name>image_format</name><operator>-&gt;</operator><name>fourcc</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>format</name><operator>.</operator><name>fourcc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_HWFRAME_MAP_DIRECT</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaCreateImage</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name>image_format</name></expr></argument>,
<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create image for "</literal>
<literal type="string">"surface %#x: %d (%s).\n"</literal></expr></argument>,
<argument><expr><name>surface_id</name></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>AV_HWFRAME_MAP_OVERWRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaGetImage</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name>surface_id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>image_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to read image from "</literal>
<literal type="string">"surface %#x: %d (%s).\n"</literal></expr></argument>,
<argument><expr><name>surface_id</name></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaMapBuffer</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to map image from surface "</literal>
<literal type="string">"%#x: %d (%s).\n"</literal></expr></argument>, <argument><expr><name>surface_id</name></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_hwframe_map_create</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>,
<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vaapi_unmap_frame</name></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>num_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>address</name> <operator>+</operator> <name><name>map</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>pitches</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>vaapi_format_from_fourcc</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>format</name><operator>.</operator><name>fourcc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>desc</name> <operator>&amp;&amp;</operator> <name><name>desc</name><operator>-&gt;</operator><name>chroma_planes_swapped</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint8_t</name><operator>*</operator></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>map</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>address</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vaUnmapBuffer</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>image_id</name></name> <operator>!=</operator> <name>VA_INVALID_ID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vaDestroyImage</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>image_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_transfer_data_from</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>,
<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;</operator> <name><name>hwfc</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <name><name>dst</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;</operator> <name><name>hwfc</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>map</name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>map</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_map_frame</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>AV_HWFRAME_MAP_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>av_frame_copy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_transfer_data_to</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>,
<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;</operator> <name><name>hwfc</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <name><name>src</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;</operator> <name><name>hwfc</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>map</name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>map</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_map_frame</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>AV_HWFRAME_MAP_WRITE</name> <operator>|</operator> <name>AV_HWFRAME_MAP_OVERWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>av_frame_copy</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_map_to_memory</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_get_image_format</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>device_ctx</name></name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_map_frame</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBDRM</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRM_MAP</name><parameter_list>(<parameter><type><name>va</name></type></parameter>, <parameter><type><name>layers</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ VA_FOURCC_ ##va, layers, { __VA_ARGS__ } }</cpp:value></cpp:define>




<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>va_fourcc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_layer_formats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>layer_formats</name><index>[<expr><name>AV_DRM_MAX_PLANES</name></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name><name>vaapi_drm_format_map</name><index>[]</index></name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRM_FORMAT_R8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>DRM_MAP</name><argument_list>(<argument><expr><name>NV12</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>DRM_FORMAT_R8</name></expr></argument>, <argument><expr><name>DRM_FORMAT_RG88</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><call><name>DRM_MAP</name><argument_list>(<argument><expr><name>NV12</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>DRM_FORMAT_NV12</name></expr></argument>)</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VA_FOURCC_P010</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>DRM_FORMAT_R16</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>DRM_MAP</name><argument_list>(<argument><expr><name>P010</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>DRM_FORMAT_R16</name></expr></argument>, <argument><expr><name>DRM_FORMAT_RG1616</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><call><name>DRM_MAP</name><argument_list>(<argument><expr><name>BGRA</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>DRM_FORMAT_ARGB8888</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DRM_MAP</name><argument_list>(<argument><expr><name>BGRX</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>DRM_FORMAT_XRGB8888</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DRM_MAP</name><argument_list>(<argument><expr><name>RGBA</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>DRM_FORMAT_ABGR8888</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DRM_MAP</name><argument_list>(<argument><expr><name>RGBX</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>DRM_FORMAT_XBGR8888</name></expr></argument>)</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VA_FOURCC_ABGR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>DRM_MAP</name><argument_list>(<argument><expr><name>ABGR</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>DRM_FORMAT_RGBA8888</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DRM_MAP</name><argument_list>(<argument><expr><name>XBGR</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>DRM_FORMAT_RGBX8888</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><call><name>DRM_MAP</name><argument_list>(<argument><expr><name>ARGB</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>DRM_FORMAT_BGRA8888</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DRM_MAP</name><argument_list>(<argument><expr><name>XRGB</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>DRM_FORMAT_BGRX8888</name></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</struct>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DRM_MAP</name></cpp:undef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vaapi_unmap_from_drm</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>dst_fc</name></decl></parameter>,
<parameter><decl><type><name>HWMapDescriptor</name> <modifier>*</modifier></type><name>hwmap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVVAAPIDeviceContext</name> <modifier>*</modifier></type><name>dst_dev</name> <init>= <expr><name><name>dst_fc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VASurfaceID</name></type> <name>surface_id</name> <init>= <expr><operator>(</operator><name>VASurfaceID</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>hwmap</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Destroy surface %#x.\n"</literal></expr></argument>, <argument><expr><name>surface_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vaDestroySurfaces</name><argument_list>(<argument><expr><name><name>dst_dev</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>surface_id</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_map_from_drm</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>src_fc</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>dst_fc</name> <init>=
<expr><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>dst</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVVAAPIDeviceContext</name> <modifier>*</modifier></type><name>dst_dev</name> <init>= <expr><name><name>dst_fc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVDRMFrameDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VAAPIFormatDescriptor</name> <modifier>*</modifier></type><name>format_desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VASurfaceID</name></type> <name>surface_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAStatus</name></type> <name>vas</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>va_fourcc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>buffer_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VASurfaceAttribExternalBuffers</name></type> <name>buffer_desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VASurfaceAttrib</name></type> <name><name>attrs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>VASurfaceAttribMemoryType</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>VA_SURFACE_ATTRIB_SETTABLE</name></expr>,
<expr><operator>.</operator><name><name>value</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>VAGenericValueTypeInteger</name></expr>,
<expr><operator>.</operator><name><name>value</name><operator>.</operator><name>value</name><operator>.</operator><name>i</name></name> <operator>=</operator> <name>VA_SURFACE_ATTRIB_MEM_TYPE_DRM_PRIME</name></expr>,
}</block></expr>,
<expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>VASurfaceAttribExternalBufferDescriptor</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>VA_SURFACE_ATTRIB_SETTABLE</name></expr>,
<expr><operator>.</operator><name><name>value</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>VAGenericValueTypePointer</name></expr>,
<expr><operator>.</operator><name><name>value</name><operator>.</operator><name>value</name><operator>.</operator><name>p</name></name> <operator>=</operator> <operator>&amp;</operator><name>buffer_desc</name></expr>,
}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <operator>(</operator><name>AVDRMFrameDescriptor</name><operator>*</operator><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>nb_objects</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"VAAPI can only map frames "</literal>
<literal type="string">"made from a single DRM object.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>va_fourcc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>vaapi_drm_format_map</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>nb_layers</name></name> <operator>!=</operator> <name><name>vaapi_drm_format_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nb_layer_formats</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_layers</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>layers</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>format</name> <operator>!=</operator>
<name><name>vaapi_drm_format_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>layer_formats</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_layers</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>va_fourcc</name> <operator>=</operator> <name><name>vaapi_drm_format_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>va_fourcc</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>va_fourcc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"DRM format not supported "</literal>
<literal type="string">"by VAAPI.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Map DRM object %d to VAAPI as "</literal>
<literal type="string">"%08x.\n"</literal></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><name>va_fourcc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>format_desc</name> <operator>=</operator> <call><name>vaapi_format_from_fourcc</name><argument_list>(<argument><expr><name>va_fourcc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>format_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer_handle</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer_desc</name><operator>.</operator><name>pixel_format</name></name> <operator>=</operator> <name>va_fourcc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer_desc</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>src_fc</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer_desc</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>src_fc</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer_desc</name><operator>.</operator><name>data_size</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer_desc</name><operator>.</operator><name>buffers</name></name> <operator>=</operator> <operator>&amp;</operator><name>buffer_handle</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer_desc</name><operator>.</operator><name>num_buffers</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer_desc</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_layers</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>layers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nb_planes</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>buffer_desc</name><operator>.</operator><name>pitches</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>layers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>planes</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>pitch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer_desc</name><operator>.</operator><name>offsets</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>layers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>planes</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>k</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><name><name>buffer_desc</name><operator>.</operator><name>num_planes</name></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>format_desc</name><operator>-&gt;</operator><name>chroma_planes_swapped</name></name> <operator>&amp;&amp;</operator>
<name><name>buffer_desc</name><operator>.</operator><name>num_planes</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name><name>buffer_desc</name><operator>.</operator><name>pitches</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buffer_desc</name><operator>.</operator><name>pitches</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name><name>buffer_desc</name><operator>.</operator><name>offsets</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buffer_desc</name><operator>.</operator><name>offsets</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaCreateSurfaces</name><argument_list>(<argument><expr><name><name>dst_dev</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>format_desc</name><operator>-&gt;</operator><name>rt_format</name></name></expr></argument>,
<argument><expr><name><name>src</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>surface_id</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>attrs</name></expr></argument>, <argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create surface from DRM "</literal>
<literal type="string">"object: %d (%s).\n"</literal></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Create surface %#x.\n"</literal></expr></argument>, <argument><expr><name>surface_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_hwframe_map_create</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>vaapi_unmap_from_drm</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>surface_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>surface_id</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Mapped DRM object %d to "</literal>
<literal type="string">"surface %#x.\n"</literal></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><name>surface_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VA_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>vaapi_unmap_to_drm_esh</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>,
<parameter><decl><type><name>HWMapDescriptor</name> <modifier>*</modifier></type><name>hwmap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVDRMFrameDescriptor</name> <modifier>*</modifier></type><name>drm_desc</name> <init>= <expr><name><name>hwmap</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>drm_desc</name><operator>-&gt;</operator><name>nb_objects</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>drm_desc</name><operator>-&gt;</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>drm_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_map_to_drm_esh</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVVAAPIDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VASurfaceID</name></type> <name>surface_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAStatus</name></type> <name>vas</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VADRMPRIMESurfaceDescriptor</name></type> <name>va_desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDRMFrameDescriptor</name> <modifier>*</modifier></type><name>drm_desc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>export_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>surface_id</name> <operator>=</operator> <operator>(</operator><name>VASurfaceID</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>export_flags</name> <operator>=</operator> <name>VA_EXPORT_SURFACE_SEPARATE_LAYERS</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>AV_HWFRAME_MAP_READ</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>export_flags</name> <operator>|=</operator> <name>VA_EXPORT_SURFACE_READ_ONLY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>AV_HWFRAME_MAP_WRITE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>export_flags</name> <operator>|=</operator> <name>VA_EXPORT_SURFACE_WRITE_ONLY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaExportSurfaceHandle</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name>surface_id</name></expr></argument>,
<argument><expr><name>VA_SURFACE_ATTRIB_MEM_TYPE_DRM_PRIME_2</name></expr></argument>,
<argument><expr><name>export_flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>va_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>==</operator> <name>VA_STATUS_ERROR_UNIMPLEMENTED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to export surface %#x: "</literal>
<literal type="string">"%d (%s).\n"</literal></expr></argument>, <argument><expr><name>surface_id</name></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>drm_desc</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>drm_desc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>drm_desc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>drm_desc</name><operator>-&gt;</operator><name>nb_objects</name></name> <operator>=</operator> <name><name>va_desc</name><operator>.</operator><name>num_objects</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>va_desc</name><operator>.</operator><name>num_objects</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>drm_desc</name><operator>-&gt;</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name><name>va_desc</name><operator>.</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>drm_desc</name><operator>-&gt;</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name><name>va_desc</name><operator>.</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>drm_desc</name><operator>-&gt;</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>format_modifier</name> <operator>=</operator>
<name><name>va_desc</name><operator>.</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>drm_format_modifier</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>drm_desc</name><operator>-&gt;</operator><name>nb_layers</name></name> <operator>=</operator> <name><name>va_desc</name><operator>.</operator><name>num_layers</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>va_desc</name><operator>.</operator><name>num_layers</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>drm_desc</name><operator>-&gt;</operator><name>layers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>format</name> <operator>=</operator> <name><name>va_desc</name><operator>.</operator><name>layers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>drm_format</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>drm_desc</name><operator>-&gt;</operator><name>layers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nb_planes</name> <operator>=</operator> <name><name>va_desc</name><operator>.</operator><name>layers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num_planes</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>va_desc</name><operator>.</operator><name>layers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num_planes</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>drm_desc</name><operator>-&gt;</operator><name>layers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>planes</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>object_index</name> <operator>=</operator>
<name><name>va_desc</name><operator>.</operator><name>layers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>object_index</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>drm_desc</name><operator>-&gt;</operator><name>layers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>planes</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator>
<name><name>va_desc</name><operator>.</operator><name>layers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>offset</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>drm_desc</name><operator>-&gt;</operator><name>layers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>planes</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>pitch</name> <operator>=</operator>
<name><name>va_desc</name><operator>.</operator><name>layers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pitch</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_hwframe_map_create</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>vaapi_unmap_to_drm_esh</name></expr></argument>, <argument><expr><name>drm_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>drm_desc</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>va_desc</name><operator>.</operator><name>num_objects</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>va_desc</name><operator>.</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>drm_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VA_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>,</operator> <literal type="number">36</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct <name>VAAPIDRMImageBufferMapping</name> <block>{
<decl_stmt><decl><type><name>VAImage</name></type> <name>image</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VABufferInfo</name></type> <name>buffer_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDRMFrameDescriptor</name></type> <name>drm_desc</name></decl>;</decl_stmt>
}</block></struct></type> <name>VAAPIDRMImageBufferMapping</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vaapi_unmap_to_drm_abh</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>,
<parameter><decl><type><name>HWMapDescriptor</name> <modifier>*</modifier></type><name>hwmap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVVAAPIDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAAPIDRMImageBufferMapping</name> <modifier>*</modifier></type><name>mapping</name> <init>= <expr><name><name>hwmap</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VASurfaceID</name></type> <name>surface_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAStatus</name></type> <name>vas</name></decl>;</decl_stmt>

<expr_stmt><expr><name>surface_id</name> <operator>=</operator> <operator>(</operator><name>VASurfaceID</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>hwmap</name><operator>-&gt;</operator><name>source</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Unmap VAAPI surface %#x from DRM.\n"</literal></expr></argument>,
<argument><expr><name>surface_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaReleaseBufferHandle</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>mapping</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to release buffer "</literal>
<literal type="string">"handle of image %#x (derived from surface %#x): "</literal>
<literal type="string">"%d (%s).\n"</literal></expr></argument>, <argument><expr><name><name>mapping</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>surface_id</name></expr></argument>,
<argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaDestroyImage</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>mapping</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>image_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to destroy image "</literal>
<literal type="string">"derived from surface %#x: %d (%s).\n"</literal></expr></argument>,
<argument><expr><name>surface_id</name></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>mapping</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_map_to_drm_abh</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVVAAPIDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAAPIDRMImageBufferMapping</name> <modifier>*</modifier></type><name>mapping</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VASurfaceID</name></type> <name>surface_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAStatus</name></type> <name>vas</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>surface_id</name> <operator>=</operator> <operator>(</operator><name>VASurfaceID</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Map VAAPI surface %#x to DRM.\n"</literal></expr></argument>,
<argument><expr><name>surface_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mapping</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>mapping</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mapping</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaDeriveImage</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name>surface_id</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>mapping</name><operator>-&gt;</operator><name>image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to derive image from "</literal>
<literal type="string">"surface %#x: %d (%s).\n"</literal></expr></argument>,
<argument><expr><name>surface_id</name></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>vaapi_drm_format_map</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>vaapi_drm_format_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>va_fourcc</name> <operator>==</operator>
<name><name>mapping</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>format</name><operator>.</operator><name>fourcc</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>vaapi_drm_format_map</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No matching DRM format for "</literal>
<literal type="string">"VAAPI format %#x.\n"</literal></expr></argument>, <argument><expr><name><name>mapping</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>format</name><operator>.</operator><name>fourcc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail_derived</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mapping</name><operator>-&gt;</operator><name>buffer_info</name><operator>.</operator><name>mem_type</name></name> <operator>=</operator>
<name>VA_SURFACE_ATTRIB_MEM_TYPE_DRM_PRIME</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mapping</name><operator>-&gt;</operator><name>drm_desc</name><operator>.</operator><name>nb_layers</name></name> <operator>=</operator>
<name><name>vaapi_drm_format_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nb_layer_formats</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mapping</name><operator>-&gt;</operator><name>drm_desc</name><operator>.</operator><name>nb_layers</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mapping</name><operator>-&gt;</operator><name>drm_desc</name><operator>.</operator><name>nb_layers</name></name> <operator>!=</operator> <name><name>mapping</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>num_planes</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Image properties do not match "</literal>
<literal type="string">"expected format: got %d planes, but expected %d.\n"</literal></expr></argument>,
<argument><expr><name><name>mapping</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>num_planes</name></name></expr></argument>, <argument><expr><name><name>mapping</name><operator>-&gt;</operator><name>drm_desc</name><operator>.</operator><name>nb_layers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail_derived</name>;</goto>
</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>mapping</name><operator>-&gt;</operator><name>drm_desc</name><operator>.</operator><name>nb_layers</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>mapping</name><operator>-&gt;</operator><name>drm_desc</name><operator>.</operator><name>layers</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>AVDRMLayerDescriptor</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>format</name> <operator>=</operator> <name><name>vaapi_drm_format_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>layer_formats</name><index>[<expr><name>p</name></expr>]</index></name></expr>,
<expr><operator>.</operator><name>nb_planes</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name><name>planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <block>{
<expr><operator>.</operator><name>object_index</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>offset</name> <operator>=</operator> <name><name>mapping</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>offsets</name><index>[<expr><name>p</name></expr>]</index></name></expr>,
<expr><operator>.</operator><name>pitch</name> <operator>=</operator> <name><name>mapping</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>pitches</name><index>[<expr><name>p</name></expr>]</index></name></expr>,
}</block></expr>,
}</block></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>mapping</name><operator>-&gt;</operator><name>drm_desc</name><operator>.</operator><name>layers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>format</name> <operator>=</operator>
<name><name>vaapi_drm_format_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>layer_formats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapping</name><operator>-&gt;</operator><name>drm_desc</name><operator>.</operator><name>layers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nb_planes</name> <operator>=</operator> <name><name>mapping</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>num_planes</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>mapping</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>num_planes</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>mapping</name><operator>-&gt;</operator><name>drm_desc</name><operator>.</operator><name>layers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>planes</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>AVDRMPlaneDescriptor</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>object_index</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>offset</name> <operator>=</operator> <name><name>mapping</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>offsets</name><index>[<expr><name>p</name></expr>]</index></name></expr>,
<expr><operator>.</operator><name>pitch</name> <operator>=</operator> <name><name>mapping</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>pitches</name><index>[<expr><name>p</name></expr>]</index></name></expr>,
}</block></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaAcquireBufferHandle</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>mapping</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>buf</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>mapping</name><operator>-&gt;</operator><name>buffer_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to get buffer "</literal>
<literal type="string">"handle from image %#x (derived from surface %#x): "</literal>
<literal type="string">"%d (%s).\n"</literal></expr></argument>, <argument><expr><name><name>mapping</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>surface_id</name></expr></argument>,
<argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail_derived</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"DRM PRIME fd is %ld.\n"</literal></expr></argument>,
<argument><expr><name><name>mapping</name><operator>-&gt;</operator><name>buffer_info</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mapping</name><operator>-&gt;</operator><name>drm_desc</name><operator>.</operator><name>nb_objects</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapping</name><operator>-&gt;</operator><name>drm_desc</name><operator>.</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>AVDRMObjectDescriptor</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>fd</name> <operator>=</operator> <name><name>mapping</name><operator>-&gt;</operator><name>buffer_info</name><operator>.</operator><name>handle</name></name></expr>,
<expr><operator>.</operator><name>size</name> <operator>=</operator> <name><name>mapping</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>data_size</name></name></expr>,

<expr><operator>.</operator><name>format_modifier</name> <operator>=</operator> <name>DRM_FORMAT_MOD_INVALID</name></expr>,
}</block></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_hwframe_map_create</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>,
<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vaapi_unmap_to_drm_abh</name></expr></argument>,
<argument><expr><name>mapping</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail_mapped</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>mapping</name><operator>-&gt;</operator><name>drm_desc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail_mapped</name>:</label>
<expr_stmt><expr><call><name>vaReleaseBufferHandle</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>mapping</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>fail_derived</name>:</label>
<expr_stmt><expr><call><name>vaDestroyImage</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>mapping</name><operator>-&gt;</operator><name>image</name><operator>.</operator><name>image_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mapping</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_map_to_drm</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VA_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_map_to_drm_esh</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VA_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>,</operator> <literal type="number">36</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>vaapi_map_to_drm_abh</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_map_to</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBDRM</name></expr></cpp:if>
<case>case <expr><name>AV_PIX_FMT_DRM_PRIME</name></expr>:</case>
<return>return <expr><call><name>vaapi_map_from_drm</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_map_from</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBDRM</name></expr></cpp:if>
<case>case <expr><name>AV_PIX_FMT_DRM_PRIME</name></expr>:</case>
<return>return <expr><call><name>vaapi_map_to_drm</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default>
<return>return <expr><call><name>vaapi_map_to_memory</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vaapi_device_free</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVVAAPIDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAAPIDevicePriv</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>user_opaque</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vaTerminate</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_VAAPI_X11</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>x11_display</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>XCloseDisplay</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>x11_display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>drm_fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>drm_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>priv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VAAPI_1</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>vaapi_device_log_error</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>context</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"libva: %s"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vaapi_device_log_info</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>context</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"libva: %s"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_device_connect</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>VADisplay</name></type> <name>display</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVVAAPIDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>major</name></decl>, <decl><type ref="prev"/><name>minor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAStatus</name></type> <name>vas</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VAAPI_1</name></expr></cpp:if>
<expr_stmt><expr><call><name>vaSetErrorCallback</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vaapi_device_log_error</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vaSetInfoCallback</name> <argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vaapi_device_log_info</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>hwctx</name><operator>-&gt;</operator><name>display</name></name> <operator>=</operator> <name>display</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaInitialize</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>major</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>minor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to initialise VAAPI "</literal>
<literal type="string">"connection: %d (%s).\n"</literal></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Initialised VAAPI connection: "</literal>
<literal type="string">"version %d.%d\n"</literal></expr></argument>, <argument><expr><name>major</name></expr></argument>, <argument><expr><name>minor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_device_create</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>,
<parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAAPIDevicePriv</name> <modifier>*</modifier></type><name>priv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VADisplay</name></type> <name>display</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>ent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>try_drm</name></decl>, <decl><type ref="prev"/><name>try_x11</name></decl>, <decl><type ref="prev"/><name>try_all</name></decl>;</decl_stmt>

<expr_stmt><expr><name>priv</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>priv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>priv</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>drm_fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>user_opaque</name></name> <operator>=</operator> <name>priv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>vaapi_device_free</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ent</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><literal type="string">"connection_type"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ent</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>try_all</name> <operator>=</operator> <name>try_drm</name> <operator>=</operator> <name>try_x11</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"drm"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>try_drm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"x11"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>try_x11</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid connection type %s.\n"</literal></expr></argument>,
<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>try_all</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>try_drm</name> <operator>=</operator> <name>HAVE_VAAPI_DRM</name></expr>;</expr_stmt>
<expr_stmt><expr><name>try_x11</name> <operator>=</operator> <name>HAVE_VAAPI_X11</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_VAAPI_DRM</name></expr></cpp:if>
<while>while <condition>(<expr><operator>!</operator><name>display</name> <operator>&amp;&amp;</operator> <name>try_drm</name></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>int</name></type> <name>loglevel</name> <init>= <expr><ternary><condition><expr><name>try_all</name></expr> ?</condition><then> <expr><name>AV_LOG_VERBOSE</name></expr> </then><else>: <expr><name>AV_LOG_ERROR</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>device</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>drm_fd</name></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>drm_fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>loglevel</name></expr></argument>, <argument><expr><literal type="string">"Failed to open %s as "</literal>
<literal type="string">"DRM device node.\n"</literal></expr></argument>, <argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>max_devices</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBDRM</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>kernel_driver</name></decl>;</decl_stmt>
<expr_stmt><expr><name>kernel_driver</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><literal type="string">"kernel_driver"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>max_devices</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"/dev/dri/renderD%d"</literal></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>drm_fd</name></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>drm_fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Cannot open "</literal>
<literal type="string">"DRM render node for device %d.\n"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBDRM</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>kernel_driver</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>drmVersion</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>drmGetVersion</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>drm_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>kernel_driver</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Ignoring device %d "</literal>
<literal type="string">"with non-matching kernel driver (%s).\n"</literal></expr></argument>,
<argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>drmFreeVersion</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>drm_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>drm_fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Trying to use "</literal>
<literal type="string">"DRM render node for device %d, "</literal>
<literal type="string">"with matching kernel driver (%s).\n"</literal></expr></argument>,
<argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>drmFreeVersion</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Trying to use "</literal>
<literal type="string">"DRM render node for device %d.\n"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <name>max_devices</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>display</name> <operator>=</operator> <call><name>vaGetDisplayDRM</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>drm_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Cannot open a VA display "</literal>
<literal type="string">"from DRM device %s.\n"</literal></expr></argument>, <argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_VAAPI_X11</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display</name> <operator>&amp;&amp;</operator> <name>try_x11</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>x11_display</name></name> <operator>=</operator> <call><name>XOpenDisplay</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>x11_display</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Cannot open X11 display "</literal>
<literal type="string">"%s.\n"</literal></expr></argument>, <argument><expr><call><name>XDisplayName</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>display</name> <operator>=</operator> <call><name>vaGetDisplay</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>x11_display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot open a VA display "</literal>
<literal type="string">"from X11 display %s.\n"</literal></expr></argument>, <argument><expr><call><name>XDisplayName</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Opened VA display via "</literal>
<literal type="string">"X11 display %s.\n"</literal></expr></argument>, <argument><expr><call><name>XDisplayName</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>device</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No VA display found for "</literal>
<literal type="string">"device %s.\n"</literal></expr></argument>, <argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No VA display found for "</literal>
<literal type="string">"any default device.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ent</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><literal type="string">"driver"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ent</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VA_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>,</operator> <literal type="number">38</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>VAStatus</name></type> <name>vas</name></decl>;</decl_stmt>
<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaSetDriverName</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name><name>ent</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to set driver name to "</literal>
<literal type="string">"%s: %d (%s).\n"</literal></expr></argument>, <argument><expr><name><name>ent</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vaTerminate</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Driver name setting is not "</literal>
<literal type="string">"supported with this VAAPI version.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>vaapi_device_connect</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_device_derive</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>src_ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_VAAPI_DRM</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>src_ctx</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_HWDEVICE_TYPE_DRM</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVDRMDeviceContext</name> <modifier>*</modifier></type><name>src_hwctx</name> <init>= <expr><name><name>src_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VADisplay</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAAPIDevicePriv</name> <modifier>*</modifier></type><name>priv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src_hwctx</name><operator>-&gt;</operator><name>fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"DRM instance requires an associated "</literal>
<literal type="string">"device to derive a VA display from.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBDRM</name></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>node_type</name> <init>= <expr><call><name>drmGetNodeTypeFromFd</name><argument_list>(<argument><expr><name><name>src_hwctx</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>render_node</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>node_type</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"DRM instance fd does not appear "</literal>
<literal type="string">"to refer to a DRM device.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>node_type</name> <operator>==</operator> <name>DRM_NODE_RENDER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <name><name>src_hwctx</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>render_node</name> <operator>=</operator> <call><name>drmGetRenderDeviceNameFromFd</name><argument_list>(<argument><expr><name><name>src_hwctx</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>render_node</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to find a render node "</literal>
<literal type="string">"matching the DRM device.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENODEV</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>render_node</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to open render node %s"</literal>
<literal type="string">"matching the DRM device.\n"</literal></expr></argument>, <argument><expr><name>render_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>render_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Using render node %s in place "</literal>
<literal type="string">"of non-render DRM device.\n"</literal></expr></argument>, <argument><expr><name>render_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>render_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <name><name>src_hwctx</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>priv</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>priv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>priv</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name><name>src_hwctx</name><operator>-&gt;</operator><name>fd</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>drm_fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>drm_fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>user_opaque</name></name> <operator>=</operator> <name>priv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_device_free</name></expr>;</expr_stmt>

<expr_stmt><expr><name>display</name> <operator>=</operator> <call><name>vaGetDisplayDRM</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to open a VA display from "</literal>
<literal type="string">"DRM device.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>vaapi_device_connect</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>HWContextType</name></type> <name>ff_hwcontext_type_vaapi</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AV_HWDEVICE_TYPE_VAAPI</name></expr>,
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"VAAPI"</literal></expr>,

<expr><operator>.</operator><name>device_hwctx_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AVVAAPIDeviceContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>device_priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VAAPIDeviceContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>device_hwconfig_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AVVAAPIHWConfig</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>frames_hwctx_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AVVAAPIFramesContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>frames_priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VAAPIFramesContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>device_create</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_device_create</name></expr>,
<expr><operator>.</operator><name>device_derive</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_device_derive</name></expr>,
<expr><operator>.</operator><name>device_init</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_device_init</name></expr>,
<expr><operator>.</operator><name>device_uninit</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_device_uninit</name></expr>,
<expr><operator>.</operator><name>frames_get_constraints</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_frames_get_constraints</name></expr>,
<expr><operator>.</operator><name>frames_init</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_frames_init</name></expr>,
<expr><operator>.</operator><name>frames_uninit</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_frames_uninit</name></expr>,
<expr><operator>.</operator><name>frames_get_buffer</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_get_buffer</name></expr>,
<expr><operator>.</operator><name>transfer_get_formats</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_transfer_get_formats</name></expr>,
<expr><operator>.</operator><name>transfer_data_to</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_transfer_data_to</name></expr>,
<expr><operator>.</operator><name>transfer_data_from</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_transfer_data_from</name></expr>,
<expr><operator>.</operator><name>map_to</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_map_to</name></expr>,
<expr><operator>.</operator><name>map_from</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_map_from</name></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator> <block>{
<expr><name>AV_PIX_FMT_VAAPI</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
