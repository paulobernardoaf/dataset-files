<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavutil\display.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"display.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathematics.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONV_FP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((double) (x)) / (1 &lt;&lt; 16)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONV_DB</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int32_t) ((x) * (1 &lt;&lt; 16))</cpp:value></cpp:define>

<function><type><name>double</name></type> <name>av_display_rotation_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name><name>matrix</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>rotation</name></decl>, <decl><type ref="prev"/><name><name>scale</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>scale</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>hypot</name><argument_list>(<argument><expr><call><name>CONV_FP</name><argument_list>(<argument><expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CONV_FP</name><argument_list>(<argument><expr><name><name>matrix</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scale</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>hypot</name><argument_list>(<argument><expr><call><name>CONV_FP</name><argument_list>(<argument><expr><name><name>matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CONV_FP</name><argument_list>(<argument><expr><name><name>matrix</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>scale</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0.0</literal> <operator>||</operator> <name><name>scale</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NAN</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rotation</name> <operator>=</operator> <call><name>atan2</name><argument_list>(<argument><expr><call><name>CONV_FP</name><argument_list>(<argument><expr><name><name>matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>/</operator> <name><name>scale</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>CONV_FP</name><argument_list>(<argument><expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>/</operator> <name><name>scale</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">180</literal> <operator>/</operator> <name>M_PI</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><name>rotation</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_display_rotation_set</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name><name>matrix</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>angle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>radians</name> <init>= <expr><operator>-</operator><name>angle</name> <operator>*</operator> <name>M_PI</name> <operator>/</operator> <literal type="number">180.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>c</name> <init>= <expr><call><name>cos</name><argument_list>(<argument><expr><name>radians</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>s</name> <init>= <expr><call><name>sin</name><argument_list>(<argument><expr><name>radians</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>matrix</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">9</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CONV_DB</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CONV_DB</name><argument_list>(<argument><expr><operator>-</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>CONV_DB</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>CONV_DB</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_display_matrix_flip</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name><name>matrix</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hflip</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vflip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>flip</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><operator>!</operator><operator>!</operator><name>hflip</name><operator>)</operator></expr>, <expr><literal type="number">1</literal> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><operator>!</operator><operator>!</operator><name>vflip</name><operator>)</operator></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hflip</name> <operator>||</operator> <name>vflip</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <name><name>flip</name><index>[<expr><name>i</name> <operator>%</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
