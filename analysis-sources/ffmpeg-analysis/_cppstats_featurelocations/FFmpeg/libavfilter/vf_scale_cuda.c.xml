<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vf_scale_cuda.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hwcontext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hwcontext_cuda_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cuda_check.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scale_eval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>supported_formats</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_YUV420P</name></expr>,
<expr><name>AV_PIX_FMT_NV12</name></expr>,
<expr><name>AV_PIX_FMT_YUV444P</name></expr>,
<expr><name>AV_PIX_FMT_P010</name></expr>,
<expr><name>AV_PIX_FMT_P016</name></expr>,
<expr><name>AV_PIX_FMT_YUV444P16</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIV_UP</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( ((a) + (b) - 1) / (b) )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIGN_UP</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) + (b) - 1) &amp; ~((b) - 1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_BUFFERS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCKX</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCKY</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_CU</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FF_CUDA_CHECK_DL(ctx, s-&gt;hwctx-&gt;internal-&gt;cuda_dl, x)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>CUDAScaleContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCUDADeviceContext</name> <modifier>*</modifier></type><name>hwctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>in_fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>out_fmt</name></decl>;</decl_stmt>

<struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>
}</block> <decl><name><name>planes_in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <name><name>planes_out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>;</struct>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>frames_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>tmp_frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>passthrough</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>w_expr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>h_expr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>force_original_aspect_ratio</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>force_divisible_by</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUcontext</name></type> <name>cu_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CUmodule</name></type> <name>cu_module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CUfunction</name></type> <name>cu_func_uchar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CUfunction</name></type> <name>cu_func_uchar2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CUfunction</name></type> <name>cu_func_uchar4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CUfunction</name></type> <name>cu_func_ushort</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CUfunction</name></type> <name>cu_func_ushort2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CUfunction</name></type> <name>cu_func_ushort4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CUstream</name></type> <name>cu_stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUdeviceptr</name></type> <name>srcBuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CUdeviceptr</name></type> <name>dstBuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tex_alignment</name></decl>;</decl_stmt>
}</block></struct></type> <name>CUDAScaleContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>cudascale_init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CUDAScaleContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tmp_frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>tmp_frame</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>cudascale_uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CUDAScaleContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>tmp_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cudascale_query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pixel_formats</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_CUDA</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>pix_fmts</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pixel_formats</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init_stage</name><parameter_list>(<parameter><decl><type><name>CUDAScaleContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>device_ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>out_ref</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>out_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>in_sw</name></decl>, <decl><type ref="prev"/><name>in_sh</name></decl>, <decl><type ref="prev"/><name>out_sw</name></decl>, <decl><type ref="prev"/><name>out_sh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_pix_fmt_get_chroma_sub_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_fmt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in_sw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in_sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_pix_fmt_get_chroma_sub_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_fmt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_sw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>planes_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>width</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>planes_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planes_in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>planes_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planes_in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>height</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>planes_in</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>planes_in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planes_in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>width</name> <operator>&gt;&gt;</operator> <name>in_sw</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>planes_in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planes_in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>height</name> <operator>&gt;&gt;</operator> <name>in_sh</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>planes_out</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planes_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>width</name> <operator>&gt;&gt;</operator> <name>out_sw</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>planes_out</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planes_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>height</name> <operator>&gt;&gt;</operator> <name>out_sh</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>out_ref</name> <operator>=</operator> <call><name>av_hwframe_ctx_alloc</name><argument_list>(<argument><expr><name>device_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out_ref</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>out_ctx</name> <operator>=</operator> <operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>out_ref</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_ctx</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_CUDA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_ctx</name><operator>-&gt;</operator><name>sw_format</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>out_fmt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_ctx</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>planes_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>width</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_ctx</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>planes_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>height</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_hwframe_ctx_init</name><argument_list>(<argument><expr><name>out_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_hwframe_get_buffer</name><argument_list>(<argument><expr><name>out_ref</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planes_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planes_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frames_ctx</name></name> <operator>=</operator> <name>out_ref</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>format_is_supported</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>supported_formats</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>supported_formats</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>fmt</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init_processing_chain</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>out_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CUDAScaleContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>in_frames_ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>in_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>out_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>hw_frames_ctx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No hw context provided on input\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>in_frames_ctx</name> <operator>=</operator> <operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>in_format</name> <operator>=</operator> <name><name>in_frames_ctx</name><operator>-&gt;</operator><name>sw_format</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>out_format</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_NONE</name><operator>)</operator></expr> ?</condition><then> <expr><name>in_format</name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>format</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>format_is_supported</name><argument_list>(<argument><expr><name>in_format</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported input format: %s\n"</literal></expr></argument>,
<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name>in_format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>format_is_supported</name><argument_list>(<argument><expr><name>out_format</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported output format: %s\n"</literal></expr></argument>,
<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name>out_format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>in_width</name> <operator>==</operator> <name>out_width</name> <operator>&amp;&amp;</operator> <name>in_height</name> <operator>==</operator> <name>out_height</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>passthrough</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_fmt</name></name> <operator>=</operator> <name>in_format</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out_fmt</name></name> <operator>=</operator> <name>out_format</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>planes_in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <name>in_width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>planes_in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <name>in_height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>planes_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <name>out_width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>planes_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <name>out_height</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_stage</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>in_frames_ctx</name><operator>-&gt;</operator><name>device_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>hw_frames_ctx</name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>hw_frames_ctx</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>cudascale_config_props</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CUDAScaleContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>frames_ctx</name> <init>= <expr><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>inlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCUDADeviceContext</name> <modifier>*</modifier></type><name>device_hwctx</name> <init>= <expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CUcontext</name></type> <name>dummy</name></decl>, <decl><type ref="prev"/><name>cuda_ctx</name> <init>= <expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>cuda_ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CudaFunctions</name> <modifier>*</modifier></type><name>cu</name> <init>= <expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>cuda_dl</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name><name>vf_scale_cuda_ptx</name><index>[]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name></name> <operator>=</operator> <name>device_hwctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cu_stream</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>stream</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuCtxPushCurrent</name></name><argument_list>(<argument><expr><name>cuda_ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuModuleLoadData</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cu_module</name></name></expr></argument>, <argument><expr><name>vf_scale_cuda_ptx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuModuleGetFunction</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cu_func_uchar</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cu_module</name></name></expr></argument>, <argument><expr><literal type="string">"Subsample_Bilinear_uchar"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuModuleGetFunction</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cu_func_uchar2</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cu_module</name></name></expr></argument>, <argument><expr><literal type="string">"Subsample_Bilinear_uchar2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuModuleGetFunction</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cu_func_uchar4</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cu_module</name></name></expr></argument>, <argument><expr><literal type="string">"Subsample_Bilinear_uchar4"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuModuleGetFunction</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cu_func_ushort</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cu_module</name></name></expr></argument>, <argument><expr><literal type="string">"Subsample_Bilinear_ushort"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuModuleGetFunction</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cu_func_ushort2</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cu_module</name></name></expr></argument>, <argument><expr><literal type="string">"Subsample_Bilinear_ushort2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuModuleGetFunction</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cu_func_ushort4</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cu_module</name></name></expr></argument>, <argument><expr><literal type="string">"Subsample_Bilinear_ushort4"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuCtxPopCurrent</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_scale_eval_dimensions</name><argument_list>(<argument><expr><name>s</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>w_expr</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>h_expr</name></name></expr></argument>,
<argument><expr><name>inlink</name></expr></argument>, <argument><expr><name>outlink</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_scale_adjust_dimensions</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>force_original_aspect_ratio</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>force_divisible_by</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>h</name> <operator>*</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name><operator>)</operator> <operator>&gt;</operator> <name>INT_MAX</name> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>w</name> <operator>*</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name><operator>)</operator> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Rescaled value for width or height is too big.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_processing_chain</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"w:%d h:%d -&gt; w:%d h:%d\n"</literal></expr></argument>,
<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <macro><name>av_mul_q</name><argument_list>(<argument>(AVRational){outlink-&gt;h*inlink-&gt;w</argument>,
<argument>outlink-&gt;w*inlink-&gt;h}</argument>,
<argument>inlink-&gt;sample_aspect_ratio</argument>)</argument_list></macro></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>call_resize_kernel</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>CUfunction</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src_dptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_dptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>pixel_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CUDAScaleContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CudaFunctions</name> <modifier>*</modifier></type><name>cu</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>cuda_dl</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CUdeviceptr</name></type> <name>dst_devptr</name> <init>= <expr><operator>(</operator><name>CUdeviceptr</name><operator>)</operator><name>dst_dptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CUtexObject</name></type> <name>tex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>args_uchar</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>&amp;</operator><name>tex</name></expr>, <expr><operator>&amp;</operator><name>dst_devptr</name></expr>, <expr><operator>&amp;</operator><name>dst_width</name></expr>, <expr><operator>&amp;</operator><name>dst_height</name></expr>, <expr><operator>&amp;</operator><name>dst_pitch</name></expr>, <expr><operator>&amp;</operator><name>src_width</name></expr>, <expr><operator>&amp;</operator><name>src_height</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUDA_TEXTURE_DESC</name></type> <name>tex_desc</name> <init>= <expr><block>{
<expr><operator>.</operator><name>filterMode</name> <operator>=</operator> <name>CU_TR_FILTER_MODE_LINEAR</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>CU_TRSF_READ_AS_INTEGER</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUDA_RESOURCE_DESC</name></type> <name>res_desc</name> <init>= <expr><block>{
<expr><operator>.</operator><name>resType</name> <operator>=</operator> <name>CU_RESOURCE_TYPE_PITCH2D</name></expr>,
<expr><operator>.</operator><name><name>res</name><operator>.</operator><name>pitch2D</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>pixel_size</name> <operator>==</operator> <literal type="number">1</literal> <operator>?</operator>
<name>CU_AD_FORMAT_UNSIGNED_INT8</name> <operator>:</operator>
<name>CU_AD_FORMAT_UNSIGNED_INT16</name></expr>,
<expr><operator>.</operator><name><name>res</name><operator>.</operator><name>pitch2D</name><operator>.</operator><name>numChannels</name></name> <operator>=</operator> <name>channels</name></expr>,
<expr><operator>.</operator><name><name>res</name><operator>.</operator><name>pitch2D</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>src_width</name></expr>,
<expr><operator>.</operator><name><name>res</name><operator>.</operator><name>pitch2D</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>src_height</name></expr>,
<expr><operator>.</operator><name><name>res</name><operator>.</operator><name>pitch2D</name><operator>.</operator><name>pitchInBytes</name></name> <operator>=</operator> <name>src_pitch</name> <operator>*</operator> <name>pixel_size</name></expr>,
<expr><operator>.</operator><name><name>res</name><operator>.</operator><name>pitch2D</name><operator>.</operator><name>devPtr</name></name> <operator>=</operator> <operator>(</operator><name>CUdeviceptr</name><operator>)</operator><name>src_dptr</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuTexObjectCreate</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>tex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res_desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tex_desc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuLaunchKernel</name></name><argument_list>(<argument><expr><name>func</name></expr></argument>,
<argument><expr><call><name>DIV_UP</name><argument_list>(<argument><expr><name>dst_width</name></expr></argument>, <argument><expr><name>BLOCKX</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DIV_UP</name><argument_list>(<argument><expr><name>dst_height</name></expr></argument>, <argument><expr><name>BLOCKY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>BLOCKX</name></expr></argument>, <argument><expr><name>BLOCKY</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cu_stream</name></name></expr></argument>, <argument><expr><name>args_uchar</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>exit</name>:</label>
<if_stmt><if>if <condition>(<expr><name>tex</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuTexObjectDestroy</name></name><argument_list>(<argument><expr><name>tex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>scalecuda_resize</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>in_frames_ctx</name> <init>= <expr><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CUDAScaleContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>in_frames_ctx</name><operator>-&gt;</operator><name>sw_format</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_YUV420P</name></expr>:</case>
<expr_stmt><expr><call><name>call_resize_kernel</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cu_func_uchar</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_resize_kernel</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cu_func_uchar</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>/</operator><literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>/</operator><literal type="number">2</literal></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_resize_kernel</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cu_func_uchar</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>/</operator><literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>/</operator><literal type="number">2</literal></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_YUV444P</name></expr>:</case>
<expr_stmt><expr><call><name>call_resize_kernel</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cu_func_uchar</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_resize_kernel</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cu_func_uchar</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_resize_kernel</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cu_func_uchar</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_YUV444P16</name></expr>:</case>
<expr_stmt><expr><call><name>call_resize_kernel</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cu_func_ushort</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_resize_kernel</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cu_func_ushort</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_resize_kernel</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cu_func_ushort</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_NV12</name></expr>:</case>
<expr_stmt><expr><call><name>call_resize_kernel</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cu_func_uchar</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_resize_kernel</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cu_func_uchar2</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>/</operator><literal type="number">2</literal></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_P010LE</name></expr>:</case>
<expr_stmt><expr><call><name>call_resize_kernel</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cu_func_ushort</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>/</operator><literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>/</operator><literal type="number">2</literal></expr></argument>,
<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_resize_kernel</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cu_func_ushort2</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>/</operator><literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">4</literal></expr></argument>,
<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_P016LE</name></expr>:</case>
<expr_stmt><expr><call><name>call_resize_kernel</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cu_func_ushort</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_resize_kernel</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cu_func_ushort2</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">4</literal></expr></argument>,
<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><name>AVERROR_BUG</name></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cudascale_scale</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CUDAScaleContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>in</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>scalecuda_resize</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_hwframe_get_buffer</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>tmp_frame</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_move_ref</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_move_ref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>tmp_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planes_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planes_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cudascale_filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>link</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CUDAScaleContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CudaFunctions</name> <modifier>*</modifier></type><name>cu</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>cuda_dl</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CUcontext</name></type> <name>dummy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuCtxPushCurrent</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>cuda_ctx</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cudascale_scale</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuCtxPopCurrent</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name> <operator>*</operator> <name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>*</operator> <name><name>link</name><operator>-&gt;</operator><name>w</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name> <operator>*</operator> <name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <name><name>link</name><operator>-&gt;</operator><name>h</name></name></expr></argument>,
<argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(CUDAScaleContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>(AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_VIDEO_PARAM)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"w"</literal></expr>, <expr><literal type="string">"Output video width"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>w_expr</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"iw"</literal></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"h"</literal></expr>, <expr><literal type="string">"Output video height"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>h_expr</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"ih"</literal></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"force_original_aspect_ratio"</literal></expr>, <expr><literal type="string">"decrease or increase w/h if necessary to keep the original AR"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>force_original_aspect_ratio</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"force_oar"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"disable"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"force_oar"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"decrease"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"force_oar"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"increase"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">2</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"force_oar"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"force_divisible_by"</literal></expr>, <expr><literal type="string">"enforce that the output resolution is divisible by a defined integer when force_original_aspect_ratio is used"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>force_divisible_by</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">256</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>cudascale_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"cudascale"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>cudascale_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>cudascale_filter_frame</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>cudascale_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>cudascale_config_props</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_scale_cuda</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"scale_cuda"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"GPU accelerated video resizer"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>cudascale_init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>cudascale_uninit</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>cudascale_query_formats</name></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CUDAScaleContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>cudascale_class</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>cudascale_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>cudascale_outputs</name></expr>,

<expr><operator>.</operator><name>flags_internal</name> <operator>=</operator> <name>FF_FILTER_FLAG_HWFRAME_AWARE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
