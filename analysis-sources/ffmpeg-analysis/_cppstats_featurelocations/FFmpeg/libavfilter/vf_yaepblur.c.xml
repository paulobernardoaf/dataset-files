<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vf_yaepblur.c">




























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>YAEPContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>planes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>radius</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sigma</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_planes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>planewidth</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>planeheight</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>sat</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>square_sat</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>sat_linesize</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>pre_calculate_row</name>)<parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>filter_slice</name> )<parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>YAEPContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>YAEPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>square_sat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_YUVA444P</name></expr>, <expr><name>AV_PIX_FMT_YUV444P</name></expr>, <expr><name>AV_PIX_FMT_YUV440P</name></expr>,
<expr><name>AV_PIX_FMT_YUVJ444P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ440P</name></expr>,
<expr><name>AV_PIX_FMT_YUVA422P</name></expr>, <expr><name>AV_PIX_FMT_YUV422P</name></expr>, <expr><name>AV_PIX_FMT_YUVA420P</name></expr>, <expr><name>AV_PIX_FMT_YUV420P</name></expr>,
<expr><name>AV_PIX_FMT_YUVJ422P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ420P</name></expr>,
<expr><name>AV_PIX_FMT_YUVJ411P</name></expr>, <expr><name>AV_PIX_FMT_YUV411P</name></expr>, <expr><name>AV_PIX_FMT_YUV410P</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P9</name></expr>, <expr><name>AV_PIX_FMT_YUV422P9</name></expr>, <expr><name>AV_PIX_FMT_YUV444P9</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P10</name></expr>, <expr><name>AV_PIX_FMT_YUV422P10</name></expr>, <expr><name>AV_PIX_FMT_YUV444P10</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P12</name></expr>, <expr><name>AV_PIX_FMT_YUV422P12</name></expr>, <expr><name>AV_PIX_FMT_YUV444P12</name></expr>, <expr><name>AV_PIX_FMT_YUV440P12</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P14</name></expr>, <expr><name>AV_PIX_FMT_YUV422P14</name></expr>, <expr><name>AV_PIX_FMT_YUV444P14</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P16</name></expr>, <expr><name>AV_PIX_FMT_YUV422P16</name></expr>, <expr><name>AV_PIX_FMT_YUV444P16</name></expr>,
<expr><name>AV_PIX_FMT_YUVA420P9</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P9</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P9</name></expr>,
<expr><name>AV_PIX_FMT_YUVA420P10</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P10</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P10</name></expr>,
<expr><name>AV_PIX_FMT_YUVA422P12</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P12</name></expr>,
<expr><name>AV_PIX_FMT_YUVA420P16</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P16</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P16</name></expr>,
<expr><name>AV_PIX_FMT_GBRP</name></expr>, <expr><name>AV_PIX_FMT_GBRP9</name></expr>, <expr><name>AV_PIX_FMT_GBRP10</name></expr>,
<expr><name>AV_PIX_FMT_GBRP12</name></expr>, <expr><name>AV_PIX_FMT_GBRP14</name></expr>, <expr><name>AV_PIX_FMT_GBRP16</name></expr>,
<expr><name>AV_PIX_FMT_GBRAP</name></expr>, <expr><name>AV_PIX_FMT_GBRAP10</name></expr>, <expr><name>AV_PIX_FMT_GBRAP12</name></expr>, <expr><name>AV_PIX_FMT_GBRAP16</name></expr>,
<expr><name>AV_PIX_FMT_GRAY8</name></expr>, <expr><name>AV_PIX_FMT_GRAY9</name></expr>, <expr><name>AV_PIX_FMT_GRAY10</name></expr>, <expr><name>AV_PIX_FMT_GRAY12</name></expr>, <expr><name>AV_PIX_FMT_GRAY14</name></expr>, <expr><name>AV_PIX_FMT_GRAY16</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>ThreadData</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_linesize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_linesize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
}</block></struct></type> <name>ThreadData</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRE_CALCULATE_ROW</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static int pre_calculate_row_##name(AVFilterContext *ctx, void *arg, int jobnr, int nb_jobs) { ThreadData *td = arg; YAEPContext *s = ctx-&gt;priv; const int width = td-&gt;width; const int height = td-&gt;height; const int linesize = td-&gt;src_linesize / sizeof(type); const int sat_linesize = s-&gt;sat_linesize; const int starty = height * jobnr / nb_jobs; const int endy = height * (jobnr+1) / nb_jobs; uint64_t *sat = s-&gt;sat + (starty + 1) * sat_linesize; uint64_t *square_sat = s-&gt;square_sat + (starty + 1) * sat_linesize; const type *src = (const type *)td-&gt;src + starty * linesize; int x, y; for (y = starty; y &lt; endy; y++) { for (x = 0; x &lt; width; x++) { sat[x+1] = sat[x] + src[x]; square_sat[x+1] = square_sat[x] + (uint64_t)src[x] * src[x]; } sat += sat_linesize; square_sat += sat_linesize; src += linesize; } return 0; }</cpp:value></cpp:define>

































<macro><name>PRE_CALCULATE_ROW</name><argument_list>(<argument>uint8_t</argument>, <argument>byte</argument>)</argument_list></macro>
<macro><name>PRE_CALCULATE_ROW</name><argument_list>(<argument>uint16_t</argument>, <argument>word</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pre_calculate_col</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ThreadData</name> <modifier>*</modifier></type><name>td</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YAEPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>width</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>height</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sat_linesize</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>sat_linesize</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>startx</name> <init>= <expr><name>width</name> <operator>*</operator> <name>jobnr</name> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>endx</name> <init>= <expr><name>width</name> <operator>*</operator> <operator>(</operator><name>jobnr</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>sat</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>square_sat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>startx</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>endx</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>sat</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sat</name></name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>square_sat</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>square_sat</name></name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>sat</name><operator>+</operator><name>sat_linesize</name><operator>)</operator> <operator>+=</operator> <operator>*</operator><name>sat</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>square_sat</name><operator>+</operator><name>sat_linesize</name><operator>)</operator> <operator>+=</operator> <operator>*</operator><name>square_sat</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sat</name> <operator>+=</operator> <name>sat_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>square_sat</name> <operator>+=</operator> <name>sat_linesize</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER_SLICE</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static int filter_slice_##name(AVFilterContext *ctx, void *arg, int jobnr, int nb_jobs) { ThreadData *td = arg; YAEPContext *s = ctx-&gt;priv; const int width = td-&gt;width; const int height = td-&gt;height; const int src_linesize = td-&gt;src_linesize / sizeof(type); const int dst_linesize = td-&gt;dst_linesize / sizeof(type); const int sat_linesize = s-&gt;sat_linesize; const int sigma = s-&gt;sigma; const int radius = s-&gt;radius; uint64_t *sat = s-&gt;sat; uint64_t *square_sat = s-&gt;square_sat; const type *src = (const type *)td-&gt;src; type *dst = (type *)td-&gt;dst; const int starty = height * jobnr / nb_jobs; const int endy = height * (jobnr + 1) / nb_jobs; int x, y; int lower_x, higher_x; int lower_y, higher_y; int dist_y, count; uint64_t sum, square_sum, mean, var; for (y = starty; y &lt; endy; y++) { lower_y = y - radius &lt; 0 ? 0 : y - radius; higher_y = y + radius + 1 &gt; height ? height : y + radius + 1; dist_y = higher_y - lower_y; for (x = 0; x &lt; width; x++) { lower_x = x - radius &lt; 0 ? 0 : x - radius; higher_x = x + radius + 1 &gt; width ? width : x + radius + 1; count = dist_y * (higher_x - lower_x); sum = sat[higher_y * sat_linesize + higher_x] - sat[higher_y * sat_linesize + lower_x] - sat[lower_y * sat_linesize + higher_x] + sat[lower_y * sat_linesize + lower_x]; square_sum = square_sat[higher_y * sat_linesize + higher_x] - square_sat[higher_y * sat_linesize + lower_x] - square_sat[lower_y * sat_linesize + higher_x] + square_sat[lower_y * sat_linesize + lower_x]; mean = sum / count; var = (square_sum - sum * sum / count) / count; dst[y * dst_linesize + x] = (sigma * mean + var * src[y * src_linesize + x]) / (sigma + var); } } return 0; }</cpp:value></cpp:define>



















































<macro><name>FILTER_SLICE</name><argument_list>(<argument>uint8_t</argument>, <argument>byte</argument>)</argument_list></macro>
<macro><name>FILTER_SLICE</name><argument_list>(<argument>uint16_t</argument>, <argument>word</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YAEPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>plane</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nb_threads</name> <init>= <expr><call><name>ff_filter_get_nb_threads</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ThreadData</name></type> <name>td</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_frame_is_writable</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>out</name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>radius</name></name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>planes</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>plane</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>out</name> <operator>!=</operator> <name>in</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_image_copy_plane</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td</name><operator>.</operator><name>src</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td</name><operator>.</operator><name>src_linesize</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pre_calculate_row</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>td</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>td</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name>nb_threads</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pre_calculate_col</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>td</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>td</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name>nb_threads</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>dst</name></name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td</name><operator>.</operator><name>dst_linesize</name></name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>filter_slice</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>td</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>td</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name>nb_threads</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>out</name> <operator>!=</operator> <name>in</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>YAEPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>=</operator> <call><name>av_pix_fmt_count_planes</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>radius</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>radius</name></name></expr></argument>, <argument><expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pre_calculate_row</name></name> <operator>=</operator> <name>pre_calculate_row_byte</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter_slice</name></name> <operator>=</operator> <name>filter_slice_byte</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pre_calculate_row</name></name> <operator>=</operator> <name>pre_calculate_row_word</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter_slice</name></name> <operator>=</operator> <name>filter_slice_word</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sat_linesize</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sat</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sat_linesize</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>sat</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>sat</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>square_sat</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sat_linesize</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>square_sat</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>square_sat</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>yaep_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>yaep_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(YAEPContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_VIDEO_PARAM|AV_OPT_FLAG_RUNTIME_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>yaep_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"radius"</literal></expr>, <expr><literal type="string">"set window radius"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>radius</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">3</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"r"</literal></expr> , <expr><literal type="string">"set window radius"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>radius</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">3</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"planes"</literal></expr>, <expr><literal type="string">"set planes to filter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>planes</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0xF</literal></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"p"</literal></expr>, <expr><literal type="string">"set planes to filter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>planes</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0xF</literal></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sigma"</literal></expr>, <expr><literal type="string">"set blur strength"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sigma</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">128</literal></expr>}</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"set blur strength"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sigma</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">128</literal></expr>}</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>yaep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_yaepblur</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"yaepblur"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Yet another edge preserving blur filter."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YAEPContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>yaep_class</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>yaep_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>yaep_outputs</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC</name> <operator>|</operator> <name>AVFILTER_FLAG_SLICE_THREADS</name></expr>,
<expr><operator>.</operator><name>process_command</name> <operator>=</operator> <name>ff_filter_process_command</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
