<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\colorspacedsp.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"colorspacedsp.h"</cpp:file></cpp:include>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SS_W</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SS_H</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_DEPTH</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"colorspacedsp_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BIT_DEPTH</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_DEPTH</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"colorspacedsp_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BIT_DEPTH</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_DEPTH</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"colorspacedsp_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SS_W</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SS_H</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SS_W</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SS_H</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BIT_DEPTH</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_DEPTH</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"colorspacedsp_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BIT_DEPTH</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_DEPTH</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"colorspacedsp_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BIT_DEPTH</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_DEPTH</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"colorspacedsp_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SS_W</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SS_H</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SS_W</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SS_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BIT_DEPTH</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_DEPTH</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"colorspacedsp_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BIT_DEPTH</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_DEPTH</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"colorspacedsp_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BIT_DEPTH</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_DEPTH</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"colorspacedsp_template.c"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>multiply3x3_c</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>buf0</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf1</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf2</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v0</name> <init>= <expr><name><name>buf0</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>v1</name> <init>= <expr><name><name>buf1</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>v2</name> <init>= <expr><name><name>buf2</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf0</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><operator>(</operator><name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>v0</name> <operator>+</operator> <name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>v1</name> <operator>+</operator>
<name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>v2</name> <operator>+</operator> <literal type="number">8192</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf1</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><operator>(</operator><name><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>v0</name> <operator>+</operator> <name><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>v1</name> <operator>+</operator>
<name><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>v2</name> <operator>+</operator> <literal type="number">8192</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf2</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><operator>(</operator><name><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>v0</name> <operator>+</operator> <name><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>v1</name> <operator>+</operator>
<name><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>v2</name> <operator>+</operator> <literal type="number">8192</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>buf0</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf1</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf2</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_colorspacedsp_init</name><parameter_list>(<parameter><decl><type><name>ColorSpaceDSPContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_yuv2rgb_fn</name><parameter_list>(<parameter><type><name>bit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dsp-&gt;yuv2rgb[BPP_##bit][SS_444] = yuv2rgb_444p##bit##_c; dsp-&gt;yuv2rgb[BPP_##bit][SS_422] = yuv2rgb_422p##bit##_c; dsp-&gt;yuv2rgb[BPP_##bit][SS_420] = yuv2rgb_420p##bit##_c</cpp:value></cpp:define>




<expr_stmt><expr><call><name>init_yuv2rgb_fn</name><argument_list>( <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_yuv2rgb_fn</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_yuv2rgb_fn</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_rgb2yuv_fn</name><parameter_list>(<parameter><type><name>bit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dsp-&gt;rgb2yuv[BPP_##bit][SS_444] = rgb2yuv_444p##bit##_c; dsp-&gt;rgb2yuv[BPP_##bit][SS_422] = rgb2yuv_422p##bit##_c; dsp-&gt;rgb2yuv[BPP_##bit][SS_420] = rgb2yuv_420p##bit##_c</cpp:value></cpp:define>




<expr_stmt><expr><call><name>init_rgb2yuv_fn</name><argument_list>( <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_rgb2yuv_fn</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_rgb2yuv_fn</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_rgb2yuv_fsb_fn</name><parameter_list>(<parameter><type><name>bit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dsp-&gt;rgb2yuv_fsb[BPP_##bit][SS_444] = rgb2yuv_fsb_444p##bit##_c; dsp-&gt;rgb2yuv_fsb[BPP_##bit][SS_422] = rgb2yuv_fsb_422p##bit##_c; dsp-&gt;rgb2yuv_fsb[BPP_##bit][SS_420] = rgb2yuv_fsb_420p##bit##_c</cpp:value></cpp:define>




<expr_stmt><expr><call><name>init_rgb2yuv_fsb_fn</name><argument_list>( <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_rgb2yuv_fsb_fn</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_rgb2yuv_fsb_fn</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_yuv2yuv_fn</name><parameter_list>(<parameter><type><name>idx1</name></type></parameter>, <parameter><type><name>bit1</name></type></parameter>, <parameter><type><name>bit2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dsp-&gt;yuv2yuv[idx1][BPP_##bit2][SS_444] = yuv2yuv_444p##bit1##to##bit2##_c; dsp-&gt;yuv2yuv[idx1][BPP_##bit2][SS_422] = yuv2yuv_422p##bit1##to##bit2##_c; dsp-&gt;yuv2yuv[idx1][BPP_##bit2][SS_420] = yuv2yuv_420p##bit1##to##bit2##_c</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_yuv2yuv_fns</name><parameter_list>(<parameter><type><name>bit1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>init_yuv2yuv_fn(BPP_##bit1, bit1, 8); init_yuv2yuv_fn(BPP_##bit1, bit1, 10); init_yuv2yuv_fn(BPP_##bit1, bit1, 12)</cpp:value></cpp:define>




<expr_stmt><expr><call><name>init_yuv2yuv_fns</name><argument_list>( <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_yuv2yuv_fns</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_yuv2yuv_fns</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>multiply3x3</name></name> <operator>=</operator> <name>multiply3x3_c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_colorspacedsp_x86_init</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
