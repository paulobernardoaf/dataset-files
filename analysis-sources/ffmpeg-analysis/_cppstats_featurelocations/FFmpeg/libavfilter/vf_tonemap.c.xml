<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vf_tonemap.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"colorspace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<enum>enum <name>TonemapAlgorithm</name> <block>{
<decl><name>TONEMAP_NONE</name></decl>,
<decl><name>TONEMAP_LINEAR</name></decl>,
<decl><name>TONEMAP_GAMMA</name></decl>,
<decl><name>TONEMAP_CLIP</name></decl>,
<decl><name>TONEMAP_REINHARD</name></decl>,
<decl><name>TONEMAP_HABLE</name></decl>,
<decl><name>TONEMAP_MOBIUS</name></decl>,
<decl><name>TONEMAP_MAX</name></decl>,
}</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>LumaCoefficients</name></name></type> <name><name>luma_coefficients</name><index>[<expr><name>AVCOL_SPC_NB</name></expr>]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>AVCOL_SPC_FCC</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">0.30</literal></expr>, <expr><literal type="number">0.59</literal></expr>, <expr><literal type="number">0.11</literal></expr> }</block></expr>,
<expr><index>[<expr><name>AVCOL_SPC_BT470BG</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">0.299</literal></expr>, <expr><literal type="number">0.587</literal></expr>, <expr><literal type="number">0.114</literal></expr> }</block></expr>,
<expr><index>[<expr><name>AVCOL_SPC_SMPTE170M</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">0.299</literal></expr>, <expr><literal type="number">0.587</literal></expr>, <expr><literal type="number">0.114</literal></expr> }</block></expr>,
<expr><index>[<expr><name>AVCOL_SPC_BT709</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">0.2126</literal></expr>, <expr><literal type="number">0.7152</literal></expr>, <expr><literal type="number">0.0722</literal></expr> }</block></expr>,
<expr><index>[<expr><name>AVCOL_SPC_SMPTE240M</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">0.212</literal></expr>, <expr><literal type="number">0.701</literal></expr>, <expr><literal type="number">0.087</literal></expr> }</block></expr>,
<expr><index>[<expr><name>AVCOL_SPC_BT2020_NCL</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">0.2627</literal></expr>, <expr><literal type="number">0.6780</literal></expr>, <expr><literal type="number">0.0593</literal></expr> }</block></expr>,
<expr><index>[<expr><name>AVCOL_SPC_BT2020_CL</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">0.2627</literal></expr>, <expr><literal type="number">0.6780</literal></expr>, <expr><literal type="number">0.0593</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>TonemapContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>TonemapAlgorithm</name></name></type> <name>tonemap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>desat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>peak</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>LumaCoefficients</name></name> <modifier>*</modifier></type><name>coeffs</name></decl>;</decl_stmt>
}</block></struct></type> <name>TonemapContext</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_GBRPF32</name></expr>,
<expr><name>AV_PIX_FMT_GBRAPF32</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TonemapContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>tonemap</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TONEMAP_GAMMA</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>param</name></name> <operator>=</operator> <literal type="number">1.8f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>TONEMAP_REINHARD</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isnan</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>param</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>param</name></name><operator>)</operator> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>param</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>TONEMAP_MOBIUS</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>param</name></name> <operator>=</operator> <literal type="number">0.3f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>param</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>hable</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>a</name> <init>= <expr><literal type="number">0.15f</literal></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><literal type="number">0.50f</literal></expr></init></decl>, <decl><type ref="prev"/><name>c</name> <init>= <expr><literal type="number">0.10f</literal></expr></init></decl>, <decl><type ref="prev"/><name>d</name> <init>= <expr><literal type="number">0.20f</literal></expr></init></decl>, <decl><type ref="prev"/><name>e</name> <init>= <expr><literal type="number">0.02f</literal></expr></init></decl>, <decl><type ref="prev"/><name>f</name> <init>= <expr><literal type="number">0.30f</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>in</name> <operator>*</operator> <operator>(</operator><name>in</name> <operator>*</operator> <name>a</name> <operator>+</operator> <name>b</name> <operator>*</operator> <name>c</name><operator>)</operator> <operator>+</operator> <name>d</name> <operator>*</operator> <name>e</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>in</name> <operator>*</operator> <operator>(</operator><name>in</name> <operator>*</operator> <name>a</name> <operator>+</operator> <name>b</name><operator>)</operator> <operator>+</operator> <name>d</name> <operator>*</operator> <name>f</name><operator>)</operator> <operator>-</operator> <name>e</name> <operator>/</operator> <name>f</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>mobius</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>peak</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>in</name> <operator>&lt;=</operator> <name>j</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>in</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>-</operator><name>j</name> <operator>*</operator> <name>j</name> <operator>*</operator> <operator>(</operator><name>peak</name> <operator>-</operator> <literal type="number">1.0f</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>j</name> <operator>*</operator> <name>j</name> <operator>-</operator> <literal type="number">2.0f</literal> <operator>*</operator> <name>j</name> <operator>+</operator> <name>peak</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>j</name> <operator>*</operator> <name>j</name> <operator>-</operator> <literal type="number">2.0f</literal> <operator>*</operator> <name>j</name> <operator>*</operator> <name>peak</name> <operator>+</operator> <name>peak</name><operator>)</operator> <operator>/</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>peak</name> <operator>-</operator> <literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">1e-6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>b</name> <operator>*</operator> <name>b</name> <operator>+</operator> <literal type="number">2.0f</literal> <operator>*</operator> <name>b</name> <operator>*</operator> <name>j</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>j</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>b</name> <operator>-</operator> <name>a</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>in</name> <operator>+</operator> <name>a</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>in</name> <operator>+</operator> <name>b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIX</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x) * (1 - (a)) + (y) * (a)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>tonemap</name><parameter_list>(<parameter><decl><type><name>TonemapContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>peak</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>r_in</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>float</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>step</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>b_in</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>float</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>step</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>g_in</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>float</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>step</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>r_out</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>step</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>b_out</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>step</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>g_out</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>step</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>sig</name></decl>, <decl><type ref="prev"/><name>sig_orig</name></decl>;</decl_stmt>


<expr_stmt><expr><operator>*</operator><name>r_out</name> <operator>=</operator> <operator>*</operator><name>r_in</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>b_out</name> <operator>=</operator> <operator>*</operator><name>b_in</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>g_out</name> <operator>=</operator> <operator>*</operator><name>g_in</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>desat</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>luma</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>coeffs</name><operator>-&gt;</operator><name>cr</name></name> <operator>*</operator> <operator>*</operator><name>r_in</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>coeffs</name><operator>-&gt;</operator><name>cg</name></name> <operator>*</operator> <operator>*</operator><name>g_in</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>coeffs</name><operator>-&gt;</operator><name>cb</name></name> <operator>*</operator> <operator>*</operator><name>b_in</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>overbright</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>luma</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>desat</name></name></expr></argument>, <argument><expr><literal type="number">1e-6</literal></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>luma</name></expr></argument>, <argument><expr><literal type="number">1e-6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>r_out</name> <operator>=</operator> <call><name>MIX</name><argument_list>(<argument><expr><operator>*</operator><name>r_in</name></expr></argument>, <argument><expr><name>luma</name></expr></argument>, <argument><expr><name>overbright</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>g_out</name> <operator>=</operator> <call><name>MIX</name><argument_list>(<argument><expr><operator>*</operator><name>g_in</name></expr></argument>, <argument><expr><name>luma</name></expr></argument>, <argument><expr><name>overbright</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>b_out</name> <operator>=</operator> <call><name>MIX</name><argument_list>(<argument><expr><operator>*</operator><name>b_in</name></expr></argument>, <argument><expr><name>luma</name></expr></argument>, <argument><expr><name>overbright</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>sig</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><call><name>FFMAX3</name><argument_list>(<argument><expr><operator>*</operator><name>r_out</name></expr></argument>, <argument><expr><operator>*</operator><name>g_out</name></expr></argument>, <argument><expr><operator>*</operator><name>b_out</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1e-6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sig_orig</name> <operator>=</operator> <name>sig</name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>tonemap</name></name></expr>)</condition> <block>{<block_content>
<default>default:</default>
<case>case <expr><name>TONEMAP_NONE</name></expr>:</case>

<break>break;</break>
<case>case <expr><name>TONEMAP_LINEAR</name></expr>:</case>
<expr_stmt><expr><name>sig</name> <operator>=</operator> <name>sig</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>param</name></name> <operator>/</operator> <name>peak</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TONEMAP_GAMMA</name></expr>:</case>
<expr_stmt><expr><name>sig</name> <operator>=</operator> <ternary><condition><expr><name>sig</name> <operator>&gt;</operator> <literal type="number">0.05f</literal></expr> ?</condition><then> <expr><call><name>pow</name><argument_list>(<argument><expr><name>sig</name> <operator>/</operator> <name>peak</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><name>sig</name> <operator>*</operator> <call><name>pow</name><argument_list>(<argument><expr><literal type="number">0.05f</literal> <operator>/</operator> <name>peak</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">0.05f</literal></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TONEMAP_CLIP</name></expr>:</case>
<expr_stmt><expr><name>sig</name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><name>sig</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>param</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TONEMAP_HABLE</name></expr>:</case>
<expr_stmt><expr><name>sig</name> <operator>=</operator> <call><name>hable</name><argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>hable</name><argument_list>(<argument><expr><name>peak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TONEMAP_REINHARD</name></expr>:</case>
<expr_stmt><expr><name>sig</name> <operator>=</operator> <name>sig</name> <operator>/</operator> <operator>(</operator><name>sig</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>param</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>peak</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>param</name></name><operator>)</operator> <operator>/</operator> <name>peak</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TONEMAP_MOBIUS</name></expr>:</case>
<expr_stmt><expr><name>sig</name> <operator>=</operator> <call><name>mobius</name><argument_list>(<argument><expr><name>sig</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>param</name></name></expr></argument>, <argument><expr><name>peak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>



<expr_stmt><expr><operator>*</operator><name>r_out</name> <operator>*=</operator> <name>sig</name> <operator>/</operator> <name>sig_orig</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>g_out</name> <operator>*=</operator> <name>sig</name> <operator>/</operator> <name>sig_orig</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>b_out</name> <operator>*=</operator> <name>sig</name> <operator>/</operator> <name>sig_orig</name></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>ThreadData</name> <block>{
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl>, <modifier>*</modifier><name>out</name>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>peak</name></decl>;</decl_stmt>
}</block></struct></type> <name>ThreadData</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tonemap_slice</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TonemapContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ThreadData</name> <modifier>*</modifier></type><name>td</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>in</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>out</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>desc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slice_start</name> <init>= <expr><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <name>jobnr</name><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slice_end</name> <init>= <expr><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>peak</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>peak</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>slice_start</name></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>slice_end</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tonemap</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>peak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>link</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TonemapContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ThreadData</name></type> <name>td</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>odesc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>peak</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>peak</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name> <operator>||</operator> <operator>!</operator><name>odesc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_BUG</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>==</operator> <name>AVCOL_TRC_UNSPECIFIED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Untagged transfer, assuming linear light\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>=</operator> <name>AVCOL_TRC_LINEAR</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>!=</operator> <name>AVCOL_TRC_LINEAR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Tonemapping works on linear light only\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>peak</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>peak</name> <operator>=</operator> <call><name>ff_determine_signal_peak</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Computed signal peak: %f\n"</literal></expr></argument>, <argument><expr><name>peak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coeffs</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>luma_coefficients</name><index>[<expr><name><name>in</name><operator>-&gt;</operator><name>colorspace</name></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>desat</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>==</operator> <name>AVCOL_SPC_UNSPECIFIED</name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>coeffs</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>==</operator> <name>AVCOL_SPC_UNSPECIFIED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Missing color space information, "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>coeffs</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unsupported color space '%s', "</literal></expr></argument>,
<argument><expr><call><name>av_color_space_name</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>colorspace</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"desaturation is disabled\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>desat</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>td</name><operator>.</operator><name>out</name></name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td</name><operator>.</operator><name>in</name></name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td</name><operator>.</operator><name>desc</name></name> <operator>=</operator> <name>desc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td</name><operator>.</operator><name>peak</name></name> <operator>=</operator> <name>peak</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tonemap_slice</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>td</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><call><name>ff_filter_get_nb_threads</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_ALPHA</name> <operator>&amp;&amp;</operator> <name><name>odesc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_ALPHA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_image_copy_plane</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>odesc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_ALPHA</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>AV_WN32</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <name><name>odesc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>step</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>av_float2int</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_update_hdr_metadata</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>peak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(TonemapContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>tonemap_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"tonemap"</literal></expr>, <expr><literal type="string">"tonemap algorithm selection"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>tonemap</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TONEMAP_NONE</name></expr>}</block></expr>, <expr><name>TONEMAP_NONE</name></expr>, <expr><name>TONEMAP_MAX</name> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"tonemap"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"none"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TONEMAP_NONE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"tonemap"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"linear"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TONEMAP_LINEAR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"tonemap"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"gamma"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TONEMAP_GAMMA</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"tonemap"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"clip"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TONEMAP_CLIP</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"tonemap"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"reinhard"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TONEMAP_REINHARD</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"tonemap"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"hable"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TONEMAP_HABLE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"tonemap"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"mobius"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TONEMAP_MOBIUS</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"tonemap"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"param"</literal></expr>, <expr><literal type="string">"tonemap parameter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <name>NAN</name></expr>}</block></expr>, <expr><name>DBL_MIN</name></expr>, <expr><name>DBL_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"desat"</literal></expr>, <expr><literal type="string">"desaturation strength"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>desat</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">2</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DBL_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"peak"</literal></expr>, <expr><literal type="string">"signal peak override"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>peak</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DBL_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>tonemap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>tonemap_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>tonemap_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_tonemap</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"tonemap"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Conversion to/from different dynamic ranges."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TonemapContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>tonemap_class</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>tonemap_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>tonemap_outputs</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SLICE_THREADS</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
