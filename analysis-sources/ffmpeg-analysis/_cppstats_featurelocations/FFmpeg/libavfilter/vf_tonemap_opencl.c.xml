<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vf_tonemap_opencl.c">
















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opencl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opencl_source.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"colorspace.h"</cpp:file></cpp:include>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DETECTION_FRAMES</name></cpp:macro> <cpp:value>63</cpp:value></cpp:define>

<enum>enum <name>TonemapAlgorithm</name> <block>{
<decl><name>TONEMAP_NONE</name></decl>,
<decl><name>TONEMAP_LINEAR</name></decl>,
<decl><name>TONEMAP_GAMMA</name></decl>,
<decl><name>TONEMAP_CLIP</name></decl>,
<decl><name>TONEMAP_REINHARD</name></decl>,
<decl><name>TONEMAP_HABLE</name></decl>,
<decl><name>TONEMAP_MOBIUS</name></decl>,
<decl><name>TONEMAP_MAX</name></decl>,
}</block>;</enum>

<typedef>typedef <type><struct>struct <name>TonemapOpenCLContext</name> <block>{
<decl_stmt><decl><type><name>OpenCLFilterContext</name></type> <name>ocf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVColorSpace</name></name></type> <name>colorspace</name></decl>, <name>colorspace_in</name>, <name>colorspace_out</name>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVColorTransferCharacteristic</name></name></type> <name>trc</name></decl>, <name>trc_in</name>, <name>trc_out</name>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVColorPrimaries</name></name></type> <name>primaries</name></decl>, <name>primaries_in</name>, <name>primaries_out</name>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVColorRange</name></name></type> <name>range</name></decl>, <name>range_in</name>, <name>range_out</name>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVChromaLocation</name></name></type> <name>chroma_loc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>TonemapAlgorithm</name></name></type> <name>tonemap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>peak</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>desat_param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>target_peak</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>scene_threshold</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>initialised</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_kernel</name></type> <name>kernel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_command_queue</name></type> <name>command_queue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_mem</name></type> <name>util_mem</name></decl>;</decl_stmt>
}</block></struct></type> <name>TonemapOpenCLContext</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>linearize_funcs</name><index>[<expr><name>AVCOL_TRC_NB</name></expr>]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>AVCOL_TRC_SMPTE2084</name></expr>]</index> <operator>=</operator> <literal type="string">"eotf_st2084"</literal></expr>,
<expr><index>[<expr><name>AVCOL_TRC_ARIB_STD_B67</name></expr>]</index> <operator>=</operator> <literal type="string">"inverse_oetf_hlg"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>delinearize_funcs</name><index>[<expr><name>AVCOL_TRC_NB</name></expr>]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>AVCOL_TRC_BT709</name></expr>]</index> <operator>=</operator> <literal type="string">"inverse_eotf_bt1886"</literal></expr>,
<expr><index>[<expr><name>AVCOL_TRC_BT2020_10</name></expr>]</index> <operator>=</operator> <literal type="string">"inverse_eotf_bt1886"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>PrimaryCoefficients</name></name></type> <name><name>primaries_table</name><index>[<expr><name>AVCOL_PRI_NB</name></expr>]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>AVCOL_PRI_BT709</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">0.640</literal></expr>, <expr><literal type="number">0.330</literal></expr>, <expr><literal type="number">0.300</literal></expr>, <expr><literal type="number">0.600</literal></expr>, <expr><literal type="number">0.150</literal></expr>, <expr><literal type="number">0.060</literal></expr> }</block></expr>,
<expr><index>[<expr><name>AVCOL_PRI_BT2020</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">0.708</literal></expr>, <expr><literal type="number">0.292</literal></expr>, <expr><literal type="number">0.170</literal></expr>, <expr><literal type="number">0.797</literal></expr>, <expr><literal type="number">0.131</literal></expr>, <expr><literal type="number">0.046</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>WhitepointCoefficients</name></name></type> <name><name>whitepoint_table</name><index>[<expr><name>AVCOL_PRI_NB</name></expr>]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>AVCOL_PRI_BT709</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">0.3127</literal></expr>, <expr><literal type="number">0.3290</literal></expr> }</block></expr>,
<expr><index>[<expr><name>AVCOL_PRI_BT2020</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">0.3127</literal></expr>, <expr><literal type="number">0.3290</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>tonemap_func</name><index>[<expr><name>TONEMAP_MAX</name></expr>]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>TONEMAP_NONE</name></expr>]</index> <operator>=</operator> <literal type="string">"direct"</literal></expr>,
<expr><index>[<expr><name>TONEMAP_LINEAR</name></expr>]</index> <operator>=</operator> <literal type="string">"linear"</literal></expr>,
<expr><index>[<expr><name>TONEMAP_GAMMA</name></expr>]</index> <operator>=</operator> <literal type="string">"gamma"</literal></expr>,
<expr><index>[<expr><name>TONEMAP_CLIP</name></expr>]</index> <operator>=</operator> <literal type="string">"clip"</literal></expr>,
<expr><index>[<expr><name>TONEMAP_REINHARD</name></expr>]</index> <operator>=</operator> <literal type="string">"reinhard"</literal></expr>,
<expr><index>[<expr><name>TONEMAP_HABLE</name></expr>]</index> <operator>=</operator> <literal type="string">"hable"</literal></expr>,
<expr><index>[<expr><name>TONEMAP_MOBIUS</name></expr>]</index> <operator>=</operator> <literal type="string">"mobius"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_rgb2rgb_matrix</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVColorPrimaries</name></name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVColorPrimaries</name></name></type> <name>out</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name><name>rgb2rgb</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name><name>rgb2xyz</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>xyz2rgb</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_fill_rgb2xyz_table</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>primaries_table</name><index>[<expr><name>out</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>whitepoint_table</name><index>[<expr><name>out</name></expr>]</index></name></expr></argument>, <argument><expr><name>rgb2xyz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_matrix_invert_3x3</name><argument_list>(<argument><expr><name>rgb2xyz</name></expr></argument>, <argument><expr><name>xyz2rgb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_fill_rgb2xyz_table</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>primaries_table</name><index>[<expr><name>in</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>whitepoint_table</name><index>[<expr><name>in</name></expr>]</index></name></expr></argument>, <argument><expr><name>rgb2xyz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_matrix_mul_3x3</name><argument_list>(<argument><expr><name>rgb2rgb</name></expr></argument>, <argument><expr><name>rgb2xyz</name></expr></argument>, <argument><expr><name>xyz2rgb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPENCL_SOURCE_NB</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name>sdr_avg</name> <init>= <expr><literal type="number">0.25f</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tonemap_opencl_init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TonemapOpenCLContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rgb2rgb_passthrough</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>rgb2rgb</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>rgb2yuv</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>yuv2rgb</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>LumaCoefficients</name></name> <modifier>*</modifier></type><name>luma_src</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>luma_dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVBPrint</name></type> <name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opencl_sources</name><index>[<expr><name>OPENCL_SOURCE_NB</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_AUTOMATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>tonemap</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TONEMAP_GAMMA</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>param</name></name> <operator>=</operator> <literal type="number">1.8f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>TONEMAP_REINHARD</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isnan</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>param</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>param</name></name><operator>)</operator> <operator>/</operator> <name><name>ctx</name><operator>-&gt;</operator><name>param</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>TONEMAP_MOBIUS</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>param</name></name> <operator>=</operator> <literal type="number">0.3f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>param</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>target_peak</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"tone mapping transfer from %s to %s\n"</literal></expr></argument>,
<argument><expr><call><name>av_color_transfer_name</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>trc_in</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>av_color_transfer_name</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>trc_out</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"mapping colorspace from %s to %s\n"</literal></expr></argument>,
<argument><expr><call><name>av_color_space_name</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>colorspace_in</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>av_color_space_name</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>colorspace_out</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"mapping primaries from %s to %s\n"</literal></expr></argument>,
<argument><expr><call><name>av_color_primaries_name</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>primaries_in</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>av_color_primaries_name</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>primaries_out</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"mapping range from %s to %s\n"</literal></expr></argument>,
<argument><expr><call><name>av_color_range_name</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>range_in</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>av_color_range_name</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>range_out</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>trc_out</name></name> <operator>==</operator> <name>AVCOL_TRC_BT709</name> <operator>||</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>trc_out</name></name> <operator>==</operator> <name>AVCOL_TRC_BT2020_10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>trc_in</name></name> <operator>==</operator> <name>AVCOL_TRC_SMPTE2084</name><operator>||</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>trc_in</name></name> <operator>==</operator> <name>AVCOL_TRC_ARIB_STD_B67</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>colorspace_in</name></name> <operator>==</operator> <name>AVCOL_SPC_BT2020_NCL</name> <operator>||</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>colorspace_in</name></name> <operator>==</operator> <name>AVCOL_SPC_BT709</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>primaries_in</name></name> <operator>==</operator> <name>AVCOL_PRI_BT2020</name> <operator>||</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>primaries_in</name></name> <operator>==</operator> <name>AVCOL_PRI_BT709</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="string">"__constant const float tone_param = %.4ff;\n"</literal></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="string">"__constant const float desat_param = %.4ff;\n"</literal></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>desat_param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="string">"__constant const float target_peak = %.4ff;\n"</literal></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>target_peak</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="string">"__constant const float sdr_avg = %.4ff;\n"</literal></expr></argument>, <argument><expr><name>sdr_avg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="string">"__constant const float scene_threshold = %.4ff;\n"</literal></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>scene_threshold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="string">"#define TONE_FUNC %s\n"</literal></expr></argument>, <argument><expr><name><name>tonemap_func</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>tonemap</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="string">"#define DETECTION_FRAMES %d\n"</literal></expr></argument>, <argument><expr><name>DETECTION_FRAMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>primaries_out</name></name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>primaries_in</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>get_rgb2rgb_matrix</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>primaries_in</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>primaries_out</name></name></expr></argument>, <argument><expr><name>rgb2rgb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rgb2rgb_passthrough</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>range_in</name></name> <operator>==</operator> <name>AVCOL_RANGE_JPEG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="string">"#define FULL_RANGE_IN\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>range_out</name></name> <operator>==</operator> <name>AVCOL_RANGE_JPEG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="string">"#define FULL_RANGE_OUT\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="string">"#define chroma_loc %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>chroma_loc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rgb2rgb_passthrough</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="string">"#define RGB2RGB_PASSTHROUGH\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_opencl_print_const_matrix_3x3</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="string">"rgb2rgb"</literal></expr></argument>, <argument><expr><name>rgb2rgb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name>luma_src</name> <operator>=</operator> <call><name>ff_get_luma_coefficients</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>colorspace_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>luma_src</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unsupported input colorspace %d (%s)\n"</literal></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>colorspace_in</name></name></expr></argument>, <argument><expr><call><name>av_color_space_name</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>colorspace_in</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>luma_dst</name> <operator>=</operator> <call><name>ff_get_luma_coefficients</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>colorspace_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>luma_dst</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unsupported output colorspace %d (%s)\n"</literal></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>colorspace_out</name></name></expr></argument>, <argument><expr><call><name>av_color_space_name</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>colorspace_out</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_fill_rgb2yuv_table</name><argument_list>(<argument><expr><name>luma_dst</name></expr></argument>, <argument><expr><name>rgb2yuv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_opencl_print_const_matrix_3x3</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="string">"yuv_matrix"</literal></expr></argument>, <argument><expr><name>rgb2yuv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_fill_rgb2yuv_table</name><argument_list>(<argument><expr><name>luma_src</name></expr></argument>, <argument><expr><name>rgb2yuv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_matrix_invert_3x3</name><argument_list>(<argument><expr><name>rgb2yuv</name></expr></argument>, <argument><expr><name>yuv2rgb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_opencl_print_const_matrix_3x3</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="string">"rgb_matrix"</literal></expr></argument>, <argument><expr><name>yuv2rgb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="string">"constant float3 luma_src = {%.4ff, %.4ff, %.4ff};\n"</literal></expr></argument>,
<argument><expr><name><name>luma_src</name><operator>-&gt;</operator><name>cr</name></name></expr></argument>, <argument><expr><name><name>luma_src</name><operator>-&gt;</operator><name>cg</name></name></expr></argument>, <argument><expr><name><name>luma_src</name><operator>-&gt;</operator><name>cb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="string">"constant float3 luma_dst = {%.4ff, %.4ff, %.4ff};\n"</literal></expr></argument>,
<argument><expr><name><name>luma_dst</name><operator>-&gt;</operator><name>cr</name></name></expr></argument>, <argument><expr><name><name>luma_dst</name><operator>-&gt;</operator><name>cg</name></name></expr></argument>, <argument><expr><name><name>luma_dst</name><operator>-&gt;</operator><name>cb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="string">"#define linearize %s\n"</literal></expr></argument>, <argument><expr><name><name>linearize_funcs</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>trc_in</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="string">"#define delinearize %s\n"</literal></expr></argument>,
<argument><expr><name><name>delinearize_funcs</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>trc_out</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>trc_in</name></name> <operator>==</operator> <name>AVCOL_TRC_ARIB_STD_B67</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="string">"#define ootf_impl ootf_hlg\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>trc_out</name></name> <operator>==</operator> <name>AVCOL_TRC_ARIB_STD_B67</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="string">"#define inverse_ootf_impl inverse_ootf_hlg\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Generated OpenCL header:\n%s\n"</literal></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opencl_sources</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>header</name><operator>.</operator><name>str</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opencl_sources</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_opencl_source_tonemap</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opencl_sources</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>ff_opencl_source_colorspace_common</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_opencl_filter_load_program</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>opencl_sources</name></expr></argument>, <argument><expr><name>OPENCL_SOURCE_NB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>command_queue</name></name> <operator>=</operator> <call><name>clCreateCommandQueue</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ocf</name><operator>.</operator><name>hwctx</name><operator>-&gt;</operator><name>context</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ocf</name><operator>.</operator><name>hwctx</name><operator>-&gt;</operator><name>device_id</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_FAIL_ON_ERROR</name><argument_list>(<argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Failed to create OpenCL "</literal>
<literal type="string">"command queue %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>kernel</name></name> <operator>=</operator> <call><name>clCreateKernel</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ocf</name><operator>.</operator><name>program</name></name></expr></argument>, <argument><expr><literal type="string">"tonemap"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_FAIL_ON_ERROR</name><argument_list>(<argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Failed to create kernel %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>util_mem</name></name> <operator>=</operator>
<call><name>clCreateBuffer</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ocf</name><operator>.</operator><name>hwctx</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>DETECTION_FRAMES</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>unsigned</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_FAIL_ON_ERROR</name><argument_list>(<argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Failed to create util buffer: %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>initialised</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>util_mem</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clReleaseMemObject</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>util_mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>command_queue</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clReleaseCommandQueue</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>kernel</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clReleaseKernel</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>kernel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tonemap_opencl_config_output</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TonemapOpenCLContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"format not set, use default format NV12\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name>AV_PIX_FMT_P010</name> <operator>&amp;&amp;</operator>
<name><name>s</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name>AV_PIX_FMT_NV12</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unsupported output format,"</literal>
<literal type="string">"only p010/nv12 supported now\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ocf</name><operator>.</operator><name>output_format</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_NONE</name></expr> ?</condition><then> <expr><name>AV_PIX_FMT_NV12</name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>format</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_opencl_filter_config_output</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>launch_kernel</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>cl_kernel</name></type> <name>kernel</name></decl></parameter>,
<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>peak</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>TonemapOpenCLContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name><name>global_work</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name><name>local_work</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CL_SET_KERNEL_ARG</name><argument_list>(<argument><expr><name>kernel</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cl_mem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_SET_KERNEL_ARG</name><argument_list>(<argument><expr><name>kernel</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cl_mem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_SET_KERNEL_ARG</name><argument_list>(<argument><expr><name>kernel</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>cl_mem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_SET_KERNEL_ARG</name><argument_list>(<argument><expr><name>kernel</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>cl_mem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>input</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_SET_KERNEL_ARG</name><argument_list>(<argument><expr><name>kernel</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>cl_mem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>util_mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_SET_KERNEL_ARG</name><argument_list>(<argument><expr><name>kernel</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>cl_float</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>peak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>local_work</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>local_work</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_opencl_filter_work_size_from_image</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>global_work</name></expr></argument>, <argument><expr><name>output</name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clEnqueueNDRangeKernel</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>, <argument><expr><name>kernel</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>global_work</name></expr></argument>, <argument><expr><name>local_work</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_FAIL_ON_ERROR</name><argument_list>(<argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Failed to enqueue kernel: %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>fail</name>:</label>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tonemap_opencl_filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TonemapOpenCLContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>output</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>peak</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>peak</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>input_frames_ctx</name> <init>=
<expr><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>input</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Filter input: %s, %ux%u (%"</literal><name>PRId64</name><literal type="string">").\n"</literal></expr></argument>,
<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>input</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>input</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>output</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>peak</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>peak</name> <operator>=</operator> <call><name>ff_determine_signal_peak</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>trc</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>trc</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>primaries</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>primaries</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>colorspace</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>range</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>range</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>trc_in</name></name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>color_trc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>trc_out</name></name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>color_trc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>colorspace_in</name></name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>colorspace</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>colorspace_out</name></name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>colorspace</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>primaries_in</name></name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>color_primaries</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>primaries_out</name></name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>color_primaries</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>range_in</name></name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>color_range</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>range_out</name></name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>color_range</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>chroma_loc</name></name> <operator>=</operator> <name><name>output</name><operator>-&gt;</operator><name>chroma_location</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>initialised</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>input</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>==</operator> <name>AVCOL_TRC_SMPTE2084</name> <operator>||</operator>
<name><name>input</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>==</operator> <name>AVCOL_TRC_ARIB_STD_B67</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unsupported transfer function characteristic.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input_frames_ctx</name><operator>-&gt;</operator><name>sw_format</name></name> <operator>!=</operator> <name>AV_PIX_FMT_P010</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unsupported format in tonemap_opencl.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>tonemap_opencl_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>input_frames_ctx</name><operator>-&gt;</operator><name>sw_format</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_P010</name></expr>:</case>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>launch_kernel</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>kernel</name></name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>peak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></switch>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clFinish</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_FAIL_ON_ERROR</name><argument_list>(<argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Failed to finish command queue: %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_update_hdr_metadata</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>target_peak</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Tone-mapping output: %s, %ux%u (%"</literal><name>PRId64</name><literal type="string">").\n"</literal></expr></argument>,
<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>output</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>max_total_p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>avg_total_p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>frame_number_p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>peak_detected</name></decl>, <decl><type ref="prev"/><name>avg_detected</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>map_size</name> <init>= <expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>DETECTION_FRAMES</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>unsigned</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>clEnqueueMapBuffer</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>util_mem</name></name></expr></argument>,
<argument><expr><name>CL_TRUE</name></expr></argument>, <argument><expr><name>CL_MAP_READ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>map_size</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>max_total_p</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>DETECTION_FRAMES</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>avg_total_p</name> <operator>=</operator> <name>max_total_p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_number_p</name> <operator>=</operator> <name>avg_total_p</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>peak_detected</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>*</operator><name>max_total_p</name> <operator>/</operator> <operator>(</operator><name>REFERENCE_WHITE</name> <operator>*</operator> <operator>(</operator><operator>*</operator><name>frame_number_p</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>avg_detected</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>*</operator><name>avg_total_p</name> <operator>/</operator> <operator>(</operator><name>REFERENCE_WHITE</name> <operator>*</operator> <operator>(</operator><operator>*</operator><name>frame_number_p</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"peak %f, avg %f will be used for next frame\n"</literal></expr></argument>,
<argument><expr><name>peak_detected</name></expr></argument>, <argument><expr><name>avg_detected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clEnqueueUnmapMemObject</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>util_mem</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>clFinish</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>tonemap_opencl_uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TonemapOpenCLContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>util_mem</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clReleaseMemObject</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>util_mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>kernel</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clReleaseKernel</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>kernel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to release "</literal>
<literal type="string">"kernel: %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>command_queue</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clReleaseCommandQueue</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to release "</literal>
<literal type="string">"command queue: %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_opencl_filter_uninit</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(TonemapOpenCLContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>(AV_OPT_FLAG_FILTERING_PARAM | AV_OPT_FLAG_VIDEO_PARAM)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>tonemap_opencl_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"tonemap"</literal></expr>, <expr><literal type="string">"tonemap algorithm selection"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>tonemap</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TONEMAP_NONE</name></expr>}</block></expr>, <expr><name>TONEMAP_NONE</name></expr>, <expr><name>TONEMAP_MAX</name> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"tonemap"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"none"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TONEMAP_NONE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"tonemap"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"linear"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TONEMAP_LINEAR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"tonemap"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"gamma"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TONEMAP_GAMMA</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"tonemap"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"clip"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TONEMAP_CLIP</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"tonemap"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"reinhard"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TONEMAP_REINHARD</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"tonemap"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"hable"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TONEMAP_HABLE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"tonemap"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"mobius"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TONEMAP_MOBIUS</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"tonemap"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"transfer"</literal></expr>, <expr><literal type="string">"set transfer characteristic"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>trc</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AVCOL_TRC_BT709</name></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transfer"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"t"</literal></expr>, <expr><literal type="string">"set transfer characteristic"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>trc</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AVCOL_TRC_BT709</name></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transfer"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bt709"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AVCOL_TRC_BT709</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transfer"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bt2020"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AVCOL_TRC_BT2020_10</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transfer"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"matrix"</literal></expr>, <expr><literal type="string">"set colorspace matrix"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>colorspace</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"matrix"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"m"</literal></expr>, <expr><literal type="string">"set colorspace matrix"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>colorspace</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"matrix"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bt709"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AVCOL_SPC_BT709</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"matrix"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bt2020"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AVCOL_SPC_BT2020_NCL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"matrix"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"primaries"</literal></expr>, <expr><literal type="string">"set color primaries"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>primaries</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"primaries"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"p"</literal></expr>, <expr><literal type="string">"set color primaries"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>primaries</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"primaries"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bt709"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AVCOL_PRI_BT709</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"primaries"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bt2020"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AVCOL_PRI_BT2020</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"primaries"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"range"</literal></expr>, <expr><literal type="string">"set color range"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"range"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"r"</literal></expr>, <expr><literal type="string">"set color range"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"range"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"tv"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AVCOL_RANGE_MPEG</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"range"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pc"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AVCOL_RANGE_JPEG</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"range"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"limited"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AVCOL_RANGE_MPEG</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"range"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"full"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AVCOL_RANGE_JPEG</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"range"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"format"</literal></expr>, <expr><literal type="string">"output pixel format"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_PIXEL_FMT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>}</block></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"fmt"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"peak"</literal></expr>, <expr><literal type="string">"signal peak override"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>peak</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DBL_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"param"</literal></expr>, <expr><literal type="string">"tonemap parameter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <name>NAN</name></expr>}</block></expr>, <expr><name>DBL_MIN</name></expr>, <expr><name>DBL_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"desat"</literal></expr>, <expr><literal type="string">"desaturation parameter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>desat_param</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">0.5</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DBL_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"threshold"</literal></expr>, <expr><literal type="string">"scene detection threshold"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>scene_threshold</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">0.2</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DBL_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>tonemap_opencl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>tonemap_opencl_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <operator>&amp;</operator><name>tonemap_opencl_filter_frame</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <operator>&amp;</operator><name>ff_opencl_filter_config_input</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>tonemap_opencl_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <operator>&amp;</operator><name>tonemap_opencl_config_output</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_tonemap_opencl</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"tonemap_opencl"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Perform HDR to SDR conversion with tonemapping."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TonemapOpenCLContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>tonemap_opencl_class</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <operator>&amp;</operator><name>ff_opencl_filter_init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <operator>&amp;</operator><name>tonemap_opencl_uninit</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <operator>&amp;</operator><name>ff_opencl_filter_query_formats</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>tonemap_opencl_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>tonemap_opencl_outputs</name></expr>,
<expr><operator>.</operator><name>flags_internal</name> <operator>=</operator> <name>FF_FILTER_FLAG_HWFRAME_AWARE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
