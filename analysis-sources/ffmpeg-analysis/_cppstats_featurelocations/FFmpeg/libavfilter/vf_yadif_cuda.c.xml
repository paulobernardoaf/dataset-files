<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vf_yadif_cuda.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hwcontext_cuda_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cuda_check.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"yadif.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name><name>vf_yadif_cuda_ptx</name><index>[]</index></name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>DeintCUDAContext</name> <block>{
<decl_stmt><decl><type><name>YADIFContext</name></type> <name>yadif</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCUDADeviceContext</name> <modifier>*</modifier></type><name>hwctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>device_ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>input_frames_ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>input_frames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUcontext</name></type> <name>cu_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CUstream</name></type> <name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CUmodule</name></type> <name>cu_module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CUfunction</name></type> <name>cu_func_uchar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CUfunction</name></type> <name>cu_func_uchar2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CUfunction</name></type> <name>cu_func_ushort</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CUfunction</name></type> <name>cu_func_ushort2</name></decl>;</decl_stmt>
}</block></struct></type> <name>DeintCUDAContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIV_UP</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( ((a) + (b) - 1) / (b) )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIGN_UP</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) + (b) - 1) &amp; ~((b) - 1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCKX</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCKY</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_CU</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FF_CUDA_CHECK_DL(ctx, s-&gt;hwctx-&gt;internal-&gt;cuda_dl, x)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>CUresult</name></type> <name>call_kernel</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>CUfunction</name></type> <name>func</name></decl></parameter>,
<parameter><decl><type><name>CUdeviceptr</name></type> <name>prev</name></decl></parameter>, <parameter><decl><type><name>CUdeviceptr</name></type> <name>cur</name></decl></parameter>, <parameter><decl><type><name>CUdeviceptr</name></type> <name>next</name></decl></parameter>,
<parameter><decl><type><name>CUarray_format</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>src_width</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>src_height</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>src_pitch</name></decl></parameter>, 
<parameter><decl><type><name>CUdeviceptr</name></type> <name>dst</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dst_width</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>dst_height</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>dst_pitch</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>parity</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DeintCUDAContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CudaFunctions</name> <modifier>*</modifier></type><name>cu</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>cuda_dl</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CUtexObject</name></type> <name>tex_prev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>tex_cur</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>tex_next</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>skip_spatial_check</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>yadif</name><operator>.</operator><name>mode</name></name><operator>&amp;</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>args</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>&amp;</operator><name>dst</name></expr>, <expr><operator>&amp;</operator><name>tex_prev</name></expr>, <expr><operator>&amp;</operator><name>tex_cur</name></expr>, <expr><operator>&amp;</operator><name>tex_next</name></expr>,
<expr><operator>&amp;</operator><name>dst_width</name></expr>, <expr><operator>&amp;</operator><name>dst_height</name></expr>, <expr><operator>&amp;</operator><name>dst_pitch</name></expr>,
<expr><operator>&amp;</operator><name>src_width</name></expr>, <expr><operator>&amp;</operator><name>src_height</name></expr>, <expr><operator>&amp;</operator><name>parity</name></expr>, <expr><operator>&amp;</operator><name>tff</name></expr>,
<expr><operator>&amp;</operator><name>skip_spatial_check</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUDA_TEXTURE_DESC</name></type> <name>tex_desc</name> <init>= <expr><block>{
<expr><operator>.</operator><name>filterMode</name> <operator>=</operator> <name>CU_TR_FILTER_MODE_POINT</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>CU_TRSF_READ_AS_INTEGER</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUDA_RESOURCE_DESC</name></type> <name>res_desc</name> <init>= <expr><block>{
<expr><operator>.</operator><name>resType</name> <operator>=</operator> <name>CU_RESOURCE_TYPE_PITCH2D</name></expr>,
<expr><operator>.</operator><name><name>res</name><operator>.</operator><name>pitch2D</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>format</name></expr>,
<expr><operator>.</operator><name><name>res</name><operator>.</operator><name>pitch2D</name><operator>.</operator><name>numChannels</name></name> <operator>=</operator> <name>channels</name></expr>,
<expr><operator>.</operator><name><name>res</name><operator>.</operator><name>pitch2D</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>src_width</name></expr>,
<expr><operator>.</operator><name><name>res</name><operator>.</operator><name>pitch2D</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>src_height</name></expr>,
<expr><operator>.</operator><name><name>res</name><operator>.</operator><name>pitch2D</name><operator>.</operator><name>pitchInBytes</name></name> <operator>=</operator> <name>src_pitch</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>res_desc</name><operator>.</operator><name>res</name><operator>.</operator><name>pitch2D</name><operator>.</operator><name>devPtr</name></name> <operator>=</operator> <operator>(</operator><name>CUdeviceptr</name><operator>)</operator><name>prev</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuTexObjectCreate</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>tex_prev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res_desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tex_desc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>res_desc</name><operator>.</operator><name>res</name><operator>.</operator><name>pitch2D</name><operator>.</operator><name>devPtr</name></name> <operator>=</operator> <operator>(</operator><name>CUdeviceptr</name><operator>)</operator><name>cur</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuTexObjectCreate</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>tex_cur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res_desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tex_desc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>res_desc</name><operator>.</operator><name>res</name><operator>.</operator><name>pitch2D</name><operator>.</operator><name>devPtr</name></name> <operator>=</operator> <operator>(</operator><name>CUdeviceptr</name><operator>)</operator><name>next</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuTexObjectCreate</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>tex_next</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res_desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tex_desc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuLaunchKernel</name></name><argument_list>(<argument><expr><name>func</name></expr></argument>,
<argument><expr><call><name>DIV_UP</name><argument_list>(<argument><expr><name>dst_width</name></expr></argument>, <argument><expr><name>BLOCKX</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DIV_UP</name><argument_list>(<argument><expr><name>dst_height</name></expr></argument>, <argument><expr><name>BLOCKY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>BLOCKX</name></expr></argument>, <argument><expr><name>BLOCKY</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>exit</name>:</label>
<if_stmt><if>if <condition>(<expr><name>tex_prev</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuTexObjectDestroy</name></name><argument_list>(<argument><expr><name>tex_prev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tex_cur</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuTexObjectDestroy</name></name><argument_list>(<argument><expr><name>tex_cur</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tex_next</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuTexObjectDestroy</name></name><argument_list>(<argument><expr><name>tex_next</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>parity</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DeintCUDAContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YADIFContext</name> <modifier>*</modifier></type><name>y</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>yadif</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CudaFunctions</name> <modifier>*</modifier></type><name>cu</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>cuda_dl</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CUcontext</name></type> <name>dummy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuCtxPushCurrent</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cu_ctx</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>y</name><operator>-&gt;</operator><name>csp</name><operator>-&gt;</operator><name>nb_components</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>CUfunction</name></type> <name>func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CUarray_format</name></type> <name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pixel_size</name></decl>, <decl><type ref="prev"/><name>channels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVComponentDescriptor</name> <modifier>*</modifier></type><name>comp</name> <init>= <expr><operator>&amp;</operator><name><name>y</name><operator>-&gt;</operator><name>csp</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>comp</name><operator>-&gt;</operator><name>plane</name></name> <operator>&lt;</operator> <name>i</name></expr>)</condition> <block>{<block_content>


<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pixel_size</name> <operator>=</operator> <operator>(</operator><name><name>comp</name><operator>-&gt;</operator><name>depth</name></name> <operator>+</operator> <name><name>comp</name><operator>-&gt;</operator><name>shift</name></name><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>channels</name> <operator>=</operator> <name><name>comp</name><operator>-&gt;</operator><name>step</name></name> <operator>/</operator> <name>pixel_size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pixel_size</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>||</operator> <name>channels</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported pixel format: %s\n"</literal></expr></argument>, <argument><expr><name><name>y</name><operator>-&gt;</operator><name>csp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name>pixel_size</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>func</name> <operator>=</operator> <ternary><condition><expr><name>channels</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>cu_func_uchar</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>cu_func_uchar2</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>CU_AD_FORMAT_UNSIGNED_INT8</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>func</name> <operator>=</operator> <ternary><condition><expr><name>channels</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>cu_func_ushort</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>cu_func_ushort2</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>CU_AD_FORMAT_UNSIGNED_INT16</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported pixel format: %s\n"</literal></expr></argument>, <argument><expr><name><name>y</name><operator>-&gt;</operator><name>csp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>,
<argument><expr><literal type="string">"Deinterlacing plane %d: pixel_size: %d channels: %d\n"</literal></expr></argument>,
<argument><expr><name><name>comp</name><operator>-&gt;</operator><name>plane</name></name></expr></argument>, <argument><expr><name>pixel_size</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_kernel</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>func</name></expr></argument>,
<argument><expr><operator>(</operator><name>CUdeviceptr</name><operator>)</operator><name><name>y</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>CUdeviceptr</name><operator>)</operator><name><name>y</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>CUdeviceptr</name><operator>)</operator><name><name>y</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>format</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>,
<argument><expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>y</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><name><name>y</name><operator>-&gt;</operator><name>csp</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>y</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><name><name>y</name><operator>-&gt;</operator><name>csp</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>y</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>CUdeviceptr</name><operator>)</operator><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><name><name>y</name><operator>-&gt;</operator><name>csp</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><name><name>y</name><operator>-&gt;</operator><name>csp</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <name><name>comp</name><operator>-&gt;</operator><name>step</name></name></expr></argument>,
<argument><expr><name>parity</name></expr></argument>, <argument><expr><name>tff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<label><name>exit</name>:</label>
<expr_stmt><expr><call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuCtxPopCurrent</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>deint_cuda_uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CUcontext</name></type> <name>dummy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DeintCUDAContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YADIFContext</name> <modifier>*</modifier></type><name>y</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>yadif</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>cu_module</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>CudaFunctions</name> <modifier>*</modifier></type><name>cu</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>cuda_dl</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuCtxPushCurrent</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cu_ctx</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuModuleUnload</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cu_module</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuCtxPopCurrent</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>y</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>y</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>y</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>device_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>input_frames_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>input_frames</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>deint_cuda_query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_CUDA</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>out_formats</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>in_formats</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DeintCUDAContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>inlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"A hardware frames reference is "</literal>
<literal type="string">"required to associate the processing device.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>input_frames_ref</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>input_frames_ref</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"A input frames reference create "</literal>
<literal type="string">"failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>input_frames</name></name> <operator>=</operator> <operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>input_frames_ref</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_output</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>output_frames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>link</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DeintCUDAContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YADIFContext</name> <modifier>*</modifier></type><name>y</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>yadif</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CudaFunctions</name> <modifier>*</modifier></type><name>cu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CUcontext</name></type> <name>dummy</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>input_frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>device_ref</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>input_frames</name><operator>-&gt;</operator><name>device_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>device_ref</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"A device reference create "</literal>
<literal type="string">"failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hwctx</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>AVHWDeviceContext</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>device_ref</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><operator>-&gt;</operator><name>hwctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cu_ctx</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>cuda_ctx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>stream</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cu</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>cuda_dl</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name> <operator>=</operator> <call><name>av_hwframe_ctx_alloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>device_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>link</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create HW frame context "</literal>
<literal type="string">"for output.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>output_frames</name> <operator>=</operator> <operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>link</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output_frames</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_CUDA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output_frames</name><operator>-&gt;</operator><name>sw_format</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>input_frames</name><operator>-&gt;</operator><name>sw_format</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output_frames</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output_frames</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output_frames</name><operator>-&gt;</operator><name>initial_pool_size</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_filter_init_hw_frames</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>link</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_hwframe_ctx_init</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to initialise CUDA frame "</literal>
<literal type="string">"context for output: %d\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>time_base</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>time_base</name><operator>.</operator><name>den</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>h</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>y</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>frame_rate</name></name> <operator>=</operator> <macro><name>av_mul_q</name><argument_list>(<argument>ctx-&gt;inputs[<literal type="number">0</literal>]-&gt;frame_rate</argument>,
<argument>(AVRational){<literal type="number">2</literal></argument>, <argument><literal type="number">1</literal>}</argument>)</argument_list></macro></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>link</name><operator>-&gt;</operator><name>w</name></name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>||</operator> <name><name>link</name><operator>-&gt;</operator><name>h</name></name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Video of less than 3 columns or lines is not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>y</name><operator>-&gt;</operator><name>csp</name></name> <operator>=</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>output_frames</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>y</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name>filter</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuCtxPushCurrent</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cu_ctx</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuModuleLoadData</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cu_module</name></name></expr></argument>, <argument><expr><name>vf_yadif_cuda_ptx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuModuleGetFunction</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cu_func_uchar</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cu_module</name></name></expr></argument>, <argument><expr><literal type="string">"yadif_uchar"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuModuleGetFunction</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cu_func_uchar2</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cu_module</name></name></expr></argument>, <argument><expr><literal type="string">"yadif_uchar2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuModuleGetFunction</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cu_func_ushort</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cu_module</name></name></expr></argument>, <argument><expr><literal type="string">"yadif_ushort"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuModuleGetFunction</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cu_func_ushort2</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cu_module</name></name></expr></argument>, <argument><expr><literal type="string">"yadif_ushort2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

<label><name>exit</name>:</label>
<expr_stmt><expr><call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuCtxPopCurrent</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>yadif_cuda_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"yadif_cuda"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>ff_yadif_options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
<expr><operator>.</operator><name>category</name> <operator>=</operator> <name>AV_CLASS_CATEGORY_FILTER</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>deint_cuda_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>ff_yadif_filter_frame</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>deint_cuda_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>request_frame</name> <operator>=</operator> <name>ff_yadif_request_frame</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_output</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_yadif_cuda</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"yadif_cuda"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Deinterlace CUDA frames"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DeintCUDAContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>yadif_cuda_class</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>deint_cuda_uninit</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>deint_cuda_query_formats</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>deint_cuda_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>deint_cuda_outputs</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_INTERNAL</name></expr>,
<expr><operator>.</operator><name>flags_internal</name> <operator>=</operator> <name>FF_FILTER_FLAG_HWFRAME_AWARE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
