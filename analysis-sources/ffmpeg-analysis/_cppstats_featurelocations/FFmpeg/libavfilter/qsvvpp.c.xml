<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\qsvvpp.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hwcontext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hwcontext_qsv.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qsvvpp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_VIDEO_MEMORY</name><parameter_list>(<parameter><type><name>mode</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(mode &amp; (MFX_MEMTYPE_VIDEO_MEMORY_DECODER_TARGET | MFX_MEMTYPE_VIDEO_MEMORY_PROCESSOR_TARGET))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_OPAQUE_MEMORY</name><parameter_list>(<parameter><type><name>mode</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(mode &amp; MFX_MEMTYPE_OPAQUE_FRAME)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_SYSTEM_MEMORY</name><parameter_list>(<parameter><type><name>mode</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(mode &amp; MFX_MEMTYPE_SYSTEM_MEMORY)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>QSVFrame</name> <block>{
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier></type><name>surface</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxFrameSurface1</name></type> <name>surface_internal</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>QSVFrame</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>QSVFrame</name>;</typedef>


<struct>struct <name>QSVVPPContext</name> <block>{
<decl_stmt><decl><type><name>mfxSession</name></type> <name>session</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>filter_frame</name>) <parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>out_sw_format</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mfxVideoParam</name></type> <name>vpp_param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxFrameInfo</name> <modifier>*</modifier></type><name>frame_infos</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>int</name></type> <name>in_mem_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>out_mem_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QSVFrame</name> <modifier>*</modifier></type><name>in_frame_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QSVFrame</name> <modifier>*</modifier></type><name>out_frame_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_surface_ptrs_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_surface_ptrs_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier><modifier>*</modifier></type><name>surface_ptrs_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier><modifier>*</modifier></type><name>surface_ptrs_out</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>mfxExtOpaqueSurfaceAlloc</name></type> <name>opaque_alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxExtBuffer</name> <modifier>*</modifier><modifier>*</modifier></type><name>ext_buffers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_ext_buffers</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mfxHandleType</name></type> <name><name>handle_types</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>MFX_HANDLE_VA_DISPLAY</name></expr>,
<expr><name>MFX_HANDLE_D3D9_DEVICE_MANAGER</name></expr>,
<expr><name>MFX_HANDLE_D3D11_DEVICE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVRational</name></type> <name>default_tb</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">90000</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>mfxStatus</name></type> <name>frame_alloc</name><parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxFrameAllocRequest</name> <modifier>*</modifier></type><name>req</name></decl></parameter>,
<parameter><decl><type><name>mfxFrameAllocResponse</name> <modifier>*</modifier></type><name>resp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>QSVVPPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>pthis</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>Type</name></name> <operator>&amp;</operator> <name>MFX_MEMTYPE_VIDEO_MEMORY_PROCESSOR_TARGET</name><operator>)</operator> <operator>||</operator>
<operator>!</operator><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>Type</name></name> <operator>&amp;</operator> <operator>(</operator><name>MFX_MEMTYPE_FROM_VPPIN</name> <operator>|</operator> <name>MFX_MEMTYPE_FROM_VPPOUT</name><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>!</operator><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>Type</name></name> <operator>&amp;</operator> <name>MFX_MEMTYPE_EXTERNAL_FRAME</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>MFX_ERR_UNSUPPORTED</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>Type</name></name> <operator>&amp;</operator> <name>MFX_MEMTYPE_FROM_VPPIN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>resp</name><operator>-&gt;</operator><name>mids</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_surface_ptrs_in</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>resp</name><operator>-&gt;</operator><name>mids</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>resp</name><operator>-&gt;</operator><name>mids</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_surface_ptrs_in</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>resp</name><operator>-&gt;</operator><name>mids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>surface_ptrs_in</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>Data</name><operator>.</operator><name>MemId</name></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>resp</name><operator>-&gt;</operator><name>NumFrameActual</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_surface_ptrs_in</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>resp</name><operator>-&gt;</operator><name>mids</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_surface_ptrs_out</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>resp</name><operator>-&gt;</operator><name>mids</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>resp</name><operator>-&gt;</operator><name>mids</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_surface_ptrs_out</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>resp</name><operator>-&gt;</operator><name>mids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>surface_ptrs_out</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>Data</name><operator>.</operator><name>MemId</name></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>resp</name><operator>-&gt;</operator><name>NumFrameActual</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_surface_ptrs_out</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>MFX_ERR_NONE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mfxStatus</name></type> <name>frame_free</name><parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxFrameAllocResponse</name> <modifier>*</modifier></type><name>resp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>resp</name><operator>-&gt;</operator><name>mids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>MFX_ERR_NONE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mfxStatus</name></type> <name>frame_lock</name><parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxMemId</name></type> <name>mid</name></decl></parameter>, <parameter><decl><type><name>mfxFrameData</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>MFX_ERR_UNSUPPORTED</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mfxStatus</name></type> <name>frame_unlock</name><parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxMemId</name></type> <name>mid</name></decl></parameter>, <parameter><decl><type><name>mfxFrameData</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>MFX_ERR_UNSUPPORTED</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mfxStatus</name></type> <name>frame_get_hdl</name><parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxMemId</name></type> <name>mid</name></decl></parameter>, <parameter><decl><type><name>mfxHDL</name> <modifier>*</modifier></type><name>hdl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>hdl</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>
<return>return <expr><name>MFX_ERR_NONE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pix_fmt_to_mfx_fourcc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>format</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_YUV420P</name></expr>:</case>
<return>return <expr><name>MFX_FOURCC_YV12</name></expr>;</return>
<case>case <expr><name>AV_PIX_FMT_NV12</name></expr>:</case>
<return>return <expr><name>MFX_FOURCC_NV12</name></expr>;</return>
<case>case <expr><name>AV_PIX_FMT_YUYV422</name></expr>:</case>
<return>return <expr><name>MFX_FOURCC_YUY2</name></expr>;</return>
<case>case <expr><name>AV_PIX_FMT_BGRA</name></expr>:</case>
<return>return <expr><name>MFX_FOURCC_RGB4</name></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><name>MFX_FOURCC_NV12</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>map_frame_to_surface</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier></type><name>surface</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_NV12</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_P010</name></expr>:</case>
<expr_stmt><expr><name><name>surface</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>surface</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>UV</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_YUV420P</name></expr>:</case>
<expr_stmt><expr><name><name>surface</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>surface</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>U</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>surface</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>V</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_YUYV422</name></expr>:</case>
<expr_stmt><expr><name><name>surface</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>surface</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>U</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>surface</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>V</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB32</name></expr>:</case>
<expr_stmt><expr><name><name>surface</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>B</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>surface</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>G</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>surface</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>R</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>surface</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>A</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><name>MFX_ERR_UNSUPPORTED</name></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>surface</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>Pitch</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>fill_frameinfo_by_link</name><parameter_list>(<parameter><decl><type><name>mfxFrameInfo</name> <modifier>*</modifier></type><name>frameinfo</name></decl></parameter>, <parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>frames_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVQSVFramesContext</name> <modifier>*</modifier></type><name>frames_hwctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>link</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_QSV</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>link</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>frames_ctx</name> <operator>=</operator> <operator>(</operator><name>AVHWFramesContext</name> <operator>*</operator><operator>)</operator><name><name>link</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>frames_hwctx</name> <operator>=</operator> <name><name>frames_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>frameinfo</name> <operator>=</operator> <name><name>frames_hwctx</name><operator>-&gt;</operator><name>surfaces</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>Info</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>pix_fmt</name> <operator>=</operator> <name><name>link</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_BUG</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>frameinfo</name><operator>-&gt;</operator><name>CropX</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frameinfo</name><operator>-&gt;</operator><name>CropY</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frameinfo</name><operator>-&gt;</operator><name>Width</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frameinfo</name><operator>-&gt;</operator><name>Height</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frameinfo</name><operator>-&gt;</operator><name>PicStruct</name></name> <operator>=</operator> <name>MFX_PICSTRUCT_PROGRESSIVE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frameinfo</name><operator>-&gt;</operator><name>FourCC</name></name> <operator>=</operator> <call><name>pix_fmt_to_mfx_fourcc</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frameinfo</name><operator>-&gt;</operator><name>BitDepthLuma</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frameinfo</name><operator>-&gt;</operator><name>BitDepthChroma</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frameinfo</name><operator>-&gt;</operator><name>Shift</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name> <operator>&amp;&amp;</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frameinfo</name><operator>-&gt;</operator><name>ChromaFormat</name></name> <operator>=</operator> <name>MFX_CHROMAFORMAT_YUV420</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frameinfo</name><operator>-&gt;</operator><name>ChromaFormat</name></name> <operator>=</operator> <name>MFX_CHROMAFORMAT_YUV422</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frameinfo</name><operator>-&gt;</operator><name>ChromaFormat</name></name> <operator>=</operator> <name>MFX_CHROMAFORMAT_YUV444</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>frameinfo</name><operator>-&gt;</operator><name>CropW</name></name> <operator>=</operator> <name><name>link</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frameinfo</name><operator>-&gt;</operator><name>CropH</name></name> <operator>=</operator> <name><name>link</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frameinfo</name><operator>-&gt;</operator><name>FrameRateExtN</name></name> <operator>=</operator> <name><name>link</name><operator>-&gt;</operator><name>frame_rate</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frameinfo</name><operator>-&gt;</operator><name>FrameRateExtD</name></name> <operator>=</operator> <name><name>link</name><operator>-&gt;</operator><name>frame_rate</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frameinfo</name><operator>-&gt;</operator><name>AspectRatioW</name></name> <operator>=</operator> <ternary><condition><expr><name><name>link</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr> ?</condition><then> <expr><name><name>link</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frameinfo</name><operator>-&gt;</operator><name>AspectRatioH</name></name> <operator>=</operator> <ternary><condition><expr><name><name>link</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr> ?</condition><then> <expr><name><name>link</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_unused_frames</name><parameter_list>(<parameter><decl><type><name>QSVFrame</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name>list</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>surface</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>list</name><operator>-&gt;</operator><name>surface</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>Locked</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>surface</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>list</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_frame_list</name><parameter_list>(<parameter><decl><type><name>QSVFrame</name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>list</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>QSVFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>

<expr_stmt><expr><name>frame</name> <operator>=</operator> <operator>*</operator><name>list</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>list</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>list</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>QSVFrame</name> <modifier>*</modifier></type><name>get_free_frame</name><parameter_list>(<parameter><decl><type><name>QSVFrame</name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>QSVFrame</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><operator>*</operator><name>list</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>out</name></expr>;</condition> <incr><expr><name>out</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>out</name><operator>-&gt;</operator><name>surface</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>out</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Can't alloc new output frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <operator>*</operator><name>list</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>list</name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>QSVFrame</name> <modifier>*</modifier></type><name>submit_frame</name><parameter_list>(<parameter><decl><type><name>QSVVPPContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>picref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>QSVFrame</name> <modifier>*</modifier></type><name>qsv_frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>clear_unused_frames</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_frame_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>qsv_frame</name> <operator>=</operator> <call><name>get_free_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>in_frame_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>qsv_frame</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_SYSTEM_MEMORY</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_mem_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>picref</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name>AV_PIX_FMT_QSV</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"QSVVPP gets a wrong frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>qsv_frame</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <call><name>av_frame_clone</name><argument_list>(<argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>qsv_frame</name><operator>-&gt;</operator><name>surface</name></name> <operator>=</operator> <operator>(</operator><name>mfxFrameSurface1</name> <operator>*</operator><operator>)</operator><name><name>qsv_frame</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>picref</name><operator>-&gt;</operator><name>height</name></name> <operator>&amp;</operator> <literal type="number">31</literal> <operator>||</operator> <name><name>picref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>qsv_frame</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>,
<argument><expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>qsv_frame</name><operator>-&gt;</operator><name>frame</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>qsv_frame</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>picref</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>qsv_frame</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>picref</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_frame_copy</name><argument_list>(<argument><expr><name><name>qsv_frame</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qsv_frame</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name><name>qsv_frame</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>qsv_frame</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <call><name>av_frame_clone</name><argument_list>(<argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>map_frame_to_surface</name><argument_list>(<argument><expr><name><name>qsv_frame</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>qsv_frame</name><operator>-&gt;</operator><name>surface_internal</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>qsv_frame</name><operator>-&gt;</operator><name>surface</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>qsv_frame</name><operator>-&gt;</operator><name>surface_internal</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>qsv_frame</name><operator>-&gt;</operator><name>surface</name><operator>-&gt;</operator><name>Info</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_infos</name><index>[<expr><call><name>FF_INLINK_IDX</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>qsv_frame</name><operator>-&gt;</operator><name>surface</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>TimeStamp</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>qsv_frame</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>,
<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><name>default_tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>qsv_frame</name><operator>-&gt;</operator><name>surface</name><operator>-&gt;</operator><name>Info</name><operator>.</operator><name>PicStruct</name></name> <operator>=</operator>
<ternary><condition><expr><operator>!</operator><name><name>qsv_frame</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>interlaced_frame</name></name></expr> ?</condition><then> <expr><name>MFX_PICSTRUCT_PROGRESSIVE</name></expr> </then><else>:
<expr><operator>(</operator><ternary><condition><expr><name><name>qsv_frame</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>top_field_first</name></name></expr> ?</condition><then> <expr><name>MFX_PICSTRUCT_FIELD_TFF</name></expr> </then><else>:
<expr><name>MFX_PICSTRUCT_FIELD_BFF</name></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>qsv_frame</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>repeat_pict</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>qsv_frame</name><operator>-&gt;</operator><name>surface</name><operator>-&gt;</operator><name>Info</name><operator>.</operator><name>PicStruct</name></name> <operator>|=</operator> <name>MFX_PICSTRUCT_FIELD_REPEATED</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>qsv_frame</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>repeat_pict</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>qsv_frame</name><operator>-&gt;</operator><name>surface</name><operator>-&gt;</operator><name>Info</name><operator>.</operator><name>PicStruct</name></name> <operator>|=</operator> <name>MFX_PICSTRUCT_FRAME_DOUBLING</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>qsv_frame</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>repeat_pict</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>qsv_frame</name><operator>-&gt;</operator><name>surface</name><operator>-&gt;</operator><name>Info</name><operator>.</operator><name>PicStruct</name></name> <operator>|=</operator> <name>MFX_PICSTRUCT_FRAME_TRIPLING</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>qsv_frame</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>QSVFrame</name> <modifier>*</modifier></type><name>query_frame</name><parameter_list>(<parameter><decl><type><name>QSVVPPContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QSVFrame</name> <modifier>*</modifier></type><name>out_frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>clear_unused_frames</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_frame_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out_frame</name> <operator>=</operator> <call><name>get_free_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>out_frame_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out_frame</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_SYSTEM_MEMORY</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_mem_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>out_frame</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>out_frame</name><operator>-&gt;</operator><name>frame</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_hwframe_get_buffer</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>, <argument><expr><name><name>out_frame</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Can't allocate a surface.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>out_frame</name><operator>-&gt;</operator><name>surface</name></name> <operator>=</operator> <operator>(</operator><name>mfxFrameSurface1</name> <operator>*</operator><operator>)</operator><name><name>out_frame</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><name><name>out_frame</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>,
<argument><expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>out_frame</name><operator>-&gt;</operator><name>frame</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>out_frame</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_frame</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>map_frame_to_surface</name><argument_list>(<argument><expr><name><name>out_frame</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>out_frame</name><operator>-&gt;</operator><name>surface_internal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>out_frame</name><operator>-&gt;</operator><name>surface</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>out_frame</name><operator>-&gt;</operator><name>surface_internal</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>out_frame</name><operator>-&gt;</operator><name>surface</name><operator>-&gt;</operator><name>Info</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>vpp_param</name><operator>.</operator><name>vpp</name><operator>.</operator><name>Out</name></name></expr>;</expr_stmt>

<return>return <expr><name>out_frame</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>init_vpp_session</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>QSVVPPContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVQSVFramesContext</name> <modifier>*</modifier></type><name>in_frames_hwctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVQSVFramesContext</name> <modifier>*</modifier></type><name>out_frames_hwctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>device_ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>device_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVQSVDeviceContext</name> <modifier>*</modifier></type><name>device_hwctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxHDL</name></type> <name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxHandleType</name></type> <name>handle_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxVersion</name></type> <name>ver</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxIMPL</name></type> <name>impl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>inlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>frames_ctx</name> <init>= <expr><operator>(</operator><name>AVHWFramesContext</name> <operator>*</operator><operator>)</operator><name><name>inlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>device_ref</name> <operator>=</operator> <name><name>frames_ctx</name><operator>-&gt;</operator><name>device_ref</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>in_frames_hwctx</name> <operator>=</operator> <name><name>frames_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_mem_mode</name></name> <operator>=</operator> <name><name>in_frames_hwctx</name><operator>-&gt;</operator><name>frame_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>surface_ptrs_in</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>in_frames_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>surface_ptrs_in</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>surface_ptrs_in</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>in_frames_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>surface_ptrs_in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>in_frames_hwctx</name><operator>-&gt;</operator><name>surfaces</name></name> <operator>+</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_surface_ptrs_in</name></name> <operator>=</operator> <name><name>in_frames_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>hw_device_ctx</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>device_ref</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>hw_device_ctx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_mem_mode</name></name> <operator>=</operator> <name>MFX_MEMTYPE_SYSTEM_MEMORY</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No hw context provided.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>device_ctx</name> <operator>=</operator> <operator>(</operator><name>AVHWDeviceContext</name> <operator>*</operator><operator>)</operator><name><name>device_ref</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>device_hwctx</name> <operator>=</operator> <name><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>outlink</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_QSV</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>out_frames_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>out_frames_ref</name> <init>= <expr><call><name>av_hwframe_ctx_alloc</name><argument_list>(<argument><expr><name>device_ref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out_frames_ref</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out_mem_mode</name></name> <operator>=</operator> <ternary><condition><expr><call><name>IS_OPAQUE_MEMORY</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_mem_mode</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then>
<expr><name>MFX_MEMTYPE_OPAQUE_FRAME</name></expr> </then><else>:
<expr><name>MFX_MEMTYPE_VIDEO_MEMORY_DECODER_TARGET</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>out_frames_ctx</name> <operator>=</operator> <operator>(</operator><name>AVHWFramesContext</name> <operator>*</operator><operator>)</operator><name><name>out_frames_ref</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>out_frames_hwctx</name> <operator>=</operator> <name><name>out_frames_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_frames_ctx</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_QSV</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_frames_ctx</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_frames_ctx</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_frames_ctx</name><operator>-&gt;</operator><name>sw_format</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>out_sw_format</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_frames_ctx</name><operator>-&gt;</operator><name>initial_pool_size</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extra_hw_frames</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out_frames_ctx</name><operator>-&gt;</operator><name>initial_pool_size</name></name> <operator>+=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extra_hw_frames</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>out_frames_hwctx</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>out_mem_mode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_hwframe_ctx_init</name><argument_list>(<argument><expr><name>out_frames_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out_frames_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error creating frames_ctx for output pad.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>surface_ptrs_out</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>out_frames_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>surface_ptrs_out</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>surface_ptrs_out</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out_frames_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>out_frames_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>surface_ptrs_out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>out_frames_hwctx</name><operator>-&gt;</operator><name>surfaces</name></name> <operator>+</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_surface_ptrs_out</name></name> <operator>=</operator> <name><name>out_frames_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>outlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name> <operator>=</operator> <name>out_frames_ref</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out_mem_mode</name></name> <operator>=</operator> <name>MFX_MEMTYPE_SYSTEM_MEMORY</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>MFXQueryIMPL</name><argument_list>(<argument><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>impl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>MFX_ERR_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>MFXQueryVersion</name><argument_list>(<argument><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>MFX_ERR_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error querying the session attributes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>handle_types</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>MFXVideoCORE_GetHandle</name><argument_list>(<argument><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><name><name>handle_types</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>MFX_ERR_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>handle_type</name> <operator>=</operator> <name><name>handle_types</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>MFX_ERR_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error getting the session handle\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>MFXInit</name><argument_list>(<argument><expr><name>impl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ver</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>MFX_ERR_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error initializing a session for scaling\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>handle</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>MFXVideoCORE_SetHandle</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><name>handle_type</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>MFX_ERR_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>QSV_RUNTIME_VERSION_ATLEAST</name><argument_list>(<argument><expr><name>ver</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>MFXJoinSession</name><argument_list>(<argument><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>MFX_ERR_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_OPAQUE_MEMORY</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_mem_mode</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IS_OPAQUE_MEMORY</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_mem_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>opaque_alloc</name><operator>.</operator><name>In</name><operator>.</operator><name>Surfaces</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>surface_ptrs_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>opaque_alloc</name><operator>.</operator><name>In</name><operator>.</operator><name>NumSurface</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_surface_ptrs_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>opaque_alloc</name><operator>.</operator><name>In</name><operator>.</operator><name>Type</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>in_mem_mode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>opaque_alloc</name><operator>.</operator><name>Out</name><operator>.</operator><name>Surfaces</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>surface_ptrs_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>opaque_alloc</name><operator>.</operator><name>Out</name><operator>.</operator><name>NumSurface</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_surface_ptrs_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>opaque_alloc</name><operator>.</operator><name>Out</name><operator>.</operator><name>Type</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>out_mem_mode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>opaque_alloc</name><operator>.</operator><name>Header</name><operator>.</operator><name>BufferId</name></name> <operator>=</operator> <name>MFX_EXTBUFF_OPAQUE_SURFACE_ALLOCATION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>opaque_alloc</name><operator>.</operator><name>Header</name><operator>.</operator><name>BufferSz</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>opaque_alloc</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_VIDEO_MEMORY</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_mem_mode</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IS_VIDEO_MEMORY</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_mem_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>mfxFrameAllocator</name></type> <name>frame_allocator</name> <init>= <expr><block>{
<expr><operator>.</operator><name>pthis</name> <operator>=</operator> <name>s</name></expr>,
<expr><operator>.</operator><name>Alloc</name> <operator>=</operator> <name>frame_alloc</name></expr>,
<expr><operator>.</operator><name>Lock</name> <operator>=</operator> <name>frame_lock</name></expr>,
<expr><operator>.</operator><name>Unlock</name> <operator>=</operator> <name>frame_unlock</name></expr>,
<expr><operator>.</operator><name>GetHDL</name> <operator>=</operator> <name>frame_get_hdl</name></expr>,
<expr><operator>.</operator><name>Free</name> <operator>=</operator> <name>frame_free</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>MFXVideoCORE_SetFrameAllocator</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frame_allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>MFX_ERR_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_qsvvpp_create</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>QSVVPPContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>vpp</name></decl></parameter>, <parameter><decl><type><name>QSVVPPParam</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QSVVPPContext</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter_frame</name></name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>filter_frame</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>filter_frame</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter_frame</name></name> <operator>=</operator> <name>ff_filter_frame</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out_sw_format</name></name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>out_sw_format</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_vpp_session</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_infos</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>nb_inputs</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>frame_infos</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>frame_infos</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failed</name>;</goto>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>nb_inputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fill_frameinfo_by_link</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame_infos</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>param</name><operator>-&gt;</operator><name>num_crop</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>QSVVPPCrop</name> <modifier>*</modifier></type><name>crop</name> <init>= <expr><name><name>param</name><operator>-&gt;</operator><name>crop</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>crop</name><operator>-&gt;</operator><name>in_idx</name></name> <operator>&gt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>nb_inputs</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failed</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_infos</name><index>[<expr><name><name>crop</name><operator>-&gt;</operator><name>in_idx</name></name></expr>]</index></name><operator>.</operator><name>CropX</name> <operator>=</operator> <name><name>crop</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_infos</name><index>[<expr><name><name>crop</name><operator>-&gt;</operator><name>in_idx</name></name></expr>]</index></name><operator>.</operator><name>CropY</name> <operator>=</operator> <name><name>crop</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_infos</name><index>[<expr><name><name>crop</name><operator>-&gt;</operator><name>in_idx</name></name></expr>]</index></name><operator>.</operator><name>CropW</name> <operator>=</operator> <name><name>crop</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_infos</name><index>[<expr><name><name>crop</name><operator>-&gt;</operator><name>in_idx</name></name></expr>]</index></name><operator>.</operator><name>CropH</name> <operator>=</operator> <name><name>crop</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vpp_param</name><operator>.</operator><name>vpp</name><operator>.</operator><name>In</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_infos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fill_frameinfo_by_link</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>vpp_param</name><operator>.</operator><name>vpp</name><operator>.</operator><name>Out</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Fail to get frame info from link.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failed</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_OPAQUE_MEMORY</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_mem_mode</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IS_OPAQUE_MEMORY</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_mem_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_ext_buffers</name></name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>num_ext_buf</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ext_buffers</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_ext_buffers</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>ext_buffers</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>ext_buffers</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failed</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ext_buffers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mfxExtBuffer</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>opaque_alloc</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>param</name><operator>-&gt;</operator><name>num_ext_buf</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ext_buffers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>ext_buf</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vpp_param</name><operator>.</operator><name>ExtParam</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ext_buffers</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vpp_param</name><operator>.</operator><name>NumExtParam</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_ext_buffers</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vpp_param</name><operator>.</operator><name>NumExtParam</name></name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>num_ext_buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vpp_param</name><operator>.</operator><name>ExtParam</name></name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>ext_buf</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vpp_param</name><operator>.</operator><name>AsyncDepth</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_SYSTEM_MEMORY</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_mem_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vpp_param</name><operator>.</operator><name>IOPattern</name></name> <operator>|=</operator> <name>MFX_IOPATTERN_IN_SYSTEM_MEMORY</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>IS_VIDEO_MEMORY</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_mem_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vpp_param</name><operator>.</operator><name>IOPattern</name></name> <operator>|=</operator> <name>MFX_IOPATTERN_IN_VIDEO_MEMORY</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>IS_OPAQUE_MEMORY</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_mem_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vpp_param</name><operator>.</operator><name>IOPattern</name></name> <operator>|=</operator> <name>MFX_IOPATTERN_IN_OPAQUE_MEMORY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_SYSTEM_MEMORY</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_mem_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vpp_param</name><operator>.</operator><name>IOPattern</name></name> <operator>|=</operator> <name>MFX_IOPATTERN_OUT_SYSTEM_MEMORY</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>IS_VIDEO_MEMORY</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_mem_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vpp_param</name><operator>.</operator><name>IOPattern</name></name> <operator>|=</operator> <name>MFX_IOPATTERN_OUT_VIDEO_MEMORY</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>IS_OPAQUE_MEMORY</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_mem_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vpp_param</name><operator>.</operator><name>IOPattern</name></name> <operator>|=</operator> <name>MFX_IOPATTERN_OUT_OPAQUE_MEMORY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>MFXVideoVPP_Init</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>vpp_param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create a qsvvpp, ret = %d.\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>failed</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>vpp</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>failed</name>:</label>
<expr_stmt><expr><call><name>ff_qsvvpp_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_qsvvpp_free</name><parameter_list>(<parameter><decl><type><name>QSVVPPContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>vpp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>QSVVPPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>*</operator><name>vpp</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>session</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MFXVideoVPP_Close</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MFXClose</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>clear_frame_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>in_frame_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_frame_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>out_frame_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>surface_ptrs_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>surface_ptrs_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ext_buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame_infos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>vpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_qsvvpp_filter_frame</name><parameter_list>(<parameter><decl><type><name>QSVVPPContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>picref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxSyncPoint</name></type> <name>sync</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QSVFrame</name> <modifier>*</modifier></type><name>in_frame</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>out_frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>filter_ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>in_frame</name> <operator>=</operator> <call><name>submit_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>inlink</name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in_frame</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to submit frame on input[%d]\n"</literal></expr></argument>,
<argument><expr><call><name>FF_INLINK_IDX</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><name>out_frame</name> <operator>=</operator> <call><name>query_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>outlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out_frame</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to query an output frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>MFXVideoVPP_RunFrameVPPAsync</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><name><name>in_frame</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>,
<argument><expr><name><name>out_frame</name><operator>-&gt;</operator><name>surface</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>MFX_WRN_DEVICE_BUSY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_usleep</name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>ret</name> <operator>==</operator> <name>MFX_WRN_DEVICE_BUSY</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <name>MFX_ERR_MORE_SURFACE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>MFX_ERR_MORE_DATA</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>MFXVideoCORE_SyncOperation</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><name>sync</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Sync failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>out_frame</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>out_frame</name><operator>-&gt;</operator><name>surface</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>TimeStamp</name></name></expr></argument>,
<argument><expr><name>default_tb</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>filter_ret</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>filter_frame</name></name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>out_frame</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>filter_ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>out_frame</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>filter_ret</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>out_frame</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block> while<condition>(<expr><name>ret</name> <operator>==</operator> <name>MFX_ERR_MORE_SURFACE</name></expr>)</condition>;</do>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
