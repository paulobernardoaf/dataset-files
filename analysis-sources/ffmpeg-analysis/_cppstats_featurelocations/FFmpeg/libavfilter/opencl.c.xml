<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\opencl.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opencl.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>ff_opencl_filter_query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <specifier>static</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_OPENCL</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>formats</name></decl>;</decl_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>formats</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opencl_filter_set_device</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OpenCLFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>device_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>device_ref</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>device_ref</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>device</name></name> <operator>=</operator> <operator>(</operator><name>AVHWDeviceContext</name><operator>*</operator><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>device_ref</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>device</name><operator>-&gt;</operator><name>hwctx</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_opencl_filter_config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OpenCLFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>input_frames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>inlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"OpenCL filtering requires a "</literal>
<literal type="string">"hardware frames context on the input.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>inlink</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>input_frames</name> <operator>=</operator> <operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>inlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>input_frames</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name>AV_PIX_FMT_OPENCL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>opencl_filter_set_device</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>input_frames</name><operator>-&gt;</operator><name>device_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>output_format</name></name> <operator>==</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>output_format</name></name> <operator>=</operator> <name><name>input_frames</name><operator>-&gt;</operator><name>sw_format</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>output_width</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>output_width</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>output_height</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>output_height</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_opencl_filter_config_output</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OpenCLFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>output_frames_ref</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>output_frames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>outlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>device_ref</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>hw_device_ctx</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"OpenCL filtering requires an "</literal>
<literal type="string">"OpenCL device.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>opencl_filter_set_device</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>hw_device_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>output_frames_ref</name> <operator>=</operator> <call><name>av_hwframe_ctx_alloc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>device_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>output_frames_ref</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>output_frames</name> <operator>=</operator> <operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>output_frames_ref</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output_frames</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_OPENCL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output_frames</name><operator>-&gt;</operator><name>sw_format</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>output_format</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output_frames</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>output_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output_frames</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>output_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>av_hwframe_ctx_init</name><argument_list>(<argument><expr><name>output_frames_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to initialise output "</literal>
<literal type="string">"frames: %d.\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name> <operator>=</operator> <name>output_frames_ref</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>output_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>output_height</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output_frames_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_opencl_filter_init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OpenCLFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>output_format</name></name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_opencl_filter_uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OpenCLFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>program</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clReleaseProgram</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>program</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to release "</literal>
<literal type="string">"program: %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>device_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_opencl_filter_load_program</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>program_source_array</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>nb_strings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OpenCLFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>program</name></name> <operator>=</operator> <call><name>clCreateProgramWithSource</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>nb_strings</name></expr></argument>,
<argument><expr><name>program_source_array</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>program</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create program: %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clBuildProgram</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>program</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>device_id</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to build program: %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>==</operator> <name>CL_BUILD_PROGRAM_FAILURE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>log</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>log_length</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>clGetProgramBuildInfo</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>program</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>device_id</name></name></expr></argument>,
<argument><expr><name>CL_PROGRAM_BUILD_LOG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>log_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>log</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>log_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>log</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clGetProgramBuildInfo</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>program</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>device_id</name></name></expr></argument>,
<argument><expr><name>CL_PROGRAM_BUILD_LOG</name></expr></argument>,
<argument><expr><name>log_length</name></expr></argument>, <argument><expr><name>log</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>==</operator> <name>CL_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Build log:\n%s\n"</literal></expr></argument>, <argument><expr><name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>clReleaseProgram</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>program</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>program</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_opencl_filter_load_program_from_file</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>rb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src_const</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>av_fopen_utf8</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>file</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to open program "</literal>
<literal type="string">"source file \"%s\".\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOENT</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>av_reallocp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"#line 1 \"%s\"\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&gt;</operator> <name>len</name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rb</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>pos</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rb</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>ferror</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>rb</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>av_reallocp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>src</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src_const</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_opencl_filter_load_program</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src_const</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_opencl_filter_work_size_from_image</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>work_size</name></decl></parameter>,
<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>block_alignment</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>cl_mem</name></type> <name>image</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_mem_object_type</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name>AV_PIX_FMT_OPENCL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid frame format %s, "</literal>
<literal type="string">"opencl required.\n"</literal></expr></argument>, <argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>image</name> <operator>=</operator> <operator>(</operator><name>cl_mem</name><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>image</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Plane %d required but not set.\n"</literal></expr></argument>,
<argument><expr><name>plane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clGetMemObjectInfo</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>CL_MEM_TYPE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to query object type of "</literal>
<literal type="string">"plane %d: %d.\n"</literal></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>CL_MEM_OBJECT_IMAGE2D</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Plane %d is not a 2D image.\n"</literal></expr></argument>,
<argument><expr><name>plane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clGetImageInfo</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>CL_IMAGE_WIDTH</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>&amp;</operator><name>width</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to query plane %d width: %d.\n"</literal></expr></argument>,
<argument><expr><name>plane</name></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clGetImageInfo</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>CL_IMAGE_HEIGHT</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>&amp;</operator><name>height</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to query plane %d height: %d.\n"</literal></expr></argument>,
<argument><expr><name>plane</name></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>block_alignment</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>block_alignment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><name>block_alignment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>work_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>work_size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_opencl_print_const_matrix_3x3</name><parameter_list>(<parameter><decl><type><name>AVBPrint</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name_str</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name><name>mat</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"__constant float %s[9] = {\n"</literal></expr></argument>, <argument><expr><name>name_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" %.5ff,"</literal></expr></argument>, <argument><expr><name><name>mat</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"};\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>cl_ulong</name></type> <name>ff_opencl_get_event_time</name><parameter_list>(<parameter><decl><type><name>cl_event</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cl_ulong</name></type> <name>time_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_ulong</name></type> <name>time_end</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>clGetEventProfilingInfo</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>CL_PROFILING_COMMAND_START</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>time_start</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>time_start</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clGetEventProfilingInfo</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>CL_PROFILING_COMMAND_END</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>time_end</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>time_end</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>time_end</name> <operator>-</operator> <name>time_start</name></expr>;</return>
</block_content>}</block></function>
</unit>
