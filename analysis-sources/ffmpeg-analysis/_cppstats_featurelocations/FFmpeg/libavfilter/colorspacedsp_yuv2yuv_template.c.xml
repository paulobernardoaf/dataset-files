<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\colorspacedsp_yuv2yuv_template.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>opixel</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>opixel</name></cpp:macro> <cpp:value>pixel</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ipixel</name></cpp:undef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>IN_BIT_DEPTH</name> <operator>==</operator> <literal type="number">8</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ipixel</name></cpp:macro> <cpp:value>uint8_t</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ipixel</name></cpp:macro> <cpp:value>uint16_t</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>fn</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>fn2</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>fn3</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fn3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a##_##d##p##b##to##c##_c</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fn2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fn3(a,b,c,d)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fn</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fn2(a, IN_BIT_DEPTH, OUT_BIT_DEPTH, ss)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name> <name>fn</name></type>(<name>yuv2yuv</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>_dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name><name>dst_stride</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>_src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name><name>src_stride</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name><name>yuv_offset</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>opixel</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>opixel</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ipixel</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>ipixel</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ipixel</name> <modifier>*</modifier></type><name>src0</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>src1</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>src2</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>opixel</name> <modifier>*</modifier></type><name>dst0</name> <init>= <expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst1</name> <init>= <expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst2</name> <init>= <expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sh</name> <init>= <expr><literal type="number">14</literal> <operator>+</operator> <name>IN_BIT_DEPTH</name> <operator>-</operator> <name>OUT_BIT_DEPTH</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>rnd</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>sh</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y_off_in</name> <init>= <expr><name><name>yuv_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y_off_out</name> <init>= <expr><name><name>yuv_offset</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>sh</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>uv_off_in</name> <init>= <expr><literal type="number">128</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>IN_BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>uv_off_out</name> <init>= <expr><name>rnd</name> <operator>+</operator> <operator>(</operator><literal type="number">128</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>OUT_BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal> <operator>+</operator> <name>sh</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cyy</name> <init>= <expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>cyu</name> <init>= <expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>cyv</name> <init>= <expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cuu</name> <init>= <expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>cuv</name> <init>= <expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>cvu</name> <init>= <expr><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>cvv</name> <init>= <expr><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>SS_W</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>SS_H</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y00</name> <init>= <expr><name><name>src0</name><index>[<expr><name>x</name> <operator>&lt;&lt;</operator> <name>SS_W</name></expr>]</index></name> <operator>-</operator> <name>y_off_in</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SS_W</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>y01</name> <init>= <expr><name><name>src0</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>y_off_in</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SS_H</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>y10</name> <init>= <expr><name><name>src0</name><index>[<expr><name><name>src_stride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ipixel</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name> <operator>-</operator> <name>y_off_in</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y11</name> <init>= <expr><name><name>src0</name><index>[<expr><name><name>src_stride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ipixel</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>y_off_in</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><name><name>src1</name><index>[<expr><name>x</name></expr>]</index></name> <operator>-</operator> <name>uv_off_in</name></expr></init></decl>, <decl><type ref="prev"/><name>v</name> <init>= <expr><name><name>src2</name><index>[<expr><name>x</name></expr>]</index></name> <operator>-</operator> <name>uv_off_in</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>uv_val</name> <init>= <expr><name>cyu</name> <operator>*</operator> <name>u</name> <operator>+</operator> <name>cyv</name> <operator>*</operator> <name>v</name> <operator>+</operator> <name>rnd</name> <operator>+</operator> <name>y_off_out</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst0</name><index>[<expr><name>x</name> <operator>&lt;&lt;</operator> <name>SS_W</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><operator>(</operator><name>cyy</name> <operator>*</operator> <name>y00</name> <operator>+</operator> <name>uv_val</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SS_W</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>
<expr_stmt><expr><name><name>dst0</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><operator>(</operator><name>cyy</name> <operator>*</operator> <name>y01</name> <operator>+</operator> <name>uv_val</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SS_H</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>
<expr_stmt><expr><name><name>dst0</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal> <operator>+</operator> <name><name>dst_stride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>opixel</name></expr></argument>)</argument_list></sizeof></expr>]</index></name> <operator>=</operator>
<call><name>av_clip_pixel</name><argument_list>(<argument><expr><operator>(</operator><name>cyy</name> <operator>*</operator> <name>y10</name> <operator>+</operator> <name>uv_val</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst0</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>dst_stride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>opixel</name></expr></argument>)</argument_list></sizeof></expr>]</index></name> <operator>=</operator>
<call><name>av_clip_pixel</name><argument_list>(<argument><expr><operator>(</operator><name>cyy</name> <operator>*</operator> <name>y11</name> <operator>+</operator> <name>uv_val</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>dst1</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><operator>(</operator><name>u</name> <operator>*</operator> <name>cuu</name> <operator>+</operator> <name>v</name> <operator>*</operator> <name>cuv</name> <operator>+</operator> <name>uv_off_out</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst2</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><operator>(</operator><name>u</name> <operator>*</operator> <name>cvu</name> <operator>+</operator> <name>v</name> <operator>*</operator> <name>cvv</name> <operator>+</operator> <name>uv_off_out</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>dst0</name> <operator>+=</operator> <operator>(</operator><name><name>dst_stride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>SS_H</name><operator>)</operator><operator>)</operator> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>opixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>dst1</name> <operator>+=</operator> <name><name>dst_stride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>opixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>dst2</name> <operator>+=</operator> <name><name>dst_stride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>opixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>src0</name> <operator>+=</operator> <operator>(</operator><name><name>src_stride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>SS_H</name><operator>)</operator><operator>)</operator> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ipixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>src1</name> <operator>+=</operator> <name><name>src_stride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ipixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>+=</operator> <name><name>src_stride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ipixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
</unit>
