<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\af_afftdn.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/audio_fifo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/avfft.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filters.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C</name></cpp:macro> <cpp:value>(M_LN10 * 0.1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RATIO</name></cpp:macro> <cpp:value>0.98</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RRATIO</name></cpp:macro> <cpp:value>(1.0 - RATIO)</cpp:value></cpp:define>

<enum>enum <name>OutModes</name> <block>{
<decl><name>IN_MODE</name></decl>,
<decl><name>OUT_MODE</name></decl>,
<decl><name>NOISE_MODE</name></decl>,
<decl><name>NB_MODES</name></decl>
}</block>;</enum>

<enum>enum <name>NoiseType</name> <block>{
<decl><name>WHITE_NOISE</name></decl>,
<decl><name>VINYL_NOISE</name></decl>,
<decl><name>SHELLAC_NOISE</name></decl>,
<decl><name>CUSTOM_NOISE</name></decl>,
<decl><name>NB_NOISE</name></decl>
}</block>;</enum>

<typedef>typedef <type><struct>struct <name>DeNoiseChannel</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name><name>band_noise</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>noise_band_auto_var</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>noise_band_sample</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>amt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>band_amt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>band_excit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>gain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>prior</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>prior_band_excit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>clean_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>noisy_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>out_samples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>spread_function</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>abs_var</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>rel_var</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>min_abs_var</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>fft_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>fft</name></decl>, <modifier>*</modifier><name>ifft</name>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>noise_band_norm</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>noise_band_avr</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>noise_band_avi</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>noise_band_var</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>sfm_threshold</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>sfm_alpha</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>sfm_results</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>sfm_fail_flags</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sfm_fail_total</name></decl>;</decl_stmt>
}</block></struct></type> <name>DeNoiseChannel</name>;</typedef>

<typedef>typedef <type><struct>struct <name>AudioFFTDeNoiseContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>noise_reduction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>noise_floor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>noise_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>band_noise_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>residual_floor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>track_noise</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>track_residual</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>output_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>last_residual_floor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>last_noise_floor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>last_noise_reduction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>last_noise_balance</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>block_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>channels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sample_noise</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sample_noise_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sample_noise_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>sample_rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buffer_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fft_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fft_length2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bin_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>window_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sample_advance</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>number_of_bands</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>band_centre</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>bin2band</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>band_alpha</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>band_beta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DeNoiseChannel</name> <modifier>*</modifier></type><name>dnch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>max_gain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>max_var</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>gain_scale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>window_weight</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>floor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>sample_floor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>auto_floor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>noise_band_edge</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>noise_band_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>matrix_a</name><index>[<expr><literal type="number">25</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>vector_b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>matrix_b</name><index>[<expr><literal type="number">75</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>matrix_c</name><index>[<expr><literal type="number">75</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVAudioFifo</name> <modifier>*</modifier></type><name>fifo</name></decl>;</decl_stmt>
}</block></struct></type> <name>AudioFFTDeNoiseContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(AudioFFTDeNoiseContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AF</name></cpp:macro> <cpp:value>AV_OPT_FLAG_AUDIO_PARAM|AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AFR</name></cpp:macro> <cpp:value>AV_OPT_FLAG_AUDIO_PARAM|AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_RUNTIME_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>afftdn_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"nr"</literal></expr>, <expr><literal type="string">"set the noise reduction"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>noise_reduction</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">12</literal></expr>}</block></expr>, <expr><literal type="number">.01</literal></expr>, <expr><literal type="number">97</literal></expr>, <expr><name>AFR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"nf"</literal></expr>, <expr><literal type="string">"set the noise floor"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>noise_floor</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator><operator>-</operator><literal type="number">50</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">80</literal></expr>,<expr><operator>-</operator><literal type="number">20</literal></expr>, <expr><name>AFR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"nt"</literal></expr>, <expr><literal type="string">"set the noise type"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>noise_type</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>WHITE_NOISE</name></expr>}</block></expr>, <expr><name>WHITE_NOISE</name></expr>, <expr><name>NB_NOISE</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>AF</name></expr>, <expr><literal type="string">"type"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"w"</literal></expr>, <expr><literal type="string">"white noise"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>WHITE_NOISE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AF</name></expr>, <expr><literal type="string">"type"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"v"</literal></expr>, <expr><literal type="string">"vinyl noise"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>VINYL_NOISE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AF</name></expr>, <expr><literal type="string">"type"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"shellac noise"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>SHELLAC_NOISE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AF</name></expr>, <expr><literal type="string">"type"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"custom noise"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>CUSTOM_NOISE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AF</name></expr>, <expr><literal type="string">"type"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bn"</literal></expr>, <expr><literal type="string">"set the custom bands noise"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>band_noise_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AF</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rf"</literal></expr>, <expr><literal type="string">"set the residual floor"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>residual_floor</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator><operator>-</operator><literal type="number">38</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">80</literal></expr>,<expr><operator>-</operator><literal type="number">20</literal></expr>, <expr><name>AFR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"tn"</literal></expr>, <expr><literal type="string">"track noise"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>track_noise</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AFR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"tr"</literal></expr>, <expr><literal type="string">"track residual"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>track_residual</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AFR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"om"</literal></expr>, <expr><literal type="string">"set output mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>output_mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>OUT_MODE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_MODES</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>AFR</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"i"</literal></expr>, <expr><literal type="string">"input"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>IN_MODE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AFR</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"o"</literal></expr>, <expr><literal type="string">"output"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>OUT_MODE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AFR</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"n"</literal></expr>, <expr><literal type="string">"noise"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>NOISE_MODE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AFR</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>afftdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_band_noise</name><parameter_list>(<parameter><decl><type><name>AudioFFTDeNoiseContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>band</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>d1</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>, <decl><type ref="prev"/><name>d3</name></decl>;</decl_stmt>

<expr_stmt><expr><name>d1</name> <operator>=</operator> <name>a</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>band_centre</name><index>[<expr><name>band</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d1</name> <operator>=</operator> <literal type="number">10.0</literal> <operator>*</operator> <call><name>log</name><argument_list>(<argument><expr><literal type="number">1.0</literal> <operator>+</operator> <name>d1</name> <operator>*</operator> <name>d1</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>M_LN10</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d2</name> <operator>=</operator> <name>b</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>band_centre</name><index>[<expr><name>band</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d2</name> <operator>=</operator> <literal type="number">10.0</literal> <operator>*</operator> <call><name>log</name><argument_list>(<argument><expr><literal type="number">1.0</literal> <operator>+</operator> <name>d2</name> <operator>*</operator> <name>d2</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>M_LN10</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d3</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>band_centre</name><index>[<expr><name>band</name></expr>]</index></name> <operator>/</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d3</name> <operator>=</operator> <literal type="number">10.0</literal> <operator>*</operator> <call><name>log</name><argument_list>(<argument><expr><literal type="number">1.0</literal> <operator>+</operator> <name>d3</name> <operator>*</operator> <name>d3</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>M_LN10</name></expr>;</expr_stmt>

<return>return <expr><call><name>lrint</name><argument_list>(<argument><expr><operator>-</operator><name>d1</name> <operator>+</operator> <name>d2</name> <operator>-</operator> <name>d3</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>factor</name><parameter_list>(<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><name><name>array</name><index>[<expr><name>j</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>size</name></expr>]</index></name> <operator>/</operator> <name><name>array</name><index>[<expr><name>i</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>size</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>array</name><index>[<expr><name>j</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>size</name></expr>]</index></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>array</name><index>[<expr><name>j</name> <operator>+</operator> <name>k</name> <operator>*</operator> <name>size</name></expr>]</index></name> <operator>-=</operator> <name>d</name> <operator>*</operator> <name><name>array</name><index>[<expr><name>i</name> <operator>+</operator> <name>k</name> <operator>*</operator> <name>size</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>matrix</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>vector</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><name><name>matrix</name><index>[<expr><name>j</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>size</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-=</operator> <name>d</name> <operator>*</operator> <name><name>vector</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name><name>vector</name><index>[<expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>/=</operator> <name><name>matrix</name><index>[<expr><name>size</name> <operator>*</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>size</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><name><name>vector</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>d</name> <operator>-=</operator> <name><name>matrix</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>size</name></expr>]</index></name> <operator>*</operator> <name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>vector</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>d</name> <operator>/</operator> <name><name>matrix</name><index>[<expr><name>i</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>size</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process_get_band_noise</name><parameter_list>(<parameter><decl><type><name>AudioFFTDeNoiseContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>DeNoiseChannel</name> <modifier>*</modifier></type><name>dnch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>band</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>product</name></decl>, <decl><type ref="prev"/><name>sum</name></decl>, <decl><type ref="prev"/><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>band</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>dnch</name><operator>-&gt;</operator><name>band_noise</name><index>[<expr><name>band</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>matrix_b</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>*</operator> <name><name>dnch</name><operator>-&gt;</operator><name>band_noise</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vector_b</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>sum</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>solve</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>matrix_a</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>vector_b</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>(</operator><literal type="number">0.5</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name><operator>)</operator> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>band_centre</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">15.0</literal> <operator>+</operator> <call><name>log</name><argument_list>(<argument><expr><name>f</name> <operator>/</operator> <literal type="number">1.5</literal></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>log</name><argument_list>(<argument><expr><literal type="number">1.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>product</name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>product</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>vector_b</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>product</name> <operator>*=</operator> <name>f</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><call><name>lrint</name><argument_list>(<argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>calculate_sfm</name><parameter_list>(<parameter><decl><type><name>AudioFFTDeNoiseContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>DeNoiseChannel</name> <modifier>*</modifier></type><name>dnch</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>d1</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>, <decl><type ref="prev"/><name>d2</name> <init>= <expr><literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dnch</name><operator>-&gt;</operator><name>noisy_data</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_floor</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>d1</name> <operator>+=</operator> <name><name>dnch</name><operator>-&gt;</operator><name>noisy_data</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d2</name> <operator>*=</operator> <name><name>dnch</name><operator>-&gt;</operator><name>noisy_data</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>d2</name> <operator>&gt;</operator> <literal type="number">1.0E100</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>d2</name> <operator>*=</operator> <literal type="number">1.0E</literal><operator>-</operator><literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>d2</name> <operator>&lt;</operator> <literal type="number">1.0E</literal><operator>-</operator><literal type="number">100</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>d2</name> <operator>*=</operator> <literal type="number">1.0E100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>d1</name> <operator>/=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>sfm_results</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>d1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d2</name> <operator>=</operator> <call><name>log</name><argument_list>(<argument><expr><name>d2</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">230.2585</literal> <operator>*</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d2</name> <operator>/=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d1</name> <operator>=</operator> <call><name>log</name><argument_list>(<argument><expr><name>d1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>sfm_results</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>d1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>sfm_results</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>d1</name> <operator>-</operator> <name>d2</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>sfm_results</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>auto_floor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>sfm_results</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>dnch</name><operator>-&gt;</operator><name>sfm_threshold</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>sfm_results</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>dnch</name><operator>-&gt;</operator><name>sfm_threshold</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>limit_gain</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <literal type="number">1.0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>b</name> <operator>*</operator> <name>a</name> <operator>-</operator> <literal type="number">1.0</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>b</name> <operator>+</operator> <name>a</name> <operator>-</operator> <literal type="number">2.0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <literal type="number">1.0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>b</name> <operator>*</operator> <name>a</name> <operator>-</operator> <literal type="number">2.0</literal> <operator>*</operator> <name>a</name> <operator>+</operator> <literal type="number">1.0</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>b</name> <operator>-</operator> <name>a</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1.0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_frame</name><parameter_list>(<parameter><decl><type><name>AudioFFTDeNoiseContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>DeNoiseChannel</name> <modifier>*</modifier></type><name>dnch</name></decl></parameter>,
<parameter><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>fft_data</name></decl></parameter>,
<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>prior</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>prior_band_excit</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>track_noise</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>d1</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>, <decl><type ref="prev"/><name>d3</name></decl>, <decl><type ref="prev"/><name>gain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>i1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>d1</name> <operator>=</operator> <name><name>fft_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>*</operator> <name><name>fft_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>noisy_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>d1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d2</name> <operator>=</operator> <name>d1</name> <operator>/</operator> <name><name>dnch</name><operator>-&gt;</operator><name>abs_var</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d3</name> <operator>=</operator> <name>RATIO</name> <operator>*</operator> <name><name>prior</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>RRATIO</name> <operator>*</operator> <call><name>fmax</name><argument_list>(<argument><expr><name>d2</name> <operator>-</operator> <literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gain</name> <operator>=</operator> <name>d3</name> <operator>/</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>+</operator> <name>d3</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>gain</name> <operator>*=</operator> <operator>(</operator><name>gain</name> <operator>+</operator> <name>M_PI_4</name> <operator>/</operator> <call><name>fmax</name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><literal type="number">1.0E</literal><operator>-</operator><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prior</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>d2</name> <operator>*</operator> <name>gain</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>clean_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>d1</name> <operator>*</operator> <name>gain</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>gain</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name>gain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>gain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>gain</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>d1</name> <operator>=</operator> <name><name>fft_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>*</operator> <name><name>fft_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <name><name>fft_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>*</operator> <name><name>fft_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>d1</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_floor</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>noisy_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>d1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d2</name> <operator>=</operator> <name>d1</name> <operator>/</operator> <name><name>dnch</name><operator>-&gt;</operator><name>abs_var</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d3</name> <operator>=</operator> <name>RATIO</name> <operator>*</operator> <name><name>prior</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>RRATIO</name> <operator>*</operator> <call><name>fmax</name><argument_list>(<argument><expr><name>d2</name> <operator>-</operator> <literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gain</name> <operator>=</operator> <name>d3</name> <operator>/</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>+</operator> <name>d3</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>gain</name> <operator>*=</operator> <operator>(</operator><name>gain</name> <operator>+</operator> <name>M_PI_4</name> <operator>/</operator> <call><name>fmax</name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><literal type="number">1.0E</literal><operator>-</operator><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prior</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>d2</name> <operator>*</operator> <name>gain</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>clean_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>d1</name> <operator>*</operator> <name>gain</name></expr>;</expr_stmt>
<expr_stmt><expr><name>gain</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name>gain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>gain</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>gain</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>d1</name> <operator>=</operator> <name><name>fft_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>*</operator> <name><name>fft_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>d1</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_floor</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>noisy_data</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name></expr>]</index></name> <operator>=</operator> <name>d1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d2</name> <operator>=</operator> <name>d1</name> <operator>/</operator> <name><name>dnch</name><operator>-&gt;</operator><name>abs_var</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d3</name> <operator>=</operator> <name>RATIO</name> <operator>*</operator> <name><name>prior</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name></expr>]</index></name> <operator>+</operator> <name>RRATIO</name> <operator>*</operator> <call><name>fmax</name><argument_list>(<argument><expr><name>d2</name> <operator>-</operator> <literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gain</name> <operator>=</operator> <name>d3</name> <operator>/</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>+</operator> <name>d3</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>gain</name> <operator>*=</operator> <name>gain</name> <operator>+</operator> <name>M_PI_4</name> <operator>/</operator> <call><name>fmax</name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><literal type="number">1.0E</literal><operator>-</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prior</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name></expr>]</index></name> <operator>=</operator> <name>d2</name> <operator>*</operator> <name>gain</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>clean_data</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name></expr>]</index></name> <operator>=</operator> <name>d1</name> <operator>*</operator> <name>gain</name></expr>;</expr_stmt>
<expr_stmt><expr><name>gain</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name>gain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>gain</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name></expr>]</index></name> <operator>=</operator> <name>gain</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bin_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i1</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>noise_band_count</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>i1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>noise_band_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">1.1</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>noise_band_edge</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i1</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>track_noise</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>i1</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>noise_band_count</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>noise_band_edge</name><index>[<expr><name>i1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>i1</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>noise_band_edge</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>calculate_sfm</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dnch</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>noise_band_sample</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>dnch</name><operator>-&gt;</operator><name>sfm_results</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dnch</name><operator>-&gt;</operator><name>sfm_results</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0.013</literal> <operator>*</operator> <name>m</name> <operator>*</operator> <call><name>fmax</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name><name>dnch</name><operator>-&gt;</operator><name>sfm_results</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">20.53</literal></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>dnch</name><operator>-&gt;</operator><name>sfm_threshold</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <name>i1</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>sum</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>, <decl><type ref="prev"/><name>min</name></decl>, <decl><type ref="prev"/><name>max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>i1</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>min</name> <operator>=</operator> <call><name>log</name><argument_list>(<argument><expr><name><name>dnch</name><operator>-&gt;</operator><name>noise_band_sample</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <name><name>dnch</name><operator>-&gt;</operator><name>noise_band_auto_var</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>min</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>i1</name> <operator>-</operator> <name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>min</name> <operator>=</operator> <literal type="number">3.0E</literal><operator>-</operator><literal type="number">4</literal> <operator>*</operator> <name>i</name> <operator>*</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>min</name> <operator>=</operator> <literal type="number">3.0E</literal><operator>-</operator><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>max</name> <operator>=</operator> <literal type="number">2.0E</literal><operator>-</operator><literal type="number">4</literal> <operator>*</operator> <name>i</name> <operator>*</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>max</name> <operator>=</operator> <literal type="number">2.0E</literal><operator>-</operator><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>track_residual</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_noise_floor</name></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>last_residual_floor</name></name> <operator>+</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>min</name> <operator>*=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>max</name> <operator>*=</operator> <literal type="number">0.75</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_noise_floor</name></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>last_residual_floor</name></name> <operator>+</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>min</name> <operator>*=</operator> <literal type="number">0.4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>max</name> <operator>*=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_noise_floor</name></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>last_residual_floor</name></name> <operator>+</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>min</name> <operator>*=</operator> <literal type="number">0.3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>max</name> <operator>*=</operator> <literal type="number">1.3</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_noise_floor</name></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>last_residual_floor</name></name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>min</name> <operator>*=</operator> <literal type="number">0.2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>max</name> <operator>*=</operator> <literal type="number">1.6</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_noise_floor</name></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>last_residual_floor</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>min</name> <operator>*=</operator> <literal type="number">0.1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>max</name> <operator>*=</operator> <literal type="number">2.0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>min</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>max</name> <operator>*=</operator> <literal type="number">2.5</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>av_clipd</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><operator>-</operator><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>exp</name><argument_list>(<argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>noise_band_auto_var</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <name>sum</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>dnch</name><operator>-&gt;</operator><name>sfm_results</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;=</operator> <name><name>dnch</name><operator>-&gt;</operator><name>sfm_threshold</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>sfm_fail_flags</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_count</name></name> <operator>&amp;</operator> <literal type="number">0x1FF</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>sfm_fail_total</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>number_of_bands</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>band_excit</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>band_amt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>bin_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>band_excit</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>bin2band</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>+=</operator> <name><name>dnch</name><operator>-&gt;</operator><name>clean_data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>number_of_bands</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>band_excit</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>fmax</name><argument_list>(<argument><expr><name><name>dnch</name><operator>-&gt;</operator><name>band_excit</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>band_alpha</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>dnch</name><operator>-&gt;</operator><name>band_excit</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator>
<name><name>s</name><operator>-&gt;</operator><name>band_beta</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>prior_band_excit</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prior_band_excit</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dnch</name><operator>-&gt;</operator><name>band_excit</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>number_of_bands</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>number_of_bands</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>band_amt</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <name><name>dnch</name><operator>-&gt;</operator><name>spread_function</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>*</operator> <name><name>dnch</name><operator>-&gt;</operator><name>band_excit</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>bin_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>amt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dnch</name><operator>-&gt;</operator><name>band_amt</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>bin2band</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>dnch</name><operator>-&gt;</operator><name>amt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>dnch</name><operator>-&gt;</operator><name>abs_var</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>gain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>dnch</name><operator>-&gt;</operator><name>amt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>dnch</name><operator>-&gt;</operator><name>min_abs_var</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>limit</name> <init>= <expr><call><name>sqrt</name><argument_list>(<argument><expr><name><name>dnch</name><operator>-&gt;</operator><name>abs_var</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <name><name>dnch</name><operator>-&gt;</operator><name>amt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>gain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>limit_gain</name><argument_list>(<argument><expr><name><name>dnch</name><operator>-&gt;</operator><name>gain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>gain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>limit_gain</name><argument_list>(<argument><expr><name><name>dnch</name><operator>-&gt;</operator><name>gain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>max_gain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dnch</name><operator>-&gt;</operator><name>amt</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name></expr>]</index></name> <operator>&gt;</operator> <name><name>dnch</name><operator>-&gt;</operator><name>abs_var</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>gain</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>dnch</name><operator>-&gt;</operator><name>amt</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name></expr>]</index></name> <operator>&gt;</operator> <name><name>dnch</name><operator>-&gt;</operator><name>min_abs_var</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>limit</name> <init>= <expr><call><name>sqrt</name><argument_list>(<argument><expr><name><name>dnch</name><operator>-&gt;</operator><name>abs_var</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name></expr>]</index></name> <operator>/</operator> <name><name>dnch</name><operator>-&gt;</operator><name>amt</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>gain</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name></expr>]</index></name> <operator>=</operator> <call><name>limit_gain</name><argument_list>(<argument><expr><name><name>dnch</name><operator>-&gt;</operator><name>gain</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>gain</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name></expr>]</index></name> <operator>=</operator> <call><name>limit_gain</name><argument_list>(<argument><expr><name><name>dnch</name><operator>-&gt;</operator><name>gain</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>max_gain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dnch</name><operator>-&gt;</operator><name>amt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>dnch</name><operator>-&gt;</operator><name>abs_var</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>gain</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>dnch</name><operator>-&gt;</operator><name>amt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>dnch</name><operator>-&gt;</operator><name>min_abs_var</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>limit</name> <init>= <expr><call><name>sqrt</name><argument_list>(<argument><expr><name><name>dnch</name><operator>-&gt;</operator><name>abs_var</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <name><name>dnch</name><operator>-&gt;</operator><name>amt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>gain</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>limit_gain</name><argument_list>(<argument><expr><name><name>dnch</name><operator>-&gt;</operator><name>gain</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>gain</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>limit_gain</name><argument_list>(<argument><expr><name><name>dnch</name><operator>-&gt;</operator><name>gain</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>max_gain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>gain</name> <operator>=</operator> <name><name>dnch</name><operator>-&gt;</operator><name>gain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>clean_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>gain</name> <operator>*</operator> <name>gain</name> <operator>*</operator> <name><name>dnch</name><operator>-&gt;</operator><name>noisy_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fft_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>*=</operator> <name>gain</name></expr>;</expr_stmt>
<expr_stmt><expr><name>gain</name> <operator>=</operator> <name><name>dnch</name><operator>-&gt;</operator><name>gain</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>clean_data</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>gain</name> <operator>*</operator> <name>gain</name> <operator>*</operator> <name><name>dnch</name><operator>-&gt;</operator><name>noisy_data</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fft_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>*=</operator> <name>gain</name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>gain</name> <operator>=</operator> <name><name>dnch</name><operator>-&gt;</operator><name>gain</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>clean_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>gain</name> <operator>*</operator> <name>gain</name> <operator>*</operator> <name><name>dnch</name><operator>-&gt;</operator><name>noisy_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fft_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>*=</operator> <name>gain</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fft_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>*=</operator> <name>gain</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>freq2bark</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><name>x</name> <operator>/</operator> <literal type="number">7500.0</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><literal type="number">13.0</literal> <operator>*</operator> <call><name>atan</name><argument_list>(<argument><expr><literal type="number">7.6E</literal><operator>-</operator><literal type="number">4</literal> <operator>*</operator> <name>x</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3.5</literal> <operator>*</operator> <call><name>atan</name><argument_list>(<argument><expr><name>d</name> <operator>*</operator> <name>d</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_band_centre</name><parameter_list>(<parameter><decl><type><name>AudioFFTDeNoiseContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>band</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>band</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>lrint</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>band_centre</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">1.5</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>band_centre</name><index>[<expr><name>band</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_band_edge</name><parameter_list>(<parameter><decl><type><name>AudioFFTDeNoiseContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>band</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>band</name> <operator>==</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>band_centre</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>*</operator> <literal type="number">1.224745</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>band_centre</name><index>[<expr><name>band</name></expr>]</index></name> <operator>/</operator> <literal type="number">1.224745</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_band_parameters</name><parameter_list>(<parameter><decl><type><name>AudioFFTDeNoiseContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>DeNoiseChannel</name> <modifier>*</modifier></type><name>dnch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>band_noise</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>, <decl><type ref="prev"/><name>d3</name></decl>, <decl><type ref="prev"/><name>d4</name></decl>, <decl><type ref="prev"/><name>d5</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>d5</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>band_noise</name> <operator>=</operator> <call><name>process_get_band_noise</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dnch</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>m</name> <init>= <expr><name>j</name></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <name>j</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d5</name> <operator>=</operator> <name>band_noise</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bin_count</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_length</name></name> <operator>*</operator> <call><name>get_band_centre</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>d2</name> <operator>=</operator> <name>j</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>band_noise</name> <operator>=</operator> <call><name>process_get_band_noise</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dnch</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>d3</name> <operator>=</operator> <operator>(</operator><name>j</name> <operator>-</operator> <name>m</name><operator>)</operator> <operator>/</operator> <name>d2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d4</name> <operator>=</operator> <operator>(</operator><name>m</name> <operator>-</operator> <name>i</name><operator>)</operator> <operator>/</operator> <name>d2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>rel_var</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <call><name>exp</name><argument_list>(<argument><expr><operator>(</operator><name>d5</name> <operator>*</operator> <name>d3</name> <operator>+</operator> <name>band_noise</name> <operator>*</operator> <name>d4</name><operator>)</operator> <operator>*</operator> <name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>rel_var</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name></expr>]</index></name> <operator>=</operator> <call><name>exp</name><argument_list>(<argument><expr><name>band_noise</name> <operator>*</operator> <name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>noise_band_auto_var</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_var</name></name> <operator>*</operator> <call><name>exp</name><argument_list>(<argument><expr><operator>(</operator><call><name>process_get_band_noise</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dnch</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2.0</literal><operator>)</operator> <operator>*</operator> <name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>abs_var</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>fmax</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>max_var</name></name> <operator>*</operator> <name><name>dnch</name><operator>-&gt;</operator><name>rel_var</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>min_abs_var</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>gain_scale</name></name> <operator>*</operator> <name><name>dnch</name><operator>-&gt;</operator><name>abs_var</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read_custom_noise</name><parameter_list>(<parameter><decl><type><name>AudioFFTDeNoiseContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DeNoiseChannel</name> <modifier>*</modifier></type><name>dnch</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dnch</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>arg</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>saveptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name><name>band_noise</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>band_noise_str</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>band_noise_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>arg</name> <operator>=</operator> <call><name>av_strtok</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"| "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>saveptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_sscanf</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>band_noise</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Custom band noise must be integer.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>band_noise</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>band_noise</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">24</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dnch</name><operator>-&gt;</operator><name>band_noise</name></name></expr></argument>, <argument><expr><name>band_noise</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>band_noise</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_parameters</name><parameter_list>(<parameter><decl><type><name>AudioFFTDeNoiseContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_noise_floor</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>noise_floor</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_noise_floor</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>noise_floor</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>track_residual</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_noise_floor</name></name> <operator>=</operator> <call><name>fmaxf</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_noise_floor</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>residual_floor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_var</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>floor</name></name> <operator>*</operator> <call><name>exp</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">100.0</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>last_noise_floor</name></name><operator>)</operator> <operator>*</operator> <name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>track_residual</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_residual_floor</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>residual_floor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_noise_reduction</name></name> <operator>=</operator> <call><name>fmax</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_noise_floor</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>last_residual_floor</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_gain</name></name> <operator>=</operator> <call><name>exp</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_noise_reduction</name></name> <operator>*</operator> <operator>(</operator><literal type="number">0.5</literal> <operator>*</operator> <name>C</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>noise_reduction</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_noise_reduction</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_noise_reduction</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>noise_reduction</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_residual_floor</name></name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_noise_floor</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>last_noise_reduction</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">80</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_gain</name></name> <operator>=</operator> <call><name>exp</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_noise_reduction</name></name> <operator>*</operator> <operator>(</operator><literal type="number">0.5</literal> <operator>*</operator> <name>C</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>gain_scale</name></name> <operator>=</operator> <literal type="number">1.0</literal> <operator>/</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>max_gain</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>max_gain</name></name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>DeNoiseChannel</name> <modifier>*</modifier></type><name>dnch</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dnch</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_band_parameters</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dnch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AudioFFTDeNoiseContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>wscale</name></decl>, <decl><type ref="prev"/><name>sar</name></decl>, <decl><type ref="prev"/><name>sum</name></decl>, <decl><type ref="prev"/><name>sdiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dnch</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>dnch</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>dnch</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sample_advance</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>/</operator> <literal type="number">80</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>window_length</name></name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_advance</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <call><name>ff_clz</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>window_length</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_length</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_length</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bin_count</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>band_centre</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">80</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>band_centre</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><literal type="number">1.5</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>band_centre</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">5.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>band_centre</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>band_centre</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>band_centre</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>band_centre</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">5000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>band_centre</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">50</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>band_centre</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">20</literal><operator>)</operator> <operator>/</operator> <literal type="number">50</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>band_centre</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">15000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>band_centre</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">100</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>band_centre</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">45</literal><operator>)</operator> <operator>/</operator> <literal type="number">100</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>band_centre</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1000</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>band_centre</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">495</literal><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>matrix_a</name><index>[<expr><name>j</name> <operator>+</operator> <name>k</name> <operator>*</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>matrix_a</name><index>[<expr><name>j</name> <operator>+</operator> <name>k</name> <operator>*</operator> <literal type="number">5</literal></expr>]</index></name> <operator>+=</operator> <call><name>pow</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>j</name> <operator>+</operator> <name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>factor</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>matrix_a</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>matrix_b</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>matrix_c</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>window</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>window_length</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bin2band</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bin_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>bin2band</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>window</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>bin2band</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sdiv</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>/</operator> <literal type="number">17640.0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bin2band</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><name>sdiv</name> <operator>*</operator> <call><name>freq2bark</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">0.5</literal> <operator>*</operator> <name>i</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name><operator>)</operator> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>number_of_bands</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bin2band</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>band_alpha</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>number_of_bands</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>band_alpha</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>band_beta</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>number_of_bands</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>band_beta</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>band_alpha</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>band_beta</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>DeNoiseChannel</name> <modifier>*</modifier></type><name>dnch</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dnch</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>noise_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>WHITE_NOISE</name></expr>:</case>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>band_noise</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
<break>break;</break>
<case>case <expr><name>VINYL_NOISE</name></expr>:</case>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>band_noise</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_band_noise</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">50.0</literal></expr></argument>, <argument><expr><literal type="number">500.5</literal></expr></argument>, <argument><expr><literal type="number">2125.0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<break>break;</break>
<case>case <expr><name>SHELLAC_NOISE</name></expr>:</case>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>band_noise</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_band_noise</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">500.0</literal></expr></argument>, <argument><expr><literal type="number">1.0E10</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<break>break;</break>
<case>case <expr><name>CUSTOM_NOISE</name></expr>:</case>
<expr_stmt><expr><call><name>read_custom_noise</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><name>AVERROR_BUG</name></expr>;</return>
</block_content>}</block></switch>


<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>sfm_threshold</name></name> <operator>=</operator> <literal type="number">0.8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>sfm_alpha</name></name> <operator>=</operator> <literal type="number">0.05</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">512</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>sfm_fail_flags</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>sfm_fail_total</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">10.0</literal> <operator>*</operator> <operator>(</operator><literal type="number">1.3</literal> <operator>-</operator> <name><name>dnch</name><operator>-&gt;</operator><name>sfm_threshold</name></name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">512</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>j</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>sfm_fail_flags</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>sfm_fail_total</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>amt</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bin_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>dnch</name><operator>-&gt;</operator><name>amt</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>band_amt</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>number_of_bands</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>dnch</name><operator>-&gt;</operator><name>band_amt</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>band_excit</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>number_of_bands</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>dnch</name><operator>-&gt;</operator><name>band_excit</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>gain</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bin_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>dnch</name><operator>-&gt;</operator><name>gain</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>prior</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bin_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>dnch</name><operator>-&gt;</operator><name>prior</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>prior_band_excit</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>number_of_bands</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>dnch</name><operator>-&gt;</operator><name>prior_band_excit</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>clean_data</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bin_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>dnch</name><operator>-&gt;</operator><name>clean_data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>noisy_data</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bin_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>dnch</name><operator>-&gt;</operator><name>noisy_data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>out_samples</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_length</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>dnch</name><operator>-&gt;</operator><name>out_samples</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>abs_var</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bin_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>dnch</name><operator>-&gt;</operator><name>abs_var</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>rel_var</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bin_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>dnch</name><operator>-&gt;</operator><name>rel_var</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>min_abs_var</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bin_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>dnch</name><operator>-&gt;</operator><name>min_abs_var</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>fft_data</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>dnch</name><operator>-&gt;</operator><name>fft_data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>fft</name></name> <operator>=</operator> <call><name>av_fft_init</name><argument_list>(<argument><expr><call><name>av_log2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>ifft</name></name> <operator>=</operator> <call><name>av_fft_init</name><argument_list>(<argument><expr><call><name>av_log2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>spread_function</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>number_of_bands</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>number_of_bands</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>dnch</name><operator>-&gt;</operator><name>spread_function</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dnch</name><operator>-&gt;</operator><name>amt</name></name> <operator>||</operator>
<operator>!</operator><name><name>dnch</name><operator>-&gt;</operator><name>band_amt</name></name> <operator>||</operator>
<operator>!</operator><name><name>dnch</name><operator>-&gt;</operator><name>band_excit</name></name> <operator>||</operator>
<operator>!</operator><name><name>dnch</name><operator>-&gt;</operator><name>gain</name></name> <operator>||</operator>
<operator>!</operator><name><name>dnch</name><operator>-&gt;</operator><name>prior</name></name> <operator>||</operator>
<operator>!</operator><name><name>dnch</name><operator>-&gt;</operator><name>prior_band_excit</name></name> <operator>||</operator>
<operator>!</operator><name><name>dnch</name><operator>-&gt;</operator><name>clean_data</name></name> <operator>||</operator>
<operator>!</operator><name><name>dnch</name><operator>-&gt;</operator><name>noisy_data</name></name> <operator>||</operator>
<operator>!</operator><name><name>dnch</name><operator>-&gt;</operator><name>out_samples</name></name> <operator>||</operator>
<operator>!</operator><name><name>dnch</name><operator>-&gt;</operator><name>fft_data</name></name> <operator>||</operator>
<operator>!</operator><name><name>dnch</name><operator>-&gt;</operator><name>abs_var</name></name> <operator>||</operator>
<operator>!</operator><name><name>dnch</name><operator>-&gt;</operator><name>rel_var</name></name> <operator>||</operator>
<operator>!</operator><name><name>dnch</name><operator>-&gt;</operator><name>min_abs_var</name></name> <operator>||</operator>
<operator>!</operator><name><name>dnch</name><operator>-&gt;</operator><name>spread_function</name></name> <operator>||</operator>
<operator>!</operator><name><name>dnch</name><operator>-&gt;</operator><name>fft</name></name> <operator>||</operator>
<operator>!</operator><name><name>dnch</name><operator>-&gt;</operator><name>ifft</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>DeNoiseChannel</name> <modifier>*</modifier></type><name>dnch</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dnch</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>prior_band_excit</name> <init>= <expr><name><name>dnch</name><operator>-&gt;</operator><name>prior_band_excit</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>prior</name> <init>= <expr><name><name>dnch</name><operator>-&gt;</operator><name>prior</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>min</name></decl>, <decl><type ref="prev"/><name>max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>p1</name></decl>, <decl><type ref="prev"/><name>p2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><literal type="number">0.1</literal></expr></argument>, <argument><expr><literal type="number">2.5</literal> <operator>/</operator> <name>sdiv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><literal type="number">0.1</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>/</operator> <name>sdiv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>number_of_bands</name></name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>number_of_bands</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>m</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>spread_function</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><name>p2</name></expr></argument>, <argument><expr><name>m</name> <operator>-</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>m</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>spread_function</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>spread_function</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>number_of_bands</name></name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>band_excit</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prior_band_excit</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>band_excit</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>bin2band</name><index>[<expr><name>m</name></expr>]</index></name></expr>]</index></name> <operator>+=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>number_of_bands</name></name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>number_of_bands</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>prior_band_excit</name><index>[<expr><name>m</name></expr>]</index></name> <operator>+=</operator> <name><name>dnch</name><operator>-&gt;</operator><name>spread_function</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>*</operator> <name><name>dnch</name><operator>-&gt;</operator><name>band_excit</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>

<expr_stmt><expr><name>min</name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><literal type="number">0.1</literal></expr></argument>, <argument><expr><literal type="number">2.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><literal type="number">0.1</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>number_of_bands</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <call><name>lrint</name><argument_list>(<argument><expr><literal type="number">12.0</literal> <operator>*</operator> <name>sdiv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>band_excit</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><literal type="number">0.1</literal></expr></argument>, <argument><expr><literal type="number">1.45</literal> <operator>+</operator> <literal type="number">0.1</literal> <operator>*</operator> <name>i</name> <operator>/</operator> <name>sdiv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>band_excit</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><literal type="number">0.1</literal></expr></argument>, <argument><expr><literal type="number">2.5</literal> <operator>-</operator> <literal type="number">0.2</literal> <operator>*</operator> <operator>(</operator><name>i</name> <operator>/</operator> <name>sdiv</name> <operator>-</operator> <literal type="number">14.0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>band_excit</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clipd</name><argument_list>(<argument><expr><name><name>dnch</name><operator>-&gt;</operator><name>band_excit</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>prior</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>RRATIO</name></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer_length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>out_samples</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>number_of_bands</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>number_of_bands</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>spread_function</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>*=</operator> <name><name>dnch</name><operator>-&gt;</operator><name>band_excit</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <name><name>prior_band_excit</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
</block_content>}</block></for>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sar</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_advance</name></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>bin2band</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>j</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>d6</name> <init>= <expr><operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_length</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>d7</name> <init>= <expr><call><name>fmin</name><argument_list>(<argument><expr><literal type="number">0.008</literal> <operator>+</operator> <literal type="number">2.2</literal> <operator>/</operator> <name>d6</name></expr></argument>, <argument><expr><literal type="number">0.03</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>band_alpha</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>exp</name><argument_list>(<argument><expr><operator>-</operator><name>sar</name> <operator>/</operator> <name>d7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>band_beta</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">1.0</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>band_alpha</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bin2band</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>wscale</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">16.0</literal> <operator>/</operator> <operator>(</operator><literal type="number">9.0</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_length</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>window_length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>d10</name> <init>= <expr><call><name>sin</name><argument_list>(<argument><expr><name>i</name> <operator>*</operator> <name>M_PI</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>window_length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>d10</name> <operator>*=</operator> <name>wscale</name> <operator>*</operator> <name>d10</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>window</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>d10</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>d10</name> <operator>*</operator> <name>d10</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>window_weight</name></name> <operator>=</operator> <literal type="number">0.5</literal> <operator>*</operator> <name>sum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>floor</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <literal type="number">48</literal><operator>)</operator> <operator>*</operator> <call><name>exp</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">23.025558369790467</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>window_weight</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sample_floor</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>floor</name></name> <operator>*</operator> <call><name>exp</name><argument_list>(<argument><expr><literal type="number">4.144600506562284</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>auto_floor</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>floor</name></name> <operator>*</operator> <call><name>exp</name><argument_list>(<argument><expr><literal type="number">6.907667510937141</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_parameters</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>noise_band_edge</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_length</name></name> <operator>*</operator> <call><name>get_band_edge</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>noise_band_edge</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_length</name></name> <operator>*</operator> <call><name>get_band_edge</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>noise_band_edge</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <call><name>lrint</name><argument_list>(<argument><expr><literal type="number">1.1</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>noise_band_edge</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>noise_band_edge</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>noise_band_count</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>noise_band_edge</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name></name> <operator>=</operator> <call><name>av_audio_fifo_alloc</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>fifo</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>preprocess</name><parameter_list>(<parameter><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>d1</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>, <decl><type ref="prev"/><name>d3</name></decl>, <decl><type ref="prev"/><name>d4</name></decl>, <decl><type ref="prev"/><name>d5</name></decl>, <decl><type ref="prev"/><name>d6</name></decl>, <decl><type ref="prev"/><name>d7</name></decl>, <decl><type ref="prev"/><name>d8</name></decl>, <decl><type ref="prev"/><name>d9</name></decl>, <decl><type ref="prev"/><name>d10</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name>d5</name> <operator>=</operator> <literal type="number">2.0</literal> <operator>*</operator> <name>M_PI</name> <operator>/</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d8</name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><literal type="number">0.5</literal> <operator>*</operator> <name>d5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d8</name> <operator>=</operator> <operator>-</operator><literal type="number">2.0</literal> <operator>*</operator> <name>d8</name> <operator>*</operator> <name>d8</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d7</name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><name>d5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d9</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>+</operator> <name>d8</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d6</name> <operator>=</operator> <name>d7</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>len</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>/</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name>n</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d2</name> <operator>=</operator> <literal type="number">0.5</literal> <operator>*</operator> <operator>(</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <name><name>in</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>re</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>d1</name> <operator>=</operator> <literal type="number">0.5</literal> <operator>*</operator> <operator>(</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>-</operator> <name><name>in</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>im</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>d4</name> <operator>=</operator> <literal type="number">0.5</literal> <operator>*</operator> <operator>(</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>+</operator> <name><name>in</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>im</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>d3</name> <operator>=</operator> <literal type="number">0.5</literal> <operator>*</operator> <operator>(</operator><name><name>in</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>-</operator> <name><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>re</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name>d2</name> <operator>+</operator> <name>d9</name> <operator>*</operator> <name>d4</name> <operator>+</operator> <name>d6</name> <operator>*</operator> <name>d3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name>d1</name> <operator>+</operator> <name>d9</name> <operator>*</operator> <name>d3</name> <operator>-</operator> <name>d6</name> <operator>*</operator> <name>d4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name>d2</name> <operator>-</operator> <name>d9</name> <operator>*</operator> <name>d4</name> <operator>-</operator> <name>d6</name> <operator>*</operator> <name>d3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <operator>-</operator><name>d1</name> <operator>+</operator> <name>d9</name> <operator>*</operator> <name>d3</name> <operator>-</operator> <name>d6</name> <operator>*</operator> <name>d4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d10</name> <operator>=</operator> <name>d9</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d9</name> <operator>+=</operator> <name>d9</name> <operator>*</operator> <name>d8</name> <operator>-</operator> <name>d6</name> <operator>*</operator> <name>d7</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d6</name> <operator>+=</operator> <name>d6</name> <operator>*</operator> <name>d8</name> <operator>+</operator> <name>d10</name> <operator>*</operator> <name>d7</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>d2</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name>d2</name> <operator>+</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name>d2</name> <operator>-</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>postprocess</name><parameter_list>(<parameter><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>d1</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>, <decl><type ref="prev"/><name>d3</name></decl>, <decl><type ref="prev"/><name>d4</name></decl>, <decl><type ref="prev"/><name>d5</name></decl>, <decl><type ref="prev"/><name>d6</name></decl>, <decl><type ref="prev"/><name>d7</name></decl>, <decl><type ref="prev"/><name>d8</name></decl>, <decl><type ref="prev"/><name>d9</name></decl>, <decl><type ref="prev"/><name>d10</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name>d5</name> <operator>=</operator> <literal type="number">2.0</literal> <operator>*</operator> <name>M_PI</name> <operator>/</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d8</name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><literal type="number">0.5</literal> <operator>*</operator> <name>d5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d8</name> <operator>=</operator> <operator>-</operator><literal type="number">2.0</literal> <operator>*</operator> <name>d8</name> <operator>*</operator> <name>d8</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d7</name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><name>d5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d9</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>+</operator> <name>d8</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d6</name> <operator>=</operator> <name>d7</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>len</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>/</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name>n</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d2</name> <operator>=</operator> <literal type="number">0.5</literal> <operator>*</operator> <operator>(</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <name><name>in</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>re</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>d1</name> <operator>=</operator> <literal type="number">0.5</literal> <operator>*</operator> <operator>(</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>-</operator> <name><name>in</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>im</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>d4</name> <operator>=</operator> <literal type="number">0.5</literal> <operator>*</operator> <operator>(</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>-</operator> <name><name>in</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>re</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>d3</name> <operator>=</operator> <literal type="number">0.5</literal> <operator>*</operator> <operator>(</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>+</operator> <name><name>in</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>im</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name>d2</name> <operator>-</operator> <name>d9</name> <operator>*</operator> <name>d3</name> <operator>-</operator> <name>d6</name> <operator>*</operator> <name>d4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name>d1</name> <operator>+</operator> <name>d9</name> <operator>*</operator> <name>d4</name> <operator>-</operator> <name>d6</name> <operator>*</operator> <name>d3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name>d2</name> <operator>+</operator> <name>d9</name> <operator>*</operator> <name>d3</name> <operator>+</operator> <name>d6</name> <operator>*</operator> <name>d4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <operator>-</operator><name>d1</name> <operator>+</operator> <name>d9</name> <operator>*</operator> <name>d4</name> <operator>-</operator> <name>d6</name> <operator>*</operator> <name>d3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d10</name> <operator>=</operator> <name>d9</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d9</name> <operator>+=</operator> <name>d9</name> <operator>*</operator> <name>d8</name> <operator>-</operator> <name>d6</name> <operator>*</operator> <name>d7</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d6</name> <operator>+=</operator> <name>d6</name> <operator>*</operator> <name>d8</name> <operator>+</operator> <name>d10</name> <operator>*</operator> <name>d7</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>d2</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <literal type="number">0.5</literal> <operator>*</operator> <operator>(</operator><name>d2</name> <operator>+</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <literal type="number">0.5</literal> <operator>*</operator> <operator>(</operator><name>d2</name> <operator>-</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_sample_noise</name><parameter_list>(<parameter><decl><type><name>DeNoiseChannel</name> <modifier>*</modifier></type><name>dnch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>noise_band_norm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>noise_band_avr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>noise_band_avi</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>noise_band_var</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sample_noise_block</name><parameter_list>(<parameter><decl><type><name>AudioFFTDeNoiseContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>DeNoiseChannel</name> <modifier>*</modifier></type><name>dnch</name></decl></parameter>,
<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>mag2</name></decl>, <decl><type ref="prev"/><name>var</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>, <decl><type ref="prev"/><name>avr</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>, <decl><type ref="prev"/><name>avi</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>edge</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>edgemax</name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>window_length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>window</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>window_length</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_fft_permute</name><argument_list>(<argument><expr><name><name>dnch</name><operator>-&gt;</operator><name>fft</name></name></expr></argument>, <argument><expr><name><name>dnch</name><operator>-&gt;</operator><name>fft_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_fft_calc</name><argument_list>(<argument><expr><name><name>dnch</name><operator>-&gt;</operator><name>fft</name></name></expr></argument>, <argument><expr><name><name>dnch</name><operator>-&gt;</operator><name>fft_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>preprocess</name><argument_list>(<argument><expr><name><name>dnch</name><operator>-&gt;</operator><name>fft_data</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>edge</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>noise_band_edge</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>edge</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name>edgemax</name> <operator>=</operator> <call><name>fmin</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>noise_band_edge</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>dnch</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>j</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>edgemax</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>==</operator> <name>j</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>&lt;</operator> <name>edgemax</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;</operator> <name>edge</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>noise_band_norm</name><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>j</name> <operator>-</operator> <name>edge</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>noise_band_avr</name><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>avr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>noise_band_avi</name><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>avi</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>noise_band_var</name><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>var</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>edge</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>noise_band_edge</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>var</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>avr</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>avi</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>avr</name> <operator>+=</operator> <name><name>dnch</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name>avi</name> <operator>+=</operator> <name><name>dnch</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mag2</name> <operator>=</operator> <name><name>dnch</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>*</operator> <name><name>dnch</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator>
<name><name>dnch</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>*</operator> <name><name>dnch</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mag2</name> <operator>=</operator> <call><name>fmax</name><argument_list>(<argument><expr><name>mag2</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sample_floor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>noisy_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>mag2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>var</name> <operator>+=</operator> <name>mag2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>noise_band_norm</name><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>j</name> <operator>-</operator> <name>edge</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>noise_band_avr</name><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>avr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>noise_band_avi</name><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>avi</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>noise_band_var</name><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>var</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>finish_sample_noise</name><parameter_list>(<parameter><decl><type><name>AudioFFTDeNoiseContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>DeNoiseChannel</name> <modifier>*</modifier></type><name>dnch</name></decl></parameter>,
<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>sample_noise</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>noise_band_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>noise_band_avr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/=</operator> <name><name>dnch</name><operator>-&gt;</operator><name>noise_band_norm</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>noise_band_avi</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/=</operator> <name><name>dnch</name><operator>-&gt;</operator><name>noise_band_norm</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>noise_band_var</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/=</operator> <name><name>dnch</name><operator>-&gt;</operator><name>noise_band_norm</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>noise_band_var</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name><name>dnch</name><operator>-&gt;</operator><name>noise_band_avr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>dnch</name><operator>-&gt;</operator><name>noise_band_avr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator>
<name><name>dnch</name><operator>-&gt;</operator><name>noise_band_avi</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>dnch</name><operator>-&gt;</operator><name>noise_band_avi</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>noise_band_auto_var</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dnch</name><operator>-&gt;</operator><name>noise_band_var</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sample_noise</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>/</operator> <name>C</name><operator>)</operator> <operator>*</operator> <call><name>log</name><argument_list>(<argument><expr><name><name>dnch</name><operator>-&gt;</operator><name>noise_band_var</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>floor</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">100.0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>noise_band_count</name></name> <operator>&lt;</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>noise_band_count</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sample_noise</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sample_noise</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_noise_profile</name><parameter_list>(<parameter><decl><type><name>AudioFFTDeNoiseContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>DeNoiseChannel</name> <modifier>*</modifier></type><name>dnch</name></decl></parameter>,
<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>sample_noise</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>new_profile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name><name>new_band_noise</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>temp</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>sum</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>, <decl><type ref="prev"/><name>d1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>new_noise_floor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>temp</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <name><name>sample_noise</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>new_profile</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>matrix_b</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>*</operator> <name><name>temp</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vector_b</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <name>sum</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>solve</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>matrix_a</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>vector_b</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>matrix_c</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>vector_b</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>temp</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <name>sum</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>temp</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>d1</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>sum</name> <operator>/</operator> <literal type="number">15.0</literal> <operator>-</operator> <literal type="number">0.5</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_profile</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>-</operator> <name>d1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>d1</name> <operator>-=</operator> <name><name>dnch</name><operator>-&gt;</operator><name>band_noise</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>-</operator> <name>i</name></expr>;</init> <condition><expr><name>d1</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">20.0</literal></expr>;</condition> <incr><expr><name>d1</name> <operator>-=</operator> <literal type="number">1.0</literal></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>temp</name><index>[<expr><name>m</name></expr>]</index></name> <operator>-=</operator> <name>d1</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>new_noise_floor</name> <operator>=</operator> <name>d1</name> <operator>+</operator> <literal type="number">2.5</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_profile</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"bn="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>new_band_noise</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_band_noise</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>new_band_noise</name><index>[<expr><name>m</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">24</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name><name>new_band_noise</name><index>[<expr><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dnch</name><operator>-&gt;</operator><name>band_noise</name></name></expr></argument>, <argument><expr><name>new_band_noise</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>new_band_noise</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>track_noise</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>noise_floor</name></name> <operator>=</operator> <name>new_noise_floor</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>ThreadData</name> <block>{
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>
}</block></struct></type> <name>ThreadData</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_channel</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AudioFFTDeNoiseContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ThreadData</name> <modifier>*</modifier></type><name>td</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>in</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>start</name> <init>= <expr><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name>jobnr</name><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>end</name> <init>= <expr><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>DeNoiseChannel</name> <modifier>*</modifier></type><name>dnch</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dnch</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>float</name> <operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>dnch</name><operator>-&gt;</operator><name>out_samples</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>track_noise</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>block_count</name></name> <operator>&amp;</operator> <literal type="number">0x1FF</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dnch</name><operator>-&gt;</operator><name>sfm_fail_flags</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>sfm_fail_total</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>sfm_fail_flags</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>sfm_threshold</name></name> <operator>*=</operator> <literal type="number">1.0</literal> <operator>-</operator> <name><name>dnch</name><operator>-&gt;</operator><name>sfm_alpha</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>sfm_threshold</name></name> <operator>+=</operator> <name><name>dnch</name><operator>-&gt;</operator><name>sfm_alpha</name></name> <operator>*</operator> <operator>(</operator><literal type="number">0.5</literal> <operator>+</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">640</literal><operator>)</operator> <operator>*</operator> <name><name>dnch</name><operator>-&gt;</operator><name>sfm_fail_total</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>window_length</name></name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>window</name><index>[<expr><name>m</name></expr>]</index></name> <operator>*</operator> <name><name>src</name><index>[<expr><name>m</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>m</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>window_length</name></name></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_length2</name></name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_fft_permute</name><argument_list>(<argument><expr><name><name>dnch</name><operator>-&gt;</operator><name>fft</name></name></expr></argument>, <argument><expr><name><name>dnch</name><operator>-&gt;</operator><name>fft_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_fft_calc</name><argument_list>(<argument><expr><name><name>dnch</name><operator>-&gt;</operator><name>fft</name></name></expr></argument>, <argument><expr><name><name>dnch</name><operator>-&gt;</operator><name>fft_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>preprocess</name><argument_list>(<argument><expr><name><name>dnch</name><operator>-&gt;</operator><name>fft_data</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>process_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dnch</name></expr></argument>, <argument><expr><name><name>dnch</name><operator>-&gt;</operator><name>fft_data</name></name></expr></argument>,
<argument><expr><name><name>dnch</name><operator>-&gt;</operator><name>prior</name></name></expr></argument>,
<argument><expr><name><name>dnch</name><operator>-&gt;</operator><name>prior_band_excit</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>track_noise</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>postprocess</name><argument_list>(<argument><expr><name><name>dnch</name><operator>-&gt;</operator><name>fft_data</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fft_permute</name><argument_list>(<argument><expr><name><name>dnch</name><operator>-&gt;</operator><name>ifft</name></name></expr></argument>, <argument><expr><name><name>dnch</name><operator>-&gt;</operator><name>fft_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_fft_calc</name><argument_list>(<argument><expr><name><name>dnch</name><operator>-&gt;</operator><name>ifft</name></name></expr></argument>, <argument><expr><name><name>dnch</name><operator>-&gt;</operator><name>fft_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>window_length</name></name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>m</name></expr>]</index></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>window</name><index>[<expr><name>m</name></expr>]</index></name> <operator>*</operator> <name><name>dnch</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>/</operator> <operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_auto_noise_levels</name><parameter_list>(<parameter><decl><type><name>AudioFFTDeNoiseContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>DeNoiseChannel</name> <modifier>*</modifier></type><name>dnch</name></decl></parameter>,
<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>levels</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>noise_band_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>noise_band_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>levels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>/</operator> <name>C</name><operator>)</operator> <operator>*</operator> <call><name>log</name><argument_list>(<argument><expr><name><name>dnch</name><operator>-&gt;</operator><name>noise_band_auto_var</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>floor</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">100.0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>noise_band_count</name></name> <operator>&lt;</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>noise_band_count</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>levels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>levels</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>levels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">100.0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>output_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AudioFFTDeNoiseContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>in</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ThreadData</name></type> <name>td</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>ff_get_audio_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>window_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_audio_fifo_peek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>extended_data</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>window_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>track_noise</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>DeNoiseChannel</name> <modifier>*</modifier></type><name>dnch</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dnch</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>levels</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_auto_noise_levels</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dnch</name></expr></argument>, <argument><expr><name>levels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_noise_profile</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dnch</name></expr></argument>, <argument><expr><name>levels</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>noise_floor</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_noise_floor</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_parameters</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sample_noise_start</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>DeNoiseChannel</name> <modifier>*</modifier></type><name>dnch</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dnch</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_sample_noise</name><argument_list>(<argument><expr><name>dnch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sample_noise_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sample_noise</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sample_noise</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>DeNoiseChannel</name> <modifier>*</modifier></type><name>dnch</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dnch</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sample_noise_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dnch</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sample_noise_end</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>DeNoiseChannel</name> <modifier>*</modifier></type><name>dnch</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dnch</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>sample_noise</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>finish_sample_noise</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dnch</name></expr></argument>, <argument><expr><name>sample_noise</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_noise_profile</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dnch</name></expr></argument>, <argument><expr><name>sample_noise</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_band_parameters</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dnch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sample_noise</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sample_noise_end</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_count</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td</name><operator>.</operator><name>in</name></name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>filter_channel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>td</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><call><name>ff_filter_get_nb_threads</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_audio_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sample_advance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>DeNoiseChannel</name> <modifier>*</modifier></type><name>dnch</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dnch</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>dnch</name><operator>-&gt;</operator><name>out_samples</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>orig</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>output_mode</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>IN_MODE</name></expr>:</case>
<for>for <control>(<init><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_advance</name></name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <name><name>orig</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<break>break;</break>
<case>case <expr><name>OUT_MODE</name></expr>:</case>
<for>for <control>(<init><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_advance</name></name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<break>break;</break>
<case>case <expr><name>NOISE_MODE</name></expr>:</case>
<for>for <control>(<init><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_advance</name></name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <name><name>orig</name><index>[<expr><name>m</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_BUG</name></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_advance</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>window_length</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_advance</name></name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>src</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>window_length</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_advance</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sample_advance</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>src</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_audio_fifo_drain</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sample_advance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pts</name></name> <operator>+=</operator> <macro><name>av_rescale_q</name><argument_list>(<argument>s-&gt;sample_advance</argument>, <argument>(AVRational){<literal type="number">1</literal></argument>, <argument>outlink-&gt;sample_rate}</argument>, <argument>outlink-&gt;time_base</argument>)</argument_list></macro></expr>;</expr_stmt>
<label><name>end</name>:</label>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>activate</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AudioFFTDeNoiseContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FF_FILTER_FORWARD_STATUS_BACK</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>inlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_inlink_consume_frame</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_audio_fifo_write</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_audio_fifo_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>window_length</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>output_frame</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>FF_FILTER_FORWARD_STATUS</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>, <argument><expr><name>outlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_outlink_frame_wanted</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>av_audio_fifo_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>window_length</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_inlink_request_frame</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>FFERROR_NOT_READY</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AudioFFTDeNoiseContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bin2band</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>band_alpha</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>band_beta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dnch</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>DeNoiseChannel</name> <modifier>*</modifier></type><name>dnch</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dnch</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dnch</name><operator>-&gt;</operator><name>amt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dnch</name><operator>-&gt;</operator><name>band_amt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dnch</name><operator>-&gt;</operator><name>band_excit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dnch</name><operator>-&gt;</operator><name>gain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dnch</name><operator>-&gt;</operator><name>prior</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dnch</name><operator>-&gt;</operator><name>prior_band_excit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dnch</name><operator>-&gt;</operator><name>clean_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dnch</name><operator>-&gt;</operator><name>noisy_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dnch</name><operator>-&gt;</operator><name>out_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dnch</name><operator>-&gt;</operator><name>spread_function</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dnch</name><operator>-&gt;</operator><name>abs_var</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dnch</name><operator>-&gt;</operator><name>rel_var</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dnch</name><operator>-&gt;</operator><name>min_abs_var</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dnch</name><operator>-&gt;</operator><name>fft_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_fft_end</name><argument_list>(<argument><expr><name><name>dnch</name><operator>-&gt;</operator><name>fft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>fft</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_fft_end</name><argument_list>(<argument><expr><name><name>dnch</name><operator>-&gt;</operator><name>ifft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnch</name><operator>-&gt;</operator><name>ifft</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dnch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_audio_fifo_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>formats</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>layouts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVSampleFormat</name></name></type> <name><name>sample_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_SAMPLE_FMT_FLTP</name></expr>,
<expr><name>AV_SAMPLE_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>sample_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>formats</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>layouts</name> <operator>=</operator> <call><name>ff_all_channel_counts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>layouts</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_common_channel_layouts</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>layouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_all_samplerates</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ff_set_common_samplerates</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process_command</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>args</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>res_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AudioFFTDeNoiseContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>need_reset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"sample_noise"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"sn"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"start"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sample_noise_start</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sample_noise_end</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"end"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"stop"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sample_noise_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sample_noise_end</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_filter_process_command</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>res_len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>need_reset</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>need_reset</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_parameters</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_af_afftdn</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"afftdn"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Denoise audio samples using FFT."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AudioFFTDeNoiseContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>afftdn_class</name></expr>,
<expr><operator>.</operator><name>activate</name> <operator>=</operator> <name>activate</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>outputs</name></expr>,
<expr><operator>.</operator><name>process_command</name> <operator>=</operator> <name>process_command</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC</name> <operator>|</operator>
<name>AVFILTER_FLAG_SLICE_THREADS</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
