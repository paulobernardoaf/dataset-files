<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vf_zscale.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zimg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/eval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/parseutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIMG_ALIGNMENT</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>var_names</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"in_w"</literal></expr>, <expr><literal type="string">"iw"</literal></expr>,
<expr><literal type="string">"in_h"</literal></expr>, <expr><literal type="string">"ih"</literal></expr>,
<expr><literal type="string">"out_w"</literal></expr>, <expr><literal type="string">"ow"</literal></expr>,
<expr><literal type="string">"out_h"</literal></expr>, <expr><literal type="string">"oh"</literal></expr>,
<expr><literal type="string">"a"</literal></expr>,
<expr><literal type="string">"sar"</literal></expr>,
<expr><literal type="string">"dar"</literal></expr>,
<expr><literal type="string">"hsub"</literal></expr>,
<expr><literal type="string">"vsub"</literal></expr>,
<expr><literal type="string">"ohsub"</literal></expr>,
<expr><literal type="string">"ovsub"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<enum>enum <name>var_name</name> <block>{
<decl><name>VAR_IN_W</name></decl>, <decl><name>VAR_IW</name></decl>,
<decl><name>VAR_IN_H</name></decl>, <decl><name>VAR_IH</name></decl>,
<decl><name>VAR_OUT_W</name></decl>, <decl><name>VAR_OW</name></decl>,
<decl><name>VAR_OUT_H</name></decl>, <decl><name>VAR_OH</name></decl>,
<decl><name>VAR_A</name></decl>,
<decl><name>VAR_SAR</name></decl>,
<decl><name>VAR_DAR</name></decl>,
<decl><name>VAR_HSUB</name></decl>,
<decl><name>VAR_VSUB</name></decl>,
<decl><name>VAR_OHSUB</name></decl>,
<decl><name>VAR_OVSUB</name></decl>,
<decl><name>VARS_NB</name></decl>
}</block>;</enum>

<typedef>typedef <type><struct>struct <name>ZScaleContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>







<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <name>h</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dither</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>filter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>colorspace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>trc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>primaries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>chromal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>colorspace_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>trc_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>primaries_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>range_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>chromal_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>size_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>nominal_peak_luminance</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>approximate_gamma</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>w_expr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>h_expr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>out_h_chr_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>out_v_chr_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>in_h_chr_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>in_v_chr_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>force_original_aspect_ratio</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>tmp_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>zimg_image_format</name></type> <name>src_format</name></decl>, <name>dst_format</name>;</decl_stmt>
<decl_stmt><decl><type><name>zimg_image_format</name></type> <name>alpha_src_format</name></decl>, <name>alpha_dst_format</name>;</decl_stmt>
<decl_stmt><decl><type><name>zimg_graph_builder_params</name></type> <name>alpha_params</name></decl>, <name>params</name>;</decl_stmt>
<decl_stmt><decl><type><name>zimg_filter_graph</name> <modifier>*</modifier></type><name>alpha_graph</name></decl>, <modifier>*</modifier><name>graph</name>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVColorSpace</name></name></type> <name>in_colorspace</name></decl>, <name>out_colorspace</name>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVColorTransferCharacteristic</name></name></type> <name>in_trc</name></decl>, <name>out_trc</name>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVColorPrimaries</name></name></type> <name>in_primaries</name></decl>, <name>out_primaries</name>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVColorRange</name></name></type> <name>in_range</name></decl>, <name>out_range</name>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVChromaLocation</name></name></type> <name>in_chromal</name></decl>, <name>out_chromal</name>;</decl_stmt>
}</block></struct></type> <name>ZScaleContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init_dict</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ZScaleContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>size_str</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>w_expr</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>h_expr</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Size and width/height expressions cannot be set at the same time.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>w_expr</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>h_expr</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>w_expr</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>size_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>size_str</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_parse_video_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>size_str</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Invalid size '%s'\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>size_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_opt_set</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_opt_set</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"h"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>w_expr</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_opt_set</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><literal type="string">"iw"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>h_expr</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_opt_set</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"h"</literal></expr></argument>, <argument><expr><literal type="string">"ih"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pixel_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_YUV410P</name></expr>, <expr><name>AV_PIX_FMT_YUV411P</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_YUV422P</name></expr>,
<expr><name>AV_PIX_FMT_YUV440P</name></expr>, <expr><name>AV_PIX_FMT_YUV444P</name></expr>,
<expr><name>AV_PIX_FMT_YUVJ420P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ422P</name></expr>,
<expr><name>AV_PIX_FMT_YUVJ440P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ444P</name></expr>,
<expr><name>AV_PIX_FMT_YUVJ411P</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P9</name></expr>, <expr><name>AV_PIX_FMT_YUV422P9</name></expr>, <expr><name>AV_PIX_FMT_YUV444P9</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P10</name></expr>, <expr><name>AV_PIX_FMT_YUV422P10</name></expr>, <expr><name>AV_PIX_FMT_YUV444P10</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P12</name></expr>, <expr><name>AV_PIX_FMT_YUV422P12</name></expr>, <expr><name>AV_PIX_FMT_YUV444P12</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P14</name></expr>, <expr><name>AV_PIX_FMT_YUV422P14</name></expr>, <expr><name>AV_PIX_FMT_YUV444P14</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P16</name></expr>, <expr><name>AV_PIX_FMT_YUV422P16</name></expr>, <expr><name>AV_PIX_FMT_YUV444P16</name></expr>,
<expr><name>AV_PIX_FMT_YUVA420P</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P</name></expr>,
<expr><name>AV_PIX_FMT_YUVA420P9</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P9</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P9</name></expr>,
<expr><name>AV_PIX_FMT_YUVA420P10</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P10</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P10</name></expr>,
<expr><name>AV_PIX_FMT_YUVA420P16</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P16</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P16</name></expr>,
<expr><name>AV_PIX_FMT_GBRP</name></expr>, <expr><name>AV_PIX_FMT_GBRP9</name></expr>, <expr><name>AV_PIX_FMT_GBRP10</name></expr>,
<expr><name>AV_PIX_FMT_GBRP12</name></expr>, <expr><name>AV_PIX_FMT_GBRP14</name></expr>, <expr><name>AV_PIX_FMT_GBRP16</name></expr>,
<expr><name>AV_PIX_FMT_GBRAP</name></expr>, <expr><name>AV_PIX_FMT_GBRAP16</name></expr>,
<expr><name>AV_PIX_FMT_GBRPF32</name></expr>, <expr><name>AV_PIX_FMT_GBRAPF32</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pixel_fmts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>out_formats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>ff_formats_ref</name><argument_list>(<argument><expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pixel_fmts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>in_formats</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_props</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ZScaleContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>out_desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>var_values</name><index>[<expr><name>VARS_NB</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>expr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>factor_w</name></decl>, <decl><type ref="prev"/><name>factor_h</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_IN_W</name></expr>]</index></name> <operator>=</operator> <name><name>var_values</name><index>[<expr><name>VAR_IW</name></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_IN_H</name></expr>]</index></name> <operator>=</operator> <name><name>var_values</name><index>[<expr><name>VAR_IH</name></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_OUT_W</name></expr>]</index></name> <operator>=</operator> <name><name>var_values</name><index>[<expr><name>VAR_OW</name></expr>]</index></name> <operator>=</operator> <name>NAN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_OUT_H</name></expr>]</index></name> <operator>=</operator> <name><name>var_values</name><index>[<expr><name>VAR_OH</name></expr>]</index></name> <operator>=</operator> <name>NAN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_A</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>/</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_SAR</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr> ?</condition><then>
<expr><operator>(</operator><name>double</name><operator>)</operator> <name><name>inlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name> <operator>/</operator> <name><name>inlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_DAR</name></expr>]</index></name> <operator>=</operator> <name><name>var_values</name><index>[<expr><name>VAR_A</name></expr>]</index></name> <operator>*</operator> <name><name>var_values</name><index>[<expr><name>VAR_SAR</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_HSUB</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_VSUB</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_OHSUB</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>out_desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_OVSUB</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>out_desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>av_expr_parse_and_eval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><operator>(</operator><name>expr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>w_expr</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>var_names</name></expr></argument>, <argument><expr><name>var_values</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>var_values</name><index>[<expr><name>VAR_OUT_W</name></expr>]</index></name> <operator>=</operator> <name><name>var_values</name><index>[<expr><name>VAR_OW</name></expr>]</index></name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_expr_parse_and_eval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><operator>(</operator><name>expr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>h_expr</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>var_names</name></expr></argument>, <argument><expr><name>var_values</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>var_values</name><index>[<expr><name>VAR_OUT_H</name></expr>]</index></name> <operator>=</operator> <name><name>var_values</name><index>[<expr><name>VAR_OH</name></expr>]</index></name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_expr_parse_and_eval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><operator>(</operator><name>expr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>w_expr</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>var_names</name></expr></argument>, <argument><expr><name>var_values</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>



<expr_stmt><expr><name>factor_w</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>factor_h</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>factor_w</name> <operator>=</operator> <operator>-</operator><name>w</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>factor_h</name> <operator>=</operator> <operator>-</operator><name>h</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>h</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>w</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>h</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>av_rescale</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>*</operator> <name>factor_w</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>factor_w</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>av_rescale</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <name>factor_h</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>factor_h</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>force_original_aspect_ratio</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tmp_w</name> <init>= <expr><call><name>av_rescale</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tmp_h</name> <init>= <expr><call><name>av_rescale</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>force_original_aspect_ratio</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>tmp_w</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>tmp_h</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>tmp_w</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>tmp_h</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&gt;</operator> <name>INT_MAX</name> <operator>||</operator> <name>h</name> <operator>&gt;</operator> <name>INT_MAX</name> <operator>||</operator>
<operator>(</operator><name>h</name> <operator>*</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name><operator>)</operator> <operator>&gt;</operator> <name>INT_MAX</name> <operator>||</operator>
<operator>(</operator><name>w</name> <operator>*</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name><operator>)</operator> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Rescaled value for width or height is too big.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>==</operator> <name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>&amp;&amp;</operator>
<name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>==</operator> <name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>&amp;&amp;</operator>
<name><name>inlink</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name><name>outlink</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if>
<else>else <block>{<block_content>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <macro><name>av_mul_q</name><argument_list>(<argument>(AVRational){outlink-&gt;h * inlink-&gt;w</argument>, <argument>outlink-&gt;w * inlink-&gt;h}</argument>, <argument>inlink-&gt;sample_aspect_ratio</argument>)</argument_list></macro></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"w:%d h:%d fmt:%s sar:%d/%d -&gt; w:%d h:%d fmt:%s sar:%d/%d\n"</literal></expr></argument>,
<argument><expr><name><name>inlink</name> <operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name> <operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>( <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>,
<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Error when evaluating the expression '%s'.\n"</literal>
<literal type="string">"Maybe the expression for out_w:'%s' or for out_h:'%s' is self-referencing.\n"</literal></expr></argument>,
<argument><expr><name>expr</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>w_expr</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>h_expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>print_zimg_error</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>err_msg</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err_code</name> <init>= <expr><call><name>zimg_get_last_error</name><argument_list>(<argument><expr><name>err_msg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>err_msg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"code %d: %s\n"</literal></expr></argument>, <argument><expr><name>err_code</name></expr></argument>, <argument><expr><name>err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>convert_chroma_location</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVChromaLocation</name></name></type> <name>chroma_location</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>chroma_location</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVCHROMA_LOC_UNSPECIFIED</name></expr>:</case>
<case>case <expr><name>AVCHROMA_LOC_LEFT</name></expr>:</case>
<return>return <expr><name>ZIMG_CHROMA_LEFT</name></expr>;</return>
<case>case <expr><name>AVCHROMA_LOC_CENTER</name></expr>:</case>
<return>return <expr><name>ZIMG_CHROMA_CENTER</name></expr>;</return>
<case>case <expr><name>AVCHROMA_LOC_TOPLEFT</name></expr>:</case>
<return>return <expr><name>ZIMG_CHROMA_TOP_LEFT</name></expr>;</return>
<case>case <expr><name>AVCHROMA_LOC_TOP</name></expr>:</case>
<return>return <expr><name>ZIMG_CHROMA_TOP</name></expr>;</return>
<case>case <expr><name>AVCHROMA_LOC_BOTTOMLEFT</name></expr>:</case>
<return>return <expr><name>ZIMG_CHROMA_BOTTOM_LEFT</name></expr>;</return>
<case>case <expr><name>AVCHROMA_LOC_BOTTOM</name></expr>:</case>
<return>return <expr><name>ZIMG_CHROMA_BOTTOM</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>ZIMG_CHROMA_LEFT</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>convert_matrix</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVColorSpace</name></name></type> <name>colorspace</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>colorspace</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVCOL_SPC_RGB</name></expr>:</case>
<return>return <expr><name>ZIMG_MATRIX_RGB</name></expr>;</return>
<case>case <expr><name>AVCOL_SPC_BT709</name></expr>:</case>
<return>return <expr><name>ZIMG_MATRIX_709</name></expr>;</return>
<case>case <expr><name>AVCOL_SPC_UNSPECIFIED</name></expr>:</case>
<return>return <expr><name>ZIMG_MATRIX_UNSPECIFIED</name></expr>;</return>
<case>case <expr><name>AVCOL_SPC_FCC</name></expr>:</case>
<return>return <expr><name>ZIMG_MATRIX_FCC</name></expr>;</return>
<case>case <expr><name>AVCOL_SPC_BT470BG</name></expr>:</case>
<return>return <expr><name>ZIMG_MATRIX_470BG</name></expr>;</return>
<case>case <expr><name>AVCOL_SPC_SMPTE170M</name></expr>:</case>
<return>return <expr><name>ZIMG_MATRIX_170M</name></expr>;</return>
<case>case <expr><name>AVCOL_SPC_SMPTE240M</name></expr>:</case>
<return>return <expr><name>ZIMG_MATRIX_240M</name></expr>;</return>
<case>case <expr><name>AVCOL_SPC_YCGCO</name></expr>:</case>
<return>return <expr><name>ZIMG_MATRIX_YCGCO</name></expr>;</return>
<case>case <expr><name>AVCOL_SPC_BT2020_NCL</name></expr>:</case>
<return>return <expr><name>ZIMG_MATRIX_2020_NCL</name></expr>;</return>
<case>case <expr><name>AVCOL_SPC_BT2020_CL</name></expr>:</case>
<return>return <expr><name>ZIMG_MATRIX_2020_CL</name></expr>;</return>
<case>case <expr><name>AVCOL_SPC_CHROMA_DERIVED_NCL</name></expr>:</case>
<return>return <expr><name>ZIMG_MATRIX_CHROMATICITY_DERIVED_NCL</name></expr>;</return>
<case>case <expr><name>AVCOL_SPC_CHROMA_DERIVED_CL</name></expr>:</case>
<return>return <expr><name>ZIMG_MATRIX_CHROMATICITY_DERIVED_CL</name></expr>;</return>
<case>case <expr><name>AVCOL_SPC_ICTCP</name></expr>:</case>
<return>return <expr><name>ZIMG_MATRIX_ICTCP</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>ZIMG_MATRIX_UNSPECIFIED</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>convert_trc</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVColorTransferCharacteristic</name></name></type> <name>color_trc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>color_trc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVCOL_TRC_UNSPECIFIED</name></expr>:</case>
<return>return <expr><name>ZIMG_TRANSFER_UNSPECIFIED</name></expr>;</return>
<case>case <expr><name>AVCOL_TRC_BT709</name></expr>:</case>
<return>return <expr><name>ZIMG_TRANSFER_709</name></expr>;</return>
<case>case <expr><name>AVCOL_TRC_GAMMA22</name></expr>:</case>
<return>return <expr><name>ZIMG_TRANSFER_470_M</name></expr>;</return>
<case>case <expr><name>AVCOL_TRC_GAMMA28</name></expr>:</case>
<return>return <expr><name>ZIMG_TRANSFER_470_BG</name></expr>;</return>
<case>case <expr><name>AVCOL_TRC_SMPTE170M</name></expr>:</case>
<return>return <expr><name>ZIMG_TRANSFER_601</name></expr>;</return>
<case>case <expr><name>AVCOL_TRC_SMPTE240M</name></expr>:</case>
<return>return <expr><name>ZIMG_TRANSFER_240M</name></expr>;</return>
<case>case <expr><name>AVCOL_TRC_LINEAR</name></expr>:</case>
<return>return <expr><name>ZIMG_TRANSFER_LINEAR</name></expr>;</return>
<case>case <expr><name>AVCOL_TRC_LOG</name></expr>:</case>
<return>return <expr><name>ZIMG_TRANSFER_LOG_100</name></expr>;</return>
<case>case <expr><name>AVCOL_TRC_LOG_SQRT</name></expr>:</case>
<return>return <expr><name>ZIMG_TRANSFER_LOG_316</name></expr>;</return>
<case>case <expr><name>AVCOL_TRC_IEC61966_2_4</name></expr>:</case>
<return>return <expr><name>ZIMG_TRANSFER_IEC_61966_2_4</name></expr>;</return>
<case>case <expr><name>AVCOL_TRC_BT2020_10</name></expr>:</case>
<return>return <expr><name>ZIMG_TRANSFER_2020_10</name></expr>;</return>
<case>case <expr><name>AVCOL_TRC_BT2020_12</name></expr>:</case>
<return>return <expr><name>ZIMG_TRANSFER_2020_12</name></expr>;</return>
<case>case <expr><name>AVCOL_TRC_SMPTE2084</name></expr>:</case>
<return>return <expr><name>ZIMG_TRANSFER_ST2084</name></expr>;</return>
<case>case <expr><name>AVCOL_TRC_ARIB_STD_B67</name></expr>:</case>
<return>return <expr><name>ZIMG_TRANSFER_ARIB_B67</name></expr>;</return>
<case>case <expr><name>AVCOL_TRC_IEC61966_2_1</name></expr>:</case>
<return>return <expr><name>ZIMG_TRANSFER_IEC_61966_2_1</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>ZIMG_TRANSFER_UNSPECIFIED</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>convert_primaries</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVColorPrimaries</name></name></type> <name>color_primaries</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>color_primaries</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVCOL_PRI_UNSPECIFIED</name></expr>:</case>
<return>return <expr><name>ZIMG_PRIMARIES_UNSPECIFIED</name></expr>;</return>
<case>case <expr><name>AVCOL_PRI_BT709</name></expr>:</case>
<return>return <expr><name>ZIMG_PRIMARIES_709</name></expr>;</return>
<case>case <expr><name>AVCOL_PRI_BT470M</name></expr>:</case>
<return>return <expr><name>ZIMG_PRIMARIES_470_M</name></expr>;</return>
<case>case <expr><name>AVCOL_PRI_BT470BG</name></expr>:</case>
<return>return <expr><name>ZIMG_PRIMARIES_470_BG</name></expr>;</return>
<case>case <expr><name>AVCOL_PRI_SMPTE170M</name></expr>:</case>
<return>return <expr><name>ZIMG_PRIMARIES_170M</name></expr>;</return>
<case>case <expr><name>AVCOL_PRI_SMPTE240M</name></expr>:</case>
<return>return <expr><name>ZIMG_PRIMARIES_240M</name></expr>;</return>
<case>case <expr><name>AVCOL_PRI_FILM</name></expr>:</case>
<return>return <expr><name>ZIMG_PRIMARIES_FILM</name></expr>;</return>
<case>case <expr><name>AVCOL_PRI_BT2020</name></expr>:</case>
<return>return <expr><name>ZIMG_PRIMARIES_2020</name></expr>;</return>
<case>case <expr><name>AVCOL_PRI_SMPTE428</name></expr>:</case>
<return>return <expr><name>ZIMG_PRIMARIES_ST428</name></expr>;</return>
<case>case <expr><name>AVCOL_PRI_SMPTE431</name></expr>:</case>
<return>return <expr><name>ZIMG_PRIMARIES_ST431_2</name></expr>;</return>
<case>case <expr><name>AVCOL_PRI_SMPTE432</name></expr>:</case>
<return>return <expr><name>ZIMG_PRIMARIES_ST432_1</name></expr>;</return>
<case>case <expr><name>AVCOL_PRI_JEDEC_P22</name></expr>:</case>
<return>return <expr><name>ZIMG_PRIMARIES_EBU3213_E</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>ZIMG_PRIMARIES_UNSPECIFIED</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>convert_range</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVColorRange</name></name></type> <name>color_range</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>color_range</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVCOL_RANGE_UNSPECIFIED</name></expr>:</case>
<case>case <expr><name>AVCOL_RANGE_MPEG</name></expr>:</case>
<return>return <expr><name>ZIMG_RANGE_LIMITED</name></expr>;</return>
<case>case <expr><name>AVCOL_RANGE_JPEG</name></expr>:</case>
<return>return <expr><name>ZIMG_RANGE_FULL</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>ZIMG_RANGE_LIMITED</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>format_init</name><parameter_list>(<parameter><decl><type><name>zimg_image_format</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>colorspace</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>primaries</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>transfer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>range</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>format</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>format</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>format</name><operator>-&gt;</operator><name>subsample_w</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>format</name><operator>-&gt;</operator><name>subsample_h</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>format</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>format</name><operator>-&gt;</operator><name>pixel_type</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_FLOAT</name><operator>)</operator></expr> ?</condition><then> <expr><name>ZIMG_PIXEL_FLOAT</name></expr> </then><else>: <expr><ternary><condition><expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>&gt;</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>ZIMG_PIXEL_WORD</name></expr> </then><else>: <expr><name>ZIMG_PIXEL_BYTE</name></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>format</name><operator>-&gt;</operator><name>color_family</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_RGB</name><operator>)</operator></expr> ?</condition><then> <expr><name>ZIMG_COLOR_RGB</name></expr> </then><else>: <expr><name>ZIMG_COLOR_YUV</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>format</name><operator>-&gt;</operator><name>matrix_coefficients</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_RGB</name><operator>)</operator></expr> ?</condition><then> <expr><name>ZIMG_MATRIX_RGB</name></expr> </then><else>: <expr><ternary><condition><expr><name>colorspace</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><call><name>convert_matrix</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>colorspace</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>colorspace</name></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>format</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>=</operator> <ternary><condition><expr><name>primaries</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><call><name>convert_primaries</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>color_primaries</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>primaries</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>format</name><operator>-&gt;</operator><name>transfer_characteristics</name></name> <operator>=</operator> <ternary><condition><expr><name>transfer</name> <operator>==</operator> <operator>-</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><call><name>convert_trc</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>color_trc</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>transfer</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>format</name><operator>-&gt;</operator><name>pixel_range</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_RGB</name><operator>)</operator></expr> ?</condition><then> <expr><name>ZIMG_RANGE_FULL</name></expr> </then><else>: <expr><ternary><condition><expr><name>range</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><call><name>convert_range</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>color_range</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>range</name></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>format</name><operator>-&gt;</operator><name>chroma_location</name></name> <operator>=</operator> <ternary><condition><expr><name>location</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><call><name>convert_chroma_location</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>chroma_location</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>location</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>graph_build</name><parameter_list>(<parameter><decl><type><name>zimg_filter_graph</name> <modifier>*</modifier><modifier>*</modifier></type><name>graph</name></decl></parameter>, <parameter><decl><type><name>zimg_graph_builder_params</name> <modifier>*</modifier></type><name>params</name></decl></parameter>,
<parameter><decl><type><name>zimg_image_format</name> <modifier>*</modifier></type><name>src_format</name></decl></parameter>, <parameter><decl><type><name>zimg_image_format</name> <modifier>*</modifier></type><name>dst_format</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>tmp</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>tmp_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>zimg_filter_graph_free</name><argument_list>(<argument><expr><operator>*</operator><name>graph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>graph</name> <operator>=</operator> <call><name>zimg_filter_graph_build</name><argument_list>(<argument><expr><name>src_format</name></expr></argument>, <argument><expr><name>dst_format</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>graph</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>print_zimg_error</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>zimg_filter_graph_get_tmp_size</name><argument_list>(<argument><expr><operator>*</operator><name>graph</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>print_zimg_error</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <operator>*</operator><name>tmp_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tmp</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>tmp_size</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>realign_frame</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier><modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>aligned</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>plane</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name>plane</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><operator>(</operator><operator>*</operator><name>frame</name><operator>)</operator><operator>-&gt;</operator><name>data</name></name><index>[<expr><name>p</name></expr>]</index> <operator>%</operator> <name>ZIMG_ALIGNMENT</name> <operator>||</operator> <name><operator>(</operator><operator>*</operator><name>frame</name><operator>)</operator><operator>-&gt;</operator><name>linesize</name></name><index>[<expr><name>p</name></expr>]</index> <operator>%</operator> <name>ZIMG_ALIGNMENT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>aligned</name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>aligned</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>frame</name><operator>)</operator><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aligned</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>frame</name><operator>)</operator><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aligned</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>frame</name><operator>)</operator><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_get_buffer</name><argument_list>(<argument><expr><name>aligned</name></expr></argument>, <argument><expr><name>ZIMG_ALIGNMENT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_copy</name><argument_list>(<argument><expr><name>aligned</name></expr></argument>, <argument><expr><operator>*</operator><name>frame</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>aligned</name></expr></argument>, <argument><expr><operator>*</operator><name>frame</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>frame</name> <operator>=</operator> <name>aligned</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aligned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ZScaleContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>link</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>link</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>odesc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>zimg_image_buffer_const</name></type> <name>src_buf</name> <init>= <expr><block>{ <expr><name>ZIMG_API_VERSION</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>zimg_image_buffer</name></type> <name>dst_buf</name> <init>= <expr><block>{ <expr><name>ZIMG_API_VERSION</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>plane</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>realign_frame</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>out</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>in</name><operator>-&gt;</operator><name>width</name></name> <operator>!=</operator> <name><name>link</name><operator>-&gt;</operator><name>w</name></name>
<operator>||</operator> <name><name>in</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <name><name>link</name><operator>-&gt;</operator><name>h</name></name>
<operator>||</operator> <name><name>in</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name><name>link</name><operator>-&gt;</operator><name>format</name></name>
<operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>in_colorspace</name></name> <operator>!=</operator> <name><name>in</name><operator>-&gt;</operator><name>colorspace</name></name>
<operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>in_trc</name></name> <operator>!=</operator> <name><name>in</name><operator>-&gt;</operator><name>color_trc</name></name>
<operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>in_primaries</name></name> <operator>!=</operator> <name><name>in</name><operator>-&gt;</operator><name>color_primaries</name></name>
<operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>in_range</name></name> <operator>!=</operator> <name><name>in</name><operator>-&gt;</operator><name>color_range</name></name>
<operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>out_colorspace</name></name> <operator>!=</operator> <name><name>out</name><operator>-&gt;</operator><name>colorspace</name></name>
<operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>out_trc</name></name> <operator>!=</operator> <name><name>out</name><operator>-&gt;</operator><name>color_trc</name></name>
<operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>out_primaries</name></name> <operator>!=</operator> <name><name>out</name><operator>-&gt;</operator><name>color_primaries</name></name>
<operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>out_range</name></name> <operator>!=</operator> <name><name>out</name><operator>-&gt;</operator><name>color_range</name></name>
<operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>in_chromal</name></name> <operator>!=</operator> <name><name>in</name><operator>-&gt;</operator><name>chroma_location</name></name>
<operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>out_chromal</name></name> <operator>!=</operator> <name><name>out</name><operator>-&gt;</operator><name>chroma_location</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_opt_set</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_opt_set</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"h"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>format</name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>w</name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>h</name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>config_props</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>zimg_image_format_default</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>src_format</name></name></expr></argument>, <argument><expr><name>ZIMG_API_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zimg_image_format_default</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dst_format</name></name></expr></argument>, <argument><expr><name>ZIMG_API_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zimg_graph_builder_params_default</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>params</name></name></expr></argument>, <argument><expr><name>ZIMG_API_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>dither_type</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dither</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>cpu_type</name></name> <operator>=</operator> <name>ZIMG_CPU_AUTO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>resample_filter</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>filter</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>resample_filter_uv</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>filter</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>nominal_peak_luminance</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nominal_peak_luminance</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>allow_approximate_gamma</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>approximate_gamma</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>format_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>src_format</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>colorspace_in</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>primaries_in</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>trc_in</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>range_in</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>chromal_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>format_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dst_format</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>odesc</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>colorspace</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>primaries</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>trc</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>range</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>chromal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>dst_format</name><operator>.</operator><name>matrix_coefficients</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>primaries</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>dst_format</name><operator>.</operator><name>color_primaries</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>range</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>dst_format</name><operator>.</operator><name>pixel_range</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>trc</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>dst_format</name><operator>.</operator><name>transfer_characteristics</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>chromal</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>chroma_location</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>dst_format</name><operator>.</operator><name>chroma_location</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>graph_build</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>params</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>src_format</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dst_format</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>tmp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>tmp_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_colorspace</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>colorspace</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_trc</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>color_trc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_primaries</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>color_primaries</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_range</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>color_range</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out_colorspace</name></name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>colorspace</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out_trc</name></name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>color_trc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out_primaries</name></name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>color_primaries</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out_range</name></name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>color_range</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_ALPHA</name> <operator>&amp;&amp;</operator> <name><name>odesc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_ALPHA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zimg_image_format_default</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>alpha_src_format</name></name></expr></argument>, <argument><expr><name>ZIMG_API_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zimg_image_format_default</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>alpha_dst_format</name></name></expr></argument>, <argument><expr><name>ZIMG_API_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zimg_graph_builder_params_default</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>alpha_params</name></name></expr></argument>, <argument><expr><name>ZIMG_API_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_params</name><operator>.</operator><name>dither_type</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dither</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_params</name><operator>.</operator><name>cpu_type</name></name> <operator>=</operator> <name>ZIMG_CPU_AUTO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_params</name><operator>.</operator><name>resample_filter</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>filter</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_src_format</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_src_format</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_src_format</name><operator>.</operator><name>depth</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_src_format</name><operator>.</operator><name>pixel_type</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_FLOAT</name><operator>)</operator></expr> ?</condition><then> <expr><name>ZIMG_PIXEL_FLOAT</name></expr> </then><else>: <expr><ternary><condition><expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>&gt;</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>ZIMG_PIXEL_WORD</name></expr> </then><else>: <expr><name>ZIMG_PIXEL_BYTE</name></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_src_format</name><operator>.</operator><name>color_family</name></name> <operator>=</operator> <name>ZIMG_COLOR_GREY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_dst_format</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_dst_format</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_dst_format</name><operator>.</operator><name>depth</name></name> <operator>=</operator> <name><name>odesc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_dst_format</name><operator>.</operator><name>pixel_type</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>odesc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_FLOAT</name><operator>)</operator></expr> ?</condition><then> <expr><name>ZIMG_PIXEL_FLOAT</name></expr> </then><else>: <expr><ternary><condition><expr><name><name>odesc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>&gt;</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>ZIMG_PIXEL_WORD</name></expr> </then><else>: <expr><name>ZIMG_PIXEL_BYTE</name></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_dst_format</name><operator>.</operator><name>color_family</name></name> <operator>=</operator> <name>ZIMG_COLOR_GREY</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>zimg_filter_graph_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_graph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_graph</name></name> <operator>=</operator> <call><name>zimg_filter_graph_build</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>alpha_src_format</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>alpha_dst_format</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>alpha_params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>alpha_graph</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>print_zimg_error</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>dst_format</name><operator>.</operator><name>matrix_coefficients</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>primaries</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>dst_format</name><operator>.</operator><name>color_primaries</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>range</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>dst_format</name><operator>.</operator><name>pixel_range</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>trc</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>dst_format</name><operator>.</operator><name>transfer_characteristics</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name> <operator>*</operator> <name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>*</operator> <name><name>link</name><operator>-&gt;</operator><name>w</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name> <operator>*</operator> <name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <name><name>link</name><operator>-&gt;</operator><name>h</name></name></expr></argument>,
<argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name>plane</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>src_buf</name><operator>.</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src_buf</name><operator>.</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name>stride</name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src_buf</name><operator>.</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>odesc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name>plane</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_buf</name><operator>.</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_buf</name><operator>.</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name>stride</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_buf</name><operator>.</operator><name>plane</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>zimg_filter_graph_process</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst_buf</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>tmp</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>print_zimg_error</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_ALPHA</name> <operator>&amp;&amp;</operator> <name><name>odesc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_ALPHA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>src_buf</name><operator>.</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src_buf</name><operator>.</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>stride</name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src_buf</name><operator>.</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mask</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_buf</name><operator>.</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_buf</name><operator>.</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>stride</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_buf</name><operator>.</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mask</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>zimg_filter_graph_process</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_graph</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst_buf</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>tmp</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>print_zimg_error</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>odesc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_ALPHA</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>odesc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_FLOAT</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>AV_WN32</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <name><name>odesc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>step</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>av_float2int</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ZScaleContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>zimg_filter_graph_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zimg_filter_graph_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_graph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>tmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tmp_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process_command</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>args</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>res_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ZScaleContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"width"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"height"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"h"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>old_w</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_h</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_opt_set</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>config_props</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name>old_w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>old_h</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(ZScaleContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM|AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TFLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM|AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_RUNTIME_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>zscale_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"w"</literal></expr>, <expr><literal type="string">"Output video width"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>w_expr</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>TFLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"width"</literal></expr>, <expr><literal type="string">"Output video width"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>w_expr</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>TFLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"h"</literal></expr>, <expr><literal type="string">"Output video height"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>h_expr</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>TFLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"height"</literal></expr>, <expr><literal type="string">"Output video height"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>h_expr</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>TFLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"size"</literal></expr>, <expr><literal type="string">"set video size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>size_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"set video size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>size_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dither"</literal></expr>, <expr><literal type="string">"set dither type"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>dither</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ZIMG_DITHER_ERROR_DIFFUSION</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"dither"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"d"</literal></expr>, <expr><literal type="string">"set dither type"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>dither</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ZIMG_DITHER_ERROR_DIFFUSION</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"dither"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"none"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_DITHER_NONE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"dither"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ordered"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_DITHER_ORDERED</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"dither"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"random"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_DITHER_RANDOM</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"dither"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"error_diffusion"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_DITHER_ERROR_DIFFUSION</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"dither"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"filter"</literal></expr>, <expr><literal type="string">"set filter type"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_RESIZE_BILINEAR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ZIMG_RESIZE_LANCZOS</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"filter"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"f"</literal></expr>, <expr><literal type="string">"set filter type"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_RESIZE_BILINEAR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ZIMG_RESIZE_LANCZOS</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"filter"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"point"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_RESIZE_POINT</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"filter"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bilinear"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_RESIZE_BILINEAR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"filter"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bicubic"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_RESIZE_BICUBIC</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"filter"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"spline16"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_RESIZE_SPLINE16</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"filter"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"spline36"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_RESIZE_SPLINE36</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"filter"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"lanczos"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_RESIZE_LANCZOS</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"filter"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"out_range"</literal></expr>, <expr><literal type="string">"set color range"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>ZIMG_RANGE_FULL</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"range"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"range"</literal></expr>, <expr><literal type="string">"set color range"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>ZIMG_RANGE_FULL</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"range"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"r"</literal></expr>, <expr><literal type="string">"set color range"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>ZIMG_RANGE_FULL</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"range"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"input"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"range"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"limited"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_RANGE_LIMITED</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"range"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"full"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_RANGE_FULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"range"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unknown"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"range"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"tv"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_RANGE_LIMITED</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"range"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pc"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_RANGE_FULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"range"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"primaries"</literal></expr>, <expr><literal type="string">"set color primaries"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>primaries</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"primaries"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"p"</literal></expr>, <expr><literal type="string">"set color primaries"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>primaries</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"primaries"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"input"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"primaries"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"709"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_PRIMARIES_709</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"primaries"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unspecified"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_PRIMARIES_UNSPECIFIED</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"primaries"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"170m"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_PRIMARIES_170M</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"primaries"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"240m"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_PRIMARIES_240M</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"primaries"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"2020"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_PRIMARIES_2020</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"primaries"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unknown"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_PRIMARIES_UNSPECIFIED</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"primaries"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bt709"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_PRIMARIES_709</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"primaries"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bt470m"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_PRIMARIES_470_M</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"primaries"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bt470bg"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_PRIMARIES_470_BG</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"primaries"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"smpte170m"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_PRIMARIES_170M</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"primaries"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"smpte240m"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_PRIMARIES_240M</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"primaries"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"film"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_PRIMARIES_FILM</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"primaries"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bt2020"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_PRIMARIES_2020</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"primaries"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"smpte428"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_PRIMARIES_ST428</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"primaries"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"smpte431"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_PRIMARIES_ST431_2</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"primaries"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"smpte432"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_PRIMARIES_ST432_1</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"primaries"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"jedec-p22"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_PRIMARIES_EBU3213_E</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"primaries"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ebu3213"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_PRIMARIES_EBU3213_E</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"primaries"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"transfer"</literal></expr>, <expr><literal type="string">"set transfer characteristic"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>trc</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transfer"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"t"</literal></expr>, <expr><literal type="string">"set transfer characteristic"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>trc</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transfer"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"input"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transfer"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"709"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_TRANSFER_709</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transfer"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unspecified"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_TRANSFER_UNSPECIFIED</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transfer"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"601"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_TRANSFER_601</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transfer"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"linear"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_TRANSFER_LINEAR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transfer"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"2020_10"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_TRANSFER_2020_10</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transfer"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"2020_12"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_TRANSFER_2020_12</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transfer"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unknown"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_TRANSFER_UNSPECIFIED</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transfer"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bt470m"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_TRANSFER_470_M</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transfer"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bt470bg"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_TRANSFER_470_BG</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transfer"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"smpte170m"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_TRANSFER_601</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transfer"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bt709"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_TRANSFER_709</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transfer"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"linear"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_TRANSFER_LINEAR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transfer"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"log100"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_TRANSFER_LOG_100</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transfer"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"log316"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_TRANSFER_LOG_316</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transfer"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bt2020-10"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_TRANSFER_2020_10</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transfer"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bt2020-12"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_TRANSFER_2020_12</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transfer"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"smpte2084"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_TRANSFER_ST2084</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transfer"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"iec61966-2-4"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_TRANSFER_IEC_61966_2_4</name></expr>}</block></expr>,<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transfer"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"iec61966-2-1"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_TRANSFER_IEC_61966_2_1</name></expr>}</block></expr>,<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transfer"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"arib-std-b67"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_TRANSFER_ARIB_B67</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transfer"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"matrix"</literal></expr>, <expr><literal type="string">"set colorspace matrix"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>colorspace</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"matrix"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"m"</literal></expr>, <expr><literal type="string">"set colorspace matrix"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>colorspace</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"matrix"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"input"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"matrix"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"709"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_MATRIX_709</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"matrix"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unspecified"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_MATRIX_UNSPECIFIED</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"matrix"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"470bg"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_MATRIX_470BG</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"matrix"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"170m"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_MATRIX_170M</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"matrix"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"2020_ncl"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_MATRIX_2020_NCL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"matrix"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"2020_cl"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_MATRIX_2020_CL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"matrix"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unknown"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_MATRIX_UNSPECIFIED</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"matrix"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"gbr"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_MATRIX_RGB</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"matrix"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bt709"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_MATRIX_709</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"matrix"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fcc"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_MATRIX_FCC</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"matrix"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bt470bg"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_MATRIX_470BG</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"matrix"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"smpte170m"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_MATRIX_170M</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"matrix"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"smpte2400m"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_MATRIX_240M</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"matrix"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ycgco"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_MATRIX_YCGCO</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"matrix"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bt2020nc"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_MATRIX_2020_NCL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"matrix"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bt2020c"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_MATRIX_2020_CL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"matrix"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"chroma-derived-nc"</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_MATRIX_CHROMATICITY_DERIVED_NCL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"matrix"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"chroma-derived-c"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_MATRIX_CHROMATICITY_DERIVED_CL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"matrix"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ictcp"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_MATRIX_ICTCP</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"matrix"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"in_range"</literal></expr>, <expr><literal type="string">"set input color range"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>range_in</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>ZIMG_RANGE_FULL</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"range"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rangein"</literal></expr>, <expr><literal type="string">"set input color range"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>range_in</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>ZIMG_RANGE_FULL</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"range"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rin"</literal></expr>, <expr><literal type="string">"set input color range"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>range_in</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>ZIMG_RANGE_FULL</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"range"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"primariesin"</literal></expr>, <expr><literal type="string">"set input color primaries"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>primaries_in</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"primaries"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pin"</literal></expr>, <expr><literal type="string">"set input color primaries"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>primaries_in</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"primaries"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"transferin"</literal></expr>, <expr><literal type="string">"set input transfer characteristic"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>trc_in</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transfer"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"tin"</literal></expr>, <expr><literal type="string">"set input transfer characteristic"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>trc_in</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transfer"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"matrixin"</literal></expr>, <expr><literal type="string">"set input colorspace matrix"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>colorspace_in</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"matrix"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"min"</literal></expr>, <expr><literal type="string">"set input colorspace matrix"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>colorspace_in</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"matrix"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"chromal"</literal></expr>, <expr><literal type="string">"set output chroma location"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>chromal</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>ZIMG_CHROMA_BOTTOM</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"chroma"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"set output chroma location"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>chromal</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>ZIMG_CHROMA_BOTTOM</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"chroma"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"input"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"chroma"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"left"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_CHROMA_LEFT</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"chroma"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"center"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_CHROMA_CENTER</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"chroma"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"topleft"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_CHROMA_TOP_LEFT</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"chroma"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"top"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_CHROMA_TOP</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"chroma"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bottomleft"</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_CHROMA_BOTTOM_LEFT</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"chroma"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bottom"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ZIMG_CHROMA_BOTTOM</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"chroma"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"chromalin"</literal></expr>, <expr><literal type="string">"set input chroma location"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>chromal_in</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>ZIMG_CHROMA_BOTTOM</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"chroma"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cin"</literal></expr>, <expr><literal type="string">"set input chroma location"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>chromal_in</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>ZIMG_CHROMA_BOTTOM</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"chroma"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"npl"</literal></expr>, <expr><literal type="string">"set nominal peak luminance"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>nominal_peak_luminance</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <name>NAN</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DBL_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"agamma"</literal></expr>, <expr><literal type="string">"allow approximate gamma"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>approximate_gamma</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>zscale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>avfilter_vf_zscale_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>avfilter_vf_zscale_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_props</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_zscale</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"zscale"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Apply resizing, colorspace and bit depth conversion."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>init_dict</name> <operator>=</operator> <name>init_dict</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ZScaleContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>zscale_class</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>avfilter_vf_zscale_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>avfilter_vf_zscale_outputs</name></expr>,
<expr><operator>.</operator><name>process_command</name> <operator>=</operator> <name>process_command</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
