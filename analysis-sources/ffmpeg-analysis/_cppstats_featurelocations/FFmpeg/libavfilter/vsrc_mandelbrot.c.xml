<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vsrc_mandelbrot.c">



























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/parseutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQR</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)*(a))</cpp:value></cpp:define>

<enum>enum <name>Outer</name><block>{
<decl><name>ITERATION_COUNT</name></decl>,
<decl><name>NORMALIZED_ITERATION_COUNT</name></decl>,
<decl><name>WHITE</name></decl>,
<decl><name>OUTZ</name></decl>,
}</block>;</enum>

<enum>enum <name>Inner</name><block>{
<decl><name>BLACK</name></decl>,
<decl><name>PERIOD</name></decl>,
<decl><name>CONVTIME</name></decl>,
<decl><name>MINCOL</name></decl>,
}</block>;</enum>

<typedef>typedef <type><struct>struct <name>Point</name> <block>{
<decl_stmt><decl><type><name>double</name></type> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>val</name></decl>;</decl_stmt>
}</block></struct></type> <name>Point</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MBContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <name>h</name>;</decl_stmt>
<decl_stmt><decl><type><name>AVRational</name></type> <name>frame_rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>pts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxiter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>start_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>start_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>start_scale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>end_scale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>end_pts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>bailout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>outer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>inner</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cache_allocated</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cache_used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Point</name> <modifier>*</modifier></type><name>point_cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Point</name> <modifier>*</modifier></type><name>next_cache</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>double</name> <argument_list>(<argument><expr><operator>*</operator><name>zyklus</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>dither</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>morphxf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>morphyf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>morphamp</name></decl>;</decl_stmt>
}</block></struct></type> <name>MBContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(MBContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM|AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>mandelbrot_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"size"</literal></expr>, <expr><literal type="string">"set frame size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_IMAGE_SIZE</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"640x480"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"set frame size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_IMAGE_SIZE</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"640x480"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"rate"</literal></expr>, <expr><literal type="string">"set frame rate"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>frame_rate</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_VIDEO_RATE</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"25"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"r"</literal></expr>, <expr><literal type="string">"set frame rate"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>frame_rate</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_VIDEO_RATE</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"25"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"maxiter"</literal></expr>, <expr><literal type="string">"set max iterations number"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>maxiter</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">7189</literal></expr>}</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"start_x"</literal></expr>, <expr><literal type="string">"set the initial x position"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>start_x</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><operator>-</operator><literal type="number">0.743643887037158704752191506114774</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">100</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"start_y"</literal></expr>, <expr><literal type="string">"set the initial y position"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>start_y</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><operator>-</operator><literal type="number">0.131825904205311970493132056385139</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">100</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"start_scale"</literal></expr>, <expr><literal type="string">"set the initial scale value"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>start_scale</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">3.0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"end_scale"</literal></expr>, <expr><literal type="string">"set the terminal scale value"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>end_scale</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.3</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"end_pts"</literal></expr>, <expr><literal type="string">"set the terminal pts value"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>end_pts</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">400</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT64_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"bailout"</literal></expr>, <expr><literal type="string">"set the bailout value"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>bailout</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">10</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"morphxf"</literal></expr>, <expr><literal type="string">"set morph x frequency"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>morphxf</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.01</literal></expr>}</block></expr>, <expr><operator>-</operator><name>FLT_MAX</name></expr>, <expr><name>FLT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"morphyf"</literal></expr>, <expr><literal type="string">"set morph y frequency"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>morphyf</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.0123</literal></expr>}</block></expr>, <expr><operator>-</operator><name>FLT_MAX</name></expr>, <expr><name>FLT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"morphamp"</literal></expr>, <expr><literal type="string">"set morph amplitude"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>morphamp</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><operator>-</operator><name>FLT_MAX</name></expr>, <expr><name>FLT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"outer"</literal></expr>, <expr><literal type="string">"set outer coloring mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>outer</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>NORMALIZED_ITERATION_COUNT</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"outer"</literal></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"iteration_count"</literal></expr>, <expr><literal type="string">"set iteration count mode"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ITERATION_COUNT</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"outer"</literal></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"normalized_iteration_count"</literal></expr>, <expr><literal type="string">"set normalized iteration count mode"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>NORMALIZED_ITERATION_COUNT</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"outer"</literal></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"white"</literal></expr>, <expr><literal type="string">"set white mode"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WHITE</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"outer"</literal></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"outz"</literal></expr>, <expr><literal type="string">"set outz mode"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>OUTZ</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"outer"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"inner"</literal></expr>, <expr><literal type="string">"set inner coloring mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>inner</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MINCOL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"inner"</literal></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"black"</literal></expr>, <expr><literal type="string">"set black mode"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>BLACK</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"inner"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"period"</literal></expr>, <expr><literal type="string">"set period mode"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>PERIOD</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"inner"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"convergence"</literal></expr>, <expr><literal type="string">"show time until convergence"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>CONVTIME</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"inner"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"mincol"</literal></expr>, <expr><literal type="string">"color based on point closest to the origin of the iterations"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MINCOL</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"inner"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>NULL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>mandelbrot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MBContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bailout</name></name> <operator>*=</operator> <name><name>s</name><operator>-&gt;</operator><name>bailout</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>start_scale</name></name> <operator>/=</operator><name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>end_scale</name></name> <operator>/=</operator><name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cache_allocated</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cache_used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>point_cache</name></name><operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cache_allocated</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>point_cache</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator> <name>next_cache</name></name><operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cache_allocated</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator> <name>next_cache</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator> <name>zyklus</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>maxiter</name></name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>zyklus</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MBContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>point_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator> <name>next_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>zyklus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_0BGR32</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_props</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MBContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_image_check_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <call><name>av_inv_q</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_from_cache</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>color</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>in_cidx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>out_cidx</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>py</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>scale</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>MBContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>morphamp</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<for>for<control>(<init>;</init> <condition><expr><operator>*</operator><name>in_cidx</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cache_used</name></name></expr>;</condition> <incr><expr><operator>(</operator><operator>*</operator><name>in_cidx</name><operator>)</operator><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>Point</name> <modifier>*</modifier></type><name>p</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>point_cache</name><index>[<expr><operator>*</operator><name>in_cidx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name>py</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>x</name><operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>start_x</name></name><operator>)</operator> <operator>/</operator> <name>scale</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>x</name><operator>&lt;</operator><literal type="number">0</literal> <operator>||</operator> <name>x</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>color</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>color</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>val</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>out_cidx</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>out_cidx</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cache_allocated</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_cache</name><index>[<expr><operator>(</operator><operator>*</operator><name>out_cidx</name><operator>)</operator><operator>++</operator></expr>]</index></name><operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>interpol</name><parameter_list>(<parameter><decl><type><name>MBContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>color</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linesize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ipol</name><init>=<expr><literal type="number">0xFF000000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dist</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>x</name> <operator>||</operator> <operator>!</operator><name>y</name> <operator>||</operator> <name>x</name><operator>+</operator><literal type="number">1</literal><operator>==</operator><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>||</operator> <name>y</name><operator>+</operator><literal type="number">1</literal><operator>==</operator><name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dist</name><operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>w</name></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name>y</name><operator>-</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>h</name></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>dist</name><operator>&lt;</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>w</name></name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>h</name></name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>a</name><operator>=</operator><name><name>color</name><index>[<expr><operator>(</operator><name>x</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name><operator>+</operator><literal type="number">0</literal><operator>)</operator><operator>*</operator><name>linesize</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name><operator>=</operator><name><name>color</name><index>[<expr><operator>(</operator><name>x</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>linesize</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name><operator>=</operator><name><name>color</name><index>[<expr><operator>(</operator><name>x</name><operator>+</operator><literal type="number">0</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>linesize</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name><operator>=</operator><name><name>color</name><index>[<expr><operator>(</operator><name>x</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>linesize</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>a</name><operator>&amp;&amp;</operator><name>c</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>b</name><operator>=</operator> <name><name>color</name><index>[<expr><operator>(</operator><name>x</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name><operator>+</operator><literal type="number">0</literal><operator>)</operator><operator>*</operator><name>linesize</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name><operator>=</operator> <name><name>color</name><index>[<expr><operator>(</operator><name>x</name><operator>+</operator><literal type="number">0</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>linesize</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>b</name><operator>&amp;&amp;</operator><name>d</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>a</name><operator>=</operator> <name><name>color</name><index>[<expr><operator>(</operator><name>x</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>linesize</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name><operator>=</operator> <name><name>color</name><index>[<expr><operator>(</operator><name>x</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>linesize</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>c</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>d</name><operator>=</operator> <name><name>color</name><index>[<expr><operator>(</operator><name>x</name><operator>+</operator><literal type="number">0</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>linesize</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name><operator>=</operator> <name><name>color</name><index>[<expr><operator>(</operator><name>x</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name><operator>+</operator><literal type="number">0</literal><operator>)</operator><operator>*</operator><name>linesize</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name><operator>=</operator> <name><name>color</name><index>[<expr><operator>(</operator><name>x</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>linesize</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>d</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>c</name><operator>=</operator> <name><name>color</name><index>[<expr><operator>(</operator><name>x</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>linesize</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name><operator>=</operator> <name><name>color</name><index>[<expr><operator>(</operator><name>x</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name><operator>+</operator><literal type="number">0</literal><operator>)</operator><operator>*</operator><name>linesize</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name><operator>=</operator> <name><name>color</name><index>[<expr><operator>(</operator><name>x</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>linesize</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if><else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>s</name><init>= <expr><literal type="number">8</literal><operator>*</operator><name>i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>ac</name><init>= <expr><name>a</name><operator>&gt;&gt;</operator><name>s</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>bc</name><init>= <expr><name>b</name><operator>&gt;&gt;</operator><name>s</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>cc</name><init>= <expr><name>c</name><operator>&gt;&gt;</operator><name>s</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>dc</name><init>= <expr><name>d</name><operator>&gt;&gt;</operator><name>s</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ipolab</name><init>= <expr><operator>(</operator><name>ac</name> <operator>+</operator> <name>bc</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ipolcd</name><init>= <expr><operator>(</operator><name>cc</name> <operator>+</operator> <name>dc</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name>ipolab</name> <operator>-</operator> <name>ipolcd</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name>ac</name><operator>-</operator><name>bc</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>cc</name><operator>-</operator><name>dc</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">20</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ipol</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>ipolab</name> <operator>+</operator> <name>ipolcd</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>/</operator><literal type="number">4</literal><operator>)</operator><operator>&lt;&lt;</operator><name>s</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>color</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>linesize</name></expr>]</index></name><operator>=</operator> <name>ipol</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_mandelbrot</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>color</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linesize</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MBContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>in_cidx</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>next_cidx</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>tmp_cidx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>scale</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>start_scale</name></name><operator>*</operator><call><name>pow</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>end_scale</name></name><operator>/</operator><name><name>s</name><operator>-&gt;</operator><name>start_scale</name></name></expr></argument>, <argument><expr><name>pts</name><operator>/</operator><name><name>s</name><operator>-&gt;</operator><name>end_pts</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_zyklus</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fill_from_cache</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in_cidx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>start_y</name></name><operator>+</operator><name>scale</name><operator>*</operator><operator>(</operator><operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>h</name></name><operator>/</operator><literal type="number">2</literal><operator>-</operator><literal type="number">0.5</literal><operator>)</operator></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_cidx</name><operator>=</operator> <name>in_cidx</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>color</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>color</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y1</name><init>= <expr><name>y</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>ci</name><init>=<expr><name><name>s</name><operator>-&gt;</operator><name>start_y</name></name><operator>+</operator><name>scale</name><operator>*</operator><operator>(</operator><name>y</name><operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>h</name></name><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fill_from_cache</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in_cidx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_cidx</name></expr></argument>, <argument><expr><name>ci</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>y1</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>color</name><operator>+</operator><name>linesize</name><operator>*</operator><name>y1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>color</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_from_cache</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>color</name><operator>+</operator><name>linesize</name><operator>*</operator><name>y1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_cidx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ci</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name>scale</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>av_uninit</name><argument_list>(<argument><expr><name>epsilon</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>cr</name><init>=<expr><name><name>s</name><operator>-&gt;</operator><name>start_x</name></name><operator>+</operator><name>scale</name><operator>*</operator><operator>(</operator><name>x</name><operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>w</name></name><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>zr</name><init>=<expr><name>cr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>zi</name><init>=<expr><name>ci</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>c</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>dv</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>dither</name></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><literal type="number">32</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dither</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dither</name></name><operator>*</operator><literal type="number">1664525</literal><operator>+</operator><literal type="number">1013904223</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>color</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>linesize</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF000000</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>morphamp</name></name></expr>)</condition><block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>interpol</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>next_cidx</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cache_allocated</name></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_cache</name><index>[<expr><name>next_cidx</name></expr> ]</index></name><operator>.</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name>cr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_cache</name><index>[<expr><name>next_cidx</name></expr> ]</index></name><operator>.</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name>ci</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_cache</name><index>[<expr><name>next_cidx</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>val</name> <operator>=</operator> <name><name>color</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>linesize</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if><else>else<block>{<block_content>
<expr_stmt><expr><name>zr</name> <operator>+=</operator> <call><name>cos</name><argument_list>(<argument><expr><name>pts</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>morphxf</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>morphamp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>zi</name> <operator>+=</operator> <call><name>sin</name><argument_list>(<argument><expr><name>pts</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>morphyf</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>morphamp</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>use_zyklus</name><operator>=</operator> <operator>(</operator><name>x</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>inner</name></name><operator>!=</operator><name>BLACK</name> <operator>||</operator><name><name>color</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <name>y</name><operator>*</operator><name>linesize</name></expr>]</index></name> <operator>==</operator> <literal type="number">0xFF000000</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>use_zyklus</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>epsilon</name><operator>=</operator> <name>scale</name><operator>*</operator><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>w</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name>y</name><operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>h</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>/</operator><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Z_Z2_C</name><parameter_list>(<parameter><type><name>outr</name></type></parameter>,<parameter><type><name>outi</name></type></parameter>,<parameter><type><name>inr</name></type></parameter>,<parameter><type><name>ini</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>outr= inr*inr - ini*ini + cr;outi= 2*inr*ini + ci;</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Z_Z2_C_ZYKLUS</name><parameter_list>(<parameter><type><name>outr</name></type></parameter>,<parameter><type><name>outi</name></type></parameter>,<parameter><type><name>inr</name></type></parameter>,<parameter><type><name>ini</name></type></parameter>, <parameter><type><name>Z</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>Z_Z2_C(outr,outi,inr,ini)if(use_zyklus){if(Z &amp;&amp; fabs(s-&gt;zyklus[i&gt;&gt;1][0]-outr)+fabs(s-&gt;zyklus[i&gt;&gt;1][1]-outi) &lt;= epsilon)break;}s-&gt;zyklus[i][0]= outr;s-&gt;zyklus[i][1]= outi;</cpp:value></cpp:define>










<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>maxiter</name></name><operator>-</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>t</name></decl>;</decl_stmt>
<macro><name>Z_Z2_C_ZYKLUS</name><argument_list>(<argument>t</argument>, <argument>zi</argument>, <argument>zr</argument>, <argument>zi</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<macro><name>Z_Z2_C_ZYKLUS</name><argument_list>(<argument>zr</argument>, <argument>zi</argument>, <argument>t</argument>, <argument>zi</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<macro><name>Z_Z2_C_ZYKLUS</name><argument_list>(<argument>t</argument>, <argument>zi</argument>, <argument>zr</argument>, <argument>zi</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<macro><name>Z_Z2_C_ZYKLUS</name><argument_list>(<argument>zr</argument>, <argument>zi</argument>, <argument>t</argument>, <argument>zi</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<macro><name>Z_Z2_C_ZYKLUS</name><argument_list>(<argument>t</argument>, <argument>zi</argument>, <argument>zr</argument>, <argument>zi</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<macro><name>Z_Z2_C_ZYKLUS</name><argument_list>(<argument>zr</argument>, <argument>zi</argument>, <argument>t</argument>, <argument>zi</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<macro><name>Z_Z2_C_ZYKLUS</name><argument_list>(<argument>t</argument>, <argument>zi</argument>, <argument>zr</argument>, <argument>zi</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<macro><name>Z_Z2_C_ZYKLUS</name><argument_list>(<argument>zr</argument>, <argument>zi</argument>, <argument>t</argument>, <argument>zi</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<if_stmt><if>if<condition>(<expr><name>zr</name><operator>*</operator><name>zr</name> <operator>+</operator> <name>zi</name><operator>*</operator><name>zi</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>bailout</name></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>i</name><operator>-=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>maxiter</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name>zr</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>zyklus</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>zi</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>zyklus</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>zr</name><operator>*</operator><name>zr</name> <operator>+</operator> <name>zi</name><operator>*</operator><name>zi</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>bailout</name></name></expr>)</condition><block>{<block_content>
<switch>switch<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>outer</name></name></expr>)</condition><block>{<block_content>
<case>case <expr><name>ITERATION_COUNT</name></expr>:</case>
<expr_stmt><expr><name>zr</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><operator>(</operator><call><name>sinf</name><argument_list>(<argument><expr><name>zr</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">127</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>lrintf</name><argument_list>(<argument><expr><operator>(</operator><call><name>sinf</name><argument_list>(<argument><expr><name>zr</name><operator>/</operator><literal type="number">1.234</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">127</literal></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">256</literal><operator>*</operator><literal type="number">256</literal> <operator>+</operator> <call><name>lrintf</name><argument_list>(<argument><expr><operator>(</operator><call><name>sinf</name><argument_list>(<argument><expr><name>zr</name><operator>/</operator><literal type="number">100</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">127</literal></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">256</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NORMALIZED_ITERATION_COUNT</name></expr>:</case>
<expr_stmt><expr><name>zr</name> <operator>=</operator> <name>i</name> <operator>+</operator> <call><name>log2</name><argument_list>(<argument><expr><call><name>log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bailout</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>log</name><argument_list>(<argument><expr><name>zr</name><operator>*</operator><name>zr</name> <operator>+</operator> <name>zi</name><operator>*</operator><name>zi</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><operator>(</operator><call><name>sinf</name><argument_list>(<argument><expr><name>zr</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">127</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>lrintf</name><argument_list>(<argument><expr><operator>(</operator><call><name>sinf</name><argument_list>(<argument><expr><name>zr</name><operator>/</operator><literal type="number">1.234</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">127</literal></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">256</literal><operator>*</operator><literal type="number">256</literal> <operator>+</operator> <call><name>lrintf</name><argument_list>(<argument><expr><operator>(</operator><call><name>sinf</name><argument_list>(<argument><expr><name>zr</name><operator>/</operator><literal type="number">100</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">127</literal></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">256</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WHITE</name></expr>:</case>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xFFFFFF</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OUTZ</name></expr>:</case>
<expr_stmt><expr><name>zr</name> <operator>/=</operator> <name><name>s</name><operator>-&gt;</operator><name>bailout</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>zi</name> <operator>/=</operator> <name><name>s</name><operator>-&gt;</operator><name>bailout</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>zr</name><operator>*</operator><literal type="number">128</literal><operator>+</operator><literal type="number">128</literal><operator>)</operator><operator>)</operator><operator>&amp;</operator><literal type="number">0xFF</literal><operator>)</operator><operator>*</operator><literal type="number">256</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>zi</name><operator>*</operator><literal type="number">128</literal><operator>+</operator><literal type="number">128</literal><operator>)</operator><operator>)</operator><operator>&amp;</operator><literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>c</name></expr>)</condition><block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>inner</name></name><operator>==</operator><name>PERIOD</name></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>j</name><operator>=</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><call><name>SQR</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>zyklus</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-</operator><name>zr</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>SQR</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>zyklus</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name>zi</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>epsilon</name><operator>*</operator><name>epsilon</name><operator>*</operator><literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if<condition>(<expr><name>j</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>c</name><operator>=</operator> <name>i</name><operator>-</operator><name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name><operator>=</operator> <operator>(</operator><operator>(</operator><name>c</name><operator>&lt;&lt;</operator><literal type="number">5</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xE0</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>c</name><operator>&lt;&lt;</operator><literal type="number">10</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xE000</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>c</name><operator>&lt;&lt;</operator><literal type="number">15</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xE00000</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>inner</name></name><operator>==</operator><name>CONVTIME</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>c</name><operator>=</operator> <call><name>floor</name><argument_list>(<argument><expr><name>i</name><operator>*</operator><literal type="number">255.0</literal><operator>/</operator><name><name>s</name><operator>-&gt;</operator><name>maxiter</name></name><operator>+</operator><name>dv</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">0x010101</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>inner</name></name><operator>==</operator><name>MINCOL</name></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>closest</name><init>=<expr><literal type="number">9999</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>closest_index</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>j</name><operator>=</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><call><name>SQR</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>zyklus</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>SQR</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>zyklus</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>closest</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>closest</name><operator>=</operator> <call><name>SQR</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>zyklus</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>SQR</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>zyklus</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>closest_index</name><operator>=</operator> <name>j</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name>closest</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name>closest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name><operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>zyklus</name><index>[<expr><name>closest_index</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>/</operator><name>closest</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">127</literal><operator>+</operator><name>dv</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>lrintf</name><argument_list>(<argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>zyklus</name><index>[<expr><name>closest_index</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>/</operator><name>closest</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">127</literal><operator>+</operator><name>dv</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">256</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>|=</operator> <literal type="number">0xFF000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>linesize</name></expr>]</index></name><operator>=</operator> <name>c</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>next_cidx</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cache_allocated</name></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_cache</name><index>[<expr><name>next_cidx</name></expr> ]</index></name><operator>.</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name>cr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_cache</name><index>[<expr><name>next_cidx</name></expr> ]</index></name><operator>.</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name>ci</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_cache</name><index>[<expr><name>next_cidx</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>val</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fill_from_cache</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in_cidx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_cidx</name></expr></argument>, <argument><expr><name>ci</name> <operator>+</operator> <name>scale</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>next_cache</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>point_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cache_used</name></name> <operator>=</operator> <name>next_cidx</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>cache_used</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>cache_allocated</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Mandelbrot cache is too small!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>request_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MBContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>link</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>picref</name> <init>= <expr><call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>link</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>picref</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>picref</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator> <block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>picref</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pts</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_mandelbrot</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>src</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name><name>picref</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>picref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>/</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>picref</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>link</name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>mandelbrot_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>request_frame</name> <operator>=</operator> <name>request_frame</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_props</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vsrc_mandelbrot</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mandelbrot"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Render a Mandelbrot fractal."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MBContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>mandelbrot_class</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>mandelbrot_outputs</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
