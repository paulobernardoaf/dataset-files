<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vf_idet.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vf_idet.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(IDETContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM|AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>idet_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"intl_thres"</literal></expr>, <expr><literal type="string">"set interlacing threshold"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>interlace_threshold</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">1.04</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"prog_thres"</literal></expr>, <expr><literal type="string">"set progressive threshold"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>progressive_threshold</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">1.5</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rep_thres"</literal></expr>, <expr><literal type="string">"set repeat threshold"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>repeat_threshold</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">3.0</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"half_life"</literal></expr>, <expr><literal type="string">"half life of cumulative statistics"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>half_life</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">0.0</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"analyze_interlaced_flag"</literal></expr>, <expr><literal type="string">"set number of frames to use to determine if the interlace flag is accurate"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>analyze_interlaced_flag</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>idet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type2str</name><parameter_list>(<parameter><decl><type><name>Type</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TFF</name></expr> :</case> <return>return <expr><literal type="string">"tff"</literal></expr>;</return>
<case>case <expr><name>BFF</name></expr> :</case> <return>return <expr><literal type="string">"bff"</literal></expr>;</return>
<case>case <expr><name>PROGRESSIVE</name></expr> :</case> <return>return <expr><literal type="string">"progressive"</literal></expr>;</return>
<case>case <expr><name>UNDETERMINED</name></expr> :</case> <return>return <expr><literal type="string">"undetermined"</literal></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRECISION</name></cpp:macro> <cpp:value>1048576</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>uintpow</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>r</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name>e</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>r</name><operator>*=</operator><name>b</name></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>av_dict_set_fxp</name><parameter_list>(<parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>pm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>digits</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>valuestr</name><index>[<expr><literal type="number">44</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>print_precision</name> <init>= <expr><call><name>uintpow</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>digits</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>av_rescale</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>print_precision</name></expr></argument>, <argument><expr><name>PRECISION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>valuestr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>valuestr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRId64</name><literal type="string">".%0*"</literal><name>PRId64</name></expr></argument>,
<argument><expr><name>value</name> <operator>/</operator> <name>print_precision</name></expr></argument>, <argument><expr><name>digits</name></expr></argument>, <argument><expr><name>value</name> <operator>%</operator> <name>print_precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>av_dict_set</name><argument_list>(<argument><expr><name>pm</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>valuestr</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rep2str</name><parameter_list>(<parameter><decl><type><name>RepeatedField</name></type> <name>repeated_field</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch<condition>(<expr><name>repeated_field</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>REPEAT_NONE</name></expr> :</case> <return>return <expr><literal type="string">"neither"</literal></expr>;</return>
<case>case <expr><name>REPEAT_TOP</name></expr> :</case> <return>return <expr><literal type="string">"top"</literal></expr>;</return>
<case>case <expr><name>REPEAT_BOTTOM</name></expr> :</case> <return>return <expr><literal type="string">"bottom"</literal></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_idet_filter_line_c</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><operator>(</operator><operator>*</operator><name>a</name><operator>++</operator> <operator>+</operator> <operator>*</operator><name>c</name><operator>++</operator><operator>)</operator> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <operator>*</operator><name>b</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_idet_filter_line_c_16bit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><operator>(</operator><operator>*</operator><name>a</name><operator>++</operator> <operator>+</operator> <operator>*</operator><name>c</name><operator>++</operator><operator>)</operator> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <operator>*</operator><name>b</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>IDETContext</name> <modifier>*</modifier></type><name>idet</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name><name>alpha</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>delta</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name><name>gamma</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Type</name></type> <name>type</name></decl>, <decl><type ref="prev"/><name>best_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RepeatedField</name></type> <name>repeat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>match</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>metadata</name> <init>= <expr><operator>&amp;</operator><name><name>idet</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>metadata</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>idet</name><operator>-&gt;</operator><name>csp</name><operator>-&gt;</operator><name>nb_components</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name><name>idet</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name><name>idet</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>refs</name> <init>= <expr><name><name>idet</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>idet</name><operator>-&gt;</operator><name>csp</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>idet</name><operator>-&gt;</operator><name>csp</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><operator>&amp;</operator><name><name>idet</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>y</name><operator>*</operator><name>refs</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><operator>&amp;</operator><name><name>idet</name><operator>-&gt;</operator><name>cur</name> <operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>y</name><operator>*</operator><name>refs</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><operator>&amp;</operator><name><name>idet</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>y</name><operator>*</operator><name>refs</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>alpha</name><index>[ <expr><name>y</name> <operator>&amp;</operator><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <call><name><name>idet</name><operator>-&gt;</operator><name>filter_line</name></name><argument_list>(<argument><expr><name>cur</name><operator>-</operator><name>refs</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><name>cur</name><operator>+</operator><name>refs</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>alpha</name><index>[<expr><operator>(</operator><name>y</name><operator>^</operator><literal type="number">1</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <call><name><name>idet</name><operator>-&gt;</operator><name>filter_line</name></name><argument_list>(<argument><expr><name>cur</name><operator>-</operator><name>refs</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>cur</name><operator>+</operator><name>refs</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>delta</name> <operator>+=</operator> <call><name><name>idet</name><operator>-&gt;</operator><name>filter_line</name></name><argument_list>(<argument><expr><name>cur</name><operator>-</operator><name>refs</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>cur</name><operator>+</operator><name>refs</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gamma</name><index>[<expr><operator>(</operator><name>y</name><operator>^</operator><literal type="number">1</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <call><name><name>idet</name><operator>-&gt;</operator><name>filter_line</name></name><argument_list>(<argument><expr><name>cur</name></expr></argument> , <argument><expr><name>prev</name></expr></argument>, <argument><expr><name>cur</name></expr></argument> , <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>alpha</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>idet</name><operator>-&gt;</operator><name>interlace_threshold</name></name> <operator>*</operator> <name><name>alpha</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>TFF</name></expr>;</expr_stmt>
</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name><name>alpha</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>idet</name><operator>-&gt;</operator><name>interlace_threshold</name></name> <operator>*</operator> <name><name>alpha</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>BFF</name></expr>;</expr_stmt>
</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name><name>alpha</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>idet</name><operator>-&gt;</operator><name>progressive_threshold</name></name> <operator>*</operator> <name>delta</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>PROGRESSIVE</name></expr>;</expr_stmt>
</block_content>}</block></if><else>else<block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>UNDETERMINED</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>gamma</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>idet</name><operator>-&gt;</operator><name>repeat_threshold</name></name> <operator>*</operator> <name><name>gamma</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> )</condition><block>{<block_content>
<expr_stmt><expr><name>repeat</name> <operator>=</operator> <name>REPEAT_TOP</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name><name>gamma</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>idet</name><operator>-&gt;</operator><name>repeat_threshold</name></name> <operator>*</operator> <name><name>gamma</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition><block>{<block_content>
<expr_stmt><expr><name>repeat</name> <operator>=</operator> <name>REPEAT_BOTTOM</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>repeat</name> <operator>=</operator> <name>REPEAT_NONE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>idet</name><operator>-&gt;</operator><name>history</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>idet</name><operator>-&gt;</operator><name>history</name></name></expr></argument>, <argument><expr><name>HIST_SIZE</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idet</name><operator>-&gt;</operator><name>history</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name>best_type</name> <operator>=</operator> <name>UNDETERMINED</name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>HIST_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>idet</name><operator>-&gt;</operator><name>history</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>UNDETERMINED</name></expr>)</condition><block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>best_type</name> <operator>==</operator> <name>UNDETERMINED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>best_type</name> <operator>=</operator> <name><name>idet</name><operator>-&gt;</operator><name>history</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>idet</name><operator>-&gt;</operator><name>history</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>best_type</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>match</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if><else>else<block>{<block_content>
<expr_stmt><expr><name>match</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>(<expr><name><name>idet</name><operator>-&gt;</operator><name>last_type</name></name> <operator>==</operator> <name>UNDETERMINED</name></expr>)</condition><block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>match</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>idet</name><operator>-&gt;</operator><name>last_type</name></name> <operator>=</operator> <name>best_type</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if><else>else<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>match</name><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>idet</name><operator>-&gt;</operator><name>last_type</name></name> <operator>=</operator> <name>best_type</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>idet</name><operator>-&gt;</operator><name>last_type</name></name> <operator>==</operator> <name>TFF</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>idet</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>top_field_first</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idet</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name><name>idet</name><operator>-&gt;</operator><name>last_type</name></name> <operator>==</operator> <name>BFF</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>idet</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>top_field_first</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idet</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name><name>idet</name><operator>-&gt;</operator><name>last_type</name></name> <operator>==</operator> <name>PROGRESSIVE</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>idet</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>idet</name><operator>-&gt;</operator><name>repeats</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_rescale</name><argument_list>(<argument><expr><name><name>idet</name><operator>-&gt;</operator><name>repeats</name> <index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>idet</name><operator>-&gt;</operator><name>decay_coefficient</name></name></expr></argument>, <argument><expr><name>PRECISION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name><name>idet</name><operator>-&gt;</operator><name>prestat</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_rescale</name><argument_list>(<argument><expr><name><name>idet</name><operator>-&gt;</operator><name>prestat</name> <index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>idet</name><operator>-&gt;</operator><name>decay_coefficient</name></name></expr></argument>, <argument><expr><name>PRECISION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idet</name><operator>-&gt;</operator><name>poststat</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_rescale</name><argument_list>(<argument><expr><name><name>idet</name><operator>-&gt;</operator><name>poststat</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>idet</name><operator>-&gt;</operator><name>decay_coefficient</name></name></expr></argument>, <argument><expr><name>PRECISION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>idet</name><operator>-&gt;</operator><name>total_repeats</name> <index>[ <expr><name>repeat</name></expr>]</index></name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idet</name><operator>-&gt;</operator><name>repeats</name> <index>[ <expr><name>repeat</name></expr>]</index></name> <operator>+=</operator> <name>PRECISION</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>idet</name><operator>-&gt;</operator><name>total_prestat</name> <index>[ <expr><name>type</name></expr>]</index></name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idet</name><operator>-&gt;</operator><name>prestat</name> <index>[ <expr><name>type</name></expr>]</index></name> <operator>+=</operator> <name>PRECISION</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>idet</name><operator>-&gt;</operator><name>total_poststat</name><index>[<expr><name><name>idet</name><operator>-&gt;</operator><name>last_type</name></name></expr>]</index></name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idet</name><operator>-&gt;</operator><name>poststat</name> <index>[<expr><name><name>idet</name><operator>-&gt;</operator><name>last_type</name></name></expr>]</index></name> <operator>+=</operator> <name>PRECISION</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Repeated Field:%12s, Single frame:%12s, Multi frame:%12s\n"</literal></expr></argument>,
<argument><expr><call><name>rep2str</name><argument_list>(<argument><expr><name>repeat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>type2str</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>type2str</name><argument_list>(<argument><expr><name><name>idet</name><operator>-&gt;</operator><name>last_type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_set</name> <argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="string">"lavfi.idet.repeated.current_frame"</literal></expr></argument>, <argument><expr><call><name>rep2str</name><argument_list>(<argument><expr><name>repeat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_set_fxp</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="string">"lavfi.idet.repeated.neither"</literal></expr></argument>, <argument><expr><name><name>idet</name><operator>-&gt;</operator><name>repeats</name><index>[<expr><name>REPEAT_NONE</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_set_fxp</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="string">"lavfi.idet.repeated.top"</literal></expr></argument>, <argument><expr><name><name>idet</name><operator>-&gt;</operator><name>repeats</name><index>[<expr><name>REPEAT_TOP</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_set_fxp</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="string">"lavfi.idet.repeated.bottom"</literal></expr></argument>, <argument><expr><name><name>idet</name><operator>-&gt;</operator><name>repeats</name><index>[<expr><name>REPEAT_BOTTOM</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_set</name> <argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="string">"lavfi.idet.single.current_frame"</literal></expr></argument>, <argument><expr><call><name>type2str</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_set_fxp</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="string">"lavfi.idet.single.tff"</literal></expr></argument>, <argument><expr><name><name>idet</name><operator>-&gt;</operator><name>prestat</name><index>[<expr><name>TFF</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_set_fxp</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="string">"lavfi.idet.single.bff"</literal></expr></argument>, <argument><expr><name><name>idet</name><operator>-&gt;</operator><name>prestat</name><index>[<expr><name>BFF</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_set_fxp</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="string">"lavfi.idet.single.progressive"</literal></expr></argument>, <argument><expr><name><name>idet</name><operator>-&gt;</operator><name>prestat</name><index>[<expr><name>PROGRESSIVE</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_set_fxp</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="string">"lavfi.idet.single.undetermined"</literal></expr></argument>, <argument><expr><name><name>idet</name><operator>-&gt;</operator><name>prestat</name><index>[<expr><name>UNDETERMINED</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_set</name> <argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="string">"lavfi.idet.multiple.current_frame"</literal></expr></argument>, <argument><expr><call><name>type2str</name><argument_list>(<argument><expr><name><name>idet</name><operator>-&gt;</operator><name>last_type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_set_fxp</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="string">"lavfi.idet.multiple.tff"</literal></expr></argument>, <argument><expr><name><name>idet</name><operator>-&gt;</operator><name>poststat</name><index>[<expr><name>TFF</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_set_fxp</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="string">"lavfi.idet.multiple.bff"</literal></expr></argument>, <argument><expr><name><name>idet</name><operator>-&gt;</operator><name>poststat</name><index>[<expr><name>BFF</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_set_fxp</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="string">"lavfi.idet.multiple.progressive"</literal></expr></argument>, <argument><expr><name><name>idet</name><operator>-&gt;</operator><name>poststat</name><index>[<expr><name>PROGRESSIVE</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_set_fxp</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="string">"lavfi.idet.multiple.undetermined"</literal></expr></argument>, <argument><expr><name><name>idet</name><operator>-&gt;</operator><name>poststat</name><index>[<expr><name>UNDETERMINED</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>picref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>link</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IDETContext</name> <modifier>*</modifier></type><name>idet</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name><name>idet</name><operator>-&gt;</operator><name>analyze_interlaced_flag</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>picref</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>idet</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>idet</name><operator>-&gt;</operator><name>analyze_interlaced_flag_done</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>picref</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>&amp;&amp;</operator> <name><name>idet</name><operator>-&gt;</operator><name>interlaced_flag_accuracy</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>picref</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>idet</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>picref</name><operator>-&gt;</operator><name>width</name></name> <operator>!=</operator> <name><name>link</name><operator>-&gt;</operator><name>w</name></name>
<operator>||</operator> <name><name>picref</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <name><name>link</name><operator>-&gt;</operator><name>h</name></name>
<operator>||</operator> <name><name>picref</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name><name>link</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>format</name> <operator>=</operator> <name><name>picref</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>w</name> <operator>=</operator> <name><name>picref</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>h</name> <operator>=</operator> <name><name>picref</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>idet</name><operator>-&gt;</operator><name>cur</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>idet</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>idet</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>idet</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idet</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <name><name>idet</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idet</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>picref</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>idet</name><operator>-&gt;</operator><name>cur</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>idet</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <call><name>av_frame_clone</name><argument_list>(<argument><expr><name><name>idet</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>idet</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>idet</name><operator>-&gt;</operator><name>csp</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>idet</name><operator>-&gt;</operator><name>csp</name></name> <operator>=</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>idet</name><operator>-&gt;</operator><name>csp</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>idet</name><operator>-&gt;</operator><name>filter_line</name></name> <operator>=</operator> <operator>(</operator><name>ff_idet_filter_func</name><operator>)</operator><name>ff_idet_filter_line_c_16bit</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_idet_init_x86</name><argument_list>(<argument><expr><name>idet</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>idet</name><operator>-&gt;</operator><name>analyze_interlaced_flag</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>idet</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>interlaced_frame</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>idet</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>filter</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>idet</name><operator>-&gt;</operator><name>last_type</name></name> <operator>==</operator> <name>PROGRESSIVE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>idet</name><operator>-&gt;</operator><name>interlaced_flag_accuracy</name></name> <operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idet</name><operator>-&gt;</operator><name>analyze_interlaced_flag</name></name> <operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>idet</name><operator>-&gt;</operator><name>last_type</name></name> <operator>!=</operator> <name>UNDETERMINED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>idet</name><operator>-&gt;</operator><name>interlaced_flag_accuracy</name></name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idet</name><operator>-&gt;</operator><name>analyze_interlaced_flag</name></name> <operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>idet</name><operator>-&gt;</operator><name>analyze_interlaced_flag</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_frame_clone</name><argument_list>(<argument><expr><name><name>idet</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>idet</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>&amp;&amp;</operator> <name><name>idet</name><operator>-&gt;</operator><name>interlaced_flag_accuracy</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>idet</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>idet</name><operator>-&gt;</operator><name>analyze_interlaced_flag_done</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Final flag accuracy %d\n"</literal></expr></argument>, <argument><expr><name><name>idet</name><operator>-&gt;</operator><name>interlaced_flag_accuracy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_frame_clone</name><argument_list>(<argument><expr><name><name>idet</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>filter</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_frame_clone</name><argument_list>(<argument><expr><name><name>idet</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>request_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>link</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IDETContext</name> <modifier>*</modifier></type><name>idet</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>idet</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_request_frame</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AVERROR_EOF</name> <operator>&amp;&amp;</operator> <name><name>idet</name><operator>-&gt;</operator><name>cur</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>idet</name><operator>-&gt;</operator><name>analyze_interlaced_flag_done</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><call><name>av_frame_clone</name><argument_list>(<argument><expr><name><name>idet</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>next</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>filter_frame</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idet</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>IDETContext</name> <modifier>*</modifier></type><name>idet</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><ternary><condition><expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"auto-inserted"</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>AV_LOG_INFO</name></expr> </then><else>: <expr><name>AV_LOG_DEBUG</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"Repeated Fields: Neither:%6"</literal><name>PRId64</name><literal type="string">" Top:%6"</literal><name>PRId64</name><literal type="string">" Bottom:%6"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name><name>idet</name><operator>-&gt;</operator><name>total_repeats</name><index>[<expr><name>REPEAT_NONE</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>idet</name><operator>-&gt;</operator><name>total_repeats</name><index>[<expr><name>REPEAT_TOP</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>idet</name><operator>-&gt;</operator><name>total_repeats</name><index>[<expr><name>REPEAT_BOTTOM</name></expr>]</index></name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"Single frame detection: TFF:%6"</literal><name>PRId64</name><literal type="string">" BFF:%6"</literal><name>PRId64</name><literal type="string">" Progressive:%6"</literal><name>PRId64</name><literal type="string">" Undetermined:%6"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name><name>idet</name><operator>-&gt;</operator><name>total_prestat</name><index>[<expr><name>TFF</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>idet</name><operator>-&gt;</operator><name>total_prestat</name><index>[<expr><name>BFF</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>idet</name><operator>-&gt;</operator><name>total_prestat</name><index>[<expr><name>PROGRESSIVE</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>idet</name><operator>-&gt;</operator><name>total_prestat</name><index>[<expr><name>UNDETERMINED</name></expr>]</index></name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"Multi frame detection: TFF:%6"</literal><name>PRId64</name><literal type="string">" BFF:%6"</literal><name>PRId64</name><literal type="string">" Progressive:%6"</literal><name>PRId64</name><literal type="string">" Undetermined:%6"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name><name>idet</name><operator>-&gt;</operator><name>total_poststat</name><index>[<expr><name>TFF</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>idet</name><operator>-&gt;</operator><name>total_poststat</name><index>[<expr><name>BFF</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>idet</name><operator>-&gt;</operator><name>total_poststat</name><index>[<expr><name>PROGRESSIVE</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>idet</name><operator>-&gt;</operator><name>total_poststat</name><index>[<expr><name>UNDETERMINED</name></expr>]</index></name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>idet</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>idet</name><operator>-&gt;</operator><name>cur</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>idet</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_YUV420P</name></expr>,
<expr><name>AV_PIX_FMT_YUV422P</name></expr>,
<expr><name>AV_PIX_FMT_YUV444P</name></expr>,
<expr><name>AV_PIX_FMT_YUV410P</name></expr>,
<expr><name>AV_PIX_FMT_YUV411P</name></expr>,
<expr><name>AV_PIX_FMT_GRAY8</name></expr>,
<expr><name>AV_PIX_FMT_YUVJ420P</name></expr>,
<expr><name>AV_PIX_FMT_YUVJ422P</name></expr>,
<expr><name>AV_PIX_FMT_YUVJ444P</name></expr>,
<expr><name>AV_PIX_FMT_GRAY16</name></expr>,
<expr><name>AV_PIX_FMT_YUV440P</name></expr>,
<expr><name>AV_PIX_FMT_YUVJ440P</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P9</name></expr>,
<expr><name>AV_PIX_FMT_YUV422P9</name></expr>,
<expr><name>AV_PIX_FMT_YUV444P9</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P10</name></expr>,
<expr><name>AV_PIX_FMT_YUV422P10</name></expr>,
<expr><name>AV_PIX_FMT_YUV444P10</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P12</name></expr>,
<expr><name>AV_PIX_FMT_YUV422P12</name></expr>,
<expr><name>AV_PIX_FMT_YUV444P12</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P14</name></expr>,
<expr><name>AV_PIX_FMT_YUV422P14</name></expr>,
<expr><name>AV_PIX_FMT_YUV444P14</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P16</name></expr>,
<expr><name>AV_PIX_FMT_YUV422P16</name></expr>,
<expr><name>AV_PIX_FMT_YUV444P16</name></expr>,
<expr><name>AV_PIX_FMT_YUVA420P</name></expr>,
<expr><name>AV_PIX_FMT_YUVA422P</name></expr>,
<expr><name>AV_PIX_FMT_YUVA444P</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>IDETContext</name> <modifier>*</modifier></type><name>idet</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>idet</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>idet</name><operator>-&gt;</operator><name>last_type</name></name> <operator>=</operator> <name>UNDETERMINED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>idet</name><operator>-&gt;</operator><name>history</name></name></expr></argument>, <argument><expr><name>UNDETERMINED</name></expr></argument>, <argument><expr><name>HIST_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>idet</name><operator>-&gt;</operator><name>half_life</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>idet</name><operator>-&gt;</operator><name>decay_coefficient</name></name> <operator>=</operator> <call><name>lrint</name><argument_list>( <argument><expr><name>PRECISION</name> <operator>*</operator> <call><name>exp2</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0</literal> <operator>/</operator> <name><name>idet</name><operator>-&gt;</operator><name>half_life</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>idet</name><operator>-&gt;</operator><name>decay_coefficient</name></name> <operator>=</operator> <name>PRECISION</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>idet</name><operator>-&gt;</operator><name>filter_line</name></name> <operator>=</operator> <name>ff_idet_filter_line_c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_idet_init_x86</name><argument_list>(<argument><expr><name>idet</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>idet_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>idet_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>request_frame</name> <operator>=</operator> <name>request_frame</name></expr>
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_idet</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"idet"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Interlace detect Filter."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>IDETContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>idet_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>idet_outputs</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>idet_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
