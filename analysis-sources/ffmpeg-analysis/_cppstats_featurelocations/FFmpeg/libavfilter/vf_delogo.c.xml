<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vf_delogo.c">




























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/eval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>var_names</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"x"</literal></expr>,
<expr><literal type="string">"y"</literal></expr>,
<expr><literal type="string">"w"</literal></expr>,
<expr><literal type="string">"h"</literal></expr>,
<expr><literal type="string">"n"</literal></expr>, 
<expr><literal type="string">"t"</literal></expr>, 
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<enum>enum <name>var_name</name> <block>{
<decl><name>VAR_X</name></decl>,
<decl><name>VAR_Y</name></decl>,
<decl><name>VAR_W</name></decl>,
<decl><name>VAR_H</name></decl>,
<decl><name>VAR_N</name></decl>,
<decl><name>VAR_T</name></decl>,
<decl><name>VAR_VARS_NB</name></decl>
}</block>;</enum>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TS2T</name><parameter_list>(<parameter><type><name>ts</name></type></parameter>, <parameter><type><name>tb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ts) == AV_NOPTS_VALUE ? NAN : (double)(ts) * av_q2d(tb))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_expr</name><parameter_list>(<parameter><decl><type><name>AVExpr</name> <modifier>*</modifier><modifier>*</modifier></type><name>pexpr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name>old</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pexpr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>old</name> <operator>=</operator> <operator>*</operator><name>pexpr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_expr_parse</name><argument_list>(<argument><expr><name>pexpr</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>, <argument><expr><name>var_names</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Error when parsing the expression '%s' for %s\n"</literal></expr></argument>,
<argument><expr><name>expr</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pexpr</name> <operator>=</operator> <name>old</name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




















<function><type><specifier>static</specifier> <name>void</name></type> <name>apply_delogo</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_linesize</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_linesize</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>sar</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>logo_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>logo_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>logo_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>logo_h</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>band</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>show</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>direct</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>interp</name></decl>, <decl><type ref="prev"/><name>weightl</name></decl>, <decl><type ref="prev"/><name>weightr</name></decl>, <decl><type ref="prev"/><name>weightt</name></decl>, <decl><type ref="prev"/><name>weightb</name></decl>, <decl><type ref="prev"/><name>weight</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>xdst</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>xsrc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>topleft</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>botleft</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>topright</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>left_sample</name></decl>, <decl><type ref="prev"/><name>right_sample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xclipl</name></decl>, <decl><type ref="prev"/><name>xclipr</name></decl>, <decl><type ref="prev"/><name>yclipt</name></decl>, <decl><type ref="prev"/><name>yclipb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>logo_x1</name></decl>, <decl><type ref="prev"/><name>logo_x2</name></decl>, <decl><type ref="prev"/><name>logo_y1</name></decl>, <decl><type ref="prev"/><name>logo_y2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xclipl</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><operator>-</operator><name>logo_x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>xclipr</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>logo_x</name><operator>+</operator><name>logo_w</name><operator>-</operator><name>w</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>yclipt</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><operator>-</operator><name>logo_y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>yclipb</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>logo_y</name><operator>+</operator><name>logo_h</name><operator>-</operator><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>logo_x1</name> <operator>=</operator> <name>logo_x</name> <operator>+</operator> <name>xclipl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>logo_x2</name> <operator>=</operator> <name>logo_x</name> <operator>+</operator> <name>logo_w</name> <operator>-</operator> <name>xclipr</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>logo_y1</name> <operator>=</operator> <name>logo_y</name> <operator>+</operator> <name>yclipt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>logo_y2</name> <operator>=</operator> <name>logo_y</name> <operator>+</operator> <name>logo_h</name> <operator>-</operator> <name>yclipb</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>topleft</name> <operator>=</operator> <name>src</name><operator>+</operator><name>logo_y1</name> <operator>*</operator> <name>src_linesize</name><operator>+</operator><name>logo_x1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>topright</name> <operator>=</operator> <name>src</name><operator>+</operator><name>logo_y1</name> <operator>*</operator> <name>src_linesize</name><operator>+</operator><name>logo_x2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>botleft</name> <operator>=</operator> <name>src</name><operator>+</operator><name>logo_y2</name> <operator>*</operator> <name>src_linesize</name><operator>+</operator><name>logo_x1</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>direct</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_image_copy_plane</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_linesize</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_linesize</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><name>logo_y1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>dst_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><name>logo_y1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>src_linesize</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>logo_y1</name><operator>+</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>logo_y2</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>left_sample</name> <operator>=</operator> <name><name>topleft</name><index>[<expr><name>src_linesize</name><operator>*</operator><operator>(</operator><name>y</name><operator>-</operator><name>logo_y1</name><operator>)</operator></expr>]</index></name> <operator>+</operator>
<name><name>topleft</name><index>[<expr><name>src_linesize</name><operator>*</operator><operator>(</operator><name>y</name><operator>-</operator><name>logo_y1</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name> <operator>+</operator>
<name><name>topleft</name><index>[<expr><name>src_linesize</name><operator>*</operator><operator>(</operator><name>y</name><operator>-</operator><name>logo_y1</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>right_sample</name> <operator>=</operator> <name><name>topright</name><index>[<expr><name>src_linesize</name><operator>*</operator><operator>(</operator><name>y</name><operator>-</operator><name>logo_y1</name><operator>)</operator></expr>]</index></name> <operator>+</operator>
<name><name>topright</name><index>[<expr><name>src_linesize</name><operator>*</operator><operator>(</operator><name>y</name><operator>-</operator><name>logo_y1</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name> <operator>+</operator>
<name><name>topright</name><index>[<expr><name>src_linesize</name><operator>*</operator><operator>(</operator><name>y</name><operator>-</operator><name>logo_y1</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>logo_x1</name><operator>+</operator><literal type="number">1</literal></expr><operator>,</operator>
<expr><name>xdst</name> <operator>=</operator> <name>dst</name><operator>+</operator><name>logo_x1</name><operator>+</operator><literal type="number">1</literal></expr><operator>,</operator>
<expr><name>xsrc</name> <operator>=</operator> <name>src</name><operator>+</operator><name>logo_x1</name><operator>+</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>logo_x2</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr><operator>,</operator> <expr><name>xdst</name><operator>++</operator></expr><operator>,</operator> <expr><name>xsrc</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>show</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>y</name> <operator>==</operator> <name>logo_y1</name><operator>+</operator><literal type="number">1</literal> <operator>||</operator> <name>y</name> <operator>==</operator> <name>logo_y2</name><operator>-</operator><literal type="number">1</literal> <operator>||</operator>
<name>x</name> <operator>==</operator> <name>logo_x1</name><operator>+</operator><literal type="number">1</literal> <operator>||</operator> <name>x</name> <operator>==</operator> <name>logo_x2</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>xdst</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>weightl</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <operator>(</operator><name>logo_x2</name><operator>-</operator><name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>y</name><operator>-</operator><name>logo_y1</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>logo_y2</name><operator>-</operator><name>y</name><operator>)</operator> <operator>*</operator> <name><name>sar</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>weightr</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>x</name><operator>-</operator><name>logo_x1</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>y</name><operator>-</operator><name>logo_y1</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>logo_y2</name><operator>-</operator><name>y</name><operator>)</operator> <operator>*</operator> <name><name>sar</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>weightt</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>x</name><operator>-</operator><name>logo_x1</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>logo_x2</name><operator>-</operator><name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>logo_y2</name><operator>-</operator><name>y</name><operator>)</operator> <operator>*</operator> <name><name>sar</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>weightb</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>x</name><operator>-</operator><name>logo_x1</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>logo_x2</name><operator>-</operator><name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>y</name><operator>-</operator><name>logo_y1</name><operator>)</operator> <operator>*</operator> <name><name>sar</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>interp</name> <operator>=</operator>
<name>left_sample</name> <operator>*</operator> <name>weightl</name>
<operator>+</operator>
<name>right_sample</name> <operator>*</operator> <name>weightr</name>
<operator>+</operator>
<operator>(</operator><name><name>topleft</name><index>[<expr><name>x</name><operator>-</operator><name>logo_x1</name></expr>]</index></name> <operator>+</operator>
<name><name>topleft</name><index>[<expr><name>x</name><operator>-</operator><name>logo_x1</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator>
<name><name>topleft</name><index>[<expr><name>x</name><operator>-</operator><name>logo_x1</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>weightt</name>
<operator>+</operator>
<operator>(</operator><name><name>botleft</name><index>[<expr><name>x</name><operator>-</operator><name>logo_x1</name></expr>]</index></name> <operator>+</operator>
<name><name>botleft</name><index>[<expr><name>x</name><operator>-</operator><name>logo_x1</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator>
<name><name>botleft</name><index>[<expr><name>x</name><operator>-</operator><name>logo_x1</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>weightb</name></expr>;</expr_stmt>
<expr_stmt><expr><name>weight</name> <operator>=</operator> <operator>(</operator><name>weightl</name> <operator>+</operator> <name>weightr</name> <operator>+</operator> <name>weightt</name> <operator>+</operator> <name>weightb</name><operator>)</operator> <operator>*</operator> <literal type="number">3U</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>interp</name> <operator>=</operator> <operator>(</operator><name>interp</name> <operator>+</operator> <operator>(</operator><name>weight</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>weight</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;=</operator> <name>logo_y</name><operator>+</operator><name>band</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <name>logo_y</name><operator>+</operator><name>logo_h</name><operator>-</operator><name>band</name> <operator>&amp;&amp;</operator>
<name>x</name> <operator>&gt;=</operator> <name>logo_x</name><operator>+</operator><name>band</name> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;</operator> <name>logo_x</name><operator>+</operator><name>logo_w</name><operator>-</operator><name>band</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>xdst</name> <operator>=</operator> <name>interp</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>dist</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>logo_x</name><operator>+</operator><name>band</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dist</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>dist</name></expr></argument>, <argument><expr><name>logo_x</name><operator>-</operator><name>x</name><operator>+</operator><name>band</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <name>logo_x</name><operator>+</operator><name>logo_w</name><operator>-</operator><name>band</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dist</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>dist</name></expr></argument>, <argument><expr><name>x</name><operator>-</operator><operator>(</operator><name>logo_x</name><operator>+</operator><name>logo_w</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>band</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <name>logo_y</name><operator>+</operator><name>band</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dist</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>dist</name></expr></argument>, <argument><expr><name>logo_y</name><operator>-</operator><name>y</name><operator>+</operator><name>band</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>y</name> <operator>&gt;=</operator> <name>logo_y</name><operator>+</operator><name>logo_h</name><operator>-</operator><name>band</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dist</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>dist</name></expr></argument>, <argument><expr><name>y</name><operator>-</operator><operator>(</operator><name>logo_y</name><operator>+</operator><name>logo_h</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>band</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>xdst</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>xsrc</name><operator>*</operator><name>dist</name> <operator>+</operator> <name>interp</name><operator>*</operator><operator>(</operator><name>band</name><operator>-</operator><name>dist</name><operator>)</operator><operator>)</operator><operator>/</operator><name>band</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_linesize</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>DelogoContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <name>y</name>, <name>w</name>, <name>h</name>, <name>band</name>, <name>show</name>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>x_expr</name></decl>, <modifier>*</modifier><name>y_expr</name>, <modifier>*</modifier><name>w_expr</name>, <modifier>*</modifier><name>h_expr</name>;</decl_stmt>
<decl_stmt><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name>x_pexpr</name></decl>, <modifier>*</modifier><name>y_pexpr</name>, <modifier>*</modifier><name>w_pexpr</name>, <modifier>*</modifier><name>h_pexpr</name>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>var_values</name><index>[<expr><name>VAR_VARS_NB</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>DelogoContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(DelogoContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_VIDEO_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>delogo_options</name><index>[]</index></name><init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"x"</literal></expr>, <expr><literal type="string">"set logo x position"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>x_expr</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"-1"</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"y"</literal></expr>, <expr><literal type="string">"set logo y position"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>y_expr</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"-1"</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"w"</literal></expr>, <expr><literal type="string">"set logo width"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>w_expr</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"-1"</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"h"</literal></expr>, <expr><literal type="string">"set logo height"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>h_expr</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"-1"</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBAVFILTER_VERSION_MAJOR</name> <operator>&lt;</operator> <literal type="number">7</literal></expr></cpp:if>

<expr><block>{ <expr><literal type="string">"band"</literal></expr>, <expr><literal type="string">"set delogo area band size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>band</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"t"</literal></expr>, <expr><literal type="string">"set delogo area band size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>band</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><literal type="string">"show"</literal></expr>, <expr><literal type="string">"show delogo area"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>show</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>,<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>delogo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DelogoContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x_pexpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>x_pexpr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>y_pexpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y_pexpr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>w_pexpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>w_pexpr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>h_pexpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h_pexpr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_YUV444P</name></expr>, <expr><name>AV_PIX_FMT_YUV422P</name></expr>, <expr><name>AV_PIX_FMT_YUV420P</name></expr>,
<expr><name>AV_PIX_FMT_YUV411P</name></expr>, <expr><name>AV_PIX_FMT_YUV410P</name></expr>, <expr><name>AV_PIX_FMT_YUV440P</name></expr>,
<expr><name>AV_PIX_FMT_YUVA420P</name></expr>, <expr><name>AV_PIX_FMT_GRAY8</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DelogoContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>set_expr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>x_pexpr</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>x_expr</name></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>set_expr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>y_pexpr</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>y_expr</name></name></expr></argument>, <argument><expr><literal type="string">"y"</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>set_expr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>w_pexpr</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>w_expr</name></name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>set_expr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>h_pexpr</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>h_expr</name></name></expr></argument>, <argument><expr><literal type="string">"h"</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <call><name>av_expr_eval</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x_pexpr</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <call><name>av_expr_eval</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>y_pexpr</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <call><name>av_expr_eval</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>w_pexpr</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <call><name>av_expr_eval</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>h_pexpr</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_UNSET_OPT</name><parameter_list>(<parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (s-&gt;opt == -1) { av_log(s, AV_LOG_ERROR, "Option %s was not set.\n", #opt); return AVERROR(EINVAL); }</cpp:value></cpp:define>




<expr_stmt><expr><call><name>CHECK_UNSET_OPT</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_UNSET_OPT</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_UNSET_OPT</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_UNSET_OPT</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBAVFILTER_VERSION_MAJOR</name> <operator>&lt;</operator> <literal type="number">7</literal></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>band</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Note: default band value was changed from 4 to 1.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>band</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>band</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Option band is deprecated.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>band</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"x:%d y:%d, w:%d h:%d band:%d show:%d\n"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>band</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>show</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>band</name></name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>band</name></name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>x</name></name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>band</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y</name></name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>band</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DelogoContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>band</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>band</name></name><operator>*</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>band</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>band</name></name><operator>*</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Logo area is outside of the frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DelogoContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hsub0</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vsub0</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>direct</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>plane</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVRational</name></type> <name>sar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_N</name></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>frame_count_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_T</name></expr>]</index></name> <operator>=</operator> <call><name>TS2T</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <call><name>av_expr_eval</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>x_pexpr</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <call><name>av_expr_eval</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>y_pexpr</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <call><name>av_expr_eval</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>w_pexpr</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <call><name>av_expr_eval</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>h_pexpr</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>band</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>band</name></name><operator>*</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>band</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>band</name></name><operator>*</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Logo area is outside of the frame,"</literal>
<literal type="string">" auto set the area inside of the frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>band</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>band</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>band</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>band</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>band</name></name><operator>*</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>x</name></name> <operator>-</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>band</name></name><operator>*</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>band</name></name><operator>*</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>y</name></name> <operator>-</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>band</name></name><operator>*</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>config_input</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>band</name></name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>band</name></name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>x</name></name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>band</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y</name></name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>band</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_frame_is_writable</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>direct</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>sar</name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sar</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sar</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name><name>sar</name><operator>.</operator><name>den</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>hsub</name> <init>= <expr><ternary><condition><expr><name>plane</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>plane</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>hsub0</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vsub</name> <init>= <expr><ternary><condition><expr><name>plane</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>plane</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>vsub0</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>apply_delogo</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>in</name> <operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name> <operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name>hsub</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>vsub</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>sar</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>x</name></name><operator>&gt;&gt;</operator><name>hsub</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>y</name></name><operator>&gt;&gt;</operator><name>vsub</name></expr></argument>,


<argument><expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>x</name></name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>hsub</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>hsub</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>y</name></name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>vsub</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>vsub</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>band</name></name><operator>&gt;&gt;</operator><call><name>FFMIN</name><argument_list>(<argument><expr><name>hsub</name></expr></argument>, <argument><expr><name>vsub</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>show</name></name></expr></argument>, <argument><expr><name>direct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>direct</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>avfilter_vf_delogo_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>avfilter_vf_delogo_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_delogo</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"delogo"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Remove logo from input video."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DelogoContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>delogo_class</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>avfilter_vf_delogo_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>avfilter_vf_delogo_outputs</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
