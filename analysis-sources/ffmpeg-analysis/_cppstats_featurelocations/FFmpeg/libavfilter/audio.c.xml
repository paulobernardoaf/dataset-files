<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\audio.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFFER_ALIGN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>


<function><type><name>AVFrame</name> <modifier>*</modifier></type><name>ff_null_get_audio_buffer</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ff_get_audio_buffer</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>AVFrame</name> <modifier>*</modifier></type><name>ff_default_get_audio_buffer</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>channels</name> <init>= <expr><name><name>link</name><operator>-&gt;</operator><name>channels</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>channels</name> <operator>==</operator> <call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>link</name><operator>-&gt;</operator><name>frame_pool</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>frame_pool</name></name> <operator>=</operator> <call><name>ff_frame_pool_audio_init</name><argument_list>(<argument><expr><name>av_buffer_allocz</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>,
<argument><expr><name>nb_samples</name></expr></argument>, <argument><expr><name><name>link</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>BUFFER_ALIGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>link</name><operator>-&gt;</operator><name>frame_pool</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pool_channels</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pool_nb_samples</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pool_align</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>pool_format</name> <init>= <expr><name>AV_SAMPLE_FMT_NONE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_frame_pool_get_audio_config</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>frame_pool</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>pool_channels</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pool_nb_samples</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>pool_format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pool_align</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pool_channels</name> <operator>!=</operator> <name>channels</name> <operator>||</operator> <name>pool_nb_samples</name> <operator>&lt;</operator> <name>nb_samples</name> <operator>||</operator>
<name>pool_format</name> <operator>!=</operator> <name><name>link</name><operator>-&gt;</operator><name>format</name></name> <operator>||</operator> <name>pool_align</name> <operator>!=</operator> <name>BUFFER_ALIGN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_frame_pool_uninit</name><argument_list>(<argument><expr><operator>(</operator><name>FFFramePool</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>link</name><operator>-&gt;</operator><name>frame_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>frame_pool</name></name> <operator>=</operator> <call><name>ff_frame_pool_audio_init</name><argument_list>(<argument><expr><name>av_buffer_allocz</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>,
<argument><expr><name>nb_samples</name></expr></argument>, <argument><expr><name><name>link</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>BUFFER_ALIGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>link</name><operator>-&gt;</operator><name>frame_pool</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>frame</name> <operator>=</operator> <call><name>ff_frame_pool_get</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>frame_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name>nb_samples</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name><name>link</name><operator>-&gt;</operator><name>channel_layout</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>link</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_samples_set_silence</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name><name>link</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>frame</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>AVFrame</name> <modifier>*</modifier></type><name>ff_get_audio_buffer</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>link</name><operator>-&gt;</operator><name>dstpad</name><operator>-&gt;</operator><name>get_audio_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>link</name><operator>-&gt;</operator><name>dstpad</name><operator>-&gt;</operator><name>get_audio_buffer</name></name><argument_list>(<argument><expr><name>link</name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_default_get_audio_buffer</name><argument_list>(<argument><expr><name>link</name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
