<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\scale_eval.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scale_eval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/eval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>var_names</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"in_w"</literal></expr>, <expr><literal type="string">"iw"</literal></expr>,
<expr><literal type="string">"in_h"</literal></expr>, <expr><literal type="string">"ih"</literal></expr>,
<expr><literal type="string">"out_w"</literal></expr>, <expr><literal type="string">"ow"</literal></expr>,
<expr><literal type="string">"out_h"</literal></expr>, <expr><literal type="string">"oh"</literal></expr>,
<expr><literal type="string">"a"</literal></expr>,
<expr><literal type="string">"sar"</literal></expr>,
<expr><literal type="string">"dar"</literal></expr>,
<expr><literal type="string">"hsub"</literal></expr>,
<expr><literal type="string">"vsub"</literal></expr>,
<expr><literal type="string">"ohsub"</literal></expr>,
<expr><literal type="string">"ovsub"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<enum>enum <name>var_name</name> <block>{
<decl><name>VAR_IN_W</name></decl>, <decl><name>VAR_IW</name></decl>,
<decl><name>VAR_IN_H</name></decl>, <decl><name>VAR_IH</name></decl>,
<decl><name>VAR_OUT_W</name></decl>, <decl><name>VAR_OW</name></decl>,
<decl><name>VAR_OUT_H</name></decl>, <decl><name>VAR_OH</name></decl>,
<decl><name>VAR_A</name></decl>,
<decl><name>VAR_SAR</name></decl>,
<decl><name>VAR_DAR</name></decl>,
<decl><name>VAR_HSUB</name></decl>,
<decl><name>VAR_VSUB</name></decl>,
<decl><name>VAR_OHSUB</name></decl>,
<decl><name>VAR_OVSUB</name></decl>,
<decl><name>VARS_NB</name></decl>
}</block>;</enum>

<function><type><name>int</name></type> <name>ff_scale_eval_dimensions</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>w_expr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>h_expr</name></decl></parameter>,
<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ret_w</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ret_h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>out_desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>eval_w</name></decl>, <decl><type ref="prev"/><name>eval_h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>var_values</name><index>[<expr><name>VARS_NB</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_IN_W</name></expr>]</index></name> <operator>=</operator> <name><name>var_values</name><index>[<expr><name>VAR_IW</name></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_IN_H</name></expr>]</index></name> <operator>=</operator> <name><name>var_values</name><index>[<expr><name>VAR_IH</name></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_OUT_W</name></expr>]</index></name> <operator>=</operator> <name><name>var_values</name><index>[<expr><name>VAR_OW</name></expr>]</index></name> <operator>=</operator> <name>NAN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_OUT_H</name></expr>]</index></name> <operator>=</operator> <name><name>var_values</name><index>[<expr><name>VAR_OH</name></expr>]</index></name> <operator>=</operator> <name>NAN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_A</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>/</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_SAR</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr> ?</condition><then>
<expr><operator>(</operator><name>double</name><operator>)</operator> <name><name>inlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name> <operator>/</operator> <name><name>inlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_DAR</name></expr>]</index></name> <operator>=</operator> <name><name>var_values</name><index>[<expr><name>VAR_A</name></expr>]</index></name> <operator>*</operator> <name><name>var_values</name><index>[<expr><name>VAR_SAR</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_HSUB</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_VSUB</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_OHSUB</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>out_desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_OVSUB</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>out_desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>av_expr_parse_and_eval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><operator>(</operator><name>expr</name> <operator>=</operator> <name>w_expr</name><operator>)</operator></expr></argument>,
<argument><expr><name>var_names</name></expr></argument>, <argument><expr><name>var_values</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>eval_w</name> <operator>=</operator> <name><name>var_values</name><index>[<expr><name>VAR_OUT_W</name></expr>]</index></name> <operator>=</operator> <name><name>var_values</name><index>[<expr><name>VAR_OW</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>int</name><operator>)</operator> <name>res</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator> <name>res</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_expr_parse_and_eval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><operator>(</operator><name>expr</name> <operator>=</operator> <name>h_expr</name><operator>)</operator></expr></argument>,
<argument><expr><name>var_names</name></expr></argument>, <argument><expr><name>var_values</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>eval_h</name> <operator>=</operator> <name><name>var_values</name><index>[<expr><name>VAR_OUT_H</name></expr>]</index></name> <operator>=</operator> <name><name>var_values</name><index>[<expr><name>VAR_OH</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>int</name><operator>)</operator> <name>res</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator> <name>res</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_expr_parse_and_eval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><operator>(</operator><name>expr</name> <operator>=</operator> <name>w_expr</name><operator>)</operator></expr></argument>,
<argument><expr><name>var_names</name></expr></argument>, <argument><expr><name>var_values</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>eval_w</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>int</name><operator>)</operator> <name>res</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator> <name>res</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ret_w</name> <operator>=</operator> <name>eval_w</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ret_h</name> <operator>=</operator> <name>eval_h</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Error when evaluating the expression '%s'.\n"</literal>
<literal type="string">"Maybe the expression for out_w:'%s' or for out_h:'%s' is self-referencing.\n"</literal></expr></argument>,
<argument><expr><name>expr</name></expr></argument>, <argument><expr><name>w_expr</name></expr></argument>, <argument><expr><name>h_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_scale_adjust_dimensions</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ret_w</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ret_h</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>force_original_aspect_ratio</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force_divisible_by</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>factor_w</name></decl>, <decl><type ref="prev"/><name>factor_h</name></decl>;</decl_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>*</operator><name>ret_w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>*</operator><name>ret_h</name></expr>;</expr_stmt>



<expr_stmt><expr><name>factor_w</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>factor_h</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>factor_w</name> <operator>=</operator> <operator>-</operator><name>w</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>factor_h</name> <operator>=</operator> <operator>-</operator><name>h</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>h</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>av_rescale</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>*</operator> <name>factor_w</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>factor_w</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>av_rescale</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <name>factor_h</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>factor_h</name></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>force_original_aspect_ratio</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tmp_w</name> <init>= <expr><call><name>av_rescale</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tmp_h</name> <init>= <expr><call><name>av_rescale</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>force_original_aspect_ratio</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>tmp_w</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>tmp_h</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>force_divisible_by</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name>w</name> <operator>/</operator> <name>force_divisible_by</name> <operator>*</operator> <name>force_divisible_by</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name>h</name> <operator>/</operator> <name>force_divisible_by</name> <operator>*</operator> <name>force_divisible_by</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>tmp_w</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>tmp_h</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>force_divisible_by</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><name>w</name> <operator>+</operator> <name>force_divisible_by</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>force_divisible_by</name> <operator>*</operator> <name>force_divisible_by</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>+</operator> <name>force_divisible_by</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>force_divisible_by</name> <operator>*</operator> <name>force_divisible_by</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ret_w</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ret_h</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
