<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vf_fspp.c">




































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vf_fspp.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(FSPPContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_VIDEO_PARAM</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>fspp_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"quality"</literal></expr>, <expr><literal type="string">"set quality"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>log2_count</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">4</literal></expr>}</block></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>MAX_LEVEL</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"qp"</literal></expr>, <expr><literal type="string">"force a constant quantizer parameter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>qp</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"strength"</literal></expr>, <expr><literal type="string">"set filter strength"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>strength</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">15</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"use_bframe_qp"</literal></expr>, <expr><literal type="string">"use B-frames' QP"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>use_bframe_qp</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>,<expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>fspp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></expr></argument>, <argument><expr><name>dither</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index> <operator>=</operator> <block>{
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">63</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">32</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">31</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">55</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">40</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">23</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">61</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">34</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">29</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">53</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">42</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">21</literal></expr>, }</block></expr>,
}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>short</name></type> <name><name>custom_threshold</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{



<expr><literal type="number">71</literal></expr>, <expr><literal type="number">296</literal></expr>, <expr><literal type="number">295</literal></expr>, <expr><literal type="number">237</literal></expr>, <expr><literal type="number">71</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">19</literal></expr>,
<expr><literal type="number">245</literal></expr>, <expr><literal type="number">193</literal></expr>, <expr><literal type="number">185</literal></expr>, <expr><literal type="number">121</literal></expr>, <expr><literal type="number">102</literal></expr>, <expr><literal type="number">73</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">27</literal></expr>,
<expr><literal type="number">158</literal></expr>, <expr><literal type="number">129</literal></expr>, <expr><literal type="number">141</literal></expr>, <expr><literal type="number">107</literal></expr>, <expr><literal type="number">97</literal></expr>, <expr><literal type="number">73</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">26</literal></expr>,
<expr><literal type="number">102</literal></expr>, <expr><literal type="number">116</literal></expr>, <expr><literal type="number">109</literal></expr>, <expr><literal type="number">98</literal></expr>, <expr><literal type="number">82</literal></expr>, <expr><literal type="number">66</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">23</literal></expr>,
<expr><literal type="number">71</literal></expr>, <expr><literal type="number">94</literal></expr>, <expr><literal type="number">95</literal></expr>, <expr><literal type="number">81</literal></expr>, <expr><literal type="number">70</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">20</literal></expr>,
<expr><literal type="number">56</literal></expr>, <expr><literal type="number">77</literal></expr>, <expr><literal type="number">74</literal></expr>, <expr><literal type="number">66</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">15</literal></expr>,
<expr><literal type="number">38</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">11</literal></expr>,
<expr><literal type="number">20</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">5</literal></expr>
}</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>void</name></type> <name>store_slice_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>dst_stride</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>log2_scale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORE</name><parameter_list>(<parameter><type><name>pos</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>temp = (src[x + pos] + (d[pos] &gt;&gt; log2_scale)) &gt;&gt; (6 - log2_scale); src[x + pos] = src[x + pos - 8 * src_stride] = 0; if (temp &amp; 0x100) temp = ~(temp &gt;&gt; 31); dst[x + pos] = temp;</cpp:value></cpp:define>





<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name><name>dither</name><index>[<expr><name>y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>temp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STORE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>store_slice2_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>dst_stride</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>log2_scale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORE2</name><parameter_list>(<parameter><type><name>pos</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>temp = (src[x + pos] + src[x + pos + 16 * src_stride] + (d[pos] &gt;&gt; log2_scale)) &gt;&gt; (6 - log2_scale); src[x + pos + 16 * src_stride] = 0; if (temp &amp; 0x100) temp = ~(temp &gt;&gt; 31); dst[x + pos] = temp;</cpp:value></cpp:define>





<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name><name>dither</name><index>[<expr><name>y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>temp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STORE2</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE2</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE2</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE2</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE2</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE2</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE2</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE2</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mul_thrmat_c</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>thr_adr_noq</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>thr_adr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>a</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>a</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>thr_adr</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <name>q</name> <operator>*</operator> <name><name>thr_adr_noq</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter</name><parameter_list>(<parameter><decl><type><name>FSPPContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dst_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>qp_store</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qp_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_luma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>x0</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>es</name></decl>, <decl><type ref="prev"/><name>qy</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>stride</name> <init>= <expr><ternary><condition><expr><name>is_luma</name></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>temp_stride</name></name></expr> </then><else>: <expr><operator>(</operator><name>width</name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>step</name> <init>= <expr><literal type="number">6</literal> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>log2_count</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>qpsh</name> <init>= <expr><literal type="number">4</literal> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>hsub</name></name> <operator>*</operator> <operator>!</operator><name>is_luma</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>qpsv</name> <init>= <expr><literal type="number">4</literal> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>vsub</name></name> <operator>*</operator> <operator>!</operator><name>is_luma</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name>block_align</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>BLOCKSZ</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>BLOCKSZ</name></expr>]</index></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>block_align</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block3</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>block_align</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>BLOCKSZ</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>block3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>BLOCKSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>src</name> <operator>||</operator> <operator>!</operator><name>dst</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>src</name></name> <operator>+</operator> <name>index</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>src_stride</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>src</name><index>[<expr><name>index</name> <operator>-</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>src</name><index>[<expr><name>index</name> <operator>+</operator> <name>x</name></expr> ]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>src</name><index>[<expr><name>index</name> <operator>+</operator> <name>width</name> <operator>+</operator> <name>x</name></expr> ]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>src</name><index>[<expr><name>index</name> <operator>+</operator> <name>width</name> <operator>-</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>src</name></name> <operator>+</operator> <operator>(</operator> <literal type="number">7</literal> <operator>-</operator> <name>y</name> <operator>)</operator> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>src</name></name> <operator>+</operator> <operator>(</operator> <name>y</name> <operator>+</operator> <literal type="number">8</literal> <operator>)</operator> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>src</name></name> <operator>+</operator> <operator>(</operator><name>height</name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <name>y</name><operator>)</operator> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>src</name></name> <operator>+</operator> <operator>(</operator><name>height</name> <operator>-</operator> <name>y</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">24</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>temp</name></name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>step</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name> <operator>+</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <name>step</name></expr></incr>)</control> <block>{<block_content> 
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>y1</name> <init>= <expr><name>y</name> <operator>-</operator> <literal type="number">8</literal> <operator>+</operator> <name>step</name></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><name>qy</name> <operator>=</operator> <name>y</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>qy</name> <operator>&gt;</operator> <name>height</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>qy</name> <operator>=</operator> <name>height</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>qy</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>qy</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>qy</name> <operator>=</operator> <operator>(</operator><name>qy</name> <operator>&gt;&gt;</operator> <name>qpsv</name><operator>)</operator> <operator>*</operator> <name>qp_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>row_fdct</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>src</name></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <literal type="number">2</literal> <operator>-</operator> <operator>(</operator><name>y</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x0</name> <operator>&lt;</operator> <name>width</name> <operator>+</operator> <literal type="number">8</literal> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator> <operator>(</operator><name>BLOCKSZ</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>x0</name> <operator>+=</operator> <literal type="number">8</literal> <operator>*</operator> <operator>(</operator><name>BLOCKSZ</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>row_fdct</name></name><argument_list>(<argument><expr><name>block</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>src</name></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <name>x0</name> <operator>+</operator> <literal type="number">2</literal> <operator>-</operator> <operator>(</operator><name>y</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>BLOCKSZ</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>qp</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>column_fidct</name></name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>threshold_mtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>block3</name> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <operator>(</operator><name>BLOCKSZ</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>*</operator> <operator>(</operator><name>BLOCKSZ</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>x</name> <operator>+</operator> <name>x0</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>qp_store</name><index>[<expr><name>qy</name> <operator>+</operator> <operator>(</operator><name>t</name> <operator>&gt;&gt;</operator> <name>qpsh</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>ff_norm_qscale</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>qscale_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>!=</operator> <name><name>p</name><operator>-&gt;</operator><name>prev_q</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>prev_q</name></name> <operator>=</operator> <name>t</name></expr><operator>,</operator> <expr><call><name><name>p</name><operator>-&gt;</operator><name>mul_thrmat</name></name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>threshold_mtx_noq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>threshold_mtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>column_fidct</name></name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>threshold_mtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>block3</name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></for></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>row_idct</name></name><argument_list>(<argument><expr><name>block3</name> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>temp</name></name> <operator>+</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>x0</name> <operator>+</operator> <literal type="number">2</literal> <operator>-</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>BLOCKSZ</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <operator>(</operator><name>BLOCKSZ</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>block3</name></expr></argument>, <argument><expr><name>block3</name> <operator>+</operator> <operator>(</operator><name>BLOCKSZ</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">6</literal> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>es</name> <operator>=</operator> <name>width</name> <operator>+</operator> <literal type="number">8</literal> <operator>-</operator> <name>x0</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>es</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>row_fdct</name></name><argument_list>(<argument><expr><name>block</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>src</name></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <name>x0</name> <operator>+</operator> <literal type="number">2</literal> <operator>-</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><operator>(</operator><name>es</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>column_fidct</name></name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>threshold_mtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>block3</name></expr></argument>, <argument><expr><name>es</name><operator>&amp;</operator><operator>(</operator><operator>~</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>es</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>row_idct</name></name><argument_list>(<argument><expr><name>block3</name> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>temp</name></name> <operator>+</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>x0</name> <operator>+</operator> <literal type="number">2</literal> <operator>-</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>es</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>y1</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>y1</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>y1</name> <operator>&amp;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>store_slice</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <operator>(</operator><name>y1</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <name>dst_stride</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>temp</name></name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>stride</name></expr></argument>,
<argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">5</literal> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>log2_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>store_slice2</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <operator>(</operator><name>y1</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <name>dst_stride</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>temp</name></name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <name>stride</name></expr></argument>,
<argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">5</literal> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>log2_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&amp;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>store_slice</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>y</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">7</literal><operator>)</operator> <operator>*</operator> <name>dst_stride</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>temp</name></name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>stride</name></expr></argument>,
<argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>y</name><operator>&amp;</operator><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">5</literal> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>log2_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>store_slice2</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>y</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">7</literal><operator>)</operator> <operator>*</operator> <name>dst_stride</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>temp</name></name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <name>stride</name></expr></argument>,
<argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>y</name><operator>&amp;</operator><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">5</literal> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>log2_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>column_fidct_c</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>thr_adr</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cnt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int_simd16_t</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>, <decl><type ref="prev"/><name>tmp4</name></decl>, <decl><type ref="prev"/><name>tmp5</name></decl>, <decl><type ref="prev"/><name>tmp6</name></decl>, <decl><type ref="prev"/><name>tmp7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int_simd16_t</name></type> <name>tmp10</name></decl>, <decl><type ref="prev"/><name>tmp11</name></decl>, <decl><type ref="prev"/><name>tmp12</name></decl>, <decl><type ref="prev"/><name>tmp13</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int_simd16_t</name></type> <name>z1</name></decl>,<decl><type ref="prev"/><name>z2</name></decl>,<decl><type ref="prev"/><name>z3</name></decl>,<decl><type ref="prev"/><name>z4</name></decl>,<decl><type ref="prev"/><name>z5</name></decl>, <decl><type ref="prev"/><name>z10</name></decl>, <decl><type ref="prev"/><name>z11</name></decl>, <decl><type ref="prev"/><name>z12</name></decl>, <decl><type ref="prev"/><name>z13</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int_simd16_t</name></type> <name>d0</name></decl>, <decl><type ref="prev"/><name>d1</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>, <decl><type ref="prev"/><name>d3</name></decl>, <decl><type ref="prev"/><name>d4</name></decl>, <decl><type ref="prev"/><name>d5</name></decl>, <decl><type ref="prev"/><name>d6</name></decl>, <decl><type ref="prev"/><name>d7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dataptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>wsptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>threshold</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ctr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dataptr</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name>wsptr</name> <operator>=</operator> <name>output</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>cnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>cnt</name> <operator>-=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content> 
<expr_stmt><expr><name>threshold</name> <operator>=</operator> <operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>thr_adr</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ctr</name> <operator>=</operator> <name>DCTSIZE</name></expr>;</init> <condition><expr><name>ctr</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>ctr</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name> <operator>*</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name> <operator>*</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp7</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name> <operator>*</operator> <literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name> <operator>*</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name> <operator>*</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name> <operator>*</operator> <literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp6</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name> <operator>*</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name> <operator>*</operator> <literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name> <operator>*</operator> <literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp5</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name> <operator>*</operator> <literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp4</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>



<expr_stmt><expr><name>tmp10</name> <operator>=</operator> <name>tmp0</name> <operator>+</operator> <name>tmp3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp13</name> <operator>=</operator> <name>tmp0</name> <operator>-</operator> <name>tmp3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp11</name> <operator>=</operator> <name>tmp1</name> <operator>+</operator> <name>tmp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp12</name> <operator>=</operator> <name>tmp1</name> <operator>-</operator> <name>tmp2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>d0</name> <operator>=</operator> <name>tmp10</name> <operator>+</operator> <name>tmp11</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d4</name> <operator>=</operator> <name>tmp10</name> <operator>-</operator> <name>tmp11</name></expr>;</expr_stmt>

<expr_stmt><expr><name>z1</name> <operator>=</operator> <call><name>MULTIPLY16H</name><argument_list>(<argument><expr><operator>(</operator><name>tmp12</name> <operator>+</operator> <name>tmp13</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>FIX_0_707106781</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d2</name> <operator>=</operator> <name>tmp13</name> <operator>+</operator> <name>z1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d6</name> <operator>=</operator> <name>tmp13</name> <operator>-</operator> <name>z1</name></expr>;</expr_stmt>



<expr_stmt><expr><call><name>THRESHOLD</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>, <argument><expr><name><name>threshold</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>THRESHOLD</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>, <argument><expr><name><name>threshold</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>THRESHOLD</name><argument_list>(<argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>d4</name></expr></argument>, <argument><expr><name><name>threshold</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>THRESHOLD</name><argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>d6</name></expr></argument>, <argument><expr><name><name>threshold</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp0</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp10</name> <operator>=</operator> <operator>(</operator><name>tmp0</name> <operator>+</operator> <name>tmp2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp11</name> <operator>=</operator> <operator>(</operator><name>tmp0</name> <operator>-</operator> <name>tmp2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp13</name> <operator>=</operator> <operator>(</operator><name>tmp1</name> <operator>+</operator> <name>tmp3</name><operator>)</operator> <operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>tmp12</name> <operator>=</operator> <call><name>MULTIPLY16H</name><argument_list>(<argument><expr><operator>(</operator><name>tmp1</name> <operator>-</operator> <name>tmp3</name><operator>)</operator></expr></argument>, <argument><expr><name>FIX_1_414213562_A</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>tmp13</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <name>tmp10</name> <operator>+</operator> <name>tmp13</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <name>tmp10</name> <operator>-</operator> <name>tmp13</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name>tmp11</name> <operator>+</operator> <name>tmp12</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name>tmp11</name> <operator>-</operator> <name>tmp12</name></expr>;</expr_stmt> 



<expr_stmt><expr><name>tmp10</name> <operator>=</operator> <name>tmp4</name> <operator>+</operator> <name>tmp5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp11</name> <operator>=</operator> <name>tmp5</name> <operator>+</operator> <name>tmp6</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp12</name> <operator>=</operator> <name>tmp6</name> <operator>+</operator> <name>tmp7</name></expr>;</expr_stmt>

<expr_stmt><expr><name>z5</name> <operator>=</operator> <call><name>MULTIPLY16H</name><argument_list>(<argument><expr><operator>(</operator><name>tmp10</name> <operator>-</operator> <name>tmp12</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>FIX_0_382683433</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z2</name> <operator>=</operator> <call><name>MULTIPLY16H</name><argument_list>(<argument><expr><name>tmp10</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>FIX_0_541196100</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>z5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z4</name> <operator>=</operator> <call><name>MULTIPLY16H</name><argument_list>(<argument><expr><name>tmp12</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>FIX_1_306562965</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>z5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z3</name> <operator>=</operator> <call><name>MULTIPLY16H</name><argument_list>(<argument><expr><name>tmp11</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>FIX_0_707106781</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>z11</name> <operator>=</operator> <name>tmp7</name> <operator>+</operator> <name>z3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z13</name> <operator>=</operator> <name>tmp7</name> <operator>-</operator> <name>z3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>d5</name> <operator>=</operator> <name>z13</name> <operator>+</operator> <name>z2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d3</name> <operator>=</operator> <name>z13</name> <operator>-</operator> <name>z2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d1</name> <operator>=</operator> <name>z11</name> <operator>+</operator> <name>z4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d7</name> <operator>=</operator> <name>z11</name> <operator>-</operator> <name>z4</name></expr>;</expr_stmt>



<expr_stmt><expr><call><name>THRESHOLD</name><argument_list>(<argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>d1</name></expr></argument>, <argument><expr><name><name>threshold</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>THRESHOLD</name><argument_list>(<argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>d3</name></expr></argument>, <argument><expr><name><name>threshold</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>THRESHOLD</name><argument_list>(<argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>d5</name></expr></argument>, <argument><expr><name><name>threshold</name><index>[<expr><literal type="number">5</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>THRESHOLD</name><argument_list>(<argument><expr><name>tmp7</name></expr></argument>, <argument><expr><name>d7</name></expr></argument>, <argument><expr><name><name>threshold</name><index>[<expr><literal type="number">7</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>z13</name> <operator>=</operator> <name>tmp6</name> <operator>+</operator> <name>tmp5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z10</name> <operator>=</operator> <operator>(</operator><name>tmp6</name> <operator>-</operator> <name>tmp5</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>z11</name> <operator>=</operator> <name>tmp4</name> <operator>+</operator> <name>tmp7</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z12</name> <operator>=</operator> <operator>(</operator><name>tmp4</name> <operator>-</operator> <name>tmp7</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp7</name> <operator>=</operator> <operator>(</operator><name>z11</name> <operator>+</operator> <name>z13</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>tmp11</name> <operator>=</operator> <call><name>MULTIPLY16H</name><argument_list>(<argument><expr><operator>(</operator><name>z11</name> <operator>-</operator> <name>z13</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>FIX_1_414213562</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z5</name> <operator>=</operator> <call><name>MULTIPLY16H</name><argument_list>(<argument><expr><name>z10</name> <operator>+</operator> <name>z12</name></expr></argument>, <argument><expr><name>FIX_1_847759065</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp10</name> <operator>=</operator> <call><name>MULTIPLY16H</name><argument_list>(<argument><expr><name>z12</name></expr></argument>, <argument><expr><name>FIX_1_082392200</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>z5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp12</name> <operator>=</operator> <call><name>MULTIPLY16H</name><argument_list>(<argument><expr><name>z10</name></expr></argument>, <argument><expr><name>FIX_2_613125930</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>z5</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>tmp6</name> <operator>=</operator> <name>tmp12</name> <operator>-</operator> <name>tmp7</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp5</name> <operator>=</operator> <name>tmp11</name> <operator>-</operator> <name>tmp6</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp4</name> <operator>=</operator> <name>tmp10</name> <operator>+</operator> <name>tmp5</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wsptr</name><index>[<expr><name>DCTSIZE</name> <operator>*</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>tmp0</name> <operator>+</operator> <name>tmp7</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wsptr</name><index>[<expr><name>DCTSIZE</name> <operator>*</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>tmp1</name> <operator>+</operator> <name>tmp6</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wsptr</name><index>[<expr><name>DCTSIZE</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>tmp2</name> <operator>+</operator> <name>tmp5</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wsptr</name><index>[<expr><name>DCTSIZE</name> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>tmp3</name> <operator>-</operator> <name>tmp4</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wsptr</name><index>[<expr><name>DCTSIZE</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>tmp3</name> <operator>+</operator> <name>tmp4</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wsptr</name><index>[<expr><name>DCTSIZE</name> <operator>*</operator> <literal type="number">5</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>tmp2</name> <operator>-</operator> <name>tmp5</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wsptr</name><index>[<expr><name>DCTSIZE</name> <operator>*</operator> <literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>tmp1</name> <operator>-</operator> <name>tmp6</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wsptr</name><index>[<expr><name>DCTSIZE</name> <operator>*</operator> <literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>tmp0</name> <operator>-</operator> <name>tmp7</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dataptr</name><operator>++</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name>wsptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>threshold</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>dataptr</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>wsptr</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>row_idct_c</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>workspace</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>output_adr</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>output_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cnt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int_simd16_t</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>, <decl><type ref="prev"/><name>tmp4</name></decl>, <decl><type ref="prev"/><name>tmp5</name></decl>, <decl><type ref="prev"/><name>tmp6</name></decl>, <decl><type ref="prev"/><name>tmp7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int_simd16_t</name></type> <name>tmp10</name></decl>, <decl><type ref="prev"/><name>tmp11</name></decl>, <decl><type ref="prev"/><name>tmp12</name></decl>, <decl><type ref="prev"/><name>tmp13</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int_simd16_t</name></type> <name>z5</name></decl>, <decl><type ref="prev"/><name>z10</name></decl>, <decl><type ref="prev"/><name>z11</name></decl>, <decl><type ref="prev"/><name>z12</name></decl>, <decl><type ref="prev"/><name>z13</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>outptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>wsptr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cnt</name> <operator>*=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>wsptr</name> <operator>=</operator> <name>workspace</name></expr>;</expr_stmt>
<expr_stmt><expr><name>outptr</name> <operator>=</operator> <name>output_adr</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>cnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>cnt</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>


<expr_stmt><expr><name>tmp10</name> <operator>=</operator> <name><name>wsptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>wsptr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp11</name> <operator>=</operator> <name><name>wsptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>wsptr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp13</name> <operator>=</operator> <name><name>wsptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>wsptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp12</name> <operator>=</operator> <operator>(</operator><call><name>MULTIPLY16H</name><argument_list>(<argument><expr><name><name>wsptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>wsptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>FIX_1_414213562_A</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <name>tmp13</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <name>tmp10</name> <operator>+</operator> <name>tmp13</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <name>tmp10</name> <operator>-</operator> <name>tmp13</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name>tmp11</name> <operator>+</operator> <name>tmp12</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name>tmp11</name> <operator>-</operator> <name>tmp12</name></expr>;</expr_stmt>







<expr_stmt><expr><name>z13</name> <operator>=</operator> <name><name>wsptr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>wsptr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>z10</name> <operator>=</operator> <name><name>wsptr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>wsptr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>z11</name> <operator>=</operator> <name><name>wsptr</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name><name>wsptr</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>z12</name> <operator>=</operator> <name><name>wsptr</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>-</operator> <name><name>wsptr</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp7</name> <operator>=</operator> <name>z11</name> <operator>+</operator> <name>z13</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp11</name> <operator>=</operator> <call><name>MULTIPLY16H</name><argument_list>(<argument><expr><name>z11</name> <operator>-</operator> <name>z13</name></expr></argument>, <argument><expr><name>FIX_1_414213562</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>z5</name> <operator>=</operator> <call><name>MULTIPLY16H</name><argument_list>(<argument><expr><name>z10</name> <operator>+</operator> <name>z12</name></expr></argument>, <argument><expr><name>FIX_1_847759065</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp10</name> <operator>=</operator> <call><name>MULTIPLY16H</name><argument_list>(<argument><expr><name>z12</name></expr></argument>, <argument><expr><name>FIX_1_082392200</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>z5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp12</name> <operator>=</operator> <call><name>MULTIPLY16H</name><argument_list>(<argument><expr><name>z10</name></expr></argument>, <argument><expr><name>FIX_2_613125930</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>z5</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>tmp6</name> <operator>=</operator> <operator>(</operator><name>tmp12</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <name>tmp7</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp5</name> <operator>=</operator> <operator>(</operator><name>tmp11</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <name>tmp6</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp4</name> <operator>=</operator> <operator>(</operator><name>tmp10</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <name>tmp5</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>outptr</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <name>output_stride</name></expr>]</index></name> <operator>+=</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>tmp0</name> <operator>+</operator> <name>tmp7</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outptr</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <name>output_stride</name></expr>]</index></name> <operator>+=</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>tmp1</name> <operator>+</operator> <name>tmp6</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outptr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>output_stride</name></expr>]</index></name> <operator>+=</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>tmp2</name> <operator>+</operator> <name>tmp5</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outptr</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>output_stride</name></expr>]</index></name> <operator>+=</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>tmp3</name> <operator>-</operator> <name>tmp4</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outptr</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>output_stride</name></expr>]</index></name> <operator>+=</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>tmp3</name> <operator>+</operator> <name>tmp4</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outptr</name><index>[<expr><literal type="number">5</literal> <operator>*</operator> <name>output_stride</name></expr>]</index></name> <operator>+=</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>tmp2</name> <operator>-</operator> <name>tmp5</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outptr</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <name>output_stride</name></expr>]</index></name> <operator>+=</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>tmp1</name> <operator>-</operator> <name>tmp6</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>outptr</name><index>[<expr><literal type="number">7</literal> <operator>*</operator> <name>output_stride</name></expr>]</index></name> <operator>+=</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>tmp0</name> <operator>-</operator> <name>tmp7</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>outptr</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>wsptr</name> <operator>+=</operator> <name>DCTSIZE</name></expr>;</expr_stmt> 
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>row_fdct_c</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cnt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int_simd16_t</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>, <decl><type ref="prev"/><name>tmp4</name></decl>, <decl><type ref="prev"/><name>tmp5</name></decl>, <decl><type ref="prev"/><name>tmp6</name></decl>, <decl><type ref="prev"/><name>tmp7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int_simd16_t</name></type> <name>tmp10</name></decl>, <decl><type ref="prev"/><name>tmp11</name></decl>, <decl><type ref="prev"/><name>tmp12</name></decl>, <decl><type ref="prev"/><name>tmp13</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int_simd16_t</name></type> <name>z1</name></decl>, <decl><type ref="prev"/><name>z2</name></decl>, <decl><type ref="prev"/><name>z3</name></decl>, <decl><type ref="prev"/><name>z4</name></decl>, <decl><type ref="prev"/><name>z5</name></decl>, <decl><type ref="prev"/><name>z11</name></decl>, <decl><type ref="prev"/><name>z13</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dataptr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cnt</name> <operator>*=</operator> <literal type="number">4</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>dataptr</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>cnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>cnt</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <name><name>pixels</name><index>[<expr><name>line_size</name> <operator>*</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>pixels</name><index>[<expr><name>line_size</name> <operator>*</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp7</name> <operator>=</operator> <name><name>pixels</name><index>[<expr><name>line_size</name> <operator>*</operator> <literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>pixels</name><index>[<expr><name>line_size</name> <operator>*</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name><name>pixels</name><index>[<expr><name>line_size</name> <operator>*</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>pixels</name><index>[<expr><name>line_size</name> <operator>*</operator> <literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp6</name> <operator>=</operator> <name><name>pixels</name><index>[<expr><name>line_size</name> <operator>*</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>pixels</name><index>[<expr><name>line_size</name> <operator>*</operator> <literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name><name>pixels</name><index>[<expr><name>line_size</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>pixels</name><index>[<expr><name>line_size</name> <operator>*</operator> <literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp5</name> <operator>=</operator> <name><name>pixels</name><index>[<expr><name>line_size</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>pixels</name><index>[<expr><name>line_size</name> <operator>*</operator> <literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <name><name>pixels</name><index>[<expr><name>line_size</name> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>pixels</name><index>[<expr><name>line_size</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp4</name> <operator>=</operator> <name><name>pixels</name><index>[<expr><name>line_size</name> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>pixels</name><index>[<expr><name>line_size</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>



<expr_stmt><expr><name>tmp10</name> <operator>=</operator> <name>tmp0</name> <operator>+</operator> <name>tmp3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp13</name> <operator>=</operator> <name>tmp0</name> <operator>-</operator> <name>tmp3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp11</name> <operator>=</operator> <name>tmp1</name> <operator>+</operator> <name>tmp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp12</name> <operator>=</operator> <name>tmp1</name> <operator>-</operator> <name>tmp2</name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>dataptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>tmp10</name> <operator>+</operator> <name>tmp11</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>tmp10</name> <operator>-</operator> <name>tmp11</name></expr>;</expr_stmt>

<expr_stmt><expr><name>z1</name> <operator>=</operator> <call><name>MULTIPLY16H</name><argument_list>(<argument><expr><operator>(</operator><name>tmp12</name> <operator>+</operator> <name>tmp13</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>FIX_0_707106781</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tmp13</name> <operator>+</operator> <name>z1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>tmp13</name> <operator>-</operator> <name>z1</name></expr>;</expr_stmt>



<expr_stmt><expr><name>tmp10</name> <operator>=</operator> <operator>(</operator><name>tmp4</name> <operator>+</operator> <name>tmp5</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp11</name> <operator>=</operator> <operator>(</operator><name>tmp5</name> <operator>+</operator> <name>tmp6</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp12</name> <operator>=</operator> <operator>(</operator><name>tmp6</name> <operator>+</operator> <name>tmp7</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>z5</name> <operator>=</operator> <call><name>MULTIPLY16H</name><argument_list>(<argument><expr><name>tmp10</name> <operator>-</operator> <name>tmp12</name></expr></argument>, <argument><expr><name>FIX_0_382683433</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z2</name> <operator>=</operator> <call><name>MULTIPLY16H</name><argument_list>(<argument><expr><name>tmp10</name></expr></argument>, <argument><expr><name>FIX_0_541196100</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>z5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z4</name> <operator>=</operator> <call><name>MULTIPLY16H</name><argument_list>(<argument><expr><name>tmp12</name></expr></argument>, <argument><expr><name>FIX_1_306562965</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>z5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z3</name> <operator>=</operator> <call><name>MULTIPLY16H</name><argument_list>(<argument><expr><name>tmp11</name></expr></argument>, <argument><expr><name>FIX_0_707106781</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>z11</name> <operator>=</operator> <name>tmp7</name> <operator>+</operator> <name>z3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z13</name> <operator>=</operator> <name>tmp7</name> <operator>-</operator> <name>z3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dataptr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>z13</name> <operator>+</operator> <name>z2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>z13</name> <operator>-</operator> <name>z2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>z11</name> <operator>+</operator> <name>z4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>z11</name> <operator>-</operator> <name>z4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels</name><operator>++</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name>dataptr</name> <operator>+=</operator> <name>DCTSIZE</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_YUV444P</name></expr>, <expr><name>AV_PIX_FMT_YUV422P</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_YUV411P</name></expr>,
<expr><name>AV_PIX_FMT_YUV410P</name></expr>, <expr><name>AV_PIX_FMT_YUV440P</name></expr>,
<expr><name>AV_PIX_FMT_YUVJ444P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ422P</name></expr>,
<expr><name>AV_PIX_FMT_YUVJ420P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ440P</name></expr>,
<expr><name>AV_PIX_FMT_GBRP</name></expr>, <expr><name>AV_PIX_FMT_GRAY8</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FSPPContext</name> <modifier>*</modifier></type><name>fspp</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name> <init>= <expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fspp</name><operator>-&gt;</operator><name>hsub</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fspp</name><operator>-&gt;</operator><name>vsub</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fspp</name><operator>-&gt;</operator><name>temp_stride</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fspp</name><operator>-&gt;</operator><name>temp</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>fspp</name><operator>-&gt;</operator><name>temp_stride</name></name></expr></argument>, <argument><expr><name>h</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>fspp</name><operator>-&gt;</operator><name>temp</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fspp</name><operator>-&gt;</operator><name>src</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>fspp</name><operator>-&gt;</operator><name>temp_stride</name></name></expr></argument>, <argument><expr><name>h</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>fspp</name><operator>-&gt;</operator><name>src</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fspp</name><operator>-&gt;</operator><name>temp</name></name> <operator>||</operator> <operator>!</operator><name><name>fspp</name><operator>-&gt;</operator><name>src</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fspp</name><operator>-&gt;</operator><name>use_bframe_qp</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>fspp</name><operator>-&gt;</operator><name>qp</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fspp</name><operator>-&gt;</operator><name>non_b_qp_alloc_size</name></name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fspp</name><operator>-&gt;</operator><name>non_b_qp_table</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>fspp</name><operator>-&gt;</operator><name>non_b_qp_alloc_size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>fspp</name><operator>-&gt;</operator><name>non_b_qp_table</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fspp</name><operator>-&gt;</operator><name>non_b_qp_table</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fspp</name><operator>-&gt;</operator><name>store_slice</name></name> <operator>=</operator> <name>store_slice_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fspp</name><operator>-&gt;</operator><name>store_slice2</name></name> <operator>=</operator> <name>store_slice2_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fspp</name><operator>-&gt;</operator><name>mul_thrmat</name></name> <operator>=</operator> <name>mul_thrmat_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fspp</name><operator>-&gt;</operator><name>column_fidct</name></name> <operator>=</operator> <name>column_fidct_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fspp</name><operator>-&gt;</operator><name>row_idct</name></name> <operator>=</operator> <name>row_idct_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fspp</name><operator>-&gt;</operator><name>row_fdct</name></name> <operator>=</operator> <name>row_fdct_c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_fspp_init_x86</name><argument_list>(<argument><expr><name>fspp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FSPPContext</name> <modifier>*</modifier></type><name>fspp</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>in</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qp_stride</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>qp_table</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>bias</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>custom_threshold_m</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>bias</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <name><name>fspp</name><operator>-&gt;</operator><name>strength</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>custom_threshold_m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>custom_threshold</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>bias</name> <operator>/</operator> <literal type="number">71.0</literal><operator>)</operator> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>fspp</name><operator>-&gt;</operator><name>threshold_mtx_noq</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>custom_threshold_m</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name>
<operator>|</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>custom_threshold_m</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator>
<operator>|</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>custom_threshold_m</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator>
<operator>|</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>custom_threshold_m</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">48</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fspp</name><operator>-&gt;</operator><name>threshold_mtx_noq</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>custom_threshold_m</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name>
<operator>|</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>custom_threshold_m</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator>
<operator>|</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>custom_threshold_m</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator>
<operator>|</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>custom_threshold_m</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">48</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>fspp</name><operator>-&gt;</operator><name>qp</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fspp</name><operator>-&gt;</operator><name>prev_q</name></name> <operator>=</operator> <name><name>fspp</name><operator>-&gt;</operator><name>qp</name></name></expr><operator>,</operator> <expr><call><name><name>fspp</name><operator>-&gt;</operator><name>mul_thrmat</name></name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>fspp</name><operator>-&gt;</operator><name>threshold_mtx_noq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>fspp</name><operator>-&gt;</operator><name>threshold_mtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name><name>fspp</name><operator>-&gt;</operator><name>qp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fspp</name><operator>-&gt;</operator><name>qp</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>qp_table</name> <operator>=</operator> <call><name>av_frame_get_qp_table</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qp_stride</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fspp</name><operator>-&gt;</operator><name>qscale_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>qp_table</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>fspp</name><operator>-&gt;</operator><name>use_bframe_qp</name></name> <operator>&amp;&amp;</operator> <name><name>in</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>qp_stride</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name>qp_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>w</name> <operator>*</operator> <name>h</name> <operator>&gt;</operator> <name><name>fspp</name><operator>-&gt;</operator><name>non_b_qp_alloc_size</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>av_reallocp_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fspp</name><operator>-&gt;</operator><name>non_b_qp_table</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fspp</name><operator>-&gt;</operator><name>non_b_qp_alloc_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>fspp</name><operator>-&gt;</operator><name>non_b_qp_alloc_size</name></name> <operator>=</operator> <name>w</name> <operator>*</operator> <name>h</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>w</name> <operator>*</operator> <name>h</name> <operator>&lt;=</operator> <name><name>fspp</name><operator>-&gt;</operator><name>non_b_qp_alloc_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>fspp</name><operator>-&gt;</operator><name>non_b_qp_table</name></name></expr></argument>, <argument><expr><name>qp_table</name></expr></argument>, <argument><expr><name>w</name> <operator>*</operator> <name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fspp</name><operator>-&gt;</operator><name>log2_count</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>is_disabled</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fspp</name><operator>-&gt;</operator><name>use_bframe_qp</name></name> <operator>&amp;&amp;</operator> <name><name>fspp</name><operator>-&gt;</operator><name>non_b_qp_table</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>qp_table</name> <operator>=</operator> <name><name>fspp</name><operator>-&gt;</operator><name>non_b_qp_table</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>qp_table</name> <operator>||</operator> <name><name>fspp</name><operator>-&gt;</operator><name>qp</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cw</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>fspp</name><operator>-&gt;</operator><name>hsub</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ch</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>fspp</name><operator>-&gt;</operator><name>vsub</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_frame_is_writable</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>aligned_w</name> <init>= <expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>aligned_h</name> <init>= <expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>aligned_w</name></expr></argument>, <argument><expr><name>aligned_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>filter</name><argument_list>(<argument><expr><name>fspp</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>qp_table</name></expr></argument>, <argument><expr><name>qp_stride</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>filter</name><argument_list>(<argument><expr><name>fspp</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>cw</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>qp_table</name></expr></argument>, <argument><expr><name>qp_stride</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>filter</name><argument_list>(<argument><expr><name>fspp</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>cw</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>qp_table</name></expr></argument>, <argument><expr><name>qp_stride</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>in</name> <operator>!=</operator> <name>out</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_image_copy_plane</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>in</name> <operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name> <operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FSPPContext</name> <modifier>*</modifier></type><name>fspp</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fspp</name><operator>-&gt;</operator><name>temp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fspp</name><operator>-&gt;</operator><name>src</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fspp</name><operator>-&gt;</operator><name>non_b_qp_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>fspp_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>fspp_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_fspp</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"fspp"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Apply Fast Simple Post-processing filter."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FSPPContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>fspp_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>fspp_outputs</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>fspp_class</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_INTERNAL</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
