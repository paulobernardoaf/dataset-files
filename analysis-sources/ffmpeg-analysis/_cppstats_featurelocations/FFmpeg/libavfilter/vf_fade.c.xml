<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vf_fade.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/eval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"drawutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>G</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Y</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FADE_IN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FADE_OUT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>FadeContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>factor</name></decl>, <name>fade_per_frame</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>start_frame</name></decl>, <name>nb_frames</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hsub</name></decl>, <name>vsub</name>, <name>bpp</name>, <name>depth</name>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>black_level</name></decl>, <name>black_level_scaled</name>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>is_rgb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>is_packed_rgb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>rgba_map</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>alpha</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_planar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>start_time</name></decl>, <name>duration</name>;</decl_stmt>
<enum>enum <block>{<decl><name>VF_FADE_WAITING</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><name>VF_FADE_FADING</name></decl>, <decl><name>VF_FADE_DONE</name></decl>}</block> <decl><name>fade_state</name></decl>;</enum>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>color_rgba</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>black_fade</name></decl>;</decl_stmt> 
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>filter_slice_luma</name>)<parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>filter_slice_chroma</name>)<parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>filter_slice_alpha</name>)<parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>FadeContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FadeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fade_per_frame</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_frames</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fade_state</name></name> <operator>=</operator> <name>VF_FADE_WAITING</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>duration</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_frames</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>start_frame</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_frames</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,
<argument><expr><literal type="string">"type:%s start_frame:%d nb_frames:%d alpha:%d\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FADE_IN</name></expr> ?</condition><then> <expr><literal type="string">"in"</literal></expr> </then><else>: <expr><literal type="string">"out"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>start_frame</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_frames</name></name></expr></argument>,<argument><expr><name><name>s</name><operator>-&gt;</operator><name>alpha</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>start_time</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>duration</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,
<argument><expr><literal type="string">"type:%s start_time:%f duration:%f alpha:%d\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FADE_IN</name></expr> ?</condition><then> <expr><literal type="string">"in"</literal></expr> </then><else>: <expr><literal type="string">"out"</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>start_time</name></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>AV_TIME_BASE</name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>duration</name></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>AV_TIME_BASE</name><operator>)</operator></expr></argument>,<argument><expr><name><name>s</name><operator>-&gt;</operator><name>alpha</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>black_fade</name></name> <operator>=</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>color_rgba</name></name></expr></argument>, <argument><expr><literal type="string">"\x00\x00\x00\xff"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>FadeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_YUV444P</name></expr>, <expr><name>AV_PIX_FMT_YUV422P</name></expr>, <expr><name>AV_PIX_FMT_YUV420P</name></expr>,
<expr><name>AV_PIX_FMT_YUV411P</name></expr>, <expr><name>AV_PIX_FMT_YUV410P</name></expr>,
<expr><name>AV_PIX_FMT_YUVJ444P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ422P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ420P</name></expr>,
<expr><name>AV_PIX_FMT_YUV440P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ440P</name></expr>,
<expr><name>AV_PIX_FMT_YUVA420P</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P</name></expr>,
<expr><name>AV_PIX_FMT_RGB24</name></expr>, <expr><name>AV_PIX_FMT_BGR24</name></expr>,
<expr><name>AV_PIX_FMT_ARGB</name></expr>, <expr><name>AV_PIX_FMT_ABGR</name></expr>,
<expr><name>AV_PIX_FMT_RGBA</name></expr>, <expr><name>AV_PIX_FMT_BGRA</name></expr>,
<expr><name>AV_PIX_FMT_GBRP</name></expr>, <expr><name>AV_PIX_FMT_GBRAP</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P9</name></expr>, <expr><name>AV_PIX_FMT_YUV422P9</name></expr>, <expr><name>AV_PIX_FMT_YUV444P9</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P10</name></expr>, <expr><name>AV_PIX_FMT_YUV422P10</name></expr>, <expr><name>AV_PIX_FMT_YUV444P10</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P12</name></expr>, <expr><name>AV_PIX_FMT_YUV422P12</name></expr>, <expr><name>AV_PIX_FMT_YUV444P12</name></expr>, <expr><name>AV_PIX_FMT_YUV440P12</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P14</name></expr>, <expr><name>AV_PIX_FMT_YUV422P14</name></expr>, <expr><name>AV_PIX_FMT_YUV444P14</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P16</name></expr>, <expr><name>AV_PIX_FMT_YUV422P16</name></expr>, <expr><name>AV_PIX_FMT_YUV444P16</name></expr>,
<expr><name>AV_PIX_FMT_YUVA420P9</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P9</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P9</name></expr>,
<expr><name>AV_PIX_FMT_YUVA420P10</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P10</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P10</name></expr>,
<expr><name>AV_PIX_FMT_YUVA422P12</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P12</name></expr>,
<expr><name>AV_PIX_FMT_YUVA420P16</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P16</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P16</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts_rgb</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_RGB24</name></expr>, <expr><name>AV_PIX_FMT_BGR24</name></expr>,
<expr><name>AV_PIX_FMT_ARGB</name></expr>, <expr><name>AV_PIX_FMT_ABGR</name></expr>,
<expr><name>AV_PIX_FMT_RGBA</name></expr>, <expr><name>AV_PIX_FMT_BGRA</name></expr>,
<expr><name>AV_PIX_FMT_GBRP</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts_alpha</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_YUVA420P</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P</name></expr>,
<expr><name>AV_PIX_FMT_YUVA420P9</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P9</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P9</name></expr>,
<expr><name>AV_PIX_FMT_YUVA420P10</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P10</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P10</name></expr>,
<expr><name>AV_PIX_FMT_YUVA422P12</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P12</name></expr>,
<expr><name>AV_PIX_FMT_YUVA420P16</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P16</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P16</name></expr>,
<expr><name>AV_PIX_FMT_ARGB</name></expr>, <expr><name>AV_PIX_FMT_ABGR</name></expr>,
<expr><name>AV_PIX_FMT_RGBA</name></expr>, <expr><name>AV_PIX_FMT_BGRA</name></expr>,
<expr><name>AV_PIX_FMT_GBRAP</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts_rgba</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_ARGB</name></expr>, <expr><name>AV_PIX_FMT_ABGR</name></expr>,
<expr><name>AV_PIX_FMT_RGBA</name></expr>, <expr><name>AV_PIX_FMT_BGRA</name></expr>,
<expr><name>AV_PIX_FMT_GBRAP</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>alpha</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>black_fade</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fmts_list</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts_alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>fmts_list</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts_rgba</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>black_fade</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fmts_list</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>fmts_list</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts_rgb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <specifier>static</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>studio_level_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_YUV444P</name></expr>, <expr><name>AV_PIX_FMT_YUV422P</name></expr>, <expr><name>AV_PIX_FMT_YUV420P</name></expr>,
<expr><name>AV_PIX_FMT_YUV411P</name></expr>, <expr><name>AV_PIX_FMT_YUV410P</name></expr>,
<expr><name>AV_PIX_FMT_YUV440P</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P9</name></expr>, <expr><name>AV_PIX_FMT_YUV422P9</name></expr>, <expr><name>AV_PIX_FMT_YUV444P9</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P10</name></expr>, <expr><name>AV_PIX_FMT_YUV422P10</name></expr>, <expr><name>AV_PIX_FMT_YUV444P10</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P12</name></expr>, <expr><name>AV_PIX_FMT_YUV422P12</name></expr>, <expr><name>AV_PIX_FMT_YUV444P12</name></expr>, <expr><name>AV_PIX_FMT_YUV440P12</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P14</name></expr>, <expr><name>AV_PIX_FMT_YUV422P14</name></expr>, <expr><name>AV_PIX_FMT_YUV444P14</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P16</name></expr>, <expr><name>AV_PIX_FMT_YUV422P16</name></expr>, <expr><name>AV_PIX_FMT_YUV444P16</name></expr>,
<expr><name>AV_PIX_FMT_YUVA420P9</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P9</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P9</name></expr>,
<expr><name>AV_PIX_FMT_YUVA420P10</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P10</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P10</name></expr>,
<expr><name>AV_PIX_FMT_YUVA422P12</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P12</name></expr>,
<expr><name>AV_PIX_FMT_YUVA420P16</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P16</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P16</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>filter_rgb</name><parameter_list>(<parameter><decl><type><name>FadeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>slice_start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slice_end</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>do_alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>step</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>r_idx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>rgba_map</name><index>[<expr><name>R</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>g_idx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>rgba_map</name><index>[<expr><name>G</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>b_idx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>rgba_map</name><index>[<expr><name>B</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>a_idx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>rgba_map</name><index>[<expr><name>A</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>color_rgba</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>slice_start</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>slice_end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERP</name><parameter_list>(<parameter><type><name>c_name</name></type></parameter>, <parameter><type><name>c_idx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>av_clip_uint8(((c[c_idx]&lt;&lt;16) + ((int)p[c_name] - (int)c[c_idx]) * s-&gt;factor + (1&lt;&lt;15)) &gt;&gt; 16)</cpp:value></cpp:define>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>r_idx</name></expr>]</index></name> <operator>=</operator> <call><name>INTERP</name><argument_list>(<argument><expr><name>r_idx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>g_idx</name></expr>]</index></name> <operator>=</operator> <call><name>INTERP</name><argument_list>(<argument><expr><name>g_idx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>b_idx</name></expr>]</index></name> <operator>=</operator> <call><name>INTERP</name><argument_list>(<argument><expr><name>b_idx</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>do_alpha</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>a_idx</name></expr>]</index></name> <operator>=</operator> <call><name>INTERP</name><argument_list>(<argument><expr><name>a_idx</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>filter_rgb_planar</name><parameter_list>(<parameter><decl><type><name>FadeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>slice_start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slice_end</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>do_alpha</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>color_rgba</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>slice_start</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>slice_end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pg</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pr</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pa</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERPP</name><parameter_list>(<parameter><type><name>c_name</name></type></parameter>, <parameter><type><name>c_idx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>av_clip_uint8(((c[c_idx]&lt;&lt;16) + ((int)c_name - (int)c[c_idx]) * s-&gt;factor + (1&lt;&lt;15)) &gt;&gt; 16)</cpp:value></cpp:define>
<expr_stmt><expr><name><name>pr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>INTERPP</name><argument_list>(<argument><expr><name><name>pr</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pg</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>INTERPP</name><argument_list>(<argument><expr><name><name>pg</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pb</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>INTERPP</name><argument_list>(<argument><expr><name><name>pb</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>do_alpha</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pa</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>INTERPP</name><argument_list>(<argument><expr><name><name>pa</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_slice_rgb</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FadeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slice_start</name> <init>= <expr><operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <name>jobnr</name> <operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slice_end</name> <init>= <expr><operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_planar</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>alpha</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>filter_rgb_planar</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>slice_start</name></expr></argument>, <argument><expr><name>slice_end</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_planar</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>filter_rgb_planar</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>slice_start</name></expr></argument>, <argument><expr><name>slice_end</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>alpha</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>filter_rgb</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>slice_start</name></expr></argument>, <argument><expr><name>slice_end</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bpp</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>filter_rgb</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>slice_start</name></expr></argument>, <argument><expr><name>slice_end</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bpp</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>filter_rgb</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>slice_start</name></expr></argument>, <argument><expr><name>slice_end</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_slice_luma</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FadeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slice_start</name> <init>= <expr><operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <name>jobnr</name> <operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slice_end</name> <init>= <expr><operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>is_planar</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>is_rgb</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>slice_start</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>slice_end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>bpp</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>



<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>p</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>black_level</name></name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>factor</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>black_level_scaled</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_slice_luma16</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FadeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slice_start</name> <init>= <expr><operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <name>jobnr</name> <operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slice_end</name> <init>= <expr><operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>is_planar</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>is_rgb</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>slice_start</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>slice_end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>bpp</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>



<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>p</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>black_level</name></name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>factor</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>black_level_scaled</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_slice_chroma</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FadeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>plane</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>width</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>hsub</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>height</name><init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>vsub</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slice_start</name> <init>= <expr><operator>(</operator><name>height</name> <operator>*</operator> <name>jobnr</name> <operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slice_end</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>height</name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name><operator>)</operator></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>slice_start</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>slice_end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>



<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>p</name> <operator>-</operator> <literal type="number">128</literal><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>factor</name></name> <operator>+</operator> <literal type="number">8421367</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_slice_chroma16</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FadeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>plane</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>width</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>hsub</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>height</name><init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>vsub</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mid</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>add</name> <init>= <expr><operator>(</operator><operator>(</operator><name>mid</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">15</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slice_start</name> <init>= <expr><operator>(</operator><name>height</name> <operator>*</operator> <name>jobnr</name> <operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slice_end</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>height</name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name><operator>)</operator></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>slice_start</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>slice_end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>p</name> <operator>-</operator> <name>mid</name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>factor</name></name> <operator>+</operator> <name>add</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_slice_alpha</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FadeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>plane</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>is_packed_rgb</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>A</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slice_start</name> <init>= <expr><operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <name>jobnr</name> <operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slice_end</name> <init>= <expr><operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>slice_start</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>slice_end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>is_packed_rgb</name></name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>rgba_map</name><index>[<expr><name>A</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>step</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>is_packed_rgb</name></name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>



<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>p</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>black_level</name></name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>factor</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>black_level_scaled</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_slice_alpha16</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FadeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>plane</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>is_packed_rgb</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>A</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slice_start</name> <init>= <expr><operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <name>jobnr</name> <operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slice_end</name> <init>= <expr><operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>slice_start</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>slice_end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>is_packed_rgb</name></name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>rgba_map</name><index>[<expr><name>A</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>step</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>is_packed_rgb</name></name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>



<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>p</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>black_level</name></name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>factor</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>black_level_scaled</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_props</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FadeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>pixdesc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hsub</name></name> <operator>=</operator> <name><name>pixdesc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vsub</name></name> <operator>=</operator> <name><name>pixdesc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_fill_rgba_map</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rgba_map</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <name><name>pixdesc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bpp</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pixdesc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_PLANAR</name></expr> ?</condition><then>
<expr><literal type="number">1</literal></expr> </then><else>:
<expr><call><name>av_get_bits_per_pixel</name><argument_list>(<argument><expr><name>pixdesc</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>alpha</name></name> <operator>&amp;=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>pixdesc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_ALPHA</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>is_planar</name></name> <operator>=</operator> <name><name>pixdesc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_PLANAR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>is_rgb</name></name> <operator>=</operator> <name><name>pixdesc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_RGB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>is_packed_rgb</name></name> <operator>=</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>is_planar</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>is_rgb</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>black_level</name></name> <operator>=</operator>
<ternary><condition><expr><call><name>ff_fmt_is_in</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>studio_level_pix_fmts</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>alpha</name></name></expr> ?</condition><then> <expr><literal type="number">16</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>black_level_scaled</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>black_level</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <literal type="number">32768</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter_slice_luma</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>filter_slice_luma</name></expr> </then><else>: <expr><name>filter_slice_luma16</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter_slice_chroma</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>filter_slice_chroma</name></expr> </then><else>: <expr><name>filter_slice_chroma16</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter_slice_alpha</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>filter_slice_alpha</name></expr> </then><else>: <expr><name>filter_slice_alpha16</name></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FadeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>frame_timestamp</name> <init>= <expr><ternary><condition><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>*</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fade_state</name></name> <operator>==</operator> <name>VF_FADE_WAITING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>factor</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>frame_timestamp</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>start_time</name></name><operator>/</operator><operator>(</operator><name>double</name><operator>)</operator><name>AV_TIME_BASE</name>
<operator>&amp;&amp;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>frame_count_out</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>start_frame</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fade_state</name></name> <operator>=</operator> <name>VF_FADE_FADING</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>start_time</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>start_frame</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>start_time</name></name> <operator>=</operator> <name>frame_timestamp</name><operator>*</operator><operator>(</operator><name>double</name><operator>)</operator><name>AV_TIME_BASE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>start_time</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>start_frame</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>start_frame</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>frame_count_out</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fade_state</name></name> <operator>==</operator> <name>VF_FADE_FADING</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>duration</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>factor</name></name> <operator>=</operator> <operator>(</operator><name><name>inlink</name><operator>-&gt;</operator><name>frame_count_out</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>start_frame</name></name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>fade_per_frame</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>inlink</name><operator>-&gt;</operator><name>frame_count_out</name></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>start_frame</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_frames</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fade_state</name></name> <operator>=</operator> <name>VF_FADE_DONE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>factor</name></name> <operator>=</operator> <operator>(</operator><name>frame_timestamp</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>start_time</name></name><operator>/</operator><operator>(</operator><name>double</name><operator>)</operator><name>AV_TIME_BASE</name><operator>)</operator>
<operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>UINT16_MAX</name> <operator>/</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>duration</name></name><operator>/</operator><operator>(</operator><name>double</name><operator>)</operator><name>AV_TIME_BASE</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>frame_timestamp</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>start_time</name></name><operator>/</operator><operator>(</operator><name>double</name><operator>)</operator><name>AV_TIME_BASE</name>
<operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>duration</name></name><operator>/</operator><operator>(</operator><name>double</name><operator>)</operator><name>AV_TIME_BASE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fade_state</name></name> <operator>=</operator> <name>VF_FADE_DONE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fade_state</name></name> <operator>==</operator> <name>VF_FADE_DONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>factor</name></name><operator>=</operator><name>UINT16_MAX</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>factor</name></name> <operator>=</operator> <call><name>av_clip_uint16</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>factor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FADE_OUT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>factor</name></name><operator>=</operator><name>UINT16_MAX</name><operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>factor</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>factor</name></name> <operator>&lt;</operator> <name>UINT16_MAX</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>alpha</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>filter_slice_alpha</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><call><name>ff_filter_get_nb_threads</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_rgb</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>black_fade</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>filter_slice_rgb</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><call><name>ff_filter_get_nb_threads</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>filter_slice_luma</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><call><name>ff_filter_get_nb_threads</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>is_rgb</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>filter_slice_chroma</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><call><name>ff_filter_get_nb_threads</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(FadeContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM|AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>fade_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"type"</literal></expr>, <expr><literal type="string">"set the fade direction"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FADE_IN</name></expr> }</block></expr>, <expr><name>FADE_IN</name></expr>, <expr><name>FADE_OUT</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"type"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"t"</literal></expr>, <expr><literal type="string">"set the fade direction"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FADE_IN</name></expr> }</block></expr>, <expr><name>FADE_IN</name></expr>, <expr><name>FADE_OUT</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"type"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"in"</literal></expr>, <expr><literal type="string">"fade-in"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FADE_IN</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"type"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"out"</literal></expr>, <expr><literal type="string">"fade-out"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FADE_OUT</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"type"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"start_frame"</literal></expr>, <expr><literal type="string">"Number of the first frame to which to apply the effect."</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>start_frame</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"Number of the first frame to which to apply the effect."</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>start_frame</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"nb_frames"</literal></expr>, <expr><literal type="string">"Number of frames to which the effect should be applied."</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>nb_frames</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">25</literal></expr> }</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"n"</literal></expr>, <expr><literal type="string">"Number of frames to which the effect should be applied."</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>nb_frames</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">25</literal></expr> }</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"alpha"</literal></expr>, <expr><literal type="string">"fade alpha if it is available on the input"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"start_time"</literal></expr>, <expr><literal type="string">"Number of seconds of the beginning of the effect."</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>start_time</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DURATION</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0.</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT64_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"st"</literal></expr>, <expr><literal type="string">"Number of seconds of the beginning of the effect."</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>start_time</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DURATION</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0.</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT64_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"duration"</literal></expr>, <expr><literal type="string">"Duration of the effect in seconds."</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DURATION</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0.</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT64_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"d"</literal></expr>, <expr><literal type="string">"Duration of the effect in seconds."</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DURATION</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0.</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT64_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"color"</literal></expr>, <expr><literal type="string">"set color"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>color_rgba</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_COLOR</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"black"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"set color"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>color_rgba</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_COLOR</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"black"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>fade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>avfilter_vf_fade_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_props</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,
<expr><operator>.</operator><name>needs_writable</name> <operator>=</operator> <literal type="number">1</literal></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>avfilter_vf_fade_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_fade</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"fade"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Fade in/out input video."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FadeContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>fade_class</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>avfilter_vf_fade_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>avfilter_vf_fade_outputs</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SLICE_THREADS</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
