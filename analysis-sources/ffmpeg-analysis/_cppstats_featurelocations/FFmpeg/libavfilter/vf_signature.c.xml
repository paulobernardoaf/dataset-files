<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vf_signature.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/put_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/timestamp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"signature.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"signature_lookup.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(SignatureContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM | AV_OPT_FLAG_VIDEO_PARAM</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_LCM</name></cpp:macro> <cpp:value>(int64_t) 476985600</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>signature_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"detectmode"</literal></expr>, <expr><literal type="string">"set the detectmode"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>MODE_OFF</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_LOOKUP_MODE</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"off"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>MODE_OFF</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"full"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>MODE_FULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fast"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>MODE_FAST</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"nb_inputs"</literal></expr>, <expr><literal type="string">"number of inputs"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>nb_inputs</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"filename"</literal></expr>, <expr><literal type="string">"filename for output files"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">""</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_FORMATS</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"format"</literal></expr>, <expr><literal type="string">"set output format"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FORMAT_BINARY</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> , <expr><literal type="string">"format"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"binary"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>FORMAT_BINARY</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"format"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"xml"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>FORMAT_XML</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"format"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"th_d"</literal></expr>, <expr><literal type="string">"threshold to detect one word as similar"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>thworddist</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">9000</literal></expr>}</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"th_dc"</literal></expr>, <expr><literal type="string">"threshold to detect all words as similar"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>thcomposdist</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">60000</literal></expr>}</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"th_xh"</literal></expr>, <expr><literal type="string">"threshold to detect frames as similar"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>thl1</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">116</literal></expr>}</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"th_di"</literal></expr>, <expr><literal type="string">"minimum length of matching sequence in frames"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>thdi</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"th_it"</literal></expr>, <expr><literal type="string">"threshold for relation of good to all frames"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>thit</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">0.5</literal></expr>}</block></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>signature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_GRAY8</name></expr>,
<expr><name>AV_PIX_FMT_YUV410P</name></expr>, <expr><name>AV_PIX_FMT_YUV411P</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_YUV422P</name></expr>,
<expr><name>AV_PIX_FMT_YUV440P</name></expr>, <expr><name>AV_PIX_FMT_YUV444P</name></expr>,
<expr><name>AV_PIX_FMT_YUVJ411P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ420P</name></expr>,
<expr><name>AV_PIX_FMT_YUVJ422P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ444P</name></expr>,
<expr><name>AV_PIX_FMT_YUVJ440P</name></expr>,
<expr><name>AV_PIX_FMT_NV12</name></expr>, <expr><name>AV_PIX_FMT_NV21</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SignatureContext</name> <modifier>*</modifier></type><name>sic</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StreamContext</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>sic</name><operator>-&gt;</operator><name>streamcontexts</name><index>[<expr><call><name>FF_INLINK_IDX</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>divide</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name><operator>/</operator><literal type="number">32</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name><operator>/</operator><literal type="number">32</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name><operator>/</operator><literal type="number">32</literal> <operator>*</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name><operator>/</operator><literal type="number">32</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;</operator> <name>INT64_MAX</name> <operator>/</operator> <operator>(</operator><name>BLOCK_LCM</name> <operator>*</operator> <literal type="number">255</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>divide</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Input dimension too high for precise calculation, numbers will be rounded.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_block_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Block</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>to</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>up</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>to</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>up</name><operator>.</operator><name>x</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>get_block_sum</name><parameter_list>(<parameter><decl><type><name>StreamContext</name> <modifier>*</modifier></type><name>sc</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name><name>intpic</name><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Block</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x0</name></decl>, <decl><type ref="prev"/><name>y0</name></decl>, <decl><type ref="prev"/><name>x1</name></decl>, <decl><type ref="prev"/><name>y1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x0</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>up</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>y0</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>up</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>x1</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>to</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>y1</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>to</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x0</name><operator>-</operator><literal type="number">1</literal> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y0</name><operator>-</operator><literal type="number">1</literal> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <name><name>intpic</name><index>[<expr><name>y1</name></expr>]</index><index>[<expr><name>x1</name></expr>]</index></name> <operator>+</operator> <name><name>intpic</name><index>[<expr><name>y0</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>x0</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>intpic</name><index>[<expr><name>y1</name></expr>]</index><index>[<expr><name>x0</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>intpic</name><index>[<expr><name>y0</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>x1</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x0</name><operator>-</operator><literal type="number">1</literal> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <name><name>intpic</name><index>[<expr><name>y1</name></expr>]</index><index>[<expr><name>x1</name></expr>]</index></name> <operator>-</operator> <name><name>intpic</name><index>[<expr><name>y1</name></expr>]</index><index>[<expr><name>x0</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>y0</name><operator>-</operator><literal type="number">1</literal> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <name><name>intpic</name><index>[<expr><name>y1</name></expr>]</index><index>[<expr><name>x1</name></expr>]</index></name> <operator>-</operator> <name><name>intpic</name><index>[<expr><name>y0</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>x1</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <name><name>intpic</name><index>[<expr><name>y1</name></expr>]</index><index>[<expr><name>x1</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>sum</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>*</operator><name>a</name> <operator>&lt;</operator> <operator>*</operator><name>b</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator> <ternary><condition><expr><operator>*</operator><name>a</name> <operator>&gt;</operator> <operator>*</operator><name>b</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary> <operator>)</operator></expr></else></ternary></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>set_bit</name><parameter_list>(<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>mask</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>-</operator><operator>(</operator><name>pos</name><operator>%</operator><literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>pos</name><operator>/</operator><literal type="number">8</literal></expr>]</index></name> <operator>|=</operator> <name>mask</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>picref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SignatureContext</name> <modifier>*</modifier></type><name>sic</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StreamContext</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>sic</name><operator>-&gt;</operator><name>streamcontexts</name><index>[<expr><call><name>FF_INLINK_IDX</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FineSignature</name><modifier>*</modifier></type> <name>fs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>pot3</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">3</literal><operator>*</operator><literal type="number">3</literal><operator>*</operator><literal type="number">3</literal><operator>*</operator><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal><operator>*</operator><literal type="number">3</literal><operator>*</operator><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal><operator>*</operator><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name><name>wordvec</name><index>[<expr><literal type="number">25</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">44</literal></expr>,<expr><literal type="number">57</literal></expr>,<expr><literal type="number">70</literal></expr>,<expr><literal type="number">100</literal></expr>,<expr><literal type="number">101</literal></expr>,<expr><literal type="number">102</literal></expr>,<expr><literal type="number">103</literal></expr>,<expr><literal type="number">111</literal></expr>,<expr><literal type="number">175</literal></expr>,<expr><literal type="number">210</literal></expr>,<expr><literal type="number">217</literal></expr>,<expr><literal type="number">219</literal></expr>,<expr><literal type="number">233</literal></expr>,<expr><literal type="number">237</literal></expr>,<expr><literal type="number">269</literal></expr>,<expr><literal type="number">270</literal></expr>,<expr><literal type="number">273</literal></expr>,<expr><literal type="number">274</literal></expr>,<expr><literal type="number">275</literal></expr>,<expr><literal type="number">285</literal></expr>,<expr><literal type="number">295</literal></expr>,<expr><literal type="number">296</literal></expr>,<expr><literal type="number">334</literal></expr>,<expr><literal type="number">337</literal></expr>,<expr><literal type="number">354</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>s2usw</name><index>[<expr><literal type="number">25</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">5</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">11</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>wordt2b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>intpic</name><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>rowcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>picref</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>inti</name></decl>, <decl><type ref="prev"/><name>intj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>intjlut</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>conflist</name><index>[<expr><name>DIFFELEM_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>g</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>w</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>dh1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>dh2</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>dw1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>dw2</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>denom</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>ternary</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>blocksum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>blocksize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>th</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int64_t</name></type> <name>sum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>precfactor</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>sc</name><operator>-&gt;</operator><name>divide</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">65536</literal></expr> </then><else>: <expr><name>BLOCK_LCM</name></expr></else></ternary></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>curfinesig</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fs</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FineSignature</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fs</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>curfinesig</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>fs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>curfinesig</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>curfinesig</name></name> <operator>=</operator> <name>fs</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>fs</name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>curfinesig</name></name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>finesiglist</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>curcoarsesig1</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name>fs</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>picref</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>lastindex</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>intpic</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">32</literal><operator>*</operator><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>intjlut</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>intjlut</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>intjlut</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i</name><operator>*</operator><literal type="number">32</literal><operator>)</operator><operator>/</operator><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>inti</name> <operator>=</operator> <operator>(</operator><name>i</name><operator>*</operator><literal type="number">32</literal><operator>)</operator><operator>/</operator><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>intj</name> <operator>=</operator> <name><name>intjlut</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>intpic</name><index>[<expr><name>inti</name></expr>]</index><index>[<expr><name>intj</name></expr>]</index></name> <operator>+=</operator> <name><name>p</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>picref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>intjlut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>dh1</name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>/</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>%</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dh2</name> <operator>=</operator> <name>dh1</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dw1</name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>/</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>%</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dw2</name> <operator>=</operator> <name>dw1</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>denom</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>sc</name><operator>-&gt;</operator><name>divide</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>dh1</name> <operator>*</operator> <name>dh2</name> <operator>*</operator> <name>dw1</name> <operator>*</operator> <name>dw2</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>rowcount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dh2</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>%</operator><literal type="number">32</literal> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>/</operator><literal type="number">32</literal> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>/</operator><literal type="number">32</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>-=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name><operator>*</operator><name>i</name><operator>)</operator><operator>%</operator><literal type="number">32</literal> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name><operator>*</operator><name>i</name><operator>)</operator><operator>/</operator><literal type="number">32</literal> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name><operator>*</operator><name>i</name><operator>)</operator><operator>/</operator><literal type="number">32</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>a</name> <operator>==</operator> <name>dh1</name><operator>)</operator></expr>?</condition><then> <expr><name>dh2</name></expr> </then><else>: <expr><name>dh1</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dw2</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name><operator>*</operator><operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>%</operator><literal type="number">32</literal> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name><operator>*</operator><operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>/</operator><literal type="number">32</literal> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name><operator>*</operator><operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>/</operator><literal type="number">32</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>-=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name><operator>*</operator><name>j</name><operator>)</operator><operator>%</operator><literal type="number">32</literal> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name><operator>*</operator><name>j</name><operator>)</operator><operator>/</operator><literal type="number">32</literal> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name><operator>*</operator><name>j</name><operator>)</operator><operator>/</operator><literal type="number">32</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>b</name> <operator>==</operator> <name>dw1</name><operator>)</operator></expr>?</condition><then> <expr><name>dw2</name></expr> </then><else>: <expr><name>dw1</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rowcount</name> <operator>+=</operator> <name><name>intpic</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name>a</name> <operator>*</operator> <name>b</name> <operator>*</operator> <name>precfactor</name> <operator>/</operator> <name>denom</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>intpic</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>intpic</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name>rowcount</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>intpic</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>rowcount</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name>denom</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>sc</name><operator>-&gt;</operator><name>divide</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>dh1</name> <operator>*</operator> <name>dh2</name> <operator>*</operator> <name>dw1</name> <operator>*</operator> <name>dw2</name></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ELEMENT_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ElemCat</name><modifier>*</modifier></type> <name>elemcat</name> <init>= <expr><name><name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>elemsignature</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name><modifier>*</modifier></type> <name>sortsignature</name></decl>;</decl_stmt>

<expr_stmt><expr><name>elemsignature</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>elemcat</name><operator>-&gt;</operator><name>elem_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>elemsignature</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sortsignature</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>elemcat</name><operator>-&gt;</operator><name>elem_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sortsignature</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>elemsignature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>elemcat</name><operator>-&gt;</operator><name>elem_count</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>blocksum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>blocksize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>elemcat</name><operator>-&gt;</operator><name>left_count</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>blocksum</name> <operator>+=</operator> <call><name>get_block_sum</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>intpic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>elemcat</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>j</name><operator>*</operator><name><name>elemcat</name><operator>-&gt;</operator><name>block_count</name></name><operator>+</operator><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>blocksize</name> <operator>+=</operator> <call><name>get_block_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>elemcat</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>j</name><operator>*</operator><name><name>elemcat</name><operator>-&gt;</operator><name>block_count</name></name><operator>+</operator><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <name>blocksum</name> <operator>/</operator> <name>blocksize</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>elemcat</name><operator>-&gt;</operator><name>av_elem</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sum</name> <operator>-=</operator> <literal type="number">128</literal> <operator>*</operator> <name>precfactor</name> <operator>*</operator> <name>denom</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>blocksum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>blocksize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>elemcat</name><operator>-&gt;</operator><name>block_count</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>blocksum</name> <operator>+=</operator> <call><name>get_block_sum</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>intpic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>elemcat</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>j</name><operator>*</operator><name><name>elemcat</name><operator>-&gt;</operator><name>block_count</name></name><operator>+</operator><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>blocksize</name> <operator>+=</operator> <call><name>get_block_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>elemcat</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>j</name><operator>*</operator><name><name>elemcat</name><operator>-&gt;</operator><name>block_count</name></name><operator>+</operator><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>sum</name> <operator>-=</operator> <name>blocksum</name> <operator>/</operator> <name>blocksize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conflist</name><index>[<expr><name>g</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>sum</name> <operator>*</operator> <literal type="number">8</literal> <operator>/</operator> <operator>(</operator><name>precfactor</name> <operator>*</operator> <name>denom</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>elemsignature</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>sum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sortsignature</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>sortsignature</name></expr></argument>, <argument><expr><name><name>elemcat</name><operator>-&gt;</operator><name>elem_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>th</name> <operator>=</operator> <name><name>sortsignature</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>elemcat</name><operator>-&gt;</operator><name>elem_count</name></name><operator>*</operator><literal type="number">0.333</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>elemcat</name><operator>-&gt;</operator><name>elem_count</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>elemsignature</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;</operator> <operator>-</operator><name>th</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ternary</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>elemsignature</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;=</operator> <name>th</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ternary</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ternary</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>framesig</name><index>[<expr><name>f</name><operator>/</operator><literal type="number">5</literal></expr>]</index></name> <operator>+=</operator> <name>ternary</name> <operator>*</operator> <name><name>pot3</name><index>[<expr><name>f</name><operator>%</operator><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name><name>wordvec</name><index>[<expr><name>w</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name><name>s2usw</name><index>[<expr><name>w</name></expr>]</index></name><operator>/</operator><literal type="number">5</literal></expr>]</index></name> <operator>+=</operator> <name>ternary</name> <operator>*</operator> <name><name>pot3</name><index>[<expr><name><name>wordt2b</name><index>[<expr><name><name>s2usw</name><index>[<expr><name>w</name></expr>]</index></name><operator>/</operator><literal type="number">5</literal></expr>]</index></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&lt;</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>w</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>f</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>elemsignature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sortsignature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>conflist</name></expr></argument>, <argument><expr><name>DIFFELEM_SIZE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>confidence</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>conflist</name><index>[<expr><name>DIFFELEM_SIZE</name><operator>/</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>coarsecount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>curcoarsesig2</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>curcoarsesig1</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CoarseSignature</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sc</name><operator>-&gt;</operator><name>curcoarsesig1</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>curcoarsesig1</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name>fs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>curcoarsesig2</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>curcoarsesig1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>coarseend</name></name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>curcoarsesig1</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>coarsecount</name></name> <operator>==</operator> <literal type="number">45</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>midcoarse</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>curcoarsesig2</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CoarseSignature</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sc</name><operator>-&gt;</operator><name>curcoarsesig2</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>curcoarsesig2</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name>fs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>curcoarsesig1</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>curcoarsesig2</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>coarseend</name></name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>curcoarsesig2</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>set_bit</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>curcoarsesig1</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>curcoarsesig1</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>fs</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>midcoarse</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>set_bit</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>curcoarsesig2</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>curcoarsesig2</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>fs</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>coarsecount</name></name> <operator>=</operator> <operator>(</operator><name><name>sc</name><operator>-&gt;</operator><name>coarsecount</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">90</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>av_log_get_level</name><argument_list>()</argument_list></call> <operator>==</operator> <name>AV_LOG_DEBUG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"input %d, confidence: %d\n"</literal></expr></argument>, <argument><expr><call><name>FF_INLINK_IDX</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>confidence</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"words:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" %d:"</literal></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" %d"</literal></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <name><name>pot3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">",%d"</literal></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%</operator> <name><name>pot3</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <name><name>pot3</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"framesignature:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SIGELEM_SIZE</name><operator>/</operator><literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" %d"</literal></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>framesig</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <name><name>pot3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">",%d"</literal></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>framesig</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%</operator> <name><name>pot3</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <name><name>pot3</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FF_INLINK_IDX</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xml_export</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>StreamContext</name> <modifier>*</modifier></type><name>sc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FineSignature</name><modifier>*</modifier></type> <name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CoarseSignature</name><modifier>*</modifier></type> <name>cs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name><modifier>*</modifier></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>pot3</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">3</literal><operator>*</operator><literal type="number">3</literal><operator>*</operator><literal type="number">3</literal><operator>*</operator><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal><operator>*</operator><literal type="number">3</literal><operator>*</operator><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal><operator>*</operator><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot open xml file %s: %s\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"&lt;?xml version='1.0' encoding='ASCII' ?&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"&lt;Mpeg7 xmlns=\"urn:mpeg:mpeg7:schema:2001\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"urn:mpeg:mpeg7:schema:2001 schema/Mpeg7-2001.xsd\"&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" &lt;DescriptionUnit xsi:type=\"DescriptorCollectionType\"&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" &lt;Descriptor xsi:type=\"VideoSignatureType\"&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" &lt;VideoSignatureRegion&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" &lt;VideoSignatureSpatialRegion&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" &lt;Pixel&gt;0 0 &lt;/Pixel&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" &lt;Pixel&gt;%d %d &lt;/Pixel&gt;\n"</literal></expr></argument>, <argument><expr><name><name>sc</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>sc</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" &lt;/VideoSignatureSpatialRegion&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" &lt;StartFrameOfSpatialRegion&gt;0&lt;/StartFrameOfSpatialRegion&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" &lt;MediaTimeUnit&gt;%d&lt;/MediaTimeUnit&gt;\n"</literal></expr></argument>, <argument><expr><name><name>sc</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>/</operator> <name><name>sc</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" &lt;MediaTimeOfSpatialRegion&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" &lt;StartMediaTimeOfSpatialRegion&gt;0&lt;/StartMediaTimeOfSpatialRegion&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" &lt;EndMediaTimeOfSpatialRegion&gt;%"</literal> <name>PRIu64</name> <literal type="string">"&lt;/EndMediaTimeOfSpatialRegion&gt;\n"</literal></expr></argument>, <argument><expr><name><name>sc</name><operator>-&gt;</operator><name>coarseend</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" &lt;/MediaTimeOfSpatialRegion&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>cs</name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>coarsesiglist</name></name></expr>;</init> <condition><expr><name>cs</name></expr>;</condition> <incr><expr><name>cs</name> <operator>=</operator> <name><name>cs</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" &lt;VSVideoSegment&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" &lt;StartFrameOfSegment&gt;%"</literal> <name>PRIu32</name> <literal type="string">"&lt;/StartFrameOfSegment&gt;\n"</literal></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>first</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" &lt;EndFrameOfSegment&gt;%"</literal> <name>PRIu32</name> <literal type="string">"&lt;/EndFrameOfSegment&gt;\n"</literal></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" &lt;MediaTimeOfSegment&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" &lt;StartMediaTimeOfSegment&gt;%"</literal> <name>PRIu64</name> <literal type="string">"&lt;/StartMediaTimeOfSegment&gt;\n"</literal></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>first</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" &lt;EndMediaTimeOfSegment&gt;%"</literal> <name>PRIu64</name> <literal type="string">"&lt;/EndMediaTimeOfSegment&gt;\n"</literal></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" &lt;/MediaTimeOfSegment&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" &lt;BagOfWords&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">31</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>n</name> <init>= <expr><name><name>cs</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <literal type="number">30</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%d %d %d %d %d %d %d %d "</literal></expr></argument>, <argument><expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr></argument>,
<argument><expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0x40</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr></argument>,
<argument><expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></argument>,
<argument><expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>,
<argument><expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0x08</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>,
<argument><expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0x04</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0x02</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%d %d %d "</literal></expr></argument>, <argument><expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr></argument>,
<argument><expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0x40</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr></argument>,
<argument><expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"&lt;/BagOfWords&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" &lt;/VSVideoSegment&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>fs</name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>finesiglist</name></name></expr>;</init> <condition><expr><name>fs</name></expr>;</condition> <incr><expr><name>fs</name> <operator>=</operator> <name><name>fs</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" &lt;VideoFrame&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" &lt;MediaTimeOfFrame&gt;%"</literal> <name>PRIu64</name> <literal type="string">"&lt;/MediaTimeOfFrame&gt;\n"</literal></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" &lt;FrameConfidence&gt;%d&lt;/FrameConfidence&gt;\n"</literal></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>confidence</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" &lt;Word&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"&lt;/Word&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" &lt;FrameSignature&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <name>SIGELEM_SIZE</name><operator>/</operator><literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>framesig</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <name><name>pot3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" %d "</literal></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>framesig</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%</operator> <name><name>pot3</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <name><name>pot3</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"&lt;/FrameSignature&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" &lt;/VideoFrame&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" &lt;/VideoSignatureRegion&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" &lt;/Descriptor&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" &lt;/DescriptionUnit&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"&lt;/Mpeg7&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>binary_export</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>StreamContext</name> <modifier>*</modifier></type><name>sc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name><modifier>*</modifier></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FineSignature</name><modifier>*</modifier></type> <name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CoarseSignature</name><modifier>*</modifier></type> <name>cs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>numofsegments</name> <init>= <expr><operator>(</operator><name><name>sc</name><operator>-&gt;</operator><name>lastindex</name></name> <operator>+</operator> <literal type="number">44</literal><operator>)</operator><operator>/</operator><literal type="number">45</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PutBitContext</name></type> <name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><literal type="number">512</literal> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">32</literal> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator>
<name>numofsegments</name> <operator>*</operator> <operator>(</operator><literal type="number">4</literal><operator>*</operator><literal type="number">32</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">5</literal><operator>*</operator><literal type="number">243</literal><operator>)</operator> <operator>+</operator>
<name><name>sc</name><operator>-&gt;</operator><name>lastindex</name></name> <operator>*</operator> <operator>(</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">32</literal> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><literal type="number">8</literal> <operator>+</operator> <literal type="number">608</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>buffer</name> <init>= <expr><call><name>av_malloc_array</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot open file %s: %s\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>put_bits32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>sc</name><operator>-&gt;</operator><name>w</name></name><operator>-</operator><literal type="number">1</literal> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>sc</name><operator>-&gt;</operator><name>h</name></name><operator>-</operator><literal type="number">1</literal> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>put_bits32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>put_bits32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>sc</name><operator>-&gt;</operator><name>lastindex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0xFFFF</literal> <operator>&amp;</operator> <operator>(</operator><name><name>sc</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>/</operator> <name><name>sc</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>put_bits32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>put_bits32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0xFFFFFFFF</literal> <operator>&amp;</operator> <name><name>sc</name><operator>-&gt;</operator><name>coarseend</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>put_bits32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>numofsegments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>cs</name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>coarsesiglist</name></name></expr>;</init> <condition><expr><name>cs</name></expr>;</condition> <incr><expr><name>cs</name> <operator>=</operator> <name><name>cs</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>put_bits32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>first</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>put_bits32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>put_bits32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0xFFFFFFFF</literal> <operator>&amp;</operator> <name><name>cs</name><operator>-&gt;</operator><name>first</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>put_bits32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0xFFFFFFFF</literal> <operator>&amp;</operator> <name><name>cs</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">30</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">30</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<for>for <control>(<init><expr><name>fs</name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>finesiglist</name></name></expr>;</init> <condition><expr><name>fs</name></expr>;</condition> <incr><expr><name>fs</name> <operator>=</operator> <name><name>fs</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>put_bits32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0xFFFFFFFF</literal> <operator>&amp;</operator> <name><name>fs</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>confidence</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SIGELEM_SIZE</name><operator>/</operator><literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>framesig</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>avpriv_align_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>export</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>StreamContext</name> <modifier>*</modifier></type><name>sc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SignatureContext</name><modifier>*</modifier></type> <name>sic</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>filename</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sic</name><operator>-&gt;</operator><name>nb_inputs</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><call><name>av_get_frame_filename</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>sic</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name><name>sic</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sic</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>FORMAT_XML</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>xml_export</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><call><name>binary_export</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>request_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SignatureContext</name> <modifier>*</modifier></type><name>sic</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StreamContext</name> <modifier>*</modifier></type><name>sc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sc2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MatchingInfo</name></type> <name>match</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lookup</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sic</name><operator>-&gt;</operator><name>nb_inputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name>sc</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>sic</name><operator>-&gt;</operator><name>streamcontexts</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_request_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <name>AVERROR_EOF</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AVERROR_EOF</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sc</name><operator>-&gt;</operator><name>exported</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>sic</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>export</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>exported</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>lookup</name> <operator>&amp;=</operator> <name><name>sc</name><operator>-&gt;</operator><name>exported</name></name></expr>;</expr_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name>lookup</name> <operator>&amp;&amp;</operator> <name><name>sic</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>MODE_OFF</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sic</name><operator>-&gt;</operator><name>nb_inputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>sc</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>sic</name><operator>-&gt;</operator><name>streamcontexts</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>sic</name><operator>-&gt;</operator><name>nb_inputs</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>sc2</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>sic</name><operator>-&gt;</operator><name>streamcontexts</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>lookup_signatures</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>sic</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><name>sc2</name></expr></argument>, <argument><expr><name><name>sic</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>match</name><operator>.</operator><name>score</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"matching of video %d at %f and %d at %f, %d frames matching\n"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name><name>match</name><operator>.</operator><name>first</name><operator>-&gt;</operator><name>pts</name></name> <operator>*</operator> <name><name>sc</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name><operator>)</operator> <operator>/</operator> <name><name>sc</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>,
<argument><expr><name>j</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name><name>match</name><operator>.</operator><name>second</name><operator>-&gt;</operator><name>pts</name></name> <operator>*</operator> <name><name>sc2</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name><operator>)</operator> <operator>/</operator> <name><name>sc2</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>,
<argument><expr><name><name>match</name><operator>.</operator><name>matchframes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>match</name><operator>.</operator><name>whole</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"whole video matching\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"no matching of video %d and %d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>SignatureContext</name> <modifier>*</modifier></type><name>sic</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StreamContext</name> <modifier>*</modifier></type><name>sc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sic</name><operator>-&gt;</operator><name>streamcontexts</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>sic</name><operator>-&gt;</operator><name>nb_inputs</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>StreamContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sic</name><operator>-&gt;</operator><name>streamcontexts</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sic</name><operator>-&gt;</operator><name>nb_inputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AVFilterPad</name></type> <name>pad</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>name</name> <operator>=</operator> <call><name>av_asprintf</name><argument_list>(<argument><expr><literal type="string">"in%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pad</name><operator>.</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sc</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>sic</name><operator>-&gt;</operator><name>streamcontexts</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>lastindex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>finesiglist</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FineSignature</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sc</name><operator>-&gt;</operator><name>finesiglist</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>curfinesig</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>coarsesiglist</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CoarseSignature</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sc</name><operator>-&gt;</operator><name>coarsesiglist</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>curcoarsesig1</name></name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>coarsesiglist</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>coarseend</name></name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>coarsesiglist</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>coarsecount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>midcoarse</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_insert_inpad</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pad</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pad</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name><name>sic</name><operator>-&gt;</operator><name>nb_inputs</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>sic</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>av_get_frame_filename</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>sic</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"The filename must contain %%d or %%0nd, if you have more than one input.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SignatureContext</name> <modifier>*</modifier></type><name>sic</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StreamContext</name> <modifier>*</modifier></type><name>sc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FineSignature</name><modifier>*</modifier></type> <name>finsig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CoarseSignature</name><modifier>*</modifier></type> <name>cousig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name><name>sic</name><operator>-&gt;</operator><name>streamcontexts</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sic</name><operator>-&gt;</operator><name>nb_inputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>sc</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>sic</name><operator>-&gt;</operator><name>streamcontexts</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>finsig</name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>finesiglist</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cousig</name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>coarsesiglist</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>finsig</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>finsig</name></expr>;</expr_stmt>
<expr_stmt><expr><name>finsig</name> <operator>=</operator> <name><name>finsig</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>finesiglist</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>cousig</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>cousig</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cousig</name> <operator>=</operator> <name><name>cousig</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>coarsesiglist</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sic</name><operator>-&gt;</operator><name>streamcontexts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_output</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>frame_rate</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>frame_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>signature_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>request_frame</name> <operator>=</operator> <name>request_frame</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_output</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_signature</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"signature"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Calculate the MPEG-7 video signature"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SignatureContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>signature_class</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>signature_outputs</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_DYNAMIC_INPUTS</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
