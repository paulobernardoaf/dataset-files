<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vf_deshake.c">


















































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/qsort.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"deshake.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(DeshakeContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM|AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>deshake_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"x"</literal></expr>, <expr><literal type="string">"set x for the rectangular search area"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"y"</literal></expr>, <expr><literal type="string">"set y for the rectangular search area"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>cy</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"w"</literal></expr>, <expr><literal type="string">"set width for the rectangular search area"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>cw</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"h"</literal></expr>, <expr><literal type="string">"set height for the rectangular search area"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rx"</literal></expr>, <expr><literal type="string">"set x for the rectangular search area"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>rx</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">16</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MAX_R</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ry"</literal></expr>, <expr><literal type="string">"set y for the rectangular search area"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>ry</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">16</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MAX_R</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"edge"</literal></expr>, <expr><literal type="string">"set edge mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>FILL_MIRROR</name></expr>}</block></expr>, <expr><name>FILL_BLANK</name></expr>, <expr><name>FILL_COUNT</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"edge"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"blank"</literal></expr>, <expr><literal type="string">"fill zeroes at blank locations"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>FILL_BLANK</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"edge"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"original"</literal></expr>, <expr><literal type="string">"original image at blank locations"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>FILL_ORIGINAL</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"edge"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"clamp"</literal></expr>, <expr><literal type="string">"extruded edge value at blank locations"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>FILL_CLAMP</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"edge"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"mirror"</literal></expr>, <expr><literal type="string">"mirrored edge at blank locations"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>FILL_MIRROR</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"edge"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"blocksize"</literal></expr>, <expr><literal type="string">"set motion search blocksize"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>blocksize</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">8</literal></expr>}</block></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"contrast"</literal></expr>, <expr><literal type="string">"set contrast threshold for blocks"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>contrast</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">125</literal></expr>}</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"search"</literal></expr>, <expr><literal type="string">"set search strategy"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>search</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>EXHAUSTIVE</name></expr>}</block></expr>, <expr><name>EXHAUSTIVE</name></expr>, <expr><name>SEARCH_COUNT</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"smode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"exhaustive"</literal></expr>, <expr><literal type="string">"exhaustive search"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>EXHAUSTIVE</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"smode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"less"</literal></expr>, <expr><literal type="string">"less exhaustive search"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SMART_EXHAUSTIVE</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"smode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"filename"</literal></expr>, <expr><literal type="string">"set motion search detailed log file name"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><name>NULL</name></expr>}</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"opencl"</literal></expr>, <expr><literal type="string">"ignored"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>opencl</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>deshake</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>FFDIFFSIGN</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>double</name> <operator>*</operator><operator>)</operator><name>a</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>double</name> <operator>*</operator><operator>)</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>double</name></type> <name>clean_mean</name><parameter_list>(<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>mean</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cut</name> <init>= <expr><name>count</name> <operator>/</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_QSORT</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>cut</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>count</name> <operator>-</operator> <name>cut</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>mean</name> <operator>+=</operator> <name><name>values</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>mean</name> <operator>/</operator> <operator>(</operator><name>count</name> <operator>-</operator> <name>cut</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>find_block_motion</name><parameter_list>(<parameter><decl><type><name>DeshakeContext</name> <modifier>*</modifier></type><name>deshake</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>IntMotionVector</name> <modifier>*</modifier></type><name>mv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>diff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>smallest</name> <init>= <expr><name>INT_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tmp</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>deshake-&gt;sad(src1 + cy * stride + cx, stride,src2 + (j) * stride + (i), stride)</cpp:value></cpp:define>


<if_stmt><if>if <condition>(<expr><name><name>deshake</name><operator>-&gt;</operator><name>search</name></name> <operator>==</operator> <name>EXHAUSTIVE</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <operator>-</operator><name><name>deshake</name><operator>-&gt;</operator><name>ry</name></name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;=</operator> <name><name>deshake</name><operator>-&gt;</operator><name>ry</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <operator>-</operator><name><name>deshake</name><operator>-&gt;</operator><name>rx</name></name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;=</operator> <name><name>deshake</name><operator>-&gt;</operator><name>rx</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name>CMP</name><argument_list>(<argument><expr><name>cx</name> <operator>-</operator> <name>x</name></expr></argument>, <argument><expr><name>cy</name> <operator>-</operator> <name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;</operator> <name>smallest</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>smallest</name> <operator>=</operator> <name>diff</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mv</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mv</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>deshake</name><operator>-&gt;</operator><name>search</name></name> <operator>==</operator> <name>SMART_EXHAUSTIVE</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <operator>-</operator><name><name>deshake</name><operator>-&gt;</operator><name>ry</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>deshake</name><operator>-&gt;</operator><name>ry</name></name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <operator>-</operator><name><name>deshake</name><operator>-&gt;</operator><name>rx</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>deshake</name><operator>-&gt;</operator><name>rx</name></name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name>CMP</name><argument_list>(<argument><expr><name>cx</name> <operator>-</operator> <name>x</name></expr></argument>, <argument><expr><name>cy</name> <operator>-</operator> <name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;</operator> <name>smallest</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>smallest</name> <operator>=</operator> <name>diff</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mv</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mv</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>mv</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name><name>mv</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>tmp2</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;=</operator> <name>tmp2</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>tmp</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;=</operator> <name>tmp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>tmp</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>==</operator> <name>tmp2</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name>CMP</name><argument_list>(<argument><expr><name>cx</name> <operator>-</operator> <name>x</name></expr></argument>, <argument><expr><name>cy</name> <operator>-</operator> <name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;</operator> <name>smallest</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>smallest</name> <operator>=</operator> <name>diff</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mv</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mv</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>smallest</name> <operator>&gt;</operator> <literal type="number">512</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mv</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mv</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>block_contrast</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blocksize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>highest</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lowest</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>blocksize</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>*</operator> <name>stride</name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>+</operator> <name>j</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>src</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>&lt;</operator> <name>lowest</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lowest</name> <operator>=</operator> <name><name>src</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>src</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>&gt;</operator> <name>highest</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>highest</name> <operator>=</operator> <name><name>src</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><name>highest</name> <operator>-</operator> <name>lowest</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>double</name></type> <name>block_angle</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cy</name></decl></parameter>, <parameter><decl><type><name>IntMotionVector</name> <modifier>*</modifier></type><name>shift</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>a1</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>, <decl><type ref="prev"/><name>diff</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a1</name> <operator>=</operator> <call><name>atan2</name><argument_list>(<argument><expr><name>y</name> <operator>-</operator> <name>cy</name></expr></argument>, <argument><expr><name>x</name> <operator>-</operator> <name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a2</name> <operator>=</operator> <call><name>atan2</name><argument_list>(<argument><expr><name>y</name> <operator>-</operator> <name>cy</name> <operator>+</operator> <name><name>shift</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>x</name> <operator>-</operator> <name>cx</name> <operator>+</operator> <name><name>shift</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <name>a2</name> <operator>-</operator> <name>a1</name></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>diff</name> <operator>&gt;</operator> <name>M_PI</name><operator>)</operator></expr> ?</condition><then> <expr><name>diff</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>M_PI</name></expr> </then><else>:
<expr><ternary><condition><expr><operator>(</operator><name>diff</name> <operator>&lt;</operator> <operator>-</operator><name>M_PI</name><operator>)</operator></expr> ?</condition><then> <expr><name>diff</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>M_PI</name></expr> </then><else>:
<expr><name>diff</name></expr></else></ternary></expr></else></ternary></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type> <name>find_motion</name><parameter_list>(<parameter><decl><type><name>DeshakeContext</name> <modifier>*</modifier></type><name>deshake</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>Transform</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IntMotionVector</name></type> <name>mv</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count_max_value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>contrast</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>center_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>center_y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>p_x</name></decl>, <decl><type ref="prev"/><name>p_y</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_fast_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>deshake</name><operator>-&gt;</operator><name>angles</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>deshake</name><operator>-&gt;</operator><name>angles_size</name></name></expr></argument>, <argument><expr><name>width</name> <operator>*</operator> <name>height</name> <operator>/</operator> <operator>(</operator><literal type="number">16</literal> <operator>*</operator> <name><name>deshake</name><operator>-&gt;</operator><name>blocksize</name></name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>deshake</name><operator>-&gt;</operator><name>angles</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>deshake</name><operator>-&gt;</operator><name>rx</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>deshake</name><operator>-&gt;</operator><name>ry</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>deshake</name><operator>-&gt;</operator><name>counts</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name><name>deshake</name><operator>-&gt;</operator><name>ry</name></name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name> <operator>-</operator> <name><name>deshake</name><operator>-&gt;</operator><name>ry</name></name> <operator>-</operator> <operator>(</operator><name><name>deshake</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <name><name>deshake</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>*</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name><name>deshake</name><operator>-&gt;</operator><name>rx</name></name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name> <operator>-</operator> <name><name>deshake</name><operator>-&gt;</operator><name>rx</name></name> <operator>-</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr>)</control> <block>{<block_content>


<expr_stmt><expr><name>contrast</name> <operator>=</operator> <call><name>block_contrast</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name><name>deshake</name><operator>-&gt;</operator><name>blocksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>contrast</name> <operator>&gt;</operator> <name><name>deshake</name><operator>-&gt;</operator><name>contrast</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>find_block_motion</name><argument_list>(<argument><expr><name>deshake</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mv</name><operator>.</operator><name>x</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>mv</name><operator>.</operator><name>y</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>deshake</name><operator>-&gt;</operator><name>counts</name><index>[<expr><name><name>mv</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>deshake</name><operator>-&gt;</operator><name>rx</name></name></expr>]</index><index>[<expr><name><name>mv</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>deshake</name><operator>-&gt;</operator><name>ry</name></name></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name><name>deshake</name><operator>-&gt;</operator><name>rx</name></name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&gt;</operator> <name><name>deshake</name><operator>-&gt;</operator><name>ry</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>deshake</name><operator>-&gt;</operator><name>angles</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>block_angle</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>center_x</name> <operator>+=</operator> <name><name>mv</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>center_y</name> <operator>+=</operator> <name><name>mv</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>pos</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>center_x</name> <operator>/=</operator> <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name>center_y</name> <operator>/=</operator> <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>angle</name></name> <operator>=</operator> <call><name>clean_mean</name><argument_list>(<argument><expr><name><name>deshake</name><operator>-&gt;</operator><name>angles</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>angle</name></name> <operator>&lt;</operator> <literal type="number">0.001</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>angle</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>angle</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name><name>deshake</name><operator>-&gt;</operator><name>ry</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>y</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>deshake</name><operator>-&gt;</operator><name>rx</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>deshake</name><operator>-&gt;</operator><name>counts</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>&gt;</operator> <name>count_max_value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>vec</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x</name> <operator>-</operator> <name><name>deshake</name><operator>-&gt;</operator><name>rx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>vec</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>y</name> <operator>-</operator> <name><name>deshake</name><operator>-&gt;</operator><name>ry</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>count_max_value</name> <operator>=</operator> <name><name>deshake</name><operator>-&gt;</operator><name>counts</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>p_x</name> <operator>=</operator> <operator>(</operator><name>center_x</name> <operator>-</operator> <name>width</name> <operator>/</operator> <literal type="number">2.0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p_y</name> <operator>=</operator> <operator>(</operator><name>center_y</name> <operator>-</operator> <name>height</name> <operator>/</operator> <literal type="number">2.0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>vec</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <operator>(</operator><call><name>cos</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>angle</name></name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>p_x</name> <operator>-</operator> <call><name>sin</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>angle</name></name></expr></argument>)</argument_list></call><operator>*</operator><name>p_y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>vec</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <call><name>sin</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>angle</name></name></expr></argument>)</argument_list></call><operator>*</operator><name>p_x</name> <operator>+</operator> <operator>(</operator><call><name>cos</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>angle</name></name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>p_y</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>vec</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>vec</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><operator>-</operator><name><name>deshake</name><operator>-&gt;</operator><name>rx</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>deshake</name><operator>-&gt;</operator><name>rx</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>vec</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>vec</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><operator>-</operator><name><name>deshake</name><operator>-&gt;</operator><name>ry</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>deshake</name><operator>-&gt;</operator><name>ry</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>angle</name></name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>angle</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">0.1</literal></expr></argument>, <argument><expr><literal type="number">0.1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>deshake_transform_c</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>matrix_y</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>matrix_uv</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>InterpolateMethod</name></name></type> <name>interpolate</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>FillMethod</name></name></type> <name>fill</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name><name>matrixs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>plane_w</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>plane_h</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>matrixs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>matrix_y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrixs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>matrixs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>matrix_uv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>plane_w</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>plane_w</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>plane_w</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>cw</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>plane_h</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>plane_h</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>plane_h</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avfilter_transform</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>plane_w</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>plane_h</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>matrixs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>interpolate</name></expr></argument>, <argument><expr><name>fill</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DeshakeContext</name> <modifier>*</modifier></type><name>deshake</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>deshake</name><operator>-&gt;</operator><name>refcount</name></name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>deshake</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>deshake</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>deshake</name><operator>-&gt;</operator><name>blocksize</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>deshake</name><operator>-&gt;</operator><name>rx</name></name> <operator>%</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"rx must be a multiple of 16\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>deshake</name><operator>-&gt;</operator><name>filename</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>deshake</name><operator>-&gt;</operator><name>fp</name></name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>deshake</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>deshake</name><operator>-&gt;</operator><name>fp</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><literal type="string">"Ori x, Avg x, Fin x, Ori y, Avg y, Fin y, Ori angle, Avg angle, Fin angle, Ori zoom, Avg zoom, Fin zoom\n"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">104</literal></expr></argument>, <argument><expr><name><name>deshake</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>deshake</name><operator>-&gt;</operator><name>cx</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>deshake</name><operator>-&gt;</operator><name>cw</name></name> <operator>+=</operator> <name><name>deshake</name><operator>-&gt;</operator><name>cx</name></name> <operator>-</operator> <operator>(</operator><name><name>deshake</name><operator>-&gt;</operator><name>cx</name></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>deshake</name><operator>-&gt;</operator><name>cx</name></name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">15</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>deshake</name><operator>-&gt;</operator><name>transform</name></name> <operator>=</operator> <name>deshake_transform_c</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"cx: %d, cy: %d, cw: %d, ch: %d, rx: %d, ry: %d, edge: %d blocksize: %d contrast: %d search: %d\n"</literal></expr></argument>,
<argument><expr><name><name>deshake</name><operator>-&gt;</operator><name>cx</name></name></expr></argument>, <argument><expr><name><name>deshake</name><operator>-&gt;</operator><name>cy</name></name></expr></argument>, <argument><expr><name><name>deshake</name><operator>-&gt;</operator><name>cw</name></name></expr></argument>, <argument><expr><name><name>deshake</name><operator>-&gt;</operator><name>ch</name></name></expr></argument>,
<argument><expr><name><name>deshake</name><operator>-&gt;</operator><name>rx</name></name></expr></argument>, <argument><expr><name><name>deshake</name><operator>-&gt;</operator><name>ry</name></name></expr></argument>, <argument><expr><name><name>deshake</name><operator>-&gt;</operator><name>edge</name></name></expr></argument>, <argument><expr><name><name>deshake</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>deshake</name><operator>-&gt;</operator><name>contrast</name></name></expr></argument>, <argument><expr><name><name>deshake</name><operator>-&gt;</operator><name>search</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_YUV422P</name></expr>, <expr><name>AV_PIX_FMT_YUV444P</name></expr>, <expr><name>AV_PIX_FMT_YUV410P</name></expr>,
<expr><name>AV_PIX_FMT_YUV411P</name></expr>, <expr><name>AV_PIX_FMT_YUV440P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ420P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ422P</name></expr>,
<expr><name>AV_PIX_FMT_YUVJ444P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ440P</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_props</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DeshakeContext</name> <modifier>*</modifier></type><name>deshake</name> <init>= <expr><name><name>link</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>deshake</name><operator>-&gt;</operator><name>ref</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>deshake</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>vec</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>deshake</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>vec</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>deshake</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>angle</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>deshake</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>zoom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DeshakeContext</name> <modifier>*</modifier></type><name>deshake</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>deshake</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>deshake</name><operator>-&gt;</operator><name>angles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>deshake</name><operator>-&gt;</operator><name>angles_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>deshake</name><operator>-&gt;</operator><name>fp</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>deshake</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DeshakeContext</name> <modifier>*</modifier></type><name>deshake</name> <init>= <expr><name><name>link</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>link</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Transform</name></type> <name>t</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>, <decl><type ref="prev"/><name>orig</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>matrix_y</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>matrix_uv</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>alpha</name> <init>= <expr><literal type="number">2.0</literal> <operator>/</operator> <name><name>deshake</name><operator>-&gt;</operator><name>refcount</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>chroma_width</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>chroma_height</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aligned</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>transform_zoom</name></decl>;</decl_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>aligned</name> <operator>=</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">15</literal> <operator>|</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>deshake</name><operator>-&gt;</operator><name>sad</name></name> <operator>=</operator> <call><name>av_pixelutils_get_sad_fn</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>aligned</name></expr></argument>, <argument><expr><name>deshake</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>deshake</name><operator>-&gt;</operator><name>sad</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>deshake</name><operator>-&gt;</operator><name>cx</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>deshake</name><operator>-&gt;</operator><name>cy</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>deshake</name><operator>-&gt;</operator><name>cw</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>deshake</name><operator>-&gt;</operator><name>ch</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>find_motion</name><argument_list>(<argument><expr><name>deshake</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>deshake</name><operator>-&gt;</operator><name>ref</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>deshake</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>link</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>link</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src1</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>deshake</name><operator>-&gt;</operator><name>ref</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>deshake</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src2</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>deshake</name><operator>-&gt;</operator><name>cx</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>deshake</name><operator>-&gt;</operator><name>cx</name></name></expr></argument>, <argument><expr><name><name>link</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>deshake</name><operator>-&gt;</operator><name>cy</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>deshake</name><operator>-&gt;</operator><name>cy</name></name></expr></argument>, <argument><expr><name><name>link</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>deshake</name><operator>-&gt;</operator><name>cx</name></name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>deshake</name><operator>-&gt;</operator><name>cw</name></name> <operator>&gt;</operator> <name><name>link</name><operator>-&gt;</operator><name>w</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>deshake</name><operator>-&gt;</operator><name>cw</name></name> <operator>=</operator> <name><name>link</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <name><name>deshake</name><operator>-&gt;</operator><name>cx</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>deshake</name><operator>-&gt;</operator><name>cy</name></name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>deshake</name><operator>-&gt;</operator><name>ch</name></name> <operator>&gt;</operator> <name><name>link</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>deshake</name><operator>-&gt;</operator><name>ch</name></name> <operator>=</operator> <name><name>link</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <name><name>deshake</name><operator>-&gt;</operator><name>cy</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>deshake</name><operator>-&gt;</operator><name>cw</name></name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src1</name> <operator>+=</operator> <name><name>deshake</name><operator>-&gt;</operator><name>cy</name></name> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>deshake</name><operator>-&gt;</operator><name>cx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>+=</operator> <name><name>deshake</name><operator>-&gt;</operator><name>cy</name></name> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>deshake</name><operator>-&gt;</operator><name>cx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>find_motion</name><argument_list>(<argument><expr><name>deshake</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name><name>deshake</name><operator>-&gt;</operator><name>cw</name></name></expr></argument>, <argument><expr><name><name>deshake</name><operator>-&gt;</operator><name>ch</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>



<expr_stmt><expr><name><name>orig</name><operator>.</operator><name>vec</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>vec</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>orig</name><operator>.</operator><name>vec</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>vec</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>orig</name><operator>.</operator><name>angle</name></name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>angle</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>orig</name><operator>.</operator><name>zoom</name></name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>zoom</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>deshake</name><operator>-&gt;</operator><name>avg</name><operator>.</operator><name>vec</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>alpha</name> <operator>*</operator> <name><name>t</name><operator>.</operator><name>vec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <name>alpha</name><operator>)</operator> <operator>*</operator> <name><name>deshake</name><operator>-&gt;</operator><name>avg</name><operator>.</operator><name>vec</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>deshake</name><operator>-&gt;</operator><name>avg</name><operator>.</operator><name>vec</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>alpha</name> <operator>*</operator> <name><name>t</name><operator>.</operator><name>vec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <name>alpha</name><operator>)</operator> <operator>*</operator> <name><name>deshake</name><operator>-&gt;</operator><name>avg</name><operator>.</operator><name>vec</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>deshake</name><operator>-&gt;</operator><name>avg</name><operator>.</operator><name>angle</name></name> <operator>=</operator> <name>alpha</name> <operator>*</operator> <name><name>t</name><operator>.</operator><name>angle</name></name> <operator>+</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <name>alpha</name><operator>)</operator> <operator>*</operator> <name><name>deshake</name><operator>-&gt;</operator><name>avg</name><operator>.</operator><name>angle</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>deshake</name><operator>-&gt;</operator><name>avg</name><operator>.</operator><name>zoom</name></name> <operator>=</operator> <name>alpha</name> <operator>*</operator> <name><name>t</name><operator>.</operator><name>zoom</name></name> <operator>+</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <name>alpha</name><operator>)</operator> <operator>*</operator> <name><name>deshake</name><operator>-&gt;</operator><name>avg</name><operator>.</operator><name>zoom</name></name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>t</name><operator>.</operator><name>vec</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <name><name>deshake</name><operator>-&gt;</operator><name>avg</name><operator>.</operator><name>vec</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>vec</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <name><name>deshake</name><operator>-&gt;</operator><name>avg</name><operator>.</operator><name>vec</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>angle</name></name> <operator>-=</operator> <name><name>deshake</name><operator>-&gt;</operator><name>avg</name><operator>.</operator><name>angle</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>zoom</name></name> <operator>-=</operator> <name><name>deshake</name><operator>-&gt;</operator><name>avg</name><operator>.</operator><name>zoom</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>t</name><operator>.</operator><name>vec</name><operator>.</operator><name>x</name></name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>vec</name><operator>.</operator><name>y</name></name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>angle</name></name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>deshake</name><operator>-&gt;</operator><name>fp</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><literal type="string">"%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n"</literal></expr></argument>, <argument><expr><name><name>orig</name><operator>.</operator><name>vec</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>deshake</name><operator>-&gt;</operator><name>avg</name><operator>.</operator><name>vec</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>vec</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>orig</name><operator>.</operator><name>vec</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>deshake</name><operator>-&gt;</operator><name>avg</name><operator>.</operator><name>vec</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>vec</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>orig</name><operator>.</operator><name>angle</name></name></expr></argument>, <argument><expr><name><name>deshake</name><operator>-&gt;</operator><name>avg</name><operator>.</operator><name>angle</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>angle</name></name></expr></argument>, <argument><expr><name><name>orig</name><operator>.</operator><name>zoom</name></name></expr></argument>, <argument><expr><name><name>deshake</name><operator>-&gt;</operator><name>avg</name><operator>.</operator><name>zoom</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>zoom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>deshake</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>t</name><operator>.</operator><name>vec</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name><name>deshake</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>vec</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>vec</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name><name>deshake</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>vec</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>angle</name></name> <operator>+=</operator> <name><name>deshake</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>angle</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>zoom</name></name> <operator>+=</operator> <name><name>deshake</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>zoom</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>t</name><operator>.</operator><name>vec</name><operator>.</operator><name>x</name></name> <operator>*=</operator> <literal type="number">0.9</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>vec</name><operator>.</operator><name>y</name></name> <operator>*=</operator> <literal type="number">0.9</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>angle</name></name> <operator>*=</operator> <literal type="number">0.9</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>deshake</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>vec</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>vec</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>deshake</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>vec</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>vec</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>deshake</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>angle</name></name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>angle</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>deshake</name><operator>-&gt;</operator><name>last</name><operator>.</operator><name>zoom</name></name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>zoom</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>transform_zoom</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>+</operator> <name><name>t</name><operator>.</operator><name>zoom</name></name> <operator>/</operator> <literal type="number">100.0</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ff_get_matrix</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>vec</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>vec</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>angle</name></name></expr></argument>, <argument><expr><name>transform_zoom</name></expr></argument>, <argument><expr><name>transform_zoom</name></expr></argument>, <argument><expr><name>matrix_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_get_matrix</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>vec</name><operator>.</operator><name>x</name></name> <operator>/</operator> <operator>(</operator><name><name>link</name><operator>-&gt;</operator><name>w</name></name> <operator>/</operator> <name>chroma_width</name><operator>)</operator></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>vec</name><operator>.</operator><name>y</name></name> <operator>/</operator> <operator>(</operator><name><name>link</name><operator>-&gt;</operator><name>h</name></name> <operator>/</operator> <name>chroma_height</name><operator>)</operator></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>angle</name></name></expr></argument>, <argument><expr><name>transform_zoom</name></expr></argument>, <argument><expr><name>transform_zoom</name></expr></argument>, <argument><expr><name>matrix_uv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>deshake</name><operator>-&gt;</operator><name>transform</name></name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>, <argument><expr><name><name>link</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>link</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>chroma_width</name></expr></argument>, <argument><expr><name>chroma_height</name></expr></argument>,
<argument><expr><name>matrix_y</name></expr></argument>, <argument><expr><name>matrix_uv</name></expr></argument>, <argument><expr><name>INTERPOLATE_BILINEAR</name></expr></argument>, <argument><expr><name><name>deshake</name><operator>-&gt;</operator><name>edge</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>deshake</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>



<expr_stmt><expr><name><name>deshake</name><operator>-&gt;</operator><name>ref</name></name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>deshake_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_props</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>deshake_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_deshake</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"deshake"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Stabilize shaky video."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DeshakeContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>deshake_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>deshake_outputs</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>deshake_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
