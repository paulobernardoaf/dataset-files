<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\af_superequalizer.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/avfft.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filters.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NBANDS</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>EqParameter</name> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>lower</name></decl>, <name>upper</name>, <name>gain</name>;</decl_stmt>
}</block></struct></type> <name>EqParameter</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SuperEqualizerContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EqParameter</name></type> <name><name>params</name><index>[<expr><name>NBANDS</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>gains</name><index>[<expr><name>NBANDS</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>fact</name><index>[<expr><name>M</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>aa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>iza</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>ires</name></decl>, <modifier>*</modifier><name>irest</name>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>fsamples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>winlen</name></decl>, <name>tabsize</name>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl>, <modifier>*</modifier><name>out</name>;</decl_stmt>
<decl_stmt><decl><type><name>RDFTContext</name> <modifier>*</modifier></type><name>rdft</name></decl>, <modifier>*</modifier><name>irdft</name>;</decl_stmt>
}</block></struct></type> <name>SuperEqualizerContext</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>bands</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">65.406392</literal></expr>, <expr><literal type="number">92.498606</literal></expr>, <expr><literal type="number">130.81278</literal></expr>, <expr><literal type="number">184.99721</literal></expr>, <expr><literal type="number">261.62557</literal></expr>, <expr><literal type="number">369.99442</literal></expr>, <expr><literal type="number">523.25113</literal></expr>, <expr><literal type="number">739.9884</literal></expr>, <expr><literal type="number">1046.5023</literal></expr>,
<expr><literal type="number">1479.9768</literal></expr>, <expr><literal type="number">2093.0045</literal></expr>, <expr><literal type="number">2959.9536</literal></expr>, <expr><literal type="number">4186.0091</literal></expr>, <expr><literal type="number">5919.9072</literal></expr>, <expr><literal type="number">8372.0181</literal></expr>, <expr><literal type="number">11839.814</literal></expr>, <expr><literal type="number">16744.036</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>float</name></type> <name>izero</name><parameter_list>(<parameter><decl><type><name>SuperEqualizerContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;=</operator> <name>M</name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><name>x</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>fact</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>t</name><operator>*</operator><name>t</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>hn_lpf</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>fs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>t</name> <init>= <expr><literal type="number">1</literal> <operator>/</operator> <name>fs</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>omega</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <name>f</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>*</operator> <name>omega</name> <operator>*</operator> <name>t</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">2</literal> <operator>*</operator> <name>f</name> <operator>*</operator> <name>t</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">2</literal> <operator>*</operator> <name>f</name> <operator>*</operator> <name>t</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>n</name> <operator>*</operator> <name>omega</name> <operator>*</operator> <name>t</name></expr></argument>)</argument_list></call> <operator>/</operator> <operator>(</operator><name>n</name> <operator>*</operator> <name>omega</name> <operator>*</operator> <name>t</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>hn_imp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1.f</literal></expr> </then><else>: <expr><literal type="number">0.f</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>hn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>EqParameter</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>fs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>lhn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lhn</name> <operator>=</operator> <call><name>hn_lpf</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>upper</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>gain</name><operator>*</operator><name>lhn</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NBANDS</name> <operator>+</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>param</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>upper</name> <operator>&lt;</operator> <name>fs</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>lhn2</name> <init>= <expr><call><name>hn_lpf</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>param</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>upper</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <name><name>param</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gain</name> <operator>*</operator> <operator>(</operator><name>lhn2</name> <operator>-</operator> <name>lhn</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>lhn</name> <operator>=</operator> <name>lhn2</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>ret</name> <operator>+=</operator> <name><name>param</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gain</name> <operator>*</operator> <operator>(</operator><call><name>hn_imp</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>lhn</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>alpha</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;=</operator> <literal type="number">21</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;=</operator> <literal type="number">50</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">.5842f</literal> <operator>*</operator> <call><name>pow</name><argument_list>(<argument><expr><name>a</name> <operator>-</operator> <literal type="number">21</literal></expr></argument>, <argument><expr><literal type="number">0.4f</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">0.07886f</literal> <operator>*</operator> <operator>(</operator><name>a</name> <operator>-</operator> <literal type="number">21</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">.1102f</literal> <operator>*</operator> <operator>(</operator><name>a</name> <operator>-</operator> <literal type="number">8.7f</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>win</name><parameter_list>(<parameter><decl><type><name>SuperEqualizerContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>izero</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>alpha</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>aa</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <name>n</name> <operator>*</operator> <name>n</name> <operator>/</operator> <operator>(</operator><operator>(</operator><name>N</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>N</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>iza</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_param</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>bc</name></decl></parameter>, <parameter><decl><type><name>EqParameter</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>fs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>NBANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>param</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lower</name> <operator>=</operator> <ternary><condition><expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>bands</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>param</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>upper</name> <operator>=</operator> <ternary><condition><expr><name>i</name> <operator>==</operator> <name>NBANDS</name></expr> ?</condition><then> <expr><name>fs</name></expr> </then><else>: <expr><name><name>bands</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>param</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gain</name> <operator>=</operator> <name><name>bc</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>equ_init</name><parameter_list>(<parameter><decl><type><name>SuperEqualizerContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rdft</name></name> <operator>=</operator> <call><name>av_rdft_init</name><argument_list>(<argument><expr><name>wb</name></expr></argument>, <argument><expr><name>DFT_R2C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>irdft</name></name> <operator>=</operator> <call><name>av_rdft_init</name><argument_list>(<argument><expr><name>wb</name></expr></argument>, <argument><expr><name>IDFT_C2R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>rdft</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>irdft</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>aa</name></name> <operator>=</operator> <literal type="number">96</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>winlen</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>wb</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tabsize</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>wb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ires</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tabsize</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>irest</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tabsize</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fsamples</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tabsize</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>M</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fact</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fact</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <name>j</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>iza</name></name> <operator>=</operator> <call><name>izero</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>alpha</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>aa</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>make_fir</name><parameter_list>(<parameter><decl><type><name>SuperEqualizerContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>lbc</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>rbc</name></decl></parameter>, <parameter><decl><type><name>EqParameter</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>fs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>winlen</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>winlen</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>tabsize</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>tabsize</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>nires</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fs</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>process_param</name><argument_list>(<argument><expr><name>lbc</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>winlen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>irest</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>hn</name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <name>winlen</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>win</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name>winlen</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>winlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tabsize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>irest</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_rdft_calc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rdft</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>irest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nires</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ires</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tabsize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>nires</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>irest</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SuperEqualizerContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>ires</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ires</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>fsamples</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>fsamples</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>ff_get_audio_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>winlen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>src</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fsamples</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>tabsize</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fsamples</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_rdft_calc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rdft</name></name></expr></argument>, <argument><expr><name>fsamples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fsamples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ires</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>fsamples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsamples</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ires</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>fsamples</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>tabsize</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>re</name></decl>, <decl><type ref="prev"/><name>im</name></decl>;</decl_stmt>

<expr_stmt><expr><name>re</name> <operator>=</operator> <name><name>ires</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal></expr> ]</index></name> <operator>*</operator> <name><name>fsamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>ires</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>fsamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>im</name> <operator>=</operator> <name><name>ires</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>fsamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>ires</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal></expr> ]</index></name> <operator>*</operator> <name><name>fsamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fsamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal></expr> ]</index></name> <operator>=</operator> <name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsamples</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>im</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_rdft_calc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>irdft</name></name></expr></argument>, <argument><expr><name>fsamples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>winlen</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>fsamples</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>tabsize</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>winlen</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>tabsize</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>fsamples</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>tabsize</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>winlen</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>winlen</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><name>i</name><operator>+</operator><name><name>s</name><operator>-&gt;</operator><name>winlen</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>activate</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SuperEqualizerContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FF_FILTER_FORWARD_STATUS_BACK</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>inlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_inlink_consume_samples</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>winlen</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>winlen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>filter_frame</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>FF_FILTER_FORWARD_STATUS</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>, <argument><expr><name>outlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FF_FILTER_FORWARD_WANTED</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>inlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FFERROR_NOT_READY</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SuperEqualizerContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>equ_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>formats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>layouts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVSampleFormat</name></name></type> <name><name>sample_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_SAMPLE_FMT_FLTP</name></expr>,
<expr><name>AV_SAMPLE_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>layouts</name> <operator>=</operator> <call><name>ff_all_channel_counts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>layouts</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_common_channel_layouts</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>layouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>sample_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_all_samplerates</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ff_set_common_samplerates</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SuperEqualizerContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <call><name>ff_get_audio_buffer</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>tabsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>out</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_output</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SuperEqualizerContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>make_fir</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>gains</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>gains</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>params</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SuperEqualizerContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>irest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ires</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fsamples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_rdft_end</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rdft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_rdft_end</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>irdft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>superequalizer_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>superequalizer_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_output</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AF</name></cpp:macro> <cpp:value>AV_OPT_FLAG_AUDIO_PARAM|AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(SuperEqualizerContext, x)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>superequalizer_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"1b"</literal></expr>, <expr><literal type="string">"set 65Hz band gain"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>gains</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><name>AF</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"2b"</literal></expr>, <expr><literal type="string">"set 92Hz band gain"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>gains</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><name>AF</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"3b"</literal></expr>, <expr><literal type="string">"set 131Hz band gain"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>gains</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><name>AF</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"4b"</literal></expr>, <expr><literal type="string">"set 185Hz band gain"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>gains</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><name>AF</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"5b"</literal></expr>, <expr><literal type="string">"set 262Hz band gain"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>gains</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><name>AF</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"6b"</literal></expr>, <expr><literal type="string">"set 370Hz band gain"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>gains</name> <index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><name>AF</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"7b"</literal></expr>, <expr><literal type="string">"set 523Hz band gain"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>gains</name> <index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><name>AF</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"8b"</literal></expr>, <expr><literal type="string">"set 740Hz band gain"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>gains</name> <index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><name>AF</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"9b"</literal></expr>, <expr><literal type="string">"set 1047Hz band gain"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>gains</name> <index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><name>AF</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"10b"</literal></expr>, <expr><literal type="string">"set 1480Hz band gain"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>gains</name> <index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><name>AF</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"11b"</literal></expr>, <expr><literal type="string">"set 2093Hz band gain"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>gains</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><name>AF</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"12b"</literal></expr>, <expr><literal type="string">"set 2960Hz band gain"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>gains</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><name>AF</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"13b"</literal></expr>, <expr><literal type="string">"set 4186Hz band gain"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>gains</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><name>AF</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"14b"</literal></expr>, <expr><literal type="string">"set 5920Hz band gain"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>gains</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><name>AF</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"15b"</literal></expr>, <expr><literal type="string">"set 8372Hz band gain"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>gains</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><name>AF</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"16b"</literal></expr>, <expr><literal type="string">"set 11840Hz band gain"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>gains</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><name>AF</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"17b"</literal></expr>, <expr><literal type="string">"set 16744Hz band gain"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>gains</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><name>AF</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"18b"</literal></expr>, <expr><literal type="string">"set 20000Hz band gain"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>gains</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><name>AF</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>superequalizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_af_superequalizer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"superequalizer"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Apply 18 band equalization filter."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SuperEqualizerContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>superequalizer_class</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,
<expr><operator>.</operator><name>activate</name> <operator>=</operator> <name>activate</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>superequalizer_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>superequalizer_outputs</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
