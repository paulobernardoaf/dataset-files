<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vf_libopencv.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OPENCV2_CORE_CORE_C_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;opencv2/core/core_c.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;opencv2/imgproc/imgproc_c.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;opencv/cv.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;opencv/cxcore.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/file.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_iplimage_from_frame</name><parameter_list>(<parameter><decl><type><name>IplImage</name> <modifier>*</modifier></type><name>img</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pixfmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>IplImage</name> <modifier>*</modifier></type><name>tmpimg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>, <decl><type ref="prev"/><name>channels_nb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pixfmt</name> <operator>==</operator> <name>AV_PIX_FMT_GRAY8</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>depth</name> <operator>=</operator> <name>IPL_DEPTH_8U</name></expr>;</expr_stmt> <expr_stmt><expr><name>channels_nb</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> </block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>pixfmt</name> <operator>==</operator> <name>AV_PIX_FMT_BGRA</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>depth</name> <operator>=</operator> <name>IPL_DEPTH_8U</name></expr>;</expr_stmt> <expr_stmt><expr><name>channels_nb</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> </block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>pixfmt</name> <operator>==</operator> <name>AV_PIX_FMT_BGR24</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>depth</name> <operator>=</operator> <name>IPL_DEPTH_8U</name></expr>;</expr_stmt> <expr_stmt><expr><name>channels_nb</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> </block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <return>return;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><name>tmpimg</name> <operator>=</operator> <macro><name>cvCreateImageHeader</name><argument_list>(<argument>(CvSize){frame-&gt;width</argument>, <argument>frame-&gt;height}</argument>, <argument>depth</argument>, <argument>channels_nb</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>img</name> <operator>=</operator> <operator>*</operator><name>tmpimg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>imageData</name></name> <operator>=</operator> <name><name>img</name><operator>-&gt;</operator><name>imageDataOrigin</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>dataOrder</name></name> <operator>=</operator> <name>IPL_DATA_ORDER_PIXEL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>origin</name></name> <operator>=</operator> <name>IPL_ORIGIN_TL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>widthStep</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_frame_from_iplimage</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IplImage</name> <modifier>*</modifier></type><name>img</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pixfmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>img</name><operator>-&gt;</operator><name>widthStep</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>img</name><operator>-&gt;</operator><name>imageData</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_BGR24</name></expr>, <expr><name>AV_PIX_FMT_BGRA</name></expr>, <expr><name>AV_PIX_FMT_GRAY8</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>OCVContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>params</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>init</name>)<parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>uninit</name>)<parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>end_frame_filter</name>)<parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>IplImage</name> <modifier>*</modifier></type><name>inimg</name></decl></parameter>, <parameter><decl><type><name>IplImage</name> <modifier>*</modifier></type><name>outimg</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl>;</decl_stmt>
}</block></struct></type> <name>OCVContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SmoothContext</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>param1</name></decl>, <name>param2</name>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>param3</name></decl>, <name>param4</name>;</decl_stmt>
}</block></struct></type> <name>SmoothContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>smooth_init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OCVContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SmoothContext</name> <modifier>*</modifier></type><name>smooth</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>type_str</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><literal type="string">"gaussian"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>smooth</name><operator>-&gt;</operator><name>param1</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>smooth</name><operator>-&gt;</operator><name>param2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>smooth</name><operator>-&gt;</operator><name>param3</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>smooth</name><operator>-&gt;</operator><name>param4</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>args</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"%127[^|]|%d|%d|%lf|%lf"</literal></expr></argument>, <argument><expr><name>type_str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>smooth</name><operator>-&gt;</operator><name>param1</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>smooth</name><operator>-&gt;</operator><name>param2</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>smooth</name><operator>-&gt;</operator><name>param3</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>smooth</name><operator>-&gt;</operator><name>param4</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>type_str</name></expr></argument>, <argument><expr><literal type="string">"blur"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>smooth</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>CV_BLUR</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>type_str</name></expr></argument>, <argument><expr><literal type="string">"blur_no_scale"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>smooth</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>CV_BLUR_NO_SCALE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>type_str</name></expr></argument>, <argument><expr><literal type="string">"median"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>smooth</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>CV_MEDIAN</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>type_str</name></expr></argument>, <argument><expr><literal type="string">"gaussian"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>smooth</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>CV_GAUSSIAN</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>type_str</name></expr></argument>, <argument><expr><literal type="string">"bilateral"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>smooth</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>CV_BILATERAL</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Smoothing type '%s' unknown.\n"</literal></expr></argument>, <argument><expr><name>type_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>smooth</name><operator>-&gt;</operator><name>param1</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>smooth</name><operator>-&gt;</operator><name>param1</name></name><operator>%</operator><literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Invalid value '%d' for param1, it has to be a positive odd number\n"</literal></expr></argument>,
<argument><expr><name><name>smooth</name><operator>-&gt;</operator><name>param1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>smooth</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CV_BLUR</name> <operator>||</operator> <name><name>smooth</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CV_BLUR_NO_SCALE</name> <operator>||</operator> <name><name>smooth</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>CV_GAUSSIAN</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>smooth</name><operator>-&gt;</operator><name>param2</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>smooth</name><operator>-&gt;</operator><name>param2</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>smooth</name><operator>-&gt;</operator><name>param2</name></name><operator>%</operator><literal type="number">2</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Invalid value '%d' for param2, it has to be zero or a positive odd number\n"</literal></expr></argument>,
<argument><expr><name><name>smooth</name><operator>-&gt;</operator><name>param2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"type:%s param1:%d param2:%d param3:%f param4:%f\n"</literal></expr></argument>,
<argument><expr><name>type_str</name></expr></argument>, <argument><expr><name><name>smooth</name><operator>-&gt;</operator><name>param1</name></name></expr></argument>, <argument><expr><name><name>smooth</name><operator>-&gt;</operator><name>param2</name></name></expr></argument>, <argument><expr><name><name>smooth</name><operator>-&gt;</operator><name>param3</name></name></expr></argument>, <argument><expr><name><name>smooth</name><operator>-&gt;</operator><name>param4</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>smooth_end_frame_filter</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>IplImage</name> <modifier>*</modifier></type><name>inimg</name></decl></parameter>, <parameter><decl><type><name>IplImage</name> <modifier>*</modifier></type><name>outimg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OCVContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SmoothContext</name> <modifier>*</modifier></type><name>smooth</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>cvSmooth</name><argument_list>(<argument><expr><name>inimg</name></expr></argument>, <argument><expr><name>outimg</name></expr></argument>, <argument><expr><name><name>smooth</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>smooth</name><operator>-&gt;</operator><name>param1</name></name></expr></argument>, <argument><expr><name><name>smooth</name><operator>-&gt;</operator><name>param2</name></name></expr></argument>, <argument><expr><name><name>smooth</name><operator>-&gt;</operator><name>param3</name></name></expr></argument>, <argument><expr><name><name>smooth</name><operator>-&gt;</operator><name>param4</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_shape_from_file</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>cols</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier><modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_file_map</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>rows</name> <operator>==</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Overflow on the number of rows in the file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><operator>(</operator><operator>*</operator><name>rows</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cols</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><operator>*</operator><name>cols</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>w</name> <operator>==</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Overflow on the number of columns in the file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>w</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>rows</name> <operator>&gt;</operator> <operator>(</operator><name>SIZE_MAX</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <operator>*</operator><name>cols</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"File with size %dx%d is too big\n"</literal></expr></argument>,
<argument><expr><operator>*</operator><name>rows</name></expr></argument>, <argument><expr><operator>*</operator><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>values</name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>*</operator><name>rows</name></expr></argument>, <argument><expr><operator>*</operator><name>cols</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pend</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>size</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>*</operator><name>rows</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>pend</name> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>values</name><operator>)</operator><index>[<expr><operator>*</operator><name>cols</name><operator>*</operator><name>i</name> <operator>+</operator> <name>j</name></expr>]</index> <operator>=</operator> <operator>!</operator><operator>!</operator><call><name>av_isgraph</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>av_file_unmap</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>line</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><operator>*</operator><name>cols</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>*</operator><name>rows</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>*</operator><name>cols</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>line</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>*</operator><name>values</name><operator>)</operator><index>[<expr><name>i</name> <operator>*</operator> <operator>*</operator><name>cols</name> <operator>+</operator> <name>j</name></expr>]</index></expr> ?</condition><then> <expr><literal type="char">'@'</literal></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>line</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%3d: %s\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_iplconvkernel</name><parameter_list>(<parameter><decl><type><name>IplConvKernel</name> <modifier>*</modifier><modifier>*</modifier></type><name>kernel</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>shape_filename</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>, <decl><type ref="prev"/><name><name>shape_str</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><literal type="string">"rect"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>rows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>anchor_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>anchor_y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>shape</name> <init>= <expr><name>CV_SHAPE_RECT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>values</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%dx%d+%dx%d/%32[^=]=%127s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>anchor_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>anchor_y</name></expr></argument>, <argument><expr><name>shape_str</name></expr></argument>, <argument><expr><name>shape_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>shape_str</name></expr></argument>, <argument><expr><literal type="string">"rect"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>shape</name> <operator>=</operator> <name>CV_SHAPE_RECT</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>shape_str</name></expr></argument>, <argument><expr><literal type="string">"cross"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>shape</name> <operator>=</operator> <name>CV_SHAPE_CROSS</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>shape_str</name></expr></argument>, <argument><expr><literal type="string">"ellipse"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>shape</name> <operator>=</operator> <name>CV_SHAPE_ELLIPSE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>shape_str</name></expr></argument>, <argument><expr><literal type="string">"custom"</literal></expr></argument> )</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>shape</name> <operator>=</operator> <name>CV_SHAPE_CUSTOM</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_shape_from_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>values</name></expr></argument>, <argument><expr><name>shape_filename</name></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Shape unspecified or type '%s' unknown.\n"</literal></expr></argument>, <argument><expr><name>shape_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rows</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>cols</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Invalid non-positive values for shape size %dx%d\n"</literal></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>anchor_x</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>anchor_y</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>anchor_x</name> <operator>&gt;=</operator> <name>cols</name> <operator>||</operator> <name>anchor_y</name> <operator>&gt;=</operator> <name>rows</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Shape anchor %dx%d is not inside the rectangle with size %dx%d.\n"</literal></expr></argument>,
<argument><expr><name>anchor_x</name></expr></argument>, <argument><expr><name>anchor_y</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>kernel</name> <operator>=</operator> <call><name>cvCreateStructuringElementEx</name><argument_list>(<argument><expr><name>cols</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>anchor_x</name></expr></argument>, <argument><expr><name>anchor_y</name></expr></argument>, <argument><expr><name>shape</name></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>kernel</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Structuring element: w:%d h:%d x:%d y:%d shape:%s\n"</literal></expr></argument>,
<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><name>anchor_x</name></expr></argument>, <argument><expr><name>anchor_y</name></expr></argument>, <argument><expr><name>shape_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>out</name>:</label>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>DilateContext</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>nb_iterations</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IplConvKernel</name> <modifier>*</modifier></type><name>kernel</name></decl>;</decl_stmt>
}</block></struct></type> <name>DilateContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>dilate_init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OCVContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DilateContext</name> <modifier>*</modifier></type><name>dilate</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>default_kernel_str</name><index>[]</index></name> <init>= <expr><literal type="string">"3x3+0x0/rect"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>kernel_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>args</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>args</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>kernel_str</name> <operator>=</operator> <call><name>av_get_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"|"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>kernel_str</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_iplconvkernel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dilate</name><operator>-&gt;</operator><name>kernel</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><operator>!</operator><name>kernel_str</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>kernel_str</name><operator>)</operator></expr> ?</condition><then> <expr><name>default_kernel_str</name></expr>
</then><else>: <expr><name>kernel_str</name></expr></else></ternary></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>kernel_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name> <operator>||</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"|%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dilate</name><operator>-&gt;</operator><name>nb_iterations</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dilate</name><operator>-&gt;</operator><name>nb_iterations</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"iterations_nb:%d\n"</literal></expr></argument>, <argument><expr><name><name>dilate</name><operator>-&gt;</operator><name>nb_iterations</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dilate</name><operator>-&gt;</operator><name>nb_iterations</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid non-positive value '%d' for nb_iterations\n"</literal></expr></argument>,
<argument><expr><name><name>dilate</name><operator>-&gt;</operator><name>nb_iterations</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>dilate_uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OCVContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DilateContext</name> <modifier>*</modifier></type><name>dilate</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cvReleaseStructuringElement</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dilate</name><operator>-&gt;</operator><name>kernel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dilate_end_frame_filter</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>IplImage</name> <modifier>*</modifier></type><name>inimg</name></decl></parameter>, <parameter><decl><type><name>IplImage</name> <modifier>*</modifier></type><name>outimg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OCVContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DilateContext</name> <modifier>*</modifier></type><name>dilate</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>cvDilate</name><argument_list>(<argument><expr><name>inimg</name></expr></argument>, <argument><expr><name>outimg</name></expr></argument>, <argument><expr><name><name>dilate</name><operator>-&gt;</operator><name>kernel</name></name></expr></argument>, <argument><expr><name><name>dilate</name><operator>-&gt;</operator><name>nb_iterations</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>erode_end_frame_filter</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>IplImage</name> <modifier>*</modifier></type><name>inimg</name></decl></parameter>, <parameter><decl><type><name>IplImage</name> <modifier>*</modifier></type><name>outimg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OCVContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DilateContext</name> <modifier>*</modifier></type><name>dilate</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>cvErode</name><argument_list>(<argument><expr><name>inimg</name></expr></argument>, <argument><expr><name>outimg</name></expr></argument>, <argument><expr><name><name>dilate</name><operator>-&gt;</operator><name>kernel</name></name></expr></argument>, <argument><expr><name><name>dilate</name><operator>-&gt;</operator><name>nb_iterations</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>OCVFilterEntry</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>priv_size</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>init</name>)<parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>uninit</name>)<parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>end_frame_filter</name>)<parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>IplImage</name> <modifier>*</modifier></type><name>inimg</name></decl></parameter>, <parameter><decl><type><name>IplImage</name> <modifier>*</modifier></type><name>outimg</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>OCVFilterEntry</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>OCVFilterEntry</name></type> <name><name>ocv_filter_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"dilate"</literal></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>DilateContext</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>dilate_init</name></expr>, <expr><name>dilate_uninit</name></expr>, <expr><name>dilate_end_frame_filter</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"erode"</literal></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>DilateContext</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>dilate_init</name></expr>, <expr><name>dilate_uninit</name></expr>, <expr><name>erode_end_frame_filter</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"smooth"</literal></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SmoothContext</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>smooth_init</name></expr>, <expr><name>NULL</name></expr>, <expr><name>smooth_end_frame_filter</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OCVContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No libopencv filter name specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>ocv_filter_entries</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>OCVFilterEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>&amp;</operator><name><name>ocv_filter_entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>init</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>init</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>uninit</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>uninit</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>end_frame_filter</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>end_frame_filter</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>priv</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>priv_size</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name><name>s</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>params</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No libopencv filter named '%s'\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OCVContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>uninit</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>uninit</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>priv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OCVContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name><init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IplImage</name></type> <name>inimg</name></decl>, <decl><type ref="prev"/><name>outimg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_iplimage_from_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inimg</name></expr></argument> , <argument><expr><name>in</name></expr></argument> , <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_iplimage_from_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outimg</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>end_frame_filter</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inimg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outimg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_frame_from_iplimage</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outimg</name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(OCVContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>ocv_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"filter_name"</literal></expr>, <expr><name>NULL</name></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"filter_params"</literal></expr>, <expr><name>NULL</name></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>ocv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>avfilter_vf_ocv_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>avfilter_vf_ocv_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_ocv</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"ocv"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Apply transform using libopencv."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OCVContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>ocv_class</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>avfilter_vf_ocv_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>avfilter_vf_ocv_outputs</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
