<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vf_fillborders.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/colorspace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"drawutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<enum>enum <block>{ <decl><name>Y</name></decl>, <decl><name>U</name></decl>, <decl><name>V</name></decl>, <decl><name>A</name></decl> }</block>;</enum>
<enum>enum <block>{ <decl><name>R</name></decl>, <decl><name>G</name></decl>, <decl><name>B</name></decl> }</block>;</enum>

<enum>enum <name>FillMode</name> <block>{ <decl><name>FM_SMEAR</name></decl>, <decl><name>FM_MIRROR</name></decl>, <decl><name>FM_FIXED</name></decl>, <decl><name>FM_NB_MODES</name></decl> }</block>;</enum>

<typedef>typedef <type><struct>struct <name>Borders</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>left</name></decl>, <name>right</name>, <name>top</name>, <name>bottom</name>;</decl_stmt>
}</block></struct></type> <name>Borders</name>;</typedef>

<typedef>typedef <type><struct>struct <name>FillBordersContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>left</name></decl>, <name>right</name>, <name>top</name>, <name>bottom</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_planes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Borders</name></type> <name><name>borders</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>planewidth</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>planeheight</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>fill</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>yuv_color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>rgba_color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fillborders</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>FillBordersContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>FillBordersContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_YUVA444P</name></expr>, <expr><name>AV_PIX_FMT_YUV444P</name></expr>, <expr><name>AV_PIX_FMT_YUV440P</name></expr>,
<expr><name>AV_PIX_FMT_YUVJ444P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ440P</name></expr>,
<expr><name>AV_PIX_FMT_YUVA422P</name></expr>, <expr><name>AV_PIX_FMT_YUV422P</name></expr>, <expr><name>AV_PIX_FMT_YUVA420P</name></expr>, <expr><name>AV_PIX_FMT_YUV420P</name></expr>,
<expr><name>AV_PIX_FMT_YUVJ422P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ420P</name></expr>,
<expr><name>AV_PIX_FMT_YUVJ411P</name></expr>, <expr><name>AV_PIX_FMT_YUV411P</name></expr>, <expr><name>AV_PIX_FMT_YUV410P</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P9</name></expr>, <expr><name>AV_PIX_FMT_YUV422P9</name></expr>, <expr><name>AV_PIX_FMT_YUV444P9</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P10</name></expr>, <expr><name>AV_PIX_FMT_YUV422P10</name></expr>, <expr><name>AV_PIX_FMT_YUV444P10</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P12</name></expr>, <expr><name>AV_PIX_FMT_YUV422P12</name></expr>, <expr><name>AV_PIX_FMT_YUV444P12</name></expr>, <expr><name>AV_PIX_FMT_YUV440P12</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P14</name></expr>, <expr><name>AV_PIX_FMT_YUV422P14</name></expr>, <expr><name>AV_PIX_FMT_YUV444P14</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P16</name></expr>, <expr><name>AV_PIX_FMT_YUV422P16</name></expr>, <expr><name>AV_PIX_FMT_YUV444P16</name></expr>,
<expr><name>AV_PIX_FMT_YUVA420P9</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P9</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P9</name></expr>,
<expr><name>AV_PIX_FMT_YUVA420P10</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P10</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P10</name></expr>,
<expr><name>AV_PIX_FMT_YUVA422P12</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P12</name></expr>,
<expr><name>AV_PIX_FMT_YUVA420P16</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P16</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P16</name></expr>,
<expr><name>AV_PIX_FMT_GBRP</name></expr>, <expr><name>AV_PIX_FMT_GBRP9</name></expr>, <expr><name>AV_PIX_FMT_GBRP10</name></expr>,
<expr><name>AV_PIX_FMT_GBRP12</name></expr>, <expr><name>AV_PIX_FMT_GBRP14</name></expr>, <expr><name>AV_PIX_FMT_GBRP16</name></expr>,
<expr><name>AV_PIX_FMT_GBRAP</name></expr>, <expr><name>AV_PIX_FMT_GBRAP10</name></expr>, <expr><name>AV_PIX_FMT_GBRAP12</name></expr>, <expr><name>AV_PIX_FMT_GBRAP16</name></expr>,
<expr><name>AV_PIX_FMT_GRAY8</name></expr>, <expr><name>AV_PIX_FMT_GRAY9</name></expr>, <expr><name>AV_PIX_FMT_GRAY10</name></expr>, <expr><name>AV_PIX_FMT_GRAY12</name></expr>, <expr><name>AV_PIX_FMT_GRAY14</name></expr>, <expr><name>AV_PIX_FMT_GRAY16</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>smear_borders8</name><parameter_list>(<parameter><decl><type><name>FillBordersContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>linesize</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>top</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><name>p</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>bottom</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>linesize</name></expr></argument>,
<argument><expr><operator>*</operator><operator>(</operator><name>ptr</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>left</name><operator>)</operator></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>p</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>right</name></expr></argument>,
<argument><expr><operator>*</operator><operator>(</operator><name>ptr</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>p</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>right</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>top</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>linesize</name></expr></argument>,
<argument><expr><name>ptr</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>top</name> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><name>p</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>bottom</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>linesize</name></expr></argument>,
<argument><expr><name>ptr</name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><name>p</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>bottom</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>linesize</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>smear_borders16</name><parameter_list>(<parameter><decl><type><name>FillBordersContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>linesize</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>p</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>top</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><name>p</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>bottom</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>left</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>y</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>ptr</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>left</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>right</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>y</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>p</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>right</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator>
<operator>*</operator><operator>(</operator><name>ptr</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>p</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>right</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>top</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>linesize</name></expr></argument>,
<argument><expr><name>ptr</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>top</name> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>p</name></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><name>p</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>bottom</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>linesize</name></expr></argument>,
<argument><expr><name>ptr</name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><name>p</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>bottom</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>linesize</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>p</name></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mirror_borders8</name><parameter_list>(<parameter><decl><type><name>FillBordersContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>linesize</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>top</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><name>p</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>bottom</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>left</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>y</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <name><name>ptr</name><index>[<expr><name>y</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>left</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>x</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>right</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>y</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>p</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>right</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator>
<name><name>ptr</name><index>[<expr><name>y</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>p</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>right</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>x</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>top</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>linesize</name></expr></argument>,
<argument><expr><name>ptr</name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>top</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>y</name><operator>)</operator> <operator>*</operator> <name>linesize</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>bottom</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><name>p</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>bottom</name> <operator>+</operator> <name>y</name><operator>)</operator> <operator>*</operator> <name>linesize</name></expr></argument>,
<argument><expr><name>ptr</name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><name>p</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>bottom</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>y</name><operator>)</operator> <operator>*</operator> <name>linesize</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mirror_borders16</name><parameter_list>(<parameter><decl><type><name>FillBordersContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>linesize</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>p</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>top</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><name>p</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>bottom</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>left</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>y</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <name><name>ptr</name><index>[<expr><name>y</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>left</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>x</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>right</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>y</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>p</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>right</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator>
<name><name>ptr</name><index>[<expr><name>y</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>p</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>right</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>x</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>top</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>linesize</name></expr></argument>,
<argument><expr><name>ptr</name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>top</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>y</name><operator>)</operator> <operator>*</operator> <name>linesize</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>p</name></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>bottom</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><name>p</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>bottom</name> <operator>+</operator> <name>y</name><operator>)</operator> <operator>*</operator> <name>linesize</name></expr></argument>,
<argument><expr><name>ptr</name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><name>p</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>bottom</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>y</name><operator>)</operator> <operator>*</operator> <name>linesize</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>p</name></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fixed_borders8</name><parameter_list>(<parameter><decl><type><name>FillBordersContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>fill</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>fill</name><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>linesize</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>top</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><name>p</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>bottom</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>fill</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>p</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>right</name></expr></argument>, <argument><expr><name>fill</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>top</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>fill</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><name>p</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>bottom</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>fill</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fixed_borders16</name><parameter_list>(<parameter><decl><type><name>FillBordersContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>fill</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>fill</name><index>[<expr><name>p</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>linesize</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>p</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>top</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><name>p</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>bottom</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>left</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>y</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <name>fill</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>right</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>y</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>p</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>right</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <name>fill</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>top</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>y</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <name>fill</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><name>p</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>bottom</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>y</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <name>fill</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FillBordersContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>fillborders</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FillBordersContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>left</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>right</name></name> <operator>||</operator>
<name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>left</name></name> <operator>||</operator>
<name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>right</name></name> <operator>||</operator>
<name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>top</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>bottom</name></name> <operator>||</operator>
<name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>top</name></name> <operator>||</operator>
<name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>bottom</name></name> <operator>||</operator>
<name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>left</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>||</operator>
<name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>right</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>||</operator>
<name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>top</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>||</operator>
<name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>bottom</name></name> <operator>*</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Borders are bigger than input frame size.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>left</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>left</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>right</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>right</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>top</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>top</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>top</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bottom</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>bottom</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bottom</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>left</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>left</name></name> <operator>&gt;&gt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>right</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>right</name></name> <operator>&gt;&gt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>top</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>top</name></name> <operator>&gt;&gt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>bottom</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bottom</name></name> <operator>&gt;&gt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>left</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>left</name></name> <operator>&gt;&gt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>right</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>right</name></name> <operator>&gt;&gt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>top</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>top</name></name> <operator>&gt;&gt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>borders</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>bottom</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bottom</name></name> <operator>&gt;&gt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FM_SMEAR</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fillborders</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>smear_borders8</name></expr> </then><else>: <expr><name>smear_borders16</name></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FM_MIRROR</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fillborders</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>mirror_borders8</name></expr> </then><else>: <expr><name>mirror_borders16</name></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FM_FIXED</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fillborders</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>fixed_borders8</name></expr> </then><else>: <expr><name>fixed_borders16</name></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>yuv_color</name><index>[<expr><name>Y</name></expr>]</index></name> <operator>=</operator> <call><name>RGB_TO_Y_CCIR</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rgba_color</name><index>[<expr><name>R</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rgba_color</name><index>[<expr><name>G</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rgba_color</name><index>[<expr><name>B</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>yuv_color</name><index>[<expr><name>U</name></expr>]</index></name> <operator>=</operator> <call><name>RGB_TO_U_CCIR</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rgba_color</name><index>[<expr><name>R</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rgba_color</name><index>[<expr><name>G</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rgba_color</name><index>[<expr><name>B</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>yuv_color</name><index>[<expr><name>V</name></expr>]</index></name> <operator>=</operator> <call><name>RGB_TO_V_CCIR</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rgba_color</name><index>[<expr><name>R</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rgba_color</name><index>[<expr><name>G</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rgba_color</name><index>[<expr><name>B</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>yuv_color</name><index>[<expr><name>A</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>rgba_color</name><index>[<expr><name>A</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_RGB</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>rgba_map</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_fill_rgba_map</name><argument_list>(<argument><expr><name>rgba_map</name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fill</name><index>[<expr><name><name>rgba_map</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>rgba_color</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fill</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>yuv_color</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>yuv_color</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process_command</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>args</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>res_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_filter_process_command</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>res_len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>config_input</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(FillBordersContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM|AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_RUNTIME_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>fillborders_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"left"</literal></expr>, <expr><literal type="string">"set the left fill border"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"right"</literal></expr>, <expr><literal type="string">"set the right fill border"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"top"</literal></expr>, <expr><literal type="string">"set the top fill border"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bottom"</literal></expr>, <expr><literal type="string">"set the bottom fill border"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>bottom</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"mode"</literal></expr>, <expr><literal type="string">"set the fill borders mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>FM_SMEAR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FM_NB_MODES</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"smear"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>FM_SMEAR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"mirror"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>FM_MIRROR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fixed"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>FM_FIXED</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"color"</literal></expr>, <expr><literal type="string">"set the color for the fixed mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>rgba_color</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_COLOR</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"black"</literal></expr>}</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>fillborders</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>fillborders_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,
<expr><operator>.</operator><name>needs_writable</name> <operator>=</operator> <literal type="number">1</literal></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>fillborders_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_fillborders</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"fillborders"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Fill borders of the input video."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FillBordersContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>fillborders_class</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>fillborders_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>fillborders_outputs</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC</name></expr>,
<expr><operator>.</operator><name>process_command</name> <operator>=</operator> <name>process_command</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
