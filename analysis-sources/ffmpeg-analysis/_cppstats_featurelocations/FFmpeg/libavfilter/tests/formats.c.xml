<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\tests\formats.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavfilter/formats.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>printf</name></cpp:undef>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier></type><name>cl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>teststrings</name><index>[]</index></name> <init>=<expr><block>{
<expr><literal type="string">"blah"</literal></expr>,
<expr><literal type="string">"1"</literal></expr>,
<expr><literal type="string">"2"</literal></expr>,
<expr><literal type="string">"-1"</literal></expr>,
<expr><literal type="string">"60"</literal></expr>,
<expr><literal type="string">"65"</literal></expr>,
<expr><literal type="string">"1c"</literal></expr>,
<expr><literal type="string">"2c"</literal></expr>,
<expr><literal type="string">"-1c"</literal></expr>,
<expr><literal type="string">"60c"</literal></expr>,
<expr><literal type="string">"65c"</literal></expr>,
<expr><literal type="string">"2C"</literal></expr>,
<expr><literal type="string">"60C"</literal></expr>,
<expr><literal type="string">"65C"</literal></expr>,
<expr><literal type="string">"5.1"</literal></expr>,
<expr><literal type="string">"stereo"</literal></expr>,
<expr><literal type="string">"1+1+1+1"</literal></expr>,
<expr><literal type="string">"1c+1c+1c+1c"</literal></expr>,
<expr><literal type="string">"2c+1c"</literal></expr>,
<expr><literal type="string">"0x3"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>cl</name> <operator>=</operator> <name>avfilter_all_channel_layouts</name></expr>;</init> <condition><expr><operator>*</operator><name>cl</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>cl</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>av_get_channel_layout_string</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>*</operator><name>cl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>teststrings</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>layout</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_parse_channel_layout</name><argument_list>(<argument><expr><operator>&amp;</operator><name>layout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><name><name>teststrings</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d = ff_parse_channel_layout(%016"</literal><name>PRIX64</name><literal type="string">", %2d, %s);\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>ret</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>layout</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name><name>teststrings</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
