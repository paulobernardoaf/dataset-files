<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\transform.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transform.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERPOLATE_METHOD</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static uint8_t name(float x, float y, const uint8_t *src, int width, int height, int stride, uint8_t def)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIXEL</name><parameter_list>(<parameter><type><name>img</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>w</name></type></parameter>, <parameter><type><name>h</name></type></parameter>, <parameter><type><name>stride</name></type></parameter>, <parameter><type><name>def</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &lt; 0 || (y) &lt; 0) ? (def) : (((x) &gt;= (w) || (y) &gt;= (h)) ? (def) : img[(x) + (y) * (stride)])</cpp:value></cpp:define>







<macro><name>INTERPOLATE_METHOD</name><argument_list>(<argument>interpolate_nearest</argument>)</argument_list></macro>
<block>{<block_content>
<return>return <expr><call><name>PIXEL</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>




<macro><name>INTERPOLATE_METHOD</name><argument_list>(<argument>interpolate_bilinear</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x_c</name></decl>, <decl><type ref="prev"/><name>x_f</name></decl>, <decl><type ref="prev"/><name>y_c</name></decl>, <decl><type ref="prev"/><name>y_f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v1</name></decl>, <decl><type ref="prev"/><name>v2</name></decl>, <decl><type ref="prev"/><name>v3</name></decl>, <decl><type ref="prev"/><name>v4</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>x</name></expr></argument> &gt;</argument_list></name> <name>width</name> <operator>||</operator> <name><name>y</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>y</name></expr></argument> &gt;</argument_list></name> <name>height</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>def</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>x_f</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x_c</name> <operator>=</operator> <name>x_f</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y_f</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y_c</name> <operator>=</operator> <name>y_f</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>v1</name> <operator>=</operator> <call><name>PIXEL</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>x_c</name></expr></argument>, <argument><expr><name>y_c</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v2</name> <operator>=</operator> <call><name>PIXEL</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>x_c</name></expr></argument>, <argument><expr><name>y_f</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v3</name> <operator>=</operator> <call><name>PIXEL</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>x_f</name></expr></argument>, <argument><expr><name>y_c</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v4</name> <operator>=</operator> <call><name>PIXEL</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>x_f</name></expr></argument>, <argument><expr><name>y_f</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>v1</name><operator>*</operator><operator>(</operator><name>x</name> <operator>-</operator> <name>x_f</name><operator>)</operator><operator>*</operator><operator>(</operator><name>y</name> <operator>-</operator> <name>y_f</name><operator>)</operator> <operator>+</operator> <name>v2</name><operator>*</operator><operator>(</operator><operator>(</operator><name>x</name> <operator>-</operator> <name>x_f</name><operator>)</operator><operator>*</operator><operator>(</operator><name>y_c</name> <operator>-</operator> <name>y</name><operator>)</operator><operator>)</operator> <operator>+</operator>
<name>v3</name><operator>*</operator><operator>(</operator><name>x_c</name> <operator>-</operator> <name>x</name><operator>)</operator><operator>*</operator><operator>(</operator><name>y</name> <operator>-</operator> <name>y_f</name><operator>)</operator> <operator>+</operator> <name>v4</name><operator>*</operator><operator>(</operator><operator>(</operator><name>x_c</name> <operator>-</operator> <name>x</name><operator>)</operator><operator>*</operator><operator>(</operator><name>y_c</name> <operator>-</operator> <name>y</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block>




<macro><name>INTERPOLATE_METHOD</name><argument_list>(<argument>interpolate_biquadratic</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x_c</name></decl>, <decl><type ref="prev"/><name>x_f</name></decl>, <decl><type ref="prev"/><name>y_c</name></decl>, <decl><type ref="prev"/><name>y_f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>v1</name></decl>, <decl><type ref="prev"/><name>v2</name></decl>, <decl><type ref="prev"/><name>v3</name></decl>, <decl><type ref="prev"/><name>v4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f1</name></decl>, <decl><type ref="prev"/><name>f2</name></decl>, <decl><type ref="prev"/><name>f3</name></decl>, <decl><type ref="prev"/><name>f4</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator> <literal type="number">1</literal> <operator>||</operator> <name>x</name></expr></argument> &gt;</argument_list></name> <name>width</name> <operator>||</operator> <name><name>y</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>y</name></expr></argument> &gt;</argument_list></name> <name>height</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>def</name></expr>;</return></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>x_f</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x_c</name> <operator>=</operator> <name>x_f</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y_f</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y_c</name> <operator>=</operator> <name>y_f</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>v1</name> <operator>=</operator> <call><name>PIXEL</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>x_c</name></expr></argument>, <argument><expr><name>y_c</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v2</name> <operator>=</operator> <call><name>PIXEL</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>x_c</name></expr></argument>, <argument><expr><name>y_f</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v3</name> <operator>=</operator> <call><name>PIXEL</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>x_f</name></expr></argument>, <argument><expr><name>y_c</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v4</name> <operator>=</operator> <call><name>PIXEL</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>x_f</name></expr></argument>, <argument><expr><name>y_f</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f1</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <call><name>sqrt</name><argument_list>(<argument><expr><operator>(</operator><name>x_c</name> <operator>-</operator> <name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>y_c</name> <operator>-</operator> <name>y</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>f2</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <call><name>sqrt</name><argument_list>(<argument><expr><operator>(</operator><name>x_c</name> <operator>-</operator> <name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>y</name> <operator>-</operator> <name>y_f</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>f3</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <call><name>sqrt</name><argument_list>(<argument><expr><operator>(</operator><name>x</name> <operator>-</operator> <name>x_f</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>y_c</name> <operator>-</operator> <name>y</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>f4</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <call><name>sqrt</name><argument_list>(<argument><expr><operator>(</operator><name>x</name> <operator>-</operator> <name>x_f</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>y</name> <operator>-</operator> <name>y_f</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>v1</name> <operator>*</operator> <name>f1</name> <operator>+</operator> <name>v2</name> <operator>*</operator> <name>f2</name> <operator>+</operator> <name>v3</name> <operator>*</operator> <name>f3</name> <operator>+</operator> <name>v4</name> <operator>*</operator> <name>f4</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>f1</name> <operator>+</operator> <name>f2</name> <operator>+</operator> <name>f3</name> <operator>+</operator> <name>f4</name><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block>

<function><type><name>void</name></type> <name>ff_get_matrix</name><parameter_list>(
<parameter><decl><type><name>float</name></type> <name>x_shift</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>y_shift</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>angle</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>scale_x</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>scale_y</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>matrix</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>scale_x</name> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><call><name>sin</name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>x_shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>scale_y</name> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>y_shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>avfilter_add_matrix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>m1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>m2</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>result</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>m1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>m2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>avfilter_sub_matrix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>m1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>m2</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>result</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>m1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>m2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>avfilter_mul_matrix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>m1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scalar</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>result</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>m1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>scalar</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>avfilter_transform</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>src_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>matrix</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>InterpolateMethod</name></name></type> <name>interpolate</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>FillMethod</name></name></type> <name>fill</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>x_s</name></decl>, <decl><type ref="prev"/><name>y_s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>def</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function_decl><type><name>uint8_t</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type></decl></parameter>)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>

<switch>switch<condition>(<expr><name>interpolate</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>INTERPOLATE_NEAREST</name></expr>:</case>
<expr_stmt><expr><name>func</name> <operator>=</operator> <name>interpolate_nearest</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>INTERPOLATE_BILINEAR</name></expr>:</case>
<expr_stmt><expr><name>func</name> <operator>=</operator> <name>interpolate_bilinear</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>INTERPOLATE_BIQUADRATIC</name></expr>:</case>
<expr_stmt><expr><name>func</name> <operator>=</operator> <name>interpolate_biquadratic</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for<control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>x_s</name> <operator>=</operator> <name>x</name> <operator>*</operator> <name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>matrix</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>y_s</name> <operator>=</operator> <name>x</name> <operator>*</operator> <name><name>matrix</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>matrix</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>matrix</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>fill</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILL_ORIGINAL</name></expr>:</case>
<expr_stmt><expr><name>def</name> <operator>=</operator> <name><name>src</name><index>[<expr><name>y</name> <operator>*</operator> <name>src_stride</name> <operator>+</operator> <name>x</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILL_CLAMP</name></expr>:</case>
<expr_stmt><expr><name>y_s</name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><name>y_s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x_s</name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><name>x_s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>def</name> <operator>=</operator> <name><name>src</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name>y_s</name> <operator>*</operator> <name>src_stride</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name>x_s</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILL_MIRROR</name></expr>:</case>
<expr_stmt><expr><name>x_s</name> <operator>=</operator> <call><name>avpriv_mirror</name><argument_list>(<argument><expr><name>x_s</name></expr></argument>, <argument><expr><name>width</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y_s</name> <operator>=</operator> <call><name>avpriv_mirror</name><argument_list>(<argument><expr><name>y_s</name></expr></argument>, <argument><expr><name>height</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>x_s</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y_s</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>x_s</name> <operator>&lt;</operator> <name>width</name> <operator>&amp;&amp;</operator> <name>y_s</name> <operator>&lt;</operator> <name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>def</name> <operator>=</operator> <name><name>src</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name>y_s</name> <operator>*</operator> <name>src_stride</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name>x_s</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>y</name> <operator>*</operator> <name>dst_stride</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <call><name>func</name><argument_list>(<argument><expr><name>x_s</name></expr></argument>, <argument><expr><name>y_s</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
