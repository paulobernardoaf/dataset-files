<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vf_chromashift.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/eval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>ChromaShiftContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cbh</name></decl>, <name>cbv</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>crh</name></decl>, <name>crv</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rh</name></decl>, <name>rv</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gh</name></decl>, <name>gv</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bh</name></decl>, <name>bv</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ah</name></decl>, <name>av</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>edge</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_planes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>height</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>width</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_rgbashift</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>filter_slice</name>)<parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>ChromaShiftContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>yuv_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_YUVA444P</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P</name></expr>, <expr><name>AV_PIX_FMT_YUVA420P</name></expr>,
<expr><name>AV_PIX_FMT_YUVJ444P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ440P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ422P</name></expr>,<expr><name>AV_PIX_FMT_YUVJ420P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ411P</name></expr>,
<expr><name>AV_PIX_FMT_YUV444P</name></expr>, <expr><name>AV_PIX_FMT_YUV440P</name></expr>, <expr><name>AV_PIX_FMT_YUV422P</name></expr>, <expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_YUV411P</name></expr>, <expr><name>AV_PIX_FMT_YUV410P</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P9</name></expr>, <expr><name>AV_PIX_FMT_YUV422P9</name></expr>, <expr><name>AV_PIX_FMT_YUV444P9</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P10</name></expr>, <expr><name>AV_PIX_FMT_YUV422P10</name></expr>, <expr><name>AV_PIX_FMT_YUV444P10</name></expr>, <expr><name>AV_PIX_FMT_YUV440P10</name></expr>,
<expr><name>AV_PIX_FMT_YUVA420P10</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P10</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P10</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P12</name></expr>, <expr><name>AV_PIX_FMT_YUV422P12</name></expr>, <expr><name>AV_PIX_FMT_YUV444P12</name></expr>, <expr><name>AV_PIX_FMT_YUV440P12</name></expr>,
<expr><name>AV_PIX_FMT_YUVA422P12</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P12</name></expr>,
<expr><name>AV_PIX_FMT_YUV444P14</name></expr>, <expr><name>AV_PIX_FMT_YUV422P14</name></expr>, <expr><name>AV_PIX_FMT_YUV420P14</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P16</name></expr>, <expr><name>AV_PIX_FMT_YUV422P16</name></expr>, <expr><name>AV_PIX_FMT_YUV444P16</name></expr>,
<expr><name>AV_PIX_FMT_YUVA420P16</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P16</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P16</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>rgb_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_GBRP</name></expr>, <expr><name>AV_PIX_FMT_GBRAP</name></expr>, <expr><name>AV_PIX_FMT_GBRP9</name></expr>,
<expr><name>AV_PIX_FMT_GBRP10</name></expr>, <expr><name>AV_PIX_FMT_GBRP12</name></expr>,
<expr><name>AV_PIX_FMT_GBRP14</name></expr>, <expr><name>AV_PIX_FMT_GBRP16</name></expr>,
<expr><name>AV_PIX_FMT_GBRAP10</name></expr>, <expr><name>AV_PIX_FMT_GBRAP12</name></expr>, <expr><name>AV_PIX_FMT_GBRAP16</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier></type><name>pix_fmts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"rgbashift"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pix_fmts</name> <operator>=</operator> <name>rgb_pix_fmts</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>pix_fmts</name> <operator>=</operator> <name>yuv_pix_fmts</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>fmts_list</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_SMEAR</name><parameter_list>(<parameter><type><name>depth</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>div</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static int smear_slice ##depth(AVFilterContext *ctx, void *arg, int jobnr, int nb_jobs) { ChromaShiftContext *s = ctx-&gt;priv; AVFrame *in = s-&gt;in; AVFrame *out = arg; const int sulinesize = in-&gt;linesize[1] / div; const int svlinesize = in-&gt;linesize[2] / div; const int ulinesize = out-&gt;linesize[1] / div; const int vlinesize = out-&gt;linesize[2] / div; const int cbh = s-&gt;cbh; const int cbv = s-&gt;cbv; const int crh = s-&gt;crh; const int crv = s-&gt;crv; const int h = s-&gt;height[1]; const int w = s-&gt;width[1]; const int slice_start = (h * jobnr) / nb_jobs; const int slice_end = (h * (jobnr+1)) / nb_jobs; const type *su = (const type *)in-&gt;data[1]; const type *sv = (const type *)in-&gt;data[2]; type *du = (type *)out-&gt;data[1] + slice_start * ulinesize; type *dv = (type *)out-&gt;data[2] + slice_start * vlinesize; for (int y = slice_start; y &lt; slice_end; y++) { const int duy = av_clip(y - cbv, 0, h-1) * sulinesize; const int dvy = av_clip(y - crv, 0, h-1) * svlinesize; for (int x = 0; x &lt; w; x++) { du[x] = su[av_clip(x - cbh, 0, w - 1) + duy]; dv[x] = sv[av_clip(x - crh, 0, w - 1) + dvy]; } du += ulinesize; dv += vlinesize; } return 0; }</cpp:value></cpp:define>






































<macro><name>DEFINE_SMEAR</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>uint8_t</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_SMEAR</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>uint16_t</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_WRAP</name><parameter_list>(<parameter><type><name>depth</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>div</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static int wrap_slice ##depth(AVFilterContext *ctx, void *arg, int jobnr, int nb_jobs) { ChromaShiftContext *s = ctx-&gt;priv; AVFrame *in = s-&gt;in; AVFrame *out = arg; const int sulinesize = in-&gt;linesize[1] / div; const int svlinesize = in-&gt;linesize[2] / div; const int ulinesize = out-&gt;linesize[1] / div; const int vlinesize = out-&gt;linesize[2] / div; const int cbh = s-&gt;cbh; const int cbv = s-&gt;cbv; const int crh = s-&gt;crh; const int crv = s-&gt;crv; const int h = s-&gt;height[1]; const int w = s-&gt;width[1]; const int slice_start = (h * jobnr) / nb_jobs; const int slice_end = (h * (jobnr+1)) / nb_jobs; const type *su = (const type *)in-&gt;data[1]; const type *sv = (const type *)in-&gt;data[2]; type *du = (type *)out-&gt;data[1] + slice_start * ulinesize; type *dv = (type *)out-&gt;data[2] + slice_start * vlinesize; for (int y = slice_start; y &lt; slice_end; y++) { int uy = (y - cbv) % h; int vy = (y - crv) % h; if (uy &lt; 0) uy += h; if (vy &lt; 0) vy += h; for (int x = 0; x &lt; w; x++) { int ux = (x - cbh) % w; int vx = (x - crh) % w; if (ux &lt; 0) ux += w; if (vx &lt; 0) vx += w; du[x] = su[ux + uy * sulinesize]; dv[x] = sv[vx + vy * svlinesize]; } du += ulinesize; dv += vlinesize; } return 0; }</cpp:value></cpp:define>



















































<macro><name>DEFINE_WRAP</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>uint8_t</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_WRAP</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>uint16_t</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_RGBASMEAR</name><parameter_list>(<parameter><type><name>depth</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>div</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static int rgbasmear_slice ##depth(AVFilterContext *ctx, void *arg, int jobnr, int nb_jobs) { ChromaShiftContext *s = ctx-&gt;priv; AVFrame *in = s-&gt;in; AVFrame *out = arg; const int srlinesize = in-&gt;linesize[2] / div; const int sglinesize = in-&gt;linesize[0] / div; const int sblinesize = in-&gt;linesize[1] / div; const int salinesize = in-&gt;linesize[3] / div; const int rlinesize = out-&gt;linesize[2] / div; const int glinesize = out-&gt;linesize[0] / div; const int blinesize = out-&gt;linesize[1] / div; const int alinesize = out-&gt;linesize[3] / div; const int rh = s-&gt;rh; const int rv = s-&gt;rv; const int gh = s-&gt;gh; const int gv = s-&gt;gv; const int bh = s-&gt;bh; const int bv = s-&gt;bv; const int ah = s-&gt;ah; const int av = s-&gt;av; const int h = s-&gt;height[1]; const int w = s-&gt;width[1]; const int slice_start = (h * jobnr) / nb_jobs; const int slice_end = (h * (jobnr+1)) / nb_jobs; const type *sr = (const type *)in-&gt;data[2]; const type *sg = (const type *)in-&gt;data[0]; const type *sb = (const type *)in-&gt;data[1]; const type *sa = (const type *)in-&gt;data[3]; type *dr = (type *)out-&gt;data[2] + slice_start * rlinesize; type *dg = (type *)out-&gt;data[0] + slice_start * glinesize; type *db = (type *)out-&gt;data[1] + slice_start * blinesize; type *da = (type *)out-&gt;data[3] + slice_start * alinesize; for (int y = slice_start; y &lt; slice_end; y++) { const int ry = av_clip(y - rv, 0, h-1) * srlinesize; const int gy = av_clip(y - gv, 0, h-1) * sglinesize; const int by = av_clip(y - bv, 0, h-1) * sblinesize; int ay; for (int x = 0; x &lt; w; x++) { dr[x] = sr[av_clip(x - rh, 0, w - 1) + ry]; dg[x] = sg[av_clip(x - gh, 0, w - 1) + gy]; db[x] = sb[av_clip(x - bh, 0, w - 1) + by]; } dr += rlinesize; dg += glinesize; db += blinesize; if (s-&gt;nb_planes &lt; 4) continue; ay = av_clip(y - av, 0, h-1) * salinesize; for (int x = 0; x &lt; w; x++) { da[x] = sa[av_clip(x - ah, 0, w - 1) + ay]; } da += alinesize; } return 0; }</cpp:value></cpp:define>































































<macro><name>DEFINE_RGBASMEAR</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>uint8_t</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_RGBASMEAR</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>uint16_t</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_RGBAWRAP</name><parameter_list>(<parameter><type><name>depth</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>div</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static int rgbawrap_slice ##depth(AVFilterContext *ctx, void *arg, int jobnr, int nb_jobs) { ChromaShiftContext *s = ctx-&gt;priv; AVFrame *in = s-&gt;in; AVFrame *out = arg; const int srlinesize = in-&gt;linesize[2] / div; const int sglinesize = in-&gt;linesize[0] / div; const int sblinesize = in-&gt;linesize[1] / div; const int salinesize = in-&gt;linesize[3] / div; const int rlinesize = out-&gt;linesize[2] / div; const int glinesize = out-&gt;linesize[0] / div; const int blinesize = out-&gt;linesize[1] / div; const int alinesize = out-&gt;linesize[3] / div; const int rh = s-&gt;rh; const int rv = s-&gt;rv; const int gh = s-&gt;gh; const int gv = s-&gt;gv; const int bh = s-&gt;bh; const int bv = s-&gt;bv; const int ah = s-&gt;ah; const int av = s-&gt;av; const int h = s-&gt;height[1]; const int w = s-&gt;width[1]; const int slice_start = (h * jobnr) / nb_jobs; const int slice_end = (h * (jobnr+1)) / nb_jobs; const type *sr = (const type *)in-&gt;data[2]; const type *sg = (const type *)in-&gt;data[0]; const type *sb = (const type *)in-&gt;data[1]; const type *sa = (const type *)in-&gt;data[3]; type *dr = (type *)out-&gt;data[2] + slice_start * rlinesize; type *dg = (type *)out-&gt;data[0] + slice_start * glinesize; type *db = (type *)out-&gt;data[1] + slice_start * blinesize; type *da = (type *)out-&gt;data[3] + slice_start * alinesize; for (int y = slice_start; y &lt; slice_end; y++) { int ry = (y - rv) % h; int gy = (y - gv) % h; int by = (y - bv) % h; if (ry &lt; 0) ry += h; if (gy &lt; 0) gy += h; if (by &lt; 0) by += h; for (int x = 0; x &lt; w; x++) { int rx = (x - rh) % w; int gx = (x - gh) % w; int bx = (x - bh) % w; if (rx &lt; 0) rx += w; if (gx &lt; 0) gx += w; if (bx &lt; 0) bx += w; dr[x] = sr[rx + ry * srlinesize]; dg[x] = sg[gx + gy * sglinesize]; db[x] = sb[bx + by * sblinesize]; } dr += rlinesize; dg += glinesize; db += blinesize; if (s-&gt;nb_planes &lt; 4) continue; for (int x = 0; x &lt; w; x++) { int ax = (x - ah) % w; int ay = (x - av) % h; if (ax &lt; 0) ax += w; if (ay &lt; 0) ay += h; da[x] = sa[ax + ay * salinesize]; } da += alinesize; } return 0; }</cpp:value></cpp:define>





















































































<macro><name>DEFINE_RGBAWRAP</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>uint8_t</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_RGBAWRAP</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>uint16_t</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ChromaShiftContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in</name></name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>is_rgbashift</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_image_copy_plane</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>filter_slice</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>FFMIN3</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>ff_filter_get_nb_threads</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ChromaShiftContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>is_rgbashift</name></name> <operator>=</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"rgbashift"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_rgbashift</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>edge</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter_slice</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>rgbawrap_slice16</name></expr> </then><else>: <expr><name>rgbawrap_slice8</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter_slice</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>rgbasmear_slice16</name></expr> </then><else>: <expr><name>rgbasmear_slice8</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>edge</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter_slice</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>wrap_slice16</name></expr> </then><else>: <expr><name>wrap_slice8</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter_slice</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>smear_slice16</name></expr> </then><else>: <expr><name>smear_slice8</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>height</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>height</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>width</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>width</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<return>return <expr><call><name>av_image_fill_linesizes</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process_command</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>args</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>res_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_filter_process_command</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>res_len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>config_input</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(ChromaShiftContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VFR</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_FILTERING_PARAM | AV_OPT_FLAG_RUNTIME_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>chromashift_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"cbh"</literal></expr>, <expr><literal type="string">"shift chroma-blue horizontally"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>cbh</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>VFR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cbv"</literal></expr>, <expr><literal type="string">"shift chroma-blue vertically"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>cbv</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>VFR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crh"</literal></expr>, <expr><literal type="string">"shift chroma-red horizontally"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>crh</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>VFR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"crv"</literal></expr>, <expr><literal type="string">"shift chroma-red vertically"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>crv</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>VFR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"edge"</literal></expr>, <expr><literal type="string">"set edge operation"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>VFR</name></expr>, <expr><literal type="string">"edge"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"smear"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>VFR</name></expr>, <expr><literal type="string">"edge"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"wrap"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>VFR</name></expr>, <expr><literal type="string">"edge"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>chromashift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_chromashift</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"chromashift"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Shift chroma."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ChromaShiftContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>chromashift_class</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>outputs</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>inputs</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC</name> <operator>|</operator> <name>AVFILTER_FLAG_SLICE_THREADS</name></expr>,
<expr><operator>.</operator><name>process_command</name> <operator>=</operator> <name>process_command</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>rgbashift_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"rh"</literal></expr>, <expr><literal type="string">"shift red horizontally"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>rh</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>VFR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rv"</literal></expr>, <expr><literal type="string">"shift red vertically"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>VFR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"gh"</literal></expr>, <expr><literal type="string">"shift green horizontally"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>gh</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>VFR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"gv"</literal></expr>, <expr><literal type="string">"shift green vertically"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>gv</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>VFR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bh"</literal></expr>, <expr><literal type="string">"shift blue horizontally"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>bh</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>VFR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bv"</literal></expr>, <expr><literal type="string">"shift blue vertically"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>bv</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>VFR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ah"</literal></expr>, <expr><literal type="string">"shift alpha horizontally"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>ah</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>VFR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"av"</literal></expr>, <expr><literal type="string">"shift alpha vertically"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>av</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>VFR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"edge"</literal></expr>, <expr><literal type="string">"set edge operation"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>VFR</name></expr>, <expr><literal type="string">"edge"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"smear"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>VFR</name></expr>, <expr><literal type="string">"edge"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"wrap"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>VFR</name></expr>, <expr><literal type="string">"edge"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>rgbashift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_rgbashift</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"rgbashift"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Shift RGBA."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ChromaShiftContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>rgbashift_class</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>outputs</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>inputs</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC</name> <operator>|</operator> <name>AVFILTER_FLAG_SLICE_THREADS</name></expr>,
<expr><operator>.</operator><name>process_command</name> <operator>=</operator> <name>process_command</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
