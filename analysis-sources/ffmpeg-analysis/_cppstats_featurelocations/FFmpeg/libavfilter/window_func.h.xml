<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\window_func.h">




















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVFILTER_WINDOW_FUNC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVFILTER_WINDOW_FUNC_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<enum>enum <name>WindowFunc</name> <block>{ <decl><name>WFUNC_RECT</name></decl>, <decl><name>WFUNC_HANNING</name></decl>, <decl><name>WFUNC_HAMMING</name></decl>, <decl><name>WFUNC_BLACKMAN</name></decl>,
<decl><name>WFUNC_BARTLETT</name></decl>, <decl><name>WFUNC_WELCH</name></decl>, <decl><name>WFUNC_FLATTOP</name></decl>,
<decl><name>WFUNC_BHARRIS</name></decl>, <decl><name>WFUNC_BNUTTALL</name></decl>, <decl><name>WFUNC_SINE</name></decl>, <decl><name>WFUNC_NUTTALL</name></decl>,
<decl><name>WFUNC_BHANN</name></decl>, <decl><name>WFUNC_LANCZOS</name></decl>, <decl><name>WFUNC_GAUSS</name></decl>, <decl><name>WFUNC_TUKEY</name></decl>,
<decl><name>WFUNC_DOLPH</name></decl>, <decl><name>WFUNC_CAUCHY</name></decl>, <decl><name>WFUNC_PARZEN</name></decl>, <decl><name>WFUNC_POISSON</name></decl>,
<decl><name>WFUNC_BOHMAN</name></decl>,
<decl><name>NB_WFUNC</name></decl> }</block>;</enum>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>generate_window_func</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>lut</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>win_func</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>overlap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>win_func</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>WFUNC_RECT</name></expr>:</case>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lut</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">1.</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><operator>*</operator><name>overlap</name> <operator>=</operator> <literal type="number">0.</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WFUNC_BARTLETT</name></expr>:</case>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lut</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">1.</literal><operator>-</operator><call><name>fabs</name><argument_list>(<argument><expr><operator>(</operator><name>n</name><operator>-</operator><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2.</literal><operator>)</operator><operator>/</operator><operator>(</operator><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2.</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><operator>*</operator><name>overlap</name> <operator>=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WFUNC_HANNING</name></expr>:</case>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lut</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">.5</literal><operator>*</operator><operator>(</operator><literal type="number">1</literal><operator>-</operator><call><name>cos</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>M_PI</name><operator>*</operator><name>n</name><operator>/</operator><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><operator>*</operator><name>overlap</name> <operator>=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WFUNC_HAMMING</name></expr>:</case>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lut</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">.54</literal><operator>-</operator><literal type="number">.46</literal><operator>*</operator><call><name>cos</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>M_PI</name><operator>*</operator><name>n</name><operator>/</operator><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><operator>*</operator><name>overlap</name> <operator>=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WFUNC_BLACKMAN</name></expr>:</case>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lut</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">.42659</literal><operator>-</operator><literal type="number">.49656</literal><operator>*</operator><call><name>cos</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>M_PI</name><operator>*</operator><name>n</name><operator>/</operator><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">.076849</literal><operator>*</operator><call><name>cos</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>*</operator><name>M_PI</name><operator>*</operator><name>n</name><operator>/</operator><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><operator>*</operator><name>overlap</name> <operator>=</operator> <literal type="number">0.661</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WFUNC_WELCH</name></expr>:</case>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lut</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">1.</literal><operator>-</operator><operator>(</operator><name>n</name><operator>-</operator><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2.</literal><operator>)</operator><operator>/</operator><operator>(</operator><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2.</literal><operator>)</operator><operator>*</operator><operator>(</operator><name>n</name><operator>-</operator><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2.</literal><operator>)</operator><operator>/</operator><operator>(</operator><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2.</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><operator>*</operator><name>overlap</name> <operator>=</operator> <literal type="number">0.293</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WFUNC_FLATTOP</name></expr>:</case>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lut</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">1.</literal><operator>-</operator><literal type="number">1.985844164102</literal><operator>*</operator><call><name>cos</name><argument_list>( <argument><expr><literal type="number">2</literal><operator>*</operator><name>M_PI</name><operator>*</operator><name>n</name><operator>/</operator><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1.791176438506</literal><operator>*</operator><call><name>cos</name><argument_list>( <argument><expr><literal type="number">4</literal><operator>*</operator><name>M_PI</name><operator>*</operator><name>n</name><operator>/</operator><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>-</operator>
<literal type="number">1.282075284005</literal><operator>*</operator><call><name>cos</name><argument_list>( <argument><expr><literal type="number">6</literal><operator>*</operator><name>M_PI</name><operator>*</operator><name>n</name><operator>/</operator><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">0.667777530266</literal><operator>*</operator><call><name>cos</name><argument_list>( <argument><expr><literal type="number">8</literal><operator>*</operator><name>M_PI</name><operator>*</operator><name>n</name><operator>/</operator><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>-</operator>
<literal type="number">0.240160796576</literal><operator>*</operator><call><name>cos</name><argument_list>(<argument><expr><literal type="number">10</literal><operator>*</operator><name>M_PI</name><operator>*</operator><name>n</name><operator>/</operator><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">0.056656381764</literal><operator>*</operator><call><name>cos</name><argument_list>(<argument><expr><literal type="number">12</literal><operator>*</operator><name>M_PI</name><operator>*</operator><name>n</name><operator>/</operator><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>-</operator>
<literal type="number">0.008134974479</literal><operator>*</operator><call><name>cos</name><argument_list>(<argument><expr><literal type="number">14</literal><operator>*</operator><name>M_PI</name><operator>*</operator><name>n</name><operator>/</operator><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">0.000624544650</literal><operator>*</operator><call><name>cos</name><argument_list>(<argument><expr><literal type="number">16</literal><operator>*</operator><name>M_PI</name><operator>*</operator><name>n</name><operator>/</operator><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>-</operator>
<literal type="number">0.000019808998</literal><operator>*</operator><call><name>cos</name><argument_list>(<argument><expr><literal type="number">18</literal><operator>*</operator><name>M_PI</name><operator>*</operator><name>n</name><operator>/</operator><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">0.000000132974</literal><operator>*</operator><call><name>cos</name><argument_list>(<argument><expr><literal type="number">20</literal><operator>*</operator><name>M_PI</name><operator>*</operator><name>n</name><operator>/</operator><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><operator>*</operator><name>overlap</name> <operator>=</operator> <literal type="number">0.841</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WFUNC_BHARRIS</name></expr>:</case>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lut</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.35875</literal><operator>-</operator><literal type="number">0.48829</literal><operator>*</operator><call><name>cos</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>M_PI</name><operator>*</operator><name>n</name><operator>/</operator><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">0.14128</literal><operator>*</operator><call><name>cos</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>*</operator><name>M_PI</name><operator>*</operator><name>n</name><operator>/</operator><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">0.01168</literal><operator>*</operator><call><name>cos</name><argument_list>(<argument><expr><literal type="number">6</literal><operator>*</operator><name>M_PI</name><operator>*</operator><name>n</name><operator>/</operator><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><operator>*</operator><name>overlap</name> <operator>=</operator> <literal type="number">0.661</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WFUNC_BNUTTALL</name></expr>:</case>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lut</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.3635819</literal><operator>-</operator><literal type="number">0.4891775</literal><operator>*</operator><call><name>cos</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>M_PI</name><operator>*</operator><name>n</name><operator>/</operator><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">0.1365995</literal><operator>*</operator><call><name>cos</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>*</operator><name>M_PI</name><operator>*</operator><name>n</name><operator>/</operator><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">0.0106411</literal><operator>*</operator><call><name>cos</name><argument_list>(<argument><expr><literal type="number">6</literal><operator>*</operator><name>M_PI</name><operator>*</operator><name>n</name><operator>/</operator><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><operator>*</operator><name>overlap</name> <operator>=</operator> <literal type="number">0.661</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WFUNC_BHANN</name></expr>:</case>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lut</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.62</literal><operator>-</operator><literal type="number">0.48</literal><operator>*</operator><call><name>fabs</name><argument_list>(<argument><expr><name>n</name><operator>/</operator><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>-</operator><literal type="number">.5</literal></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">0.38</literal><operator>*</operator><call><name>cos</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>M_PI</name><operator>*</operator><name>n</name><operator>/</operator><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><operator>*</operator><name>overlap</name> <operator>=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WFUNC_SINE</name></expr>:</case>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lut</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><name>M_PI</name><operator>*</operator><name>n</name><operator>/</operator><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><operator>*</operator><name>overlap</name> <operator>=</operator> <literal type="number">0.75</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WFUNC_NUTTALL</name></expr>:</case>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lut</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.355768</literal><operator>-</operator><literal type="number">0.487396</literal><operator>*</operator><call><name>cos</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>M_PI</name><operator>*</operator><name>n</name><operator>/</operator><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">0.144232</literal><operator>*</operator><call><name>cos</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>*</operator><name>M_PI</name><operator>*</operator><name>n</name><operator>/</operator><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">0.012604</literal><operator>*</operator><call><name>cos</name><argument_list>(<argument><expr><literal type="number">6</literal><operator>*</operator><name>M_PI</name><operator>*</operator><name>n</name><operator>/</operator><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><operator>*</operator><name>overlap</name> <operator>=</operator> <literal type="number">0.663</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WFUNC_LANCZOS</name></expr>:</case>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SINC</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!(x)) ? 1 : sin(M_PI * (x))/(M_PI * (x));</cpp:value></cpp:define>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lut</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>SINC</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">2.</literal><operator>*</operator><name>n</name><operator>)</operator><operator>/</operator><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><operator>*</operator><name>overlap</name> <operator>=</operator> <literal type="number">0.75</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WFUNC_GAUSS</name></expr>:</case>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)*(x))</cpp:value></cpp:define>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lut</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>exp</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">0.5</literal> <operator>*</operator> <call><name>SQR</name><argument_list>(<argument><expr><operator>(</operator><name>n</name><operator>-</operator><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>)</operator><operator>/</operator><operator>(</operator><literal type="number">0.4</literal><operator>*</operator><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2.f</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><operator>*</operator><name>overlap</name> <operator>=</operator> <literal type="number">0.75</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WFUNC_TUKEY</name></expr>:</case>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>M</name> <init>= <expr><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2.</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name>n</name> <operator>-</operator> <name>M</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0.3</literal> <operator>*</operator> <name>M</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>lut</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.5</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <call><name>cos</name><argument_list>(<argument><expr><operator>(</operator><name>M_PI</name><operator>*</operator><operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>n</name> <operator>-</operator> <name>M</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">0.3</literal> <operator>*</operator> <name>M</name><operator>)</operator><operator>)</operator><operator>/</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>-</operator> <literal type="number">0.3</literal><operator>)</operator> <operator>*</operator> <name>M</name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>lut</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>overlap</name> <operator>=</operator> <literal type="number">0.33</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WFUNC_DOLPH</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>b</name> <init>= <expr><call><name>cosh</name><argument_list>(<argument><expr><literal type="number">7.6009022095419887</literal> <operator>/</operator> <operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>sum</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>norm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <literal type="number">1</literal> <operator>/</operator> <operator>(</operator><name>b</name><operator>*</operator><name>b</name><operator>)</operator></expr><operator>,</operator> <expr><name>n</name> <operator>=</operator> <operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>sum</name> <operator>=</operator> <operator>!</operator><name>n</name></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <name>t</name> <operator>=</operator> <name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>n</name> <operator>&amp;&amp;</operator> <name>sum</name> <operator>!=</operator> <name>t</name></expr>;</condition> <incr><expr><name>b</name> <operator>*=</operator> <operator>(</operator><name>n</name><operator>-</operator><name>j</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1.</literal><operator>/</operator><name>j</name><operator>)</operator></expr><operator>,</operator> <expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>sum</name></expr><operator>,</operator> <expr><name>sum</name> <operator>+=</operator> <operator>(</operator><name>b</name> <operator>*=</operator> <name>c</name> <operator>*</operator> <operator>(</operator><name>N</name> <operator>-</operator> <name>n</name> <operator>-</operator> <name>j</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1.</literal><operator>/</operator><name>j</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>sum</name> <operator>/=</operator> <operator>(</operator><name>N</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>n</name><operator>)</operator></expr><operator>,</operator> <expr><name>norm</name> <operator>=</operator> <ternary><condition><expr><name>norm</name></expr> ?</condition><then> <expr><name>norm</name></expr> </then><else>: <expr><name>sum</name></expr></else></ternary></expr><operator>,</operator> <expr><name>sum</name> <operator>/=</operator> <name>norm</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lut</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>sum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lut</name><index>[<expr><name>N</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>n</name></expr>]</index></name> <operator>=</operator> <name>sum</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>overlap</name> <operator>=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt></block_content>}</block>
<break>break;</break>
<case>case <expr><name>WFUNC_CAUCHY</name></expr>:</case>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name>n</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>N</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">.5</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">.5</literal> <operator>||</operator> <name>x</name> <operator>&gt;=</operator> <literal type="number">.5</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>lut</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>lut</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>fabs</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>/</operator><operator>(</operator><literal type="number">1</literal><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">16</literal><operator>*</operator><name>x</name><operator>*</operator><name>x</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>overlap</name> <operator>=</operator> <literal type="number">0.75</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WFUNC_PARZEN</name></expr>:</case>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name>n</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>N</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">.5</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <literal type="number">0.25</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;=</operator> <literal type="number">0.5</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>lut</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>x</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">.5</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">.25</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>lut</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>x</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">.25</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>lut</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <literal type="number">24</literal> <operator>*</operator> <name>x</name> <operator>*</operator> <name>x</name> <operator>-</operator> <literal type="number">48</literal> <operator>*</operator> <name>x</name> <operator>*</operator> <name>x</name> <operator>*</operator> <name>x</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;=</operator> <literal type="number">.25</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>lut</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <literal type="number">24</literal> <operator>*</operator> <name>x</name> <operator>*</operator> <name>x</name> <operator>+</operator> <literal type="number">48</literal> <operator>*</operator> <name>x</name> <operator>*</operator> <name>x</name> <operator>*</operator> <name>x</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>lut</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>overlap</name> <operator>=</operator> <literal type="number">0.75</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WFUNC_POISSON</name></expr>:</case>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name>n</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>N</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">.5</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;=</operator> <literal type="number">.5</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>lut</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>exp</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">6</literal><operator>*</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">.5</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>lut</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>exp</name><argument_list>(<argument><expr><literal type="number">6</literal><operator>*</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>lut</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>overlap</name> <operator>=</operator> <literal type="number">0.75</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WFUNC_BOHMAN</name></expr>:</case>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name>n</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>N</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1.</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>lut</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>M_PI</name><operator>*</operator><call><name>fabs</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1.</literal><operator>/</operator><name>M_PI</name><operator>*</operator><call><name>sin</name><argument_list>(<argument><expr><name>M_PI</name><operator>*</operator><call><name>fabs</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>overlap</name> <operator>=</operator> <literal type="number">0.75</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
