<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vf_waveform.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/parseutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/xga_font_data.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>ThreadData</name> <block>{
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>component</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset_x</name></decl>;</decl_stmt>
}</block></struct></type> <name>ThreadData</name>;</typedef>

<enum>enum <name>FilterType</name> <block>{
<decl><name>LOWPASS</name></decl>,
<decl><name>FLAT</name></decl>,
<decl><name>AFLAT</name></decl>,
<decl><name>CHROMA</name></decl>,
<decl><name>COLOR</name></decl>,
<decl><name>ACOLOR</name></decl>,
<decl><name>XFLAT</name></decl>,
<decl><name>YFLAT</name></decl>,
<decl><name>NB_FILTERS</name></decl>
}</block>;</enum>

<enum>enum <name>DisplayType</name> <block>{
<decl><name>OVERLAY</name></decl>,
<decl><name>STACK</name></decl>,
<decl><name>PARADE</name></decl>,
<decl><name>NB_DISPLAYS</name></decl>
}</block>;</enum>

<enum>enum <name>ScaleType</name> <block>{
<decl><name>DIGITAL</name></decl>,
<decl><name>MILLIVOLTS</name></decl>,
<decl><name>IRE</name></decl>,
<decl><name>NB_SCALES</name></decl>
}</block>;</enum>

<enum>enum <name>GraticuleType</name> <block>{
<decl><name>GRAT_NONE</name></decl>,
<decl><name>GRAT_GREEN</name></decl>,
<decl><name>GRAT_ORANGE</name></decl>,
<decl><name>GRAT_INVERT</name></decl>,
<decl><name>NB_GRATICULES</name></decl>
}</block>;</enum>

<typedef>typedef <type><struct>struct <name>GraticuleLine</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>pos</name></decl>;</decl_stmt>
}</block></struct></type> <name>GraticuleLine</name>;</typedef>

<typedef>typedef <type><struct>struct <name>GraticuleLines</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>GraticuleLine</name></name></type> <name><name>line</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>GraticuleLines</name>;</typedef>

<typedef>typedef <type><struct>struct <name>WaveformContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>acomp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dcomp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ncomp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pcomp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>bg_color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>fintensity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>intensity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mirror</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>display</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>envelope</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>graticule</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>opacity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>bgopacity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>estart</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>eend</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name><name>emax</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name><name>emin</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>peak</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>filter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>grat_yuva_color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>shift_w</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <name><name>shift_h</name><index>[<expr><literal type="number">4</literal></expr>]</index></name>;</decl_stmt>
<decl_stmt><decl><type><name>GraticuleLines</name> <modifier>*</modifier></type><name>glines</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_glines</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rgb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>ftint</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>tint</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>waveform_slice</name>)<parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>graticulef</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>WaveformContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>blend_line</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linesize</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>step</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>draw_text</name>)<parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mult</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>o1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>odesc</name></decl>;</decl_stmt>
}</block></struct></type> <name>WaveformContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(WaveformContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_VIDEO_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>waveform_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"mode"</literal></expr>, <expr><literal type="string">"set mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"m"</literal></expr>, <expr><literal type="string">"set mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"row"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"column"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"intensity"</literal></expr>, <expr><literal type="string">"set intensity"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>fintensity</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.04</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"i"</literal></expr>, <expr><literal type="string">"set intensity"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>fintensity</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.04</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"mirror"</literal></expr>, <expr><literal type="string">"set mirroring"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mirror</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"r"</literal></expr>, <expr><literal type="string">"set mirroring"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mirror</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"display"</literal></expr>, <expr><literal type="string">"set display mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>STACK</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_DISPLAYS</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"display"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"d"</literal></expr>, <expr><literal type="string">"set display mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>STACK</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_DISPLAYS</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"display"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"overlay"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>OVERLAY</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"display"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"stack"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>STACK</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"display"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"parade"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>PARADE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"display"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"components"</literal></expr>, <expr><literal type="string">"set components to display"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>pcomp</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"set components to display"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>pcomp</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"envelope"</literal></expr>, <expr><literal type="string">"set envelope to display"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>envelope</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"envelope"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"e"</literal></expr>, <expr><literal type="string">"set envelope to display"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>envelope</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"envelope"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"none"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"envelope"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"instant"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"envelope"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"peak"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">2</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"envelope"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"peak+instant"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">3</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"envelope"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"filter"</literal></expr>, <expr><literal type="string">"set filter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_FILTERS</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"filter"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"f"</literal></expr>, <expr><literal type="string">"set filter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_FILTERS</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"filter"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"lowpass"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>LOWPASS</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"filter"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"flat"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>FLAT</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"filter"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"aflat"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>AFLAT</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"filter"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"chroma"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>CHROMA</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"filter"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"color"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>COLOR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"filter"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"acolor"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ACOLOR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"filter"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"xflat"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>XFLAT</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"filter"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"yflat"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>YFLAT</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"filter"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"graticule"</literal></expr>, <expr><literal type="string">"set graticule"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>graticule</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_GRATICULES</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"graticule"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"g"</literal></expr>, <expr><literal type="string">"set graticule"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>graticule</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_GRATICULES</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"graticule"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"none"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>GRAT_NONE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"graticule"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"green"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>GRAT_GREEN</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"graticule"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"orange"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>GRAT_ORANGE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"graticule"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"invert"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>GRAT_INVERT</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"graticule"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"opacity"</literal></expr>, <expr><literal type="string">"set graticule opacity"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>opacity</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.75</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"o"</literal></expr>, <expr><literal type="string">"set graticule opacity"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>opacity</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.75</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"flags"</literal></expr>, <expr><literal type="string">"set graticule flags"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLAGS</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fl"</literal></expr>, <expr><literal type="string">"set graticule flags"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLAGS</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"numbers"</literal></expr>, <expr><literal type="string">"draw numbers"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dots"</literal></expr>, <expr><literal type="string">"draw dots instead of lines"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">2</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"scale"</literal></expr>, <expr><literal type="string">"set scale"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_SCALES</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"scale"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"set scale"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_SCALES</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"scale"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"digital"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>DIGITAL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"scale"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"millivolts"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MILLIVOLTS</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"scale"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ire"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>IRE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"scale"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bgopacity"</literal></expr>, <expr><literal type="string">"set background opacity"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>bgopacity</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.75</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"set background opacity"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>bgopacity</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.75</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"tint0"</literal></expr>, <expr><literal type="string">"set 1st tint"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>ftint</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"t0"</literal></expr>, <expr><literal type="string">"set 1st tint"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>ftint</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"tint1"</literal></expr>, <expr><literal type="string">"set 2nd tint"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>ftint</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"t1"</literal></expr>, <expr><literal type="string">"set 2nd tint"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>ftint</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>waveform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>in_lowpass_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_GBRP</name></expr>, <expr><name>AV_PIX_FMT_GBRAP</name></expr>,
<expr><name>AV_PIX_FMT_GBRP9</name></expr>, <expr><name>AV_PIX_FMT_GBRP10</name></expr>, <expr><name>AV_PIX_FMT_GBRP12</name></expr>,
<expr><name>AV_PIX_FMT_YUV422P</name></expr>, <expr><name>AV_PIX_FMT_YUV420P</name></expr>,
<expr><name>AV_PIX_FMT_YUV444P</name></expr>, <expr><name>AV_PIX_FMT_YUV440P</name></expr>,
<expr><name>AV_PIX_FMT_YUV411P</name></expr>, <expr><name>AV_PIX_FMT_YUV410P</name></expr>,
<expr><name>AV_PIX_FMT_YUVJ440P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ411P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ420P</name></expr>,
<expr><name>AV_PIX_FMT_YUVJ422P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ444P</name></expr>,
<expr><name>AV_PIX_FMT_YUVA444P</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P</name></expr>, <expr><name>AV_PIX_FMT_YUVA420P</name></expr>,
<expr><name>AV_PIX_FMT_GRAY8</name></expr>, <expr><name>AV_PIX_FMT_GRAY9</name></expr>, <expr><name>AV_PIX_FMT_GRAY10</name></expr>, <expr><name>AV_PIX_FMT_GRAY12</name></expr>,
<expr><name>AV_PIX_FMT_YUV444P9</name></expr>, <expr><name>AV_PIX_FMT_YUV422P9</name></expr>, <expr><name>AV_PIX_FMT_YUV420P9</name></expr>,
<expr><name>AV_PIX_FMT_YUVA444P9</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P9</name></expr>, <expr><name>AV_PIX_FMT_YUVA420P9</name></expr>,
<expr><name>AV_PIX_FMT_YUV444P10</name></expr>, <expr><name>AV_PIX_FMT_YUV422P10</name></expr>, <expr><name>AV_PIX_FMT_YUV420P10</name></expr>,
<expr><name>AV_PIX_FMT_YUVA444P10</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P10</name></expr>, <expr><name>AV_PIX_FMT_YUVA420P10</name></expr>,
<expr><name>AV_PIX_FMT_YUV444P12</name></expr>, <expr><name>AV_PIX_FMT_YUV422P12</name></expr>, <expr><name>AV_PIX_FMT_YUV420P12</name></expr>, <expr><name>AV_PIX_FMT_YUV440P12</name></expr>,
<expr><name>AV_PIX_FMT_YUVA444P12</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P12</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>in_color_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_GBRP</name></expr>, <expr><name>AV_PIX_FMT_GBRAP</name></expr>,
<expr><name>AV_PIX_FMT_GBRP9</name></expr>, <expr><name>AV_PIX_FMT_GBRP10</name></expr>, <expr><name>AV_PIX_FMT_GBRP12</name></expr>,
<expr><name>AV_PIX_FMT_YUV422P</name></expr>, <expr><name>AV_PIX_FMT_YUV420P</name></expr>,
<expr><name>AV_PIX_FMT_YUV444P</name></expr>, <expr><name>AV_PIX_FMT_YUV440P</name></expr>,
<expr><name>AV_PIX_FMT_YUV411P</name></expr>,
<expr><name>AV_PIX_FMT_YUVJ440P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ411P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ420P</name></expr>,
<expr><name>AV_PIX_FMT_YUVJ422P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ444P</name></expr>,
<expr><name>AV_PIX_FMT_YUVA444P</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P</name></expr>, <expr><name>AV_PIX_FMT_YUVA420P</name></expr>,
<expr><name>AV_PIX_FMT_YUV444P9</name></expr>, <expr><name>AV_PIX_FMT_YUV422P9</name></expr>, <expr><name>AV_PIX_FMT_YUV420P9</name></expr>,
<expr><name>AV_PIX_FMT_YUVA444P9</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P9</name></expr>, <expr><name>AV_PIX_FMT_YUVA420P9</name></expr>,
<expr><name>AV_PIX_FMT_YUV444P10</name></expr>, <expr><name>AV_PIX_FMT_YUV422P10</name></expr>, <expr><name>AV_PIX_FMT_YUV420P10</name></expr>,
<expr><name>AV_PIX_FMT_YUVA444P10</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P10</name></expr>, <expr><name>AV_PIX_FMT_YUVA420P10</name></expr>,
<expr><name>AV_PIX_FMT_YUV444P12</name></expr>, <expr><name>AV_PIX_FMT_YUV422P12</name></expr>, <expr><name>AV_PIX_FMT_YUV420P12</name></expr>, <expr><name>AV_PIX_FMT_YUV440P12</name></expr>,
<expr><name>AV_PIX_FMT_YUVA444P12</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P12</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>in_flat_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_YUV422P</name></expr>, <expr><name>AV_PIX_FMT_YUV420P</name></expr>,
<expr><name>AV_PIX_FMT_YUV444P</name></expr>, <expr><name>AV_PIX_FMT_YUV440P</name></expr>,
<expr><name>AV_PIX_FMT_YUV411P</name></expr>,
<expr><name>AV_PIX_FMT_YUVJ440P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ411P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ420P</name></expr>,
<expr><name>AV_PIX_FMT_YUVJ422P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ444P</name></expr>,
<expr><name>AV_PIX_FMT_YUVA444P</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P</name></expr>, <expr><name>AV_PIX_FMT_YUVA420P</name></expr>,
<expr><name>AV_PIX_FMT_YUV444P9</name></expr>, <expr><name>AV_PIX_FMT_YUV422P9</name></expr>, <expr><name>AV_PIX_FMT_YUV420P9</name></expr>,
<expr><name>AV_PIX_FMT_YUVA444P9</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P9</name></expr>, <expr><name>AV_PIX_FMT_YUVA420P9</name></expr>,
<expr><name>AV_PIX_FMT_YUV444P10</name></expr>, <expr><name>AV_PIX_FMT_YUV422P10</name></expr>, <expr><name>AV_PIX_FMT_YUV420P10</name></expr>,
<expr><name>AV_PIX_FMT_YUVA444P10</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P10</name></expr>, <expr><name>AV_PIX_FMT_YUVA420P10</name></expr>,
<expr><name>AV_PIX_FMT_YUV444P12</name></expr>, <expr><name>AV_PIX_FMT_YUV422P12</name></expr>, <expr><name>AV_PIX_FMT_YUV420P12</name></expr>, <expr><name>AV_PIX_FMT_YUV440P12</name></expr>,
<expr><name>AV_PIX_FMT_YUVA444P12</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P12</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>out_rgb8_lowpass_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_GBRP</name></expr>, <expr><name>AV_PIX_FMT_GBRAP</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>out_rgb9_lowpass_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_GBRP9</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>out_rgb10_lowpass_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_GBRP10</name></expr>, <expr><name>AV_PIX_FMT_GBRAP10</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>out_rgb12_lowpass_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_GBRP12</name></expr>, <expr><name>AV_PIX_FMT_GBRAP12</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>out_yuv8_lowpass_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_YUV444P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ444P</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>out_yuv9_lowpass_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_YUV444P9</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P9</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>out_yuv10_lowpass_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_YUV444P10</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P10</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>out_yuv12_lowpass_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_YUV444P12</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P12</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>out_gray8_lowpass_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_GRAY8</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>out_gray9_lowpass_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_GRAY9</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>out_gray10_lowpass_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_GRAY10</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>out_gray12_lowpass_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_GRAY12</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>flat_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_YUV444P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ444P</name></expr>,
<expr><name>AV_PIX_FMT_YUV444P9</name></expr>, <expr><name>AV_PIX_FMT_YUV444P10</name></expr>,
<expr><name>AV_PIX_FMT_YUV444P12</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WaveformContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier></type><name>out_pix_fmts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier></type><name>in_pix_fmts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>desc2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>avff</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>avff2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>, <decl><type ref="prev"/><name>depth2</name></decl>, <decl><type ref="prev"/><name>rgb</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>ncomp</name></decl>, <decl><type ref="prev"/><name>ncomp2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>in_formats</name> <operator>||</operator>
<operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>in_formats</name><operator>-&gt;</operator><name>nb_formats</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>filter</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LOWPASS</name></expr>:</case> <expr_stmt><expr><name>in_pix_fmts</name> <operator>=</operator> <name>in_lowpass_pix_fmts</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>CHROMA</name></expr>:</case>
<case>case <expr><name>XFLAT</name></expr>:</case>
<case>case <expr><name>YFLAT</name></expr>:</case>
<case>case <expr><name>AFLAT</name></expr>:</case>
<case>case <expr><name>FLAT</name></expr>:</case> <expr_stmt><expr><name>in_pix_fmts</name> <operator>=</operator> <name>in_flat_pix_fmts</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>ACOLOR</name></expr>:</case>
<case>case <expr><name>COLOR</name></expr>:</case> <expr_stmt><expr><name>in_pix_fmts</name> <operator>=</operator> <name>in_color_pix_fmts</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <return>return <expr><name>AVERROR_BUG</name></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>out_formats</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>in_pix_fmts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>out_formats</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>avff</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>in_formats</name></expr>;</expr_stmt>
<expr_stmt><expr><name>avff2</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>out_formats</name></expr>;</expr_stmt>
<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>avff</name><operator>-&gt;</operator><name>formats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>desc2</name> <operator>=</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>avff2</name><operator>-&gt;</operator><name>formats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ncomp</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ncomp2</name> <operator>=</operator> <name><name>desc2</name><operator>-&gt;</operator><name>nb_components</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rgb</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_RGB</name></expr>;</expr_stmt>
<expr_stmt><expr><name>depth</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>
<expr_stmt><expr><name>depth2</name> <operator>=</operator> <name><name>desc2</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ncomp</name> <operator>!=</operator> <name>ncomp2</name> <operator>||</operator> <name>depth</name> <operator>!=</operator> <name>depth2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avff</name><operator>-&gt;</operator><name>nb_formats</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>avff</name><operator>-&gt;</operator><name>formats</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rgb</name> <operator>!=</operator> <operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_RGB</name><operator>)</operator> <operator>||</operator>
<name>depth</name> <operator>!=</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>filter</name></name> <operator>==</operator> <name>LOWPASS</name> <operator>&amp;&amp;</operator> <name>ncomp</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>depth</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>out_pix_fmts</name> <operator>=</operator> <name>out_gray8_lowpass_pix_fmts</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>filter</name></name> <operator>==</operator> <name>LOWPASS</name> <operator>&amp;&amp;</operator> <name>ncomp</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>depth</name> <operator>==</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>out_pix_fmts</name> <operator>=</operator> <name>out_gray9_lowpass_pix_fmts</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>filter</name></name> <operator>==</operator> <name>LOWPASS</name> <operator>&amp;&amp;</operator> <name>ncomp</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>depth</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>out_pix_fmts</name> <operator>=</operator> <name>out_gray10_lowpass_pix_fmts</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>filter</name></name> <operator>==</operator> <name>LOWPASS</name> <operator>&amp;&amp;</operator> <name>ncomp</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>depth</name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>out_pix_fmts</name> <operator>=</operator> <name>out_gray12_lowpass_pix_fmts</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>rgb</name> <operator>&amp;&amp;</operator> <name>depth</name> <operator>==</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>ncomp</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>out_pix_fmts</name> <operator>=</operator> <name>out_rgb8_lowpass_pix_fmts</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>rgb</name> <operator>&amp;&amp;</operator> <name>depth</name> <operator>==</operator> <literal type="number">9</literal> <operator>&amp;&amp;</operator> <name>ncomp</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>out_pix_fmts</name> <operator>=</operator> <name>out_rgb9_lowpass_pix_fmts</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>rgb</name> <operator>&amp;&amp;</operator> <name>depth</name> <operator>==</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <name>ncomp</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>out_pix_fmts</name> <operator>=</operator> <name>out_rgb10_lowpass_pix_fmts</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>rgb</name> <operator>&amp;&amp;</operator> <name>depth</name> <operator>==</operator> <literal type="number">12</literal> <operator>&amp;&amp;</operator> <name>ncomp</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>out_pix_fmts</name> <operator>=</operator> <name>out_rgb12_lowpass_pix_fmts</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>depth</name> <operator>==</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>ncomp</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>out_pix_fmts</name> <operator>=</operator> <name>out_yuv8_lowpass_pix_fmts</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>depth</name> <operator>==</operator> <literal type="number">9</literal> <operator>&amp;&amp;</operator> <name>ncomp</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>out_pix_fmts</name> <operator>=</operator> <name>out_yuv9_lowpass_pix_fmts</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>depth</name> <operator>==</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <name>ncomp</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>out_pix_fmts</name> <operator>=</operator> <name>out_yuv10_lowpass_pix_fmts</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>depth</name> <operator>==</operator> <literal type="number">12</literal> <operator>&amp;&amp;</operator> <name>ncomp</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>out_pix_fmts</name> <operator>=</operator> <name>out_yuv12_lowpass_pix_fmts</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>out_pix_fmts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>in_formats</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>envelope_instant16</name><parameter_list>(<parameter><decl><type><name>WaveformContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>component</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_linesize</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>component</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bg</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>bg_color</name><index>[<expr><name>component</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>max</name></name> <operator>/</operator> <literal type="number">256</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>limit</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>max</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_h</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>display</name></name> <operator>==</operator> <name>PARADE</name></expr> ?</condition><then> <expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>acomp</name></name></expr> </then><else>: <expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_w</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>display</name></name> <operator>==</operator> <name>PARADE</name></expr> ?</condition><then> <expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>acomp</name></name></expr> </then><else>: <expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>start</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>estart</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>end</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>eend</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>offset</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>offset</name> <operator>+</operator> <name>dst_w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>component</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>dst_linesize</name> <operator>+</operator> <name>x</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>bg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>end</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name> <operator>&gt;=</operator> <name>start</name></expr>;</condition> <incr><expr><name>y</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>component</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>dst_linesize</name> <operator>+</operator> <name>x</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>bg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>offset</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>offset</name> <operator>+</operator> <name>dst_h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>component</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>dst_linesize</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>!=</operator> <name>bg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>end</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name> <operator>&gt;=</operator> <name>start</name></expr>;</condition> <incr><expr><name>x</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>!=</operator> <name>bg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>envelope_instant</name><parameter_list>(<parameter><decl><type><name>WaveformContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>component</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_linesize</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>component</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>bg</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>bg_color</name><index>[<expr><name>component</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_h</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>display</name></name> <operator>==</operator> <name>PARADE</name></expr> ?</condition><then> <expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>acomp</name></name></expr> </then><else>: <expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_w</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>display</name></name> <operator>==</operator> <name>PARADE</name></expr> ?</condition><then> <expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>acomp</name></name></expr> </then><else>: <expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>start</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>estart</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>end</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>eend</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>offset</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>offset</name> <operator>+</operator> <name>dst_w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>component</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>dst_linesize</name> <operator>+</operator> <name>x</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>bg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>end</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name> <operator>&gt;=</operator> <name>start</name></expr>;</condition> <incr><expr><name>y</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>component</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>dst_linesize</name> <operator>+</operator> <name>x</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>bg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>offset</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>offset</name> <operator>+</operator> <name>dst_h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>component</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>dst_linesize</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>!=</operator> <name>bg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>end</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name> <operator>&gt;=</operator> <name>start</name></expr>;</condition> <incr><expr><name>x</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>!=</operator> <name>bg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>envelope_peak16</name><parameter_list>(<parameter><decl><type><name>WaveformContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>component</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_linesize</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>component</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bg</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>bg_color</name><index>[<expr><name>component</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>max</name></name> <operator>/</operator> <literal type="number">256</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>limit</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>max</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_h</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>display</name></name> <operator>==</operator> <name>PARADE</name></expr> ?</condition><then> <expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>acomp</name></name></expr> </then><else>: <expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_w</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>display</name></name> <operator>==</operator> <name>PARADE</name></expr> ?</condition><then> <expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>acomp</name></name></expr> </then><else>: <expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>start</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>estart</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>end</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>eend</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>emax</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>emax</name><index>[<expr><name>plane</name></expr>]</index><index>[<expr><name>component</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>emin</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>emin</name><index>[<expr><name>plane</name></expr>]</index><index>[<expr><name>component</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>offset</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>offset</name> <operator>+</operator> <name>dst_w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <name><name>emin</name><index>[<expr><name>x</name> <operator>-</operator> <name>offset</name></expr>]</index></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>component</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>dst_linesize</name> <operator>+</operator> <name>x</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>bg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>emin</name><index>[<expr><name>x</name> <operator>-</operator> <name>offset</name></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>end</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name> <operator>&gt;=</operator> <name>start</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&gt;=</operator> <name><name>emax</name><index>[<expr><name>x</name> <operator>-</operator> <name>offset</name></expr>]</index></name></expr>;</condition> <incr><expr><name>y</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>component</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>dst_linesize</name> <operator>+</operator> <name>x</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>bg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>emax</name><index>[<expr><name>x</name> <operator>-</operator> <name>offset</name></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>envelope</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>envelope_instant16</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>component</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>offset</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>offset</name> <operator>+</operator> <name>dst_w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>component</name></expr>]</index></name> <operator>+</operator> <name><name>emin</name><index>[<expr><name>x</name> <operator>-</operator> <name>offset</name></expr>]</index></name> <operator>*</operator> <name>dst_linesize</name> <operator>+</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>component</name></expr>]</index></name> <operator>+</operator> <name><name>emax</name><index>[<expr><name>x</name> <operator>-</operator> <name>offset</name></expr>]</index></name> <operator>*</operator> <name>dst_linesize</name> <operator>+</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>offset</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>offset</name> <operator>+</operator> <name>dst_h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>component</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>dst_linesize</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;</operator> <name><name>emin</name><index>[<expr><name>y</name> <operator>-</operator> <name>offset</name></expr>]</index></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>!=</operator> <name>bg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>emin</name><index>[<expr><name>y</name> <operator>-</operator> <name>offset</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>end</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name> <operator>&gt;=</operator> <name>start</name> <operator>&amp;&amp;</operator> <name>x</name> <operator>&gt;=</operator> <name><name>emax</name><index>[<expr><name>y</name> <operator>-</operator> <name>offset</name></expr>]</index></name></expr>;</condition> <incr><expr><name>x</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>!=</operator> <name>bg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>emax</name><index>[<expr><name>y</name> <operator>-</operator> <name>offset</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>envelope</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>envelope_instant16</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>component</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>offset</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>offset</name> <operator>+</operator> <name>dst_h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>component</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>dst_linesize</name> <operator>+</operator> <name><name>emin</name><index>[<expr><name>y</name> <operator>-</operator> <name>offset</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>component</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>dst_linesize</name> <operator>+</operator> <name><name>emax</name><index>[<expr><name>y</name> <operator>-</operator> <name>offset</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>envelope_peak</name><parameter_list>(<parameter><decl><type><name>WaveformContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>component</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_linesize</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>component</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bg</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>bg_color</name><index>[<expr><name>component</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_h</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>display</name></name> <operator>==</operator> <name>PARADE</name></expr> ?</condition><then> <expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>acomp</name></name></expr> </then><else>: <expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_w</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>display</name></name> <operator>==</operator> <name>PARADE</name></expr> ?</condition><then> <expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>acomp</name></name></expr> </then><else>: <expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>start</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>estart</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>end</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>eend</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>emax</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>emax</name><index>[<expr><name>plane</name></expr>]</index><index>[<expr><name>component</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>emin</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>emin</name><index>[<expr><name>plane</name></expr>]</index><index>[<expr><name>component</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>offset</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>offset</name> <operator>+</operator> <name>dst_w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <name><name>emin</name><index>[<expr><name>x</name> <operator>-</operator> <name>offset</name></expr>]</index></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>component</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>dst_linesize</name> <operator>+</operator> <name>x</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>bg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>emin</name><index>[<expr><name>x</name> <operator>-</operator> <name>offset</name></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>end</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name> <operator>&gt;=</operator> <name>start</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&gt;=</operator> <name><name>emax</name><index>[<expr><name>x</name> <operator>-</operator> <name>offset</name></expr>]</index></name></expr>;</condition> <incr><expr><name>y</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>component</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>dst_linesize</name> <operator>+</operator> <name>x</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>bg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>emax</name><index>[<expr><name>x</name> <operator>-</operator> <name>offset</name></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>envelope</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>envelope_instant</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>component</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>offset</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>offset</name> <operator>+</operator> <name>dst_w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>component</name></expr>]</index></name> <operator>+</operator> <name><name>emin</name><index>[<expr><name>x</name> <operator>-</operator> <name>offset</name></expr>]</index></name> <operator>*</operator> <name>dst_linesize</name> <operator>+</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>component</name></expr>]</index></name> <operator>+</operator> <name><name>emax</name><index>[<expr><name>x</name> <operator>-</operator> <name>offset</name></expr>]</index></name> <operator>*</operator> <name>dst_linesize</name> <operator>+</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>offset</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>offset</name> <operator>+</operator> <name>dst_h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>component</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>dst_linesize</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;</operator> <name><name>emin</name><index>[<expr><name>y</name> <operator>-</operator> <name>offset</name></expr>]</index></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>!=</operator> <name>bg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>emin</name><index>[<expr><name>y</name> <operator>-</operator> <name>offset</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>end</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name> <operator>&gt;=</operator> <name>start</name> <operator>&amp;&amp;</operator> <name>x</name> <operator>&gt;=</operator> <name><name>emax</name><index>[<expr><name>y</name> <operator>-</operator> <name>offset</name></expr>]</index></name></expr>;</condition> <incr><expr><name>x</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>!=</operator> <name>bg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>emax</name><index>[<expr><name>y</name> <operator>-</operator> <name>offset</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>envelope</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>envelope_instant</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>component</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>offset</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>offset</name> <operator>+</operator> <name>dst_h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>component</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>dst_linesize</name> <operator>+</operator> <name><name>emin</name><index>[<expr><name>y</name> <operator>-</operator> <name>offset</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>component</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>dst_linesize</name> <operator>+</operator> <name><name>emax</name><index>[<expr><name>y</name> <operator>-</operator> <name>offset</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>envelope16</name><parameter_list>(<parameter><decl><type><name>WaveformContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>component</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>envelope</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>envelope</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>envelope_instant16</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>component</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>envelope_peak16</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>component</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>envelope</name><parameter_list>(<parameter><decl><type><name>WaveformContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>component</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>envelope</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>envelope</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>envelope_instant</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>component</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>envelope_peak</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>component</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update16</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>intensity</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>target</name> <operator>&lt;=</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>target</name> <operator>+=</operator> <name>intensity</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>target</name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>intensity</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>target</name> <operator>&lt;=</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>target</name> <operator>+=</operator> <name>intensity</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>target</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_cr</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unused</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>intensity</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>target</name> <operator>-</operator> <name>intensity</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>target</name> <operator>-=</operator> <name>intensity</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>target</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update16_cr</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unused</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>intensity</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>target</name> <operator>-</operator> <name>intensity</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>target</name> <operator>-=</operator> <name>intensity</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>target</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>lowpass16</name><parameter_list>(<parameter><decl><type><name>WaveformContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>component</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>intensity</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>offset_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset_x</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mirror</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>plane</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>component</name></expr>]</index></name><operator>.</operator><name>plane</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dplane</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>rgb</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>display</name></name> <operator>==</operator> <name>OVERLAY</name><operator>)</operator></expr> ?</condition><then> <expr><name>plane</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>shift_w</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_w</name><index>[<expr><name>component</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>shift_h</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_h</name><index>[<expr><name>component</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_linesize</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_linesize</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>dplane</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_signed_linesize</name> <init>= <expr><name>dst_linesize</name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>mirror</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>limit</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>max</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>max</name> <init>= <expr><name>limit</name> <operator>-</operator> <name>intensity</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_h</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>shift_h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_w</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name>shift_w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sliceh_start</name> <init>= <expr><ternary><condition><expr><operator>!</operator><name>column</name></expr> ?</condition><then> <expr><operator>(</operator><name>src_h</name> <operator>*</operator> <name>jobnr</name><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sliceh_end</name> <init>= <expr><ternary><condition><expr><operator>!</operator><name>column</name></expr> ?</condition><then> <expr><operator>(</operator><name>src_h</name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr> </then><else>: <expr><name>src_h</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slicew_start</name> <init>= <expr><ternary><condition><expr><name>column</name></expr> ?</condition><then> <expr><operator>(</operator><name>src_w</name> <operator>*</operator> <name>jobnr</name><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slicew_end</name> <init>= <expr><ternary><condition><expr><name>column</name></expr> ?</condition><then> <expr><operator>(</operator><name>src_w</name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr> </then><else>: <expr><name>src_w</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>step</name> <init>= <expr><ternary><condition><expr><name>column</name></expr> ?</condition><then> <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>shift_w</name></expr> </then><else>: <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>shift_h</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_data</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>sliceh_start</name> <operator>*</operator> <name>src_linesize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_data</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>dplane</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>offset_y</name> <operator>+</operator> <name>sliceh_start</name> <operator>*</operator> <name>step</name><operator>)</operator> <operator>*</operator> <name>dst_linesize</name> <operator>+</operator> <name>offset_x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>dst_bottom_line</name> <init>= <expr><name>dst_data</name> <operator>+</operator> <name>dst_linesize</name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>dst_line</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>mirror</name></expr> ?</condition><then> <expr><name>dst_bottom_line</name></expr> </then><else>: <expr><name>dst_data</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>column</name> <operator>&amp;&amp;</operator> <name>mirror</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dst_data</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>sliceh_start</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>sliceh_end</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src_data_end</name> <init>= <expr><name>src_data</name> <operator>+</operator> <name>slicew_end</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>dst_line</name> <operator>+</operator> <name>slicew_start</name> <operator>*</operator> <name>step</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>src_data</name> <operator>+</operator> <name>slicew_start</name></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>src_data_end</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>target</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>v</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>column</name></expr>)</condition> <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><name>target</name> <operator>=</operator> <name>dst</name><operator>++</operator> <operator>+</operator> <name>dst_signed_linesize</name> <operator>*</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update16</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>intensity</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>++</operator><name>i</name> <operator>&lt;</operator> <name>step</name></expr>)</condition>;</do>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>row</name> <init>= <expr><name>dst_data</name></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mirror</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>target</name> <operator>=</operator> <name>row</name> <operator>-</operator> <name>v</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>target</name> <operator>=</operator> <name>row</name> <operator>+</operator> <name>v</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>update16</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>intensity</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>row</name> <operator>+=</operator> <name>dst_linesize</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>++</operator><name>i</name> <operator>&lt;</operator> <name>step</name></expr>)</condition>;</do>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>src_data</name> <operator>+=</operator> <name>src_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_data</name> <operator>+=</operator> <name>dst_linesize</name> <operator>*</operator> <name>step</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>display</name></name> <operator>!=</operator> <name>OVERLAY</name> <operator>&amp;&amp;</operator> <name>column</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>rgb</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mult</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>max</name></name> <operator>/</operator> <literal type="number">256</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bg</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>bg_color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>mult</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>t0</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>tint</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>t1</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>tint</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <name>offset_y</name> <operator>*</operator> <name>dst_linesize</name> <operator>+</operator> <name>offset_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <name>offset_y</name> <operator>*</operator> <name>dst_linesize</name> <operator>+</operator> <name>offset_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst1</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <name>offset_y</name> <operator>*</operator> <name>dst_linesize</name> <operator>+</operator> <name>offset_x</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>max</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>slicew_start</name> <operator>*</operator> <name>step</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>slicew_end</name> <operator>*</operator> <name>step</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>src</name><index>[<expr><name>x</name></expr>]</index></name> <operator>!=</operator> <name>bg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst0</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>t0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst1</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>dst_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst0</name> <operator>+=</operator> <name>dst_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst1</name> <operator>+=</operator> <name>dst_linesize</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>display</name></name> <operator>!=</operator> <name>OVERLAY</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>rgb</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mult</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>max</name></name> <operator>/</operator> <literal type="number">256</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bg</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>bg_color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>mult</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>t0</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>tint</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>t1</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>tint</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>offset_y</name> <operator>+</operator> <name>sliceh_start</name> <operator>*</operator> <name>step</name><operator>)</operator> <operator>*</operator> <name>dst_linesize</name> <operator>+</operator> <name>offset_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>offset_y</name> <operator>+</operator> <name>sliceh_start</name> <operator>*</operator> <name>step</name><operator>)</operator> <operator>*</operator> <name>dst_linesize</name> <operator>+</operator> <name>offset_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst1</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>offset_y</name> <operator>+</operator> <name>sliceh_start</name> <operator>*</operator> <name>step</name><operator>)</operator> <operator>*</operator> <name>dst_linesize</name> <operator>+</operator> <name>offset_x</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>sliceh_start</name> <operator>*</operator> <name>step</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>sliceh_end</name> <operator>*</operator> <name>step</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>max</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>src</name><index>[<expr><name>x</name></expr>]</index></name> <operator>!=</operator> <name>bg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst0</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>t0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst1</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>dst_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst0</name> <operator>+=</operator> <name>dst_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst1</name> <operator>+=</operator> <name>dst_linesize</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOWPASS16_FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>column</name></type></parameter>, <parameter><type><name>mirror</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static int lowpass16_##name(AVFilterContext *ctx, void *arg, int jobnr, int nb_jobs) { WaveformContext *s = ctx-&gt;priv; ThreadData *td = arg; AVFrame *in = td-&gt;in; AVFrame *out = td-&gt;out; int component = td-&gt;component; int offset_y = td-&gt;offset_y; int offset_x = td-&gt;offset_x; lowpass16(s, in, out, component, s-&gt;intensity, offset_y, offset_x, column, mirror, jobnr, nb_jobs); return 0; }</cpp:value></cpp:define>



















<macro><name>LOWPASS16_FUNC</name><argument_list>(<argument>column_mirror</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>LOWPASS16_FUNC</name><argument_list>(<argument>column</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>LOWPASS16_FUNC</name><argument_list>(<argument>row_mirror</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>LOWPASS16_FUNC</name><argument_list>(<argument>row</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>lowpass</name><parameter_list>(<parameter><decl><type><name>WaveformContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>component</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>intensity</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>offset_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset_x</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mirror</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>plane</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>component</name></expr>]</index></name><operator>.</operator><name>plane</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dplane</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>rgb</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>display</name></name> <operator>==</operator> <name>OVERLAY</name><operator>)</operator></expr> ?</condition><then> <expr><name>plane</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>shift_w</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_w</name><index>[<expr><name>component</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>shift_h</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_h</name><index>[<expr><name>component</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_linesize</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_linesize</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>dplane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_signed_linesize</name> <init>= <expr><name>dst_linesize</name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>mirror</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>max</name> <init>= <expr><literal type="number">255</literal> <operator>-</operator> <name>intensity</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_h</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>shift_h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_w</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name>shift_w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sliceh_start</name> <init>= <expr><ternary><condition><expr><operator>!</operator><name>column</name></expr> ?</condition><then> <expr><operator>(</operator><name>src_h</name> <operator>*</operator> <name>jobnr</name><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sliceh_end</name> <init>= <expr><ternary><condition><expr><operator>!</operator><name>column</name></expr> ?</condition><then> <expr><operator>(</operator><name>src_h</name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr> </then><else>: <expr><name>src_h</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slicew_start</name> <init>= <expr><ternary><condition><expr><name>column</name></expr> ?</condition><then> <expr><operator>(</operator><name>src_w</name> <operator>*</operator> <name>jobnr</name><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slicew_end</name> <init>= <expr><ternary><condition><expr><name>column</name></expr> ?</condition><then> <expr><operator>(</operator><name>src_w</name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr> </then><else>: <expr><name>src_w</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>step</name> <init>= <expr><ternary><condition><expr><name>column</name></expr> ?</condition><then> <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>shift_w</name></expr> </then><else>: <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>shift_h</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_data</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>sliceh_start</name> <operator>*</operator> <name>src_linesize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_data</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>dplane</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>offset_y</name> <operator>+</operator> <name>sliceh_start</name> <operator>*</operator> <name>step</name><operator>)</operator> <operator>*</operator> <name>dst_linesize</name> <operator>+</operator> <name>offset_x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>dst_bottom_line</name> <init>= <expr><name>dst_data</name> <operator>+</operator> <name>dst_linesize</name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>dst_line</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>mirror</name></expr> ?</condition><then> <expr><name>dst_bottom_line</name></expr> </then><else>: <expr><name>dst_data</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>column</name> <operator>&amp;&amp;</operator> <name>mirror</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dst_data</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>sliceh_start</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>sliceh_end</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_data_end</name> <init>= <expr><name>src_data</name> <operator>+</operator> <name>slicew_end</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>dst_line</name> <operator>+</operator> <name>slicew_start</name> <operator>*</operator> <name>step</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>src_data</name> <operator>+</operator> <name>slicew_start</name></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>src_data_end</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>target</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>column</name></expr>)</condition> <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><name>target</name> <operator>=</operator> <name>dst</name><operator>++</operator> <operator>+</operator> <name>dst_signed_linesize</name> <operator>*</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>intensity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>++</operator><name>i</name> <operator>&lt;</operator> <name>step</name></expr>)</condition>;</do>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>row</name> <init>= <expr><name>dst_data</name></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mirror</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>target</name> <operator>=</operator> <name>row</name> <operator>-</operator> <operator>*</operator><name>p</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>target</name> <operator>=</operator> <name>row</name> <operator>+</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>intensity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>row</name> <operator>+=</operator> <name>dst_linesize</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>++</operator><name>i</name> <operator>&lt;</operator> <name>step</name></expr>)</condition>;</do>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>src_data</name> <operator>+=</operator> <name>src_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_data</name> <operator>+=</operator> <name>dst_linesize</name> <operator>*</operator> <name>step</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>display</name></name> <operator>!=</operator> <name>OVERLAY</name> <operator>&amp;&amp;</operator> <name>column</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>rgb</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bg</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>bg_color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_h</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>t0</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>tint</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>t1</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>tint</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>offset_y</name> <operator>*</operator> <name>dst_linesize</name> <operator>+</operator> <name>offset_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst0</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>offset_y</name> <operator>*</operator> <name>dst_linesize</name> <operator>+</operator> <name>offset_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst1</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>offset_y</name> <operator>*</operator> <name>dst_linesize</name> <operator>+</operator> <name>offset_x</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>dst_h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>slicew_start</name> <operator>*</operator> <name>step</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>slicew_end</name> <operator>*</operator> <name>step</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>src</name><index>[<expr><name>x</name></expr>]</index></name> <operator>!=</operator> <name>bg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst0</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>t0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst1</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>dst_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst0</name> <operator>+=</operator> <name>dst_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst1</name> <operator>+=</operator> <name>dst_linesize</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>display</name></name> <operator>!=</operator> <name>OVERLAY</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>rgb</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bg</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>bg_color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_w</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>t0</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>tint</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>t1</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>tint</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>offset_y</name> <operator>+</operator> <name>sliceh_start</name> <operator>*</operator> <name>step</name><operator>)</operator> <operator>*</operator> <name>dst_linesize</name> <operator>+</operator> <name>offset_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst0</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>offset_y</name> <operator>+</operator> <name>sliceh_start</name> <operator>*</operator> <name>step</name><operator>)</operator> <operator>*</operator> <name>dst_linesize</name> <operator>+</operator> <name>offset_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst1</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>offset_y</name> <operator>+</operator> <name>sliceh_start</name> <operator>*</operator> <name>step</name><operator>)</operator> <operator>*</operator> <name>dst_linesize</name> <operator>+</operator> <name>offset_x</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>sliceh_start</name> <operator>*</operator> <name>step</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>sliceh_end</name> <operator>*</operator> <name>step</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>dst_w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>src</name><index>[<expr><name>x</name></expr>]</index></name> <operator>!=</operator> <name>bg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst0</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>t0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst1</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>dst_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst0</name> <operator>+=</operator> <name>dst_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst1</name> <operator>+=</operator> <name>dst_linesize</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOWPASS_FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>column</name></type></parameter>, <parameter><type><name>mirror</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static int lowpass_##name(AVFilterContext *ctx, void *arg, int jobnr, int nb_jobs) { WaveformContext *s = ctx-&gt;priv; ThreadData *td = arg; AVFrame *in = td-&gt;in; AVFrame *out = td-&gt;out; int component = td-&gt;component; int offset_y = td-&gt;offset_y; int offset_x = td-&gt;offset_x; lowpass(s, in, out, component, s-&gt;intensity, offset_y, offset_x, column, mirror, jobnr, nb_jobs); return 0; }</cpp:value></cpp:define>



















<macro><name>LOWPASS_FUNC</name><argument_list>(<argument>column_mirror</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>LOWPASS_FUNC</name><argument_list>(<argument>column</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>LOWPASS_FUNC</name><argument_list>(<argument>row_mirror</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>LOWPASS_FUNC</name><argument_list>(<argument>row</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>flat16</name><parameter_list>(<parameter><decl><type><name>WaveformContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>component</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>intensity</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>offset_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset_x</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mirror</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>plane</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>component</name></expr>]</index></name><operator>.</operator><name>plane</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c0_linesize</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[ <expr><name>plane</name> <operator>+</operator> <literal type="number">0</literal></expr> ]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1_linesize</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c2_linesize</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c0_shift_w</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_w</name><index>[ <expr><name>component</name> <operator>+</operator> <literal type="number">0</literal></expr> ]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1_shift_w</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_w</name><index>[<expr><operator>(</operator><name>component</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c2_shift_w</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_w</name><index>[<expr><operator>(</operator><name>component</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c0_shift_h</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_h</name><index>[ <expr><name>component</name> <operator>+</operator> <literal type="number">0</literal></expr> ]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1_shift_h</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_h</name><index>[<expr><operator>(</operator><name>component</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c2_shift_h</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_h</name><index>[<expr><operator>(</operator><name>component</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d0_linesize</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[ <expr><name>plane</name> <operator>+</operator> <literal type="number">0</literal></expr> ]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d1_linesize</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>limit</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>max</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>max</name> <init>= <expr><name>limit</name> <operator>-</operator> <name>intensity</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mid</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>max</name></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_h</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_w</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sliceh_start</name> <init>= <expr><ternary><condition><expr><operator>!</operator><name>column</name></expr> ?</condition><then> <expr><operator>(</operator><name>src_h</name> <operator>*</operator> <name>jobnr</name><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sliceh_end</name> <init>= <expr><ternary><condition><expr><operator>!</operator><name>column</name></expr> ?</condition><then> <expr><operator>(</operator><name>src_h</name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr> </then><else>: <expr><name>src_h</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slicew_start</name> <init>= <expr><ternary><condition><expr><name>column</name></expr> ?</condition><then> <expr><operator>(</operator><name>src_w</name> <operator>*</operator> <name>jobnr</name><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slicew_end</name> <init>= <expr><ternary><condition><expr><name>column</name></expr> ?</condition><then> <expr><operator>(</operator><name>src_w</name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr> </then><else>: <expr><name>src_w</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>column</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d0_signed_linesize</name> <init>= <expr><name>d0_linesize</name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>mirror</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d1_signed_linesize</name> <init>= <expr><name>d1_linesize</name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>mirror</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>slicew_start</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>slicew_end</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>c0_data</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>c1_data</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>c2_data</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>d0_data</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <name>offset_y</name> <operator>*</operator> <name>d0_linesize</name> <operator>+</operator> <name>offset_x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>d1_data</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name><operator>)</operator> <operator>+</operator> <name>offset_y</name> <operator>*</operator> <name>d1_linesize</name> <operator>+</operator> <name>offset_x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>d0_bottom_line</name> <init>= <expr><name>d0_data</name> <operator>+</operator> <name>d0_linesize</name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>d0</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>mirror</name></expr> ?</condition><then> <expr><name>d0_bottom_line</name></expr> </then><else>: <expr><name>d0_data</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>d1_bottom_line</name> <init>= <expr><name>d1_data</name> <operator>+</operator> <name>d1_linesize</name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>d1</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>mirror</name></expr> ?</condition><then> <expr><name>d1_bottom_line</name></expr> </then><else>: <expr><name>d1_data</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>src_h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c0</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>c0_data</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <name>c0_shift_w</name></expr>]</index></name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>max</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>c1_data</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <name>c1_shift_w</name></expr>]</index></name> <operator>-</operator> <name>mid</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>c2_data</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <name>c2_shift_w</name></expr>]</index></name> <operator>-</operator> <name>mid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>target</name></decl>;</decl_stmt>

<expr_stmt><expr><name>target</name> <operator>=</operator> <name>d0</name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>d0_signed_linesize</name> <operator>*</operator> <name>c0</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update16</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>intensity</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>target</name> <operator>=</operator> <name>d1</name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>d1_signed_linesize</name> <operator>*</operator> <operator>(</operator><name>c0</name> <operator>-</operator> <name>c1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update16</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>intensity</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>target</name> <operator>=</operator> <name>d1</name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>d1_signed_linesize</name> <operator>*</operator> <operator>(</operator><name>c0</name> <operator>+</operator> <name>c1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update16</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>intensity</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c0_shift_h</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <name>c0_shift_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c0_data</name> <operator>+=</operator> <name>c0_linesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c1_shift_h</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <name>c1_shift_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c1_data</name> <operator>+=</operator> <name>c1_linesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c2_shift_h</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <name>c2_shift_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c2_data</name> <operator>+=</operator> <name>c2_linesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>d0_data</name> <operator>+=</operator> <name>d0_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d1_data</name> <operator>+=</operator> <name>d1_linesize</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>c0_data</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>sliceh_start</name> <operator>&gt;&gt;</operator> <name>c0_shift_h</name><operator>)</operator> <operator>*</operator> <name>c0_linesize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>c1_data</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>sliceh_start</name> <operator>&gt;&gt;</operator> <name>c1_shift_h</name><operator>)</operator> <operator>*</operator> <name>c1_linesize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>c2_data</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>sliceh_start</name> <operator>&gt;&gt;</operator> <name>c2_shift_h</name><operator>)</operator> <operator>*</operator> <name>c2_linesize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>d0_data</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>offset_y</name> <operator>+</operator> <name>sliceh_start</name><operator>)</operator> <operator>*</operator> <name>d0_linesize</name> <operator>+</operator> <name>offset_x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>d1_data</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>offset_y</name> <operator>+</operator> <name>sliceh_start</name><operator>)</operator> <operator>*</operator> <name>d1_linesize</name> <operator>+</operator> <name>offset_x</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mirror</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>d0_data</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d1_data</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>sliceh_start</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>sliceh_end</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>src_w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c0</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>c0_data</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <name>c0_shift_w</name></expr>]</index></name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>max</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>c1_data</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <name>c1_shift_w</name></expr>]</index></name> <operator>-</operator> <name>mid</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>c2_data</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <name>c2_shift_w</name></expr>]</index></name> <operator>-</operator> <name>mid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>target</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mirror</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>target</name> <operator>=</operator> <name>d0_data</name> <operator>-</operator> <name>c0</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update16</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>intensity</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>target</name> <operator>=</operator> <name>d1_data</name> <operator>-</operator> <operator>(</operator><name>c0</name> <operator>-</operator> <name>c1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update16</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>intensity</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>target</name> <operator>=</operator> <name>d1_data</name> <operator>-</operator> <operator>(</operator><name>c0</name> <operator>+</operator> <name>c1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update16</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>intensity</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>target</name> <operator>=</operator> <name>d0_data</name> <operator>+</operator> <name>c0</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update16</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>intensity</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>target</name> <operator>=</operator> <name>d1_data</name> <operator>+</operator> <operator>(</operator><name>c0</name> <operator>-</operator> <name>c1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update16</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>intensity</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>target</name> <operator>=</operator> <name>d1_data</name> <operator>+</operator> <operator>(</operator><name>c0</name> <operator>+</operator> <name>c1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update16</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>intensity</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c0_shift_h</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <name>c0_shift_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c0_data</name> <operator>+=</operator> <name>c0_linesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c1_shift_h</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <name>c1_shift_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c1_data</name> <operator>+=</operator> <name>c1_linesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c2_shift_h</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <name>c2_shift_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c2_data</name> <operator>+=</operator> <name>c2_linesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>d0_data</name> <operator>+=</operator> <name>d0_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d1_data</name> <operator>+=</operator> <name>d1_linesize</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAT16_FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>column</name></type></parameter>, <parameter><type><name>mirror</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static int flat16_##name(AVFilterContext *ctx, void *arg, int jobnr, int nb_jobs) { WaveformContext *s = ctx-&gt;priv; ThreadData *td = arg; AVFrame *in = td-&gt;in; AVFrame *out = td-&gt;out; int component = td-&gt;component; int offset_y = td-&gt;offset_y; int offset_x = td-&gt;offset_x; flat16(s, in, out, component, s-&gt;intensity, offset_y, offset_x, column, mirror, jobnr, nb_jobs); return 0; }</cpp:value></cpp:define>



















<macro><name>FLAT16_FUNC</name><argument_list>(<argument>column_mirror</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>FLAT16_FUNC</name><argument_list>(<argument>column</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>FLAT16_FUNC</name><argument_list>(<argument>row_mirror</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>FLAT16_FUNC</name><argument_list>(<argument>row</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>flat</name><parameter_list>(<parameter><decl><type><name>WaveformContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>component</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>intensity</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>offset_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset_x</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mirror</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>plane</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>component</name></expr>]</index></name><operator>.</operator><name>plane</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c0_linesize</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[ <expr><name>plane</name> <operator>+</operator> <literal type="number">0</literal></expr> ]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1_linesize</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c2_linesize</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c0_shift_w</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_w</name><index>[ <expr><name>component</name> <operator>+</operator> <literal type="number">0</literal></expr> ]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1_shift_w</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_w</name><index>[<expr><operator>(</operator><name>component</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c2_shift_w</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_w</name><index>[<expr><operator>(</operator><name>component</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c0_shift_h</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_h</name><index>[ <expr><name>component</name> <operator>+</operator> <literal type="number">0</literal></expr> ]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1_shift_h</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_h</name><index>[<expr><operator>(</operator><name>component</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c2_shift_h</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_h</name><index>[<expr><operator>(</operator><name>component</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d0_linesize</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[ <expr><name>plane</name> <operator>+</operator> <literal type="number">0</literal></expr> ]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d1_linesize</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>max</name> <init>= <expr><literal type="number">255</literal> <operator>-</operator> <name>intensity</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_h</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_w</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sliceh_start</name> <init>= <expr><ternary><condition><expr><operator>!</operator><name>column</name></expr> ?</condition><then> <expr><operator>(</operator><name>src_h</name> <operator>*</operator> <name>jobnr</name><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sliceh_end</name> <init>= <expr><ternary><condition><expr><operator>!</operator><name>column</name></expr> ?</condition><then> <expr><operator>(</operator><name>src_h</name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr> </then><else>: <expr><name>src_h</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slicew_start</name> <init>= <expr><ternary><condition><expr><name>column</name></expr> ?</condition><then> <expr><operator>(</operator><name>src_w</name> <operator>*</operator> <name>jobnr</name><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slicew_end</name> <init>= <expr><ternary><condition><expr><name>column</name></expr> ?</condition><then> <expr><operator>(</operator><name>src_w</name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr> </then><else>: <expr><name>src_w</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>column</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d0_signed_linesize</name> <init>= <expr><name>d0_linesize</name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>mirror</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d1_signed_linesize</name> <init>= <expr><name>d1_linesize</name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>mirror</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>slicew_start</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>slicew_end</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>c0_data</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>c1_data</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>c2_data</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d0_data</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>offset_y</name> <operator>*</operator> <name>d0_linesize</name> <operator>+</operator> <name>offset_x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d1_data</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>+</operator> <name>offset_y</name> <operator>*</operator> <name>d1_linesize</name> <operator>+</operator> <name>offset_x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>d0_bottom_line</name> <init>= <expr><name>d0_data</name> <operator>+</operator> <name>d0_linesize</name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>d0</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>mirror</name></expr> ?</condition><then> <expr><name>d0_bottom_line</name></expr> </then><else>: <expr><name>d0_data</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>d1_bottom_line</name> <init>= <expr><name>d1_data</name> <operator>+</operator> <name>d1_linesize</name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>d1</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>mirror</name></expr> ?</condition><then> <expr><name>d1_bottom_line</name></expr> </then><else>: <expr><name>d1_data</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>src_h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c0</name> <init>= <expr><name><name>c0_data</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <name>c0_shift_w</name></expr>]</index></name> <operator>+</operator> <literal type="number">256</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>c1_data</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <name>c1_shift_w</name></expr>]</index></name> <operator>-</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>c2_data</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <name>c2_shift_w</name></expr>]</index></name> <operator>-</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>target</name></decl>;</decl_stmt>

<expr_stmt><expr><name>target</name> <operator>=</operator> <name>d0</name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>d0_signed_linesize</name> <operator>*</operator> <name>c0</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>intensity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>target</name> <operator>=</operator> <name>d1</name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>d1_signed_linesize</name> <operator>*</operator> <operator>(</operator><name>c0</name> <operator>-</operator> <name>c1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>intensity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>target</name> <operator>=</operator> <name>d1</name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>d1_signed_linesize</name> <operator>*</operator> <operator>(</operator><name>c0</name> <operator>+</operator> <name>c1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>intensity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c0_shift_h</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <name>c0_shift_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c0_data</name> <operator>+=</operator> <name>c0_linesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c1_shift_h</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <name>c1_shift_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c1_data</name> <operator>+=</operator> <name>c1_linesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c2_shift_h</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <name>c2_shift_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c2_data</name> <operator>+=</operator> <name>c2_linesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>d0_data</name> <operator>+=</operator> <name>d0_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d1_data</name> <operator>+=</operator> <name>d1_linesize</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>c0_data</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>sliceh_start</name> <operator>&gt;&gt;</operator> <name>c0_shift_h</name><operator>)</operator> <operator>*</operator> <name>c0_linesize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>c1_data</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>sliceh_start</name> <operator>&gt;&gt;</operator> <name>c1_shift_h</name><operator>)</operator> <operator>*</operator> <name>c1_linesize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>c2_data</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>sliceh_start</name> <operator>&gt;&gt;</operator> <name>c2_shift_h</name><operator>)</operator> <operator>*</operator> <name>c2_linesize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d0_data</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>offset_y</name> <operator>+</operator> <name>sliceh_start</name><operator>)</operator> <operator>*</operator> <name>d0_linesize</name> <operator>+</operator> <name>offset_x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d1_data</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>offset_y</name> <operator>+</operator> <name>sliceh_start</name><operator>)</operator> <operator>*</operator> <name>d1_linesize</name> <operator>+</operator> <name>offset_x</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mirror</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>d0_data</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d1_data</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>sliceh_start</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>sliceh_end</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>src_w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c0</name> <init>= <expr><name><name>c0_data</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <name>c0_shift_w</name></expr>]</index></name> <operator>+</operator> <literal type="number">256</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>c1_data</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <name>c1_shift_w</name></expr>]</index></name> <operator>-</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>c2_data</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <name>c2_shift_w</name></expr>]</index></name> <operator>-</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>target</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mirror</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>target</name> <operator>=</operator> <name>d0_data</name> <operator>-</operator> <name>c0</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>intensity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>target</name> <operator>=</operator> <name>d1_data</name> <operator>-</operator> <operator>(</operator><name>c0</name> <operator>-</operator> <name>c1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>intensity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>target</name> <operator>=</operator> <name>d1_data</name> <operator>-</operator> <operator>(</operator><name>c0</name> <operator>+</operator> <name>c1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>intensity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>target</name> <operator>=</operator> <name>d0_data</name> <operator>+</operator> <name>c0</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>intensity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>target</name> <operator>=</operator> <name>d1_data</name> <operator>+</operator> <operator>(</operator><name>c0</name> <operator>-</operator> <name>c1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>intensity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>target</name> <operator>=</operator> <name>d1_data</name> <operator>+</operator> <operator>(</operator><name>c0</name> <operator>+</operator> <name>c1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>intensity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c0_shift_h</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <name>c0_shift_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c0_data</name> <operator>+=</operator> <name>c0_linesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c1_shift_h</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <name>c1_shift_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c1_data</name> <operator>+=</operator> <name>c1_linesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c2_shift_h</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <name>c2_shift_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c2_data</name> <operator>+=</operator> <name>c2_linesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>d0_data</name> <operator>+=</operator> <name>d0_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d1_data</name> <operator>+=</operator> <name>d1_linesize</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAT_FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>column</name></type></parameter>, <parameter><type><name>mirror</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static int flat_##name(AVFilterContext *ctx, void *arg, int jobnr, int nb_jobs) { WaveformContext *s = ctx-&gt;priv; ThreadData *td = arg; AVFrame *in = td-&gt;in; AVFrame *out = td-&gt;out; int component = td-&gt;component; int offset_y = td-&gt;offset_y; int offset_x = td-&gt;offset_x; flat(s, in, out, component, s-&gt;intensity, offset_y, offset_x, column, mirror, jobnr, nb_jobs); return 0; }</cpp:value></cpp:define>



















<macro><name>FLAT_FUNC</name><argument_list>(<argument>column_mirror</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>FLAT_FUNC</name><argument_list>(<argument>column</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>FLAT_FUNC</name><argument_list>(<argument>row_mirror</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>FLAT_FUNC</name><argument_list>(<argument>row</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AFLAT16</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>update_cb</name></type></parameter>, <parameter><type><name>update_cr</name></type></parameter>, <parameter><type><name>column</name></type></parameter>, <parameter><type><name>mirror</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static int name(AVFilterContext *ctx, void *arg, int jobnr, int nb_jobs) { WaveformContext *s = ctx-&gt;priv; ThreadData *td = arg; AVFrame *in = td-&gt;in; AVFrame *out = td-&gt;out; int component = td-&gt;component; int offset_y = td-&gt;offset_y; int offset_x = td-&gt;offset_x; const int intensity = s-&gt;intensity; const int plane = s-&gt;desc-&gt;comp[component].plane; const int c0_linesize = in-&gt;linesize[ plane + 0 ] / 2; const int c1_linesize = in-&gt;linesize[(plane + 1) % s-&gt;ncomp] / 2; const int c2_linesize = in-&gt;linesize[(plane + 2) % s-&gt;ncomp] / 2; const int c0_shift_w = s-&gt;shift_w[ component + 0 ]; const int c1_shift_w = s-&gt;shift_w[(component + 1) % s-&gt;ncomp]; const int c2_shift_w = s-&gt;shift_w[(component + 2) % s-&gt;ncomp]; const int c0_shift_h = s-&gt;shift_h[ component + 0 ]; const int c1_shift_h = s-&gt;shift_h[(component + 1) % s-&gt;ncomp]; const int c2_shift_h = s-&gt;shift_h[(component + 2) % s-&gt;ncomp]; const int d0_linesize = out-&gt;linesize[ plane + 0 ] / 2; const int d1_linesize = out-&gt;linesize[(plane + 1) % s-&gt;ncomp] / 2; const int d2_linesize = out-&gt;linesize[(plane + 2) % s-&gt;ncomp] / 2; const int limit = s-&gt;max - 1; const int max = limit - intensity; const int mid = s-&gt;max / 2; const int src_h = in-&gt;height; const int src_w = in-&gt;width; const int sliceh_start = !column ? (src_h * jobnr) / nb_jobs : 0; const int sliceh_end = !column ? (src_h * (jobnr+1)) / nb_jobs : src_h; const int slicew_start = column ? (src_w * jobnr) / nb_jobs : 0; const int slicew_end = column ? (src_w * (jobnr+1)) / nb_jobs : src_w; int x, y; if (column) { const int d0_signed_linesize = d0_linesize * (mirror == 1 ? -1 : 1); const int d1_signed_linesize = d1_linesize * (mirror == 1 ? -1 : 1); const int d2_signed_linesize = d2_linesize * (mirror == 1 ? -1 : 1); for (x = slicew_start; x &lt; slicew_end; x++) { const uint16_t *c0_data = (uint16_t *)in-&gt;data[plane + 0]; const uint16_t *c1_data = (uint16_t *)in-&gt;data[(plane + 1) % s-&gt;ncomp]; const uint16_t *c2_data = (uint16_t *)in-&gt;data[(plane + 2) % s-&gt;ncomp]; uint16_t *d0_data = (uint16_t *)out-&gt;data[plane] + offset_y * d0_linesize + offset_x; uint16_t *d1_data = (uint16_t *)out-&gt;data[(plane + 1) % s-&gt;ncomp] + offset_y * d1_linesize + offset_x; uint16_t *d2_data = (uint16_t *)out-&gt;data[(plane + 2) % s-&gt;ncomp] + offset_y * d2_linesize + offset_x; uint16_t * const d0_bottom_line = d0_data + d0_linesize * (s-&gt;size - 1); uint16_t * const d0 = (mirror ? d0_bottom_line : d0_data); uint16_t * const d1_bottom_line = d1_data + d1_linesize * (s-&gt;size - 1); uint16_t * const d1 = (mirror ? d1_bottom_line : d1_data); uint16_t * const d2_bottom_line = d2_data + d2_linesize * (s-&gt;size - 1); uint16_t * const d2 = (mirror ? d2_bottom_line : d2_data); for (y = 0; y &lt; src_h; y++) { const int c0 = FFMIN(c0_data[x &gt;&gt; c0_shift_w], limit) + mid; const int c1 = FFMIN(c1_data[x &gt;&gt; c1_shift_w], limit) - mid; const int c2 = FFMIN(c2_data[x &gt;&gt; c2_shift_w], limit) - mid; uint16_t *target; target = d0 + x + d0_signed_linesize * c0; update16(target, max, intensity, limit); target = d1 + x + d1_signed_linesize * (c0 + c1); update_cb(target, max, intensity, limit); target = d2 + x + d2_signed_linesize * (c0 + c2); update_cr(target, max, intensity, limit); if (!c0_shift_h || (y &amp; c0_shift_h)) c0_data += c0_linesize; if (!c1_shift_h || (y &amp; c1_shift_h)) c1_data += c1_linesize; if (!c2_shift_h || (y &amp; c2_shift_h)) c2_data += c2_linesize; d0_data += d0_linesize; d1_data += d1_linesize; d2_data += d2_linesize; } } } else { const uint16_t *c0_data = (uint16_t *)in-&gt;data[plane] + (sliceh_start &gt;&gt; c0_shift_h) * c0_linesize; const uint16_t *c1_data = (uint16_t *)in-&gt;data[(plane + 1) % s-&gt;ncomp] + (sliceh_start &gt;&gt; c1_shift_h) * c1_linesize; const uint16_t *c2_data = (uint16_t *)in-&gt;data[(plane + 2) % s-&gt;ncomp] + (sliceh_start &gt;&gt; c2_shift_h) * c2_linesize; uint16_t *d0_data = (uint16_t *)out-&gt;data[plane] + (offset_y + sliceh_start) * d0_linesize + offset_x; uint16_t *d1_data = (uint16_t *)out-&gt;data[(plane + 1) % s-&gt;ncomp] + (offset_y + sliceh_start) * d1_linesize + offset_x; uint16_t *d2_data = (uint16_t *)out-&gt;data[(plane + 2) % s-&gt;ncomp] + (offset_y + sliceh_start) * d2_linesize + offset_x; if (mirror) { d0_data += s-&gt;size - 1; d1_data += s-&gt;size - 1; d2_data += s-&gt;size - 1; } for (y = sliceh_start; y &lt; sliceh_end; y++) { for (x = 0; x &lt; src_w; x++) { const int c0 = FFMIN(c0_data[x &gt;&gt; c0_shift_w], limit) + mid; const int c1 = FFMIN(c1_data[x &gt;&gt; c1_shift_w], limit) - mid; const int c2 = FFMIN(c2_data[x &gt;&gt; c2_shift_w], limit) - mid; uint16_t *target; if (mirror) { target = d0_data - c0; update16(target, max, intensity, limit); target = d1_data - (c0 + c1); update_cb(target, max, intensity, limit); target = d2_data - (c0 + c2); update_cr(target, max, intensity, limit); } else { target = d0_data + c0; update16(target, max, intensity, limit); target = d1_data + (c0 + c1); update_cb(target, max, intensity, limit); target = d2_data + (c0 + c2); update_cr(target, max, intensity, limit); } } if (!c0_shift_h || (y &amp; c0_shift_h)) c0_data += c0_linesize; if (!c1_shift_h || (y &amp; c1_shift_h)) c1_data += c1_linesize; if (!c2_shift_h || (y &amp; c2_shift_h)) c2_data += c2_linesize; d0_data += d0_linesize; d1_data += d1_linesize; d2_data += d2_linesize; } } return 0; }</cpp:value></cpp:define>





































































































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AFLAT</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>update_cb</name></type></parameter>, <parameter><type><name>update_cr</name></type></parameter>, <parameter><type><name>column</name></type></parameter>, <parameter><type><name>mirror</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static int name(AVFilterContext *ctx, void *arg, int jobnr, int nb_jobs) { WaveformContext *s = ctx-&gt;priv; ThreadData *td = arg; AVFrame *in = td-&gt;in; AVFrame *out = td-&gt;out; int component = td-&gt;component; int offset_y = td-&gt;offset_y; int offset_x = td-&gt;offset_x; const int src_h = in-&gt;height; const int src_w = in-&gt;width; const int sliceh_start = !column ? (src_h * jobnr) / nb_jobs : 0; const int sliceh_end = !column ? (src_h * (jobnr+1)) / nb_jobs : src_h; const int slicew_start = column ? (src_w * jobnr) / nb_jobs : 0; const int slicew_end = column ? (src_w * (jobnr+1)) / nb_jobs : src_w; const int intensity = s-&gt;intensity; const int plane = s-&gt;desc-&gt;comp[component].plane; const int c0_linesize = in-&gt;linesize[ plane + 0 ]; const int c1_linesize = in-&gt;linesize[(plane + 1) % s-&gt;ncomp]; const int c2_linesize = in-&gt;linesize[(plane + 2) % s-&gt;ncomp]; const int c0_shift_w = s-&gt;shift_w[ component + 0 ]; const int c1_shift_w = s-&gt;shift_w[(component + 1) % s-&gt;ncomp]; const int c2_shift_w = s-&gt;shift_w[(component + 2) % s-&gt;ncomp]; const int c0_shift_h = s-&gt;shift_h[ component + 0 ]; const int c1_shift_h = s-&gt;shift_h[(component + 1) % s-&gt;ncomp]; const int c2_shift_h = s-&gt;shift_h[(component + 2) % s-&gt;ncomp]; const int d0_linesize = out-&gt;linesize[ plane + 0 ]; const int d1_linesize = out-&gt;linesize[(plane + 1) % s-&gt;ncomp]; const int d2_linesize = out-&gt;linesize[(plane + 2) % s-&gt;ncomp]; const int max = 255 - intensity; int x, y; if (column) { const int d0_signed_linesize = d0_linesize * (mirror == 1 ? -1 : 1); const int d1_signed_linesize = d1_linesize * (mirror == 1 ? -1 : 1); const int d2_signed_linesize = d2_linesize * (mirror == 1 ? -1 : 1); for (x = slicew_start; x &lt; slicew_end; x++) { const uint8_t *c0_data = in-&gt;data[plane + 0]; const uint8_t *c1_data = in-&gt;data[(plane + 1) % s-&gt;ncomp]; const uint8_t *c2_data = in-&gt;data[(plane + 2) % s-&gt;ncomp]; uint8_t *d0_data = out-&gt;data[plane] + offset_y * d0_linesize + offset_x; uint8_t *d1_data = out-&gt;data[(plane + 1) % s-&gt;ncomp] + offset_y * d1_linesize + offset_x; uint8_t *d2_data = out-&gt;data[(plane + 2) % s-&gt;ncomp] + offset_y * d2_linesize + offset_x; uint8_t * const d0_bottom_line = d0_data + d0_linesize * (s-&gt;size - 1); uint8_t * const d0 = (mirror ? d0_bottom_line : d0_data); uint8_t * const d1_bottom_line = d1_data + d1_linesize * (s-&gt;size - 1); uint8_t * const d1 = (mirror ? d1_bottom_line : d1_data); uint8_t * const d2_bottom_line = d2_data + d2_linesize * (s-&gt;size - 1); uint8_t * const d2 = (mirror ? d2_bottom_line : d2_data); for (y = 0; y &lt; src_h; y++) { const int c0 = c0_data[x &gt;&gt; c0_shift_w] + 128; const int c1 = c1_data[x &gt;&gt; c1_shift_w] - 128; const int c2 = c2_data[x &gt;&gt; c2_shift_w] - 128; uint8_t *target; target = d0 + x + d0_signed_linesize * c0; update(target, max, intensity); target = d1 + x + d1_signed_linesize * (c0 + c1); update_cb(target, max, intensity); target = d2 + x + d2_signed_linesize * (c0 + c2); update_cr(target, max, intensity); if (!c0_shift_h || (y &amp; c0_shift_h)) c0_data += c0_linesize; if (!c1_shift_h || (y &amp; c1_shift_h)) c1_data += c1_linesize; if (!c2_shift_h || (y &amp; c2_shift_h)) c2_data += c2_linesize; d0_data += d0_linesize; d1_data += d1_linesize; d2_data += d2_linesize; } } } else { const uint8_t *c0_data = in-&gt;data[plane] + (sliceh_start &gt;&gt; c0_shift_h) * c0_linesize; const uint8_t *c1_data = in-&gt;data[(plane + 1) % s-&gt;ncomp] + (sliceh_start &gt;&gt; c1_shift_h) * c1_linesize; const uint8_t *c2_data = in-&gt;data[(plane + 2) % s-&gt;ncomp] + (sliceh_start &gt;&gt; c2_shift_h) * c2_linesize; uint8_t *d0_data = out-&gt;data[plane] + (offset_y + sliceh_start) * d0_linesize + offset_x; uint8_t *d1_data = out-&gt;data[(plane + 1) % s-&gt;ncomp] + (offset_y + sliceh_start) * d1_linesize + offset_x; uint8_t *d2_data = out-&gt;data[(plane + 2) % s-&gt;ncomp] + (offset_y + sliceh_start) * d2_linesize + offset_x; if (mirror) { d0_data += s-&gt;size - 1; d1_data += s-&gt;size - 1; d2_data += s-&gt;size - 1; } for (y = sliceh_start; y &lt; sliceh_end; y++) { for (x = 0; x &lt; src_w; x++) { const int c0 = c0_data[x &gt;&gt; c0_shift_w] + 128; const int c1 = c1_data[x &gt;&gt; c1_shift_w] - 128; const int c2 = c2_data[x &gt;&gt; c2_shift_w] - 128; uint8_t *target; if (mirror) { target = d0_data - c0; update(target, max, intensity); target = d1_data - (c0 + c1); update_cb(target, max, intensity); target = d2_data - (c0 + c2); update_cr(target, max, intensity); } else { target = d0_data + c0; update(target, max, intensity); target = d1_data + (c0 + c1); update_cb(target, max, intensity); target = d2_data + (c0 + c2); update_cr(target, max, intensity); } } if (!c0_shift_h || (y &amp; c0_shift_h)) c0_data += c0_linesize; if (!c1_shift_h || (y &amp; c1_shift_h)) c1_data += c1_linesize; if (!c2_shift_h || (y &amp; c2_shift_h)) c2_data += c2_linesize; d0_data += d0_linesize; d1_data += d1_linesize; d2_data += d2_linesize; } } return 0; }</cpp:value></cpp:define>



































































































































<macro><name>AFLAT16</name><argument_list>(<argument>aflat16_row</argument>, <argument>update16</argument>, <argument>update16</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>AFLAT16</name><argument_list>(<argument>aflat16_row_mirror</argument>, <argument>update16</argument>, <argument>update16</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>AFLAT16</name><argument_list>(<argument>aflat16_column</argument>, <argument>update16</argument>, <argument>update16</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>AFLAT16</name><argument_list>(<argument>aflat16_column_mirror</argument>, <argument>update16</argument>, <argument>update16</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>AFLAT16</name><argument_list>(<argument>xflat16_row</argument>, <argument>update16</argument>, <argument>update16_cr</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>AFLAT16</name><argument_list>(<argument>xflat16_row_mirror</argument>, <argument>update16</argument>, <argument>update16_cr</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>AFLAT16</name><argument_list>(<argument>xflat16_column</argument>, <argument>update16</argument>, <argument>update16_cr</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>AFLAT16</name><argument_list>(<argument>xflat16_column_mirror</argument>, <argument>update16</argument>, <argument>update16_cr</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>AFLAT16</name><argument_list>(<argument>yflat16_row</argument>, <argument>update16_cr</argument>, <argument>update16_cr</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>AFLAT16</name><argument_list>(<argument>yflat16_row_mirror</argument>, <argument>update16_cr</argument>, <argument>update16_cr</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>AFLAT16</name><argument_list>(<argument>yflat16_column</argument>, <argument>update16_cr</argument>, <argument>update16_cr</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>AFLAT16</name><argument_list>(<argument>yflat16_column_mirror</argument>, <argument>update16_cr</argument>, <argument>update16_cr</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>AFLAT</name><argument_list>(<argument>aflat_row</argument>, <argument>update</argument>, <argument>update</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>AFLAT</name><argument_list>(<argument>aflat_row_mirror</argument>, <argument>update</argument>, <argument>update</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>AFLAT</name><argument_list>(<argument>aflat_column</argument>, <argument>update</argument>, <argument>update</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>AFLAT</name><argument_list>(<argument>aflat_column_mirror</argument>, <argument>update</argument>, <argument>update</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>AFLAT</name><argument_list>(<argument>xflat_row</argument>, <argument>update</argument>, <argument>update_cr</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>AFLAT</name><argument_list>(<argument>xflat_row_mirror</argument>, <argument>update</argument>, <argument>update_cr</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>AFLAT</name><argument_list>(<argument>xflat_column</argument>, <argument>update</argument>, <argument>update_cr</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>AFLAT</name><argument_list>(<argument>xflat_column_mirror</argument>, <argument>update</argument>, <argument>update_cr</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>AFLAT</name><argument_list>(<argument>yflat_row</argument>, <argument>update_cr</argument>, <argument>update_cr</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>AFLAT</name><argument_list>(<argument>yflat_row_mirror</argument>, <argument>update_cr</argument>, <argument>update_cr</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>AFLAT</name><argument_list>(<argument>yflat_column</argument>, <argument>update_cr</argument>, <argument>update_cr</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>AFLAT</name><argument_list>(<argument>yflat_column_mirror</argument>, <argument>update_cr</argument>, <argument>update_cr</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>chroma16</name><parameter_list>(<parameter><decl><type><name>WaveformContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>component</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>intensity</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>offset_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset_x</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mirror</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>plane</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>component</name></expr>]</index></name><operator>.</operator><name>plane</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c0_linesize</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1_linesize</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_linesize</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>limit</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>max</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>max</name> <init>= <expr><name>limit</name> <operator>-</operator> <name>intensity</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mid</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>max</name></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c0_shift_w</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_w</name><index>[<expr><operator>(</operator><name>component</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1_shift_w</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_w</name><index>[<expr><operator>(</operator><name>component</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c0_shift_h</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_h</name><index>[<expr><operator>(</operator><name>component</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1_shift_h</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_h</name><index>[<expr><operator>(</operator><name>component</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_h</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_w</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sliceh_start</name> <init>= <expr><ternary><condition><expr><operator>!</operator><name>column</name></expr> ?</condition><then> <expr><operator>(</operator><name>src_h</name> <operator>*</operator> <name>jobnr</name><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sliceh_end</name> <init>= <expr><ternary><condition><expr><operator>!</operator><name>column</name></expr> ?</condition><then> <expr><operator>(</operator><name>src_h</name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr> </then><else>: <expr><name>src_h</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slicew_start</name> <init>= <expr><ternary><condition><expr><name>column</name></expr> ?</condition><then> <expr><operator>(</operator><name>src_w</name> <operator>*</operator> <name>jobnr</name><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slicew_end</name> <init>= <expr><ternary><condition><expr><name>column</name></expr> ?</condition><then> <expr><operator>(</operator><name>src_w</name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr> </then><else>: <expr><name>src_w</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>column</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_signed_linesize</name> <init>= <expr><name>dst_linesize</name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>mirror</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>slicew_start</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>slicew_end</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>c0_data</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>c1_data</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_data</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>offset_y</name> <operator>*</operator> <name>dst_linesize</name> <operator>+</operator> <name>offset_x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>dst_bottom_line</name> <init>= <expr><name>dst_data</name> <operator>+</operator> <name>dst_linesize</name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>dst_line</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>mirror</name></expr> ?</condition><then> <expr><name>dst_bottom_line</name></expr> </then><else>: <expr><name>dst_data</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>dst_line</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>src_h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sum</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>c0_data</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <name>c0_shift_w</name></expr>]</index></name> <operator>-</operator> <name>mid</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>c1_data</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <name>c1_shift_w</name></expr>]</index></name> <operator>-</operator> <name>mid</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>target</name></decl>;</decl_stmt>

<expr_stmt><expr><name>target</name> <operator>=</operator> <name>dst</name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>dst_signed_linesize</name> <operator>*</operator> <name>sum</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update16</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>intensity</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c0_shift_h</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <name>c0_shift_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c0_data</name> <operator>+=</operator> <name>c0_linesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c1_shift_h</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <name>c1_shift_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c1_data</name> <operator>+=</operator> <name>c1_linesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dst_data</name> <operator>+=</operator> <name>dst_linesize</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>c0_data</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>sliceh_start</name> <operator>&gt;&gt;</operator> <name>c0_shift_h</name><operator>)</operator> <operator>*</operator> <name>c0_linesize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>c1_data</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>sliceh_start</name> <operator>&gt;&gt;</operator> <name>c1_shift_h</name><operator>)</operator> <operator>*</operator> <name>c1_linesize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst_data</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>offset_y</name> <operator>+</operator> <name>sliceh_start</name><operator>)</operator> <operator>*</operator> <name>dst_linesize</name> <operator>+</operator> <name>offset_x</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mirror</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dst_data</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>sliceh_start</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>sliceh_end</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>src_w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sum</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>c0_data</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <name>c0_shift_w</name></expr>]</index></name> <operator>-</operator> <name>mid</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>c1_data</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <name>c1_shift_w</name></expr>]</index></name> <operator>-</operator> <name>mid</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>target</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mirror</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>target</name> <operator>=</operator> <name>dst_data</name> <operator>-</operator> <name>sum</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update16</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>intensity</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>target</name> <operator>=</operator> <name>dst_data</name> <operator>+</operator> <name>sum</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update16</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>intensity</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c0_shift_h</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <name>c0_shift_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c0_data</name> <operator>+=</operator> <name>c0_linesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c1_shift_h</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <name>c1_shift_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c1_data</name> <operator>+=</operator> <name>c1_linesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dst_data</name> <operator>+=</operator> <name>dst_linesize</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROMA16_FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>column</name></type></parameter>, <parameter><type><name>mirror</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static int chroma16_##name(AVFilterContext *ctx, void *arg, int jobnr, int nb_jobs) { WaveformContext *s = ctx-&gt;priv; ThreadData *td = arg; AVFrame *in = td-&gt;in; AVFrame *out = td-&gt;out; int component = td-&gt;component; int offset_y = td-&gt;offset_y; int offset_x = td-&gt;offset_x; chroma16(s, in, out, component, s-&gt;intensity,offset_y, offset_x, column, mirror, jobnr, nb_jobs); return 0; }</cpp:value></cpp:define>



















<macro><name>CHROMA16_FUNC</name><argument_list>(<argument>column_mirror</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>CHROMA16_FUNC</name><argument_list>(<argument>column</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>CHROMA16_FUNC</name><argument_list>(<argument>row_mirror</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>CHROMA16_FUNC</name><argument_list>(<argument>row</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>chroma</name><parameter_list>(<parameter><decl><type><name>WaveformContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>component</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>intensity</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>offset_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset_x</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mirror</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>plane</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>component</name></expr>]</index></name><operator>.</operator><name>plane</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_h</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_w</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sliceh_start</name> <init>= <expr><ternary><condition><expr><operator>!</operator><name>column</name></expr> ?</condition><then> <expr><operator>(</operator><name>src_h</name> <operator>*</operator> <name>jobnr</name><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sliceh_end</name> <init>= <expr><ternary><condition><expr><operator>!</operator><name>column</name></expr> ?</condition><then> <expr><operator>(</operator><name>src_h</name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr> </then><else>: <expr><name>src_h</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slicew_start</name> <init>= <expr><ternary><condition><expr><name>column</name></expr> ?</condition><then> <expr><operator>(</operator><name>src_w</name> <operator>*</operator> <name>jobnr</name><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slicew_end</name> <init>= <expr><ternary><condition><expr><name>column</name></expr> ?</condition><then> <expr><operator>(</operator><name>src_w</name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr> </then><else>: <expr><name>src_w</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c0_linesize</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1_linesize</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_linesize</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>max</name> <init>= <expr><literal type="number">255</literal> <operator>-</operator> <name>intensity</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c0_shift_w</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_w</name><index>[<expr><operator>(</operator><name>component</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1_shift_w</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_w</name><index>[<expr><operator>(</operator><name>component</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c0_shift_h</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_h</name><index>[<expr><operator>(</operator><name>component</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1_shift_h</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_h</name><index>[<expr><operator>(</operator><name>component</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>column</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_signed_linesize</name> <init>= <expr><name>dst_linesize</name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>mirror</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>slicew_start</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>slicew_end</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>c0_data</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>c1_data</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_data</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>offset_y</name> <operator>*</operator> <name>dst_linesize</name> <operator>+</operator> <name>offset_x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>dst_bottom_line</name> <init>= <expr><name>dst_data</name> <operator>+</operator> <name>dst_linesize</name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>dst_line</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>mirror</name></expr> ?</condition><then> <expr><name>dst_bottom_line</name></expr> </then><else>: <expr><name>dst_data</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>dst_line</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>src_h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sum</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>c0_data</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <name>c0_shift_w</name></expr>]</index></name> <operator>-</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>c1_data</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <name>c1_shift_w</name></expr>]</index></name> <operator>-</operator> <literal type="number">127</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>target</name></decl>;</decl_stmt>

<expr_stmt><expr><name>target</name> <operator>=</operator> <name>dst</name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>dst_signed_linesize</name> <operator>*</operator> <name>sum</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>intensity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c0_shift_h</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <name>c0_shift_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c0_data</name> <operator>+=</operator> <name>c0_linesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c1_shift_h</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <name>c1_shift_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c1_data</name> <operator>+=</operator> <name>c1_linesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dst_data</name> <operator>+=</operator> <name>dst_linesize</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>c0_data</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>sliceh_start</name> <operator>&gt;&gt;</operator> <name>c0_shift_h</name><operator>)</operator> <operator>*</operator> <name>c0_linesize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>c1_data</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>sliceh_start</name> <operator>&gt;&gt;</operator> <name>c1_shift_h</name><operator>)</operator> <operator>*</operator> <name>c1_linesize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_data</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>offset_y</name> <operator>+</operator> <name>sliceh_start</name><operator>)</operator> <operator>*</operator> <name>dst_linesize</name> <operator>+</operator> <name>offset_x</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mirror</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dst_data</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>sliceh_start</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>sliceh_end</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>src_w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sum</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>c0_data</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <name>c0_shift_w</name></expr>]</index></name> <operator>-</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>c1_data</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <name>c1_shift_w</name></expr>]</index></name> <operator>-</operator> <literal type="number">127</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>target</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mirror</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>target</name> <operator>=</operator> <name>dst_data</name> <operator>-</operator> <name>sum</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>intensity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>target</name> <operator>=</operator> <name>dst_data</name> <operator>+</operator> <name>sum</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>intensity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c0_shift_h</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <name>c0_shift_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c0_data</name> <operator>+=</operator> <name>c0_linesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c1_shift_h</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <name>c1_shift_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c1_data</name> <operator>+=</operator> <name>c1_linesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dst_data</name> <operator>+=</operator> <name>dst_linesize</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROMA_FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>column</name></type></parameter>, <parameter><type><name>mirror</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static int chroma_##name(AVFilterContext *ctx, void *arg, int jobnr, int nb_jobs) { WaveformContext *s = ctx-&gt;priv; ThreadData *td = arg; AVFrame *in = td-&gt;in; AVFrame *out = td-&gt;out; int component = td-&gt;component; int offset_y = td-&gt;offset_y; int offset_x = td-&gt;offset_x; chroma(s, in, out, component, s-&gt;intensity, offset_y, offset_x, column, mirror, jobnr, nb_jobs); return 0; }</cpp:value></cpp:define>



















<macro><name>CHROMA_FUNC</name><argument_list>(<argument>column_mirror</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>CHROMA_FUNC</name><argument_list>(<argument>column</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>CHROMA_FUNC</name><argument_list>(<argument>row_mirror</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>CHROMA_FUNC</name><argument_list>(<argument>row</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>color16</name><parameter_list>(<parameter><decl><type><name>WaveformContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>component</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>intensity</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>offset_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset_x</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mirror</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>plane</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>component</name></expr>]</index></name><operator>.</operator><name>plane</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>limit</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>max</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_h</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_w</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sliceh_start</name> <init>= <expr><ternary><condition><expr><operator>!</operator><name>column</name></expr> ?</condition><then> <expr><operator>(</operator><name>src_h</name> <operator>*</operator> <name>jobnr</name><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sliceh_end</name> <init>= <expr><ternary><condition><expr><operator>!</operator><name>column</name></expr> ?</condition><then> <expr><operator>(</operator><name>src_h</name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr> </then><else>: <expr><name>src_h</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slicew_start</name> <init>= <expr><ternary><condition><expr><name>column</name></expr> ?</condition><then> <expr><operator>(</operator><name>src_w</name> <operator>*</operator> <name>jobnr</name><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slicew_end</name> <init>= <expr><ternary><condition><expr><name>column</name></expr> ?</condition><then> <expr><operator>(</operator><name>src_w</name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr> </then><else>: <expr><name>src_w</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c0_linesize</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[ <expr><name>plane</name> <operator>+</operator> <literal type="number">0</literal></expr> ]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1_linesize</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c2_linesize</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c0_shift_h</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_h</name><index>[ <expr><name>component</name> <operator>+</operator> <literal type="number">0</literal></expr> ]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1_shift_h</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_h</name><index>[<expr><operator>(</operator><name>component</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c2_shift_h</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_h</name><index>[<expr><operator>(</operator><name>component</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>c0_data</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>sliceh_start</name> <operator>&gt;&gt;</operator> <name>c0_shift_h</name><operator>)</operator> <operator>*</operator> <name>c0_linesize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>c1_data</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>sliceh_start</name> <operator>&gt;&gt;</operator> <name>c1_shift_h</name><operator>)</operator> <operator>*</operator> <name>c1_linesize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>c2_data</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>sliceh_start</name> <operator>&gt;&gt;</operator> <name>c2_shift_h</name><operator>)</operator> <operator>*</operator> <name>c2_linesize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d0_linesize</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[ <expr><name>plane</name> <operator>+</operator> <literal type="number">0</literal></expr> ]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d1_linesize</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d2_linesize</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c0_shift_w</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_w</name><index>[ <expr><name>component</name> <operator>+</operator> <literal type="number">0</literal></expr> ]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1_shift_w</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_w</name><index>[<expr><operator>(</operator><name>component</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c2_shift_w</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_w</name><index>[<expr><operator>(</operator><name>component</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>column</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d0_signed_linesize</name> <init>= <expr><name>d0_linesize</name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>mirror</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d1_signed_linesize</name> <init>= <expr><name>d1_linesize</name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>mirror</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d2_signed_linesize</name> <init>= <expr><name>d2_linesize</name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>mirror</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>d0_data</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>offset_y</name> <operator>*</operator> <name>d0_linesize</name> <operator>+</operator> <name>offset_x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>d1_data</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>+</operator> <name>offset_y</name> <operator>*</operator> <name>d1_linesize</name> <operator>+</operator> <name>offset_x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>d2_data</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>+</operator> <name>offset_y</name> <operator>*</operator> <name>d2_linesize</name> <operator>+</operator> <name>offset_x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>d0_bottom_line</name> <init>= <expr><name>d0_data</name> <operator>+</operator> <name>d0_linesize</name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>d0</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>mirror</name></expr> ?</condition><then> <expr><name>d0_bottom_line</name></expr> </then><else>: <expr><name>d0_data</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>d1_bottom_line</name> <init>= <expr><name>d1_data</name> <operator>+</operator> <name>d1_linesize</name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>d1</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>mirror</name></expr> ?</condition><then> <expr><name>d1_bottom_line</name></expr> </then><else>: <expr><name>d1_data</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>d2_bottom_line</name> <init>= <expr><name>d2_data</name> <operator>+</operator> <name>d2_linesize</name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>d2</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>mirror</name></expr> ?</condition><then> <expr><name>d2_bottom_line</name></expr> </then><else>: <expr><name>d2_data</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>src_h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>slicew_start</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>slicew_end</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c0</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>c0_data</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <name>c0_shift_w</name></expr>]</index></name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1</name> <init>= <expr><name><name>c1_data</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <name>c1_shift_w</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c2</name> <init>= <expr><name><name>c2_data</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <name>c2_shift_w</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>d0</name> <operator>+</operator> <name>d0_signed_linesize</name> <operator>*</operator> <name>c0</name> <operator>+</operator> <name>x</name><operator>)</operator> <operator>=</operator> <name>c0</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>d1</name> <operator>+</operator> <name>d1_signed_linesize</name> <operator>*</operator> <name>c0</name> <operator>+</operator> <name>x</name><operator>)</operator> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>d2</name> <operator>+</operator> <name>d2_signed_linesize</name> <operator>*</operator> <name>c0</name> <operator>+</operator> <name>x</name><operator>)</operator> <operator>=</operator> <name>c2</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c0_shift_h</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <name>c0_shift_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c0_data</name> <operator>+=</operator> <name>c0_linesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c1_shift_h</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <name>c1_shift_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c1_data</name> <operator>+=</operator> <name>c1_linesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c2_shift_h</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <name>c2_shift_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c2_data</name> <operator>+=</operator> <name>c2_linesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>d0_data</name> <operator>+=</operator> <name>d0_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d1_data</name> <operator>+=</operator> <name>d1_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d2_data</name> <operator>+=</operator> <name>d2_linesize</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>d0_data</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>offset_y</name> <operator>+</operator> <name>sliceh_start</name><operator>)</operator> <operator>*</operator> <name>d0_linesize</name> <operator>+</operator> <name>offset_x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>d1_data</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>offset_y</name> <operator>+</operator> <name>sliceh_start</name><operator>)</operator> <operator>*</operator> <name>d1_linesize</name> <operator>+</operator> <name>offset_x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>d2_data</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>offset_y</name> <operator>+</operator> <name>sliceh_start</name><operator>)</operator> <operator>*</operator> <name>d2_linesize</name> <operator>+</operator> <name>offset_x</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mirror</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>d0_data</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d1_data</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d2_data</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>sliceh_start</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>sliceh_end</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>src_w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c0</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>c0_data</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <name>c0_shift_w</name></expr>]</index></name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1</name> <init>= <expr><name><name>c1_data</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <name>c1_shift_w</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c2</name> <init>= <expr><name><name>c2_data</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <name>c2_shift_w</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mirror</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>d0_data</name> <operator>-</operator> <name>c0</name><operator>)</operator> <operator>=</operator> <name>c0</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>d1_data</name> <operator>-</operator> <name>c0</name><operator>)</operator> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>d2_data</name> <operator>-</operator> <name>c0</name><operator>)</operator> <operator>=</operator> <name>c2</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>d0_data</name> <operator>+</operator> <name>c0</name><operator>)</operator> <operator>=</operator> <name>c0</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>d1_data</name> <operator>+</operator> <name>c0</name><operator>)</operator> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>d2_data</name> <operator>+</operator> <name>c0</name><operator>)</operator> <operator>=</operator> <name>c2</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c0_shift_h</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <name>c0_shift_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c0_data</name> <operator>+=</operator> <name>c0_linesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c1_shift_h</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <name>c1_shift_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c1_data</name> <operator>+=</operator> <name>c1_linesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c2_shift_h</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <name>c2_shift_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c2_data</name> <operator>+=</operator> <name>c2_linesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>d0_data</name> <operator>+=</operator> <name>d0_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d1_data</name> <operator>+=</operator> <name>d1_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d2_data</name> <operator>+=</operator> <name>d2_linesize</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR16_FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>column</name></type></parameter>, <parameter><type><name>mirror</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static int color16_##name(AVFilterContext *ctx, void *arg, int jobnr, int nb_jobs) { WaveformContext *s = ctx-&gt;priv; ThreadData *td = arg; AVFrame *in = td-&gt;in; AVFrame *out = td-&gt;out; int component = td-&gt;component; int offset_y = td-&gt;offset_y; int offset_x = td-&gt;offset_x; color16(s, in, out, component, s-&gt;intensity, offset_y, offset_x, column, mirror, jobnr, nb_jobs); return 0; }</cpp:value></cpp:define>



















<macro><name>COLOR16_FUNC</name><argument_list>(<argument>column_mirror</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>COLOR16_FUNC</name><argument_list>(<argument>column</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>COLOR16_FUNC</name><argument_list>(<argument>row_mirror</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>COLOR16_FUNC</name><argument_list>(<argument>row</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>color</name><parameter_list>(<parameter><decl><type><name>WaveformContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>component</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>intensity</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>offset_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset_x</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mirror</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>plane</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>component</name></expr>]</index></name><operator>.</operator><name>plane</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_h</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_w</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sliceh_start</name> <init>= <expr><ternary><condition><expr><operator>!</operator><name>column</name></expr> ?</condition><then> <expr><operator>(</operator><name>src_h</name> <operator>*</operator> <name>jobnr</name><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sliceh_end</name> <init>= <expr><ternary><condition><expr><operator>!</operator><name>column</name></expr> ?</condition><then> <expr><operator>(</operator><name>src_h</name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr> </then><else>: <expr><name>src_h</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slicew_start</name> <init>= <expr><ternary><condition><expr><name>column</name></expr> ?</condition><then> <expr><operator>(</operator><name>src_w</name> <operator>*</operator> <name>jobnr</name><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slicew_end</name> <init>= <expr><ternary><condition><expr><name>column</name></expr> ?</condition><then> <expr><operator>(</operator><name>src_w</name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr> </then><else>: <expr><name>src_w</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c0_linesize</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[ <expr><name>plane</name> <operator>+</operator> <literal type="number">0</literal></expr> ]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1_linesize</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c2_linesize</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c0_shift_h</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_h</name><index>[ <expr><name>component</name> <operator>+</operator> <literal type="number">0</literal></expr> ]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1_shift_h</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_h</name><index>[<expr><operator>(</operator><name>component</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c2_shift_h</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_h</name><index>[<expr><operator>(</operator><name>component</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>c0_data</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>sliceh_start</name> <operator>&gt;&gt;</operator> <name>c0_shift_h</name><operator>)</operator> <operator>*</operator> <name>c0_linesize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>c1_data</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>sliceh_start</name> <operator>&gt;&gt;</operator> <name>c1_shift_h</name><operator>)</operator> <operator>*</operator> <name>c1_linesize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>c2_data</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>sliceh_start</name> <operator>&gt;&gt;</operator> <name>c2_shift_h</name><operator>)</operator> <operator>*</operator> <name>c2_linesize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d0_linesize</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[ <expr><name>plane</name> <operator>+</operator> <literal type="number">0</literal></expr> ]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d1_linesize</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d2_linesize</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c0_shift_w</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_w</name><index>[ <expr><name>component</name> <operator>+</operator> <literal type="number">0</literal></expr> ]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1_shift_w</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_w</name><index>[<expr><operator>(</operator><name>component</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c2_shift_w</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_w</name><index>[<expr><operator>(</operator><name>component</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>column</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d0_signed_linesize</name> <init>= <expr><name>d0_linesize</name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>mirror</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d1_signed_linesize</name> <init>= <expr><name>d1_linesize</name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>mirror</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d2_signed_linesize</name> <init>= <expr><name>d2_linesize</name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>mirror</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d0_data</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>offset_y</name> <operator>*</operator> <name>d0_linesize</name> <operator>+</operator> <name>offset_x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d1_data</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>+</operator> <name>offset_y</name> <operator>*</operator> <name>d1_linesize</name> <operator>+</operator> <name>offset_x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d2_data</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>+</operator> <name>offset_y</name> <operator>*</operator> <name>d2_linesize</name> <operator>+</operator> <name>offset_x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>d0_bottom_line</name> <init>= <expr><name>d0_data</name> <operator>+</operator> <name>d0_linesize</name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>d0</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>mirror</name></expr> ?</condition><then> <expr><name>d0_bottom_line</name></expr> </then><else>: <expr><name>d0_data</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>d1_bottom_line</name> <init>= <expr><name>d1_data</name> <operator>+</operator> <name>d1_linesize</name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>d1</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>mirror</name></expr> ?</condition><then> <expr><name>d1_bottom_line</name></expr> </then><else>: <expr><name>d1_data</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>d2_bottom_line</name> <init>= <expr><name>d2_data</name> <operator>+</operator> <name>d2_linesize</name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>d2</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>mirror</name></expr> ?</condition><then> <expr><name>d2_bottom_line</name></expr> </then><else>: <expr><name>d2_data</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>src_h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>slicew_start</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>slicew_end</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c0</name> <init>= <expr><name><name>c0_data</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <name>c0_shift_w</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1</name> <init>= <expr><name><name>c1_data</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <name>c1_shift_w</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c2</name> <init>= <expr><name><name>c2_data</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <name>c2_shift_w</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>d0</name> <operator>+</operator> <name>d0_signed_linesize</name> <operator>*</operator> <name>c0</name> <operator>+</operator> <name>x</name><operator>)</operator> <operator>=</operator> <name>c0</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>d1</name> <operator>+</operator> <name>d1_signed_linesize</name> <operator>*</operator> <name>c0</name> <operator>+</operator> <name>x</name><operator>)</operator> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>d2</name> <operator>+</operator> <name>d2_signed_linesize</name> <operator>*</operator> <name>c0</name> <operator>+</operator> <name>x</name><operator>)</operator> <operator>=</operator> <name>c2</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c0_shift_h</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <name>c0_shift_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c0_data</name> <operator>+=</operator> <name>c0_linesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c1_shift_h</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <name>c1_shift_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c1_data</name> <operator>+=</operator> <name>c1_linesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c2_shift_h</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <name>c2_shift_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c2_data</name> <operator>+=</operator> <name>c2_linesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>d0_data</name> <operator>+=</operator> <name>d0_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d1_data</name> <operator>+=</operator> <name>d1_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d2_data</name> <operator>+=</operator> <name>d2_linesize</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d0_data</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>offset_y</name> <operator>+</operator> <name>sliceh_start</name><operator>)</operator> <operator>*</operator> <name>d0_linesize</name> <operator>+</operator> <name>offset_x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d1_data</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>offset_y</name> <operator>+</operator> <name>sliceh_start</name><operator>)</operator> <operator>*</operator> <name>d1_linesize</name> <operator>+</operator> <name>offset_x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d2_data</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>offset_y</name> <operator>+</operator> <name>sliceh_start</name><operator>)</operator> <operator>*</operator> <name>d2_linesize</name> <operator>+</operator> <name>offset_x</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mirror</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>d0_data</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d1_data</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d2_data</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>sliceh_start</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>sliceh_end</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>src_w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c0</name> <init>= <expr><name><name>c0_data</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <name>c0_shift_w</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1</name> <init>= <expr><name><name>c1_data</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <name>c1_shift_w</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c2</name> <init>= <expr><name><name>c2_data</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <name>c2_shift_w</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mirror</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>d0_data</name> <operator>-</operator> <name>c0</name><operator>)</operator> <operator>=</operator> <name>c0</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>d1_data</name> <operator>-</operator> <name>c0</name><operator>)</operator> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>d2_data</name> <operator>-</operator> <name>c0</name><operator>)</operator> <operator>=</operator> <name>c2</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>d0_data</name> <operator>+</operator> <name>c0</name><operator>)</operator> <operator>=</operator> <name>c0</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>d1_data</name> <operator>+</operator> <name>c0</name><operator>)</operator> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>d2_data</name> <operator>+</operator> <name>c0</name><operator>)</operator> <operator>=</operator> <name>c2</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c0_shift_h</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <name>c0_shift_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c0_data</name> <operator>+=</operator> <name>c0_linesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c1_shift_h</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <name>c1_shift_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c1_data</name> <operator>+=</operator> <name>c1_linesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c2_shift_h</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <name>c2_shift_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c2_data</name> <operator>+=</operator> <name>c2_linesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>d0_data</name> <operator>+=</operator> <name>d0_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d1_data</name> <operator>+=</operator> <name>d1_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d2_data</name> <operator>+=</operator> <name>d2_linesize</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR_FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>column</name></type></parameter>, <parameter><type><name>mirror</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static int color_##name(AVFilterContext *ctx, void *arg, int jobnr, int nb_jobs) { WaveformContext *s = ctx-&gt;priv; ThreadData *td = arg; AVFrame *in = td-&gt;in; AVFrame *out = td-&gt;out; int component = td-&gt;component; int offset_y = td-&gt;offset_y; int offset_x = td-&gt;offset_x; color(s, in, out, component, s-&gt;intensity, offset_y, offset_x, column, mirror, jobnr, nb_jobs); return 0; }</cpp:value></cpp:define>



















<macro><name>COLOR_FUNC</name><argument_list>(<argument>column_mirror</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>COLOR_FUNC</name><argument_list>(<argument>column</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>COLOR_FUNC</name><argument_list>(<argument>row_mirror</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>COLOR_FUNC</name><argument_list>(<argument>row</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>acolor16</name><parameter_list>(<parameter><decl><type><name>WaveformContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>component</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>intensity</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>offset_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset_x</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mirror</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>plane</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>component</name></expr>]</index></name><operator>.</operator><name>plane</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>limit</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>max</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>max</name> <init>= <expr><name>limit</name> <operator>-</operator> <name>intensity</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_h</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_w</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sliceh_start</name> <init>= <expr><ternary><condition><expr><operator>!</operator><name>column</name></expr> ?</condition><then> <expr><operator>(</operator><name>src_h</name> <operator>*</operator> <name>jobnr</name><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sliceh_end</name> <init>= <expr><ternary><condition><expr><operator>!</operator><name>column</name></expr> ?</condition><then> <expr><operator>(</operator><name>src_h</name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr> </then><else>: <expr><name>src_h</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slicew_start</name> <init>= <expr><ternary><condition><expr><name>column</name></expr> ?</condition><then> <expr><operator>(</operator><name>src_w</name> <operator>*</operator> <name>jobnr</name><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slicew_end</name> <init>= <expr><ternary><condition><expr><name>column</name></expr> ?</condition><then> <expr><operator>(</operator><name>src_w</name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr> </then><else>: <expr><name>src_w</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c0_shift_h</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_h</name><index>[ <expr><name>component</name> <operator>+</operator> <literal type="number">0</literal></expr> ]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1_shift_h</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_h</name><index>[<expr><operator>(</operator><name>component</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c2_shift_h</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_h</name><index>[<expr><operator>(</operator><name>component</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c0_linesize</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[ <expr><name>plane</name> <operator>+</operator> <literal type="number">0</literal></expr> ]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1_linesize</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c2_linesize</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>c0_data</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>sliceh_start</name> <operator>&gt;&gt;</operator> <name>c0_shift_h</name><operator>)</operator> <operator>*</operator> <name>c0_linesize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>c1_data</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>sliceh_start</name> <operator>&gt;&gt;</operator> <name>c1_shift_h</name><operator>)</operator> <operator>*</operator> <name>c1_linesize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>c2_data</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>sliceh_start</name> <operator>&gt;&gt;</operator> <name>c2_shift_h</name><operator>)</operator> <operator>*</operator> <name>c2_linesize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d0_linesize</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[ <expr><name>plane</name> <operator>+</operator> <literal type="number">0</literal></expr> ]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d1_linesize</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d2_linesize</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c0_shift_w</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_w</name><index>[ <expr><name>component</name> <operator>+</operator> <literal type="number">0</literal></expr> ]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1_shift_w</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_w</name><index>[<expr><operator>(</operator><name>component</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c2_shift_w</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_w</name><index>[<expr><operator>(</operator><name>component</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>column</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d0_signed_linesize</name> <init>= <expr><name>d0_linesize</name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>mirror</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d1_signed_linesize</name> <init>= <expr><name>d1_linesize</name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>mirror</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d2_signed_linesize</name> <init>= <expr><name>d2_linesize</name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>mirror</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>d0_data</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>offset_y</name> <operator>*</operator> <name>d0_linesize</name> <operator>+</operator> <name>offset_x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>d1_data</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>+</operator> <name>offset_y</name> <operator>*</operator> <name>d1_linesize</name> <operator>+</operator> <name>offset_x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>d2_data</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>+</operator> <name>offset_y</name> <operator>*</operator> <name>d2_linesize</name> <operator>+</operator> <name>offset_x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>d0_bottom_line</name> <init>= <expr><name>d0_data</name> <operator>+</operator> <name>d0_linesize</name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>d0</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>mirror</name></expr> ?</condition><then> <expr><name>d0_bottom_line</name></expr> </then><else>: <expr><name>d0_data</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>d1_bottom_line</name> <init>= <expr><name>d1_data</name> <operator>+</operator> <name>d1_linesize</name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>d1</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>mirror</name></expr> ?</condition><then> <expr><name>d1_bottom_line</name></expr> </then><else>: <expr><name>d1_data</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>d2_bottom_line</name> <init>= <expr><name>d2_data</name> <operator>+</operator> <name>d2_linesize</name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>d2</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>mirror</name></expr> ?</condition><then> <expr><name>d2_bottom_line</name></expr> </then><else>: <expr><name>d2_data</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>src_h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>slicew_start</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>slicew_end</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c0</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>c0_data</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <name>c0_shift_w</name></expr>]</index></name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1</name> <init>= <expr><name><name>c1_data</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <name>c1_shift_w</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c2</name> <init>= <expr><name><name>c2_data</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <name>c2_shift_w</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>update16</name><argument_list>(<argument><expr><name>d0</name> <operator>+</operator> <name>d0_signed_linesize</name> <operator>*</operator> <name>c0</name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>intensity</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>d1</name> <operator>+</operator> <name>d1_signed_linesize</name> <operator>*</operator> <name>c0</name> <operator>+</operator> <name>x</name><operator>)</operator> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>d2</name> <operator>+</operator> <name>d2_signed_linesize</name> <operator>*</operator> <name>c0</name> <operator>+</operator> <name>x</name><operator>)</operator> <operator>=</operator> <name>c2</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c0_shift_h</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <name>c0_shift_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c0_data</name> <operator>+=</operator> <name>c0_linesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c1_shift_h</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <name>c1_shift_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c1_data</name> <operator>+=</operator> <name>c1_linesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c2_shift_h</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <name>c2_shift_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c2_data</name> <operator>+=</operator> <name>c2_linesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>d0_data</name> <operator>+=</operator> <name>d0_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d1_data</name> <operator>+=</operator> <name>d1_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d2_data</name> <operator>+=</operator> <name>d2_linesize</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>d0_data</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>offset_y</name> <operator>+</operator> <name>sliceh_start</name><operator>)</operator> <operator>*</operator> <name>d0_linesize</name> <operator>+</operator> <name>offset_x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>d1_data</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>offset_y</name> <operator>+</operator> <name>sliceh_start</name><operator>)</operator> <operator>*</operator> <name>d1_linesize</name> <operator>+</operator> <name>offset_x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>d2_data</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>offset_y</name> <operator>+</operator> <name>sliceh_start</name><operator>)</operator> <operator>*</operator> <name>d2_linesize</name> <operator>+</operator> <name>offset_x</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mirror</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>d0_data</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d1_data</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d2_data</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>sliceh_start</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>sliceh_end</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>src_w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c0</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>c0_data</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <name>c0_shift_w</name></expr>]</index></name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1</name> <init>= <expr><name><name>c1_data</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <name>c1_shift_w</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c2</name> <init>= <expr><name><name>c2_data</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <name>c2_shift_w</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mirror</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>update16</name><argument_list>(<argument><expr><name>d0_data</name> <operator>-</operator> <name>c0</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>intensity</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>d1_data</name> <operator>-</operator> <name>c0</name><operator>)</operator> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>d2_data</name> <operator>-</operator> <name>c0</name><operator>)</operator> <operator>=</operator> <name>c2</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>update16</name><argument_list>(<argument><expr><name>d0_data</name> <operator>+</operator> <name>c0</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>intensity</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>d1_data</name> <operator>+</operator> <name>c0</name><operator>)</operator> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>d2_data</name> <operator>+</operator> <name>c0</name><operator>)</operator> <operator>=</operator> <name>c2</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c0_shift_h</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <name>c0_shift_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c0_data</name> <operator>+=</operator> <name>c0_linesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c1_shift_h</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <name>c1_shift_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c1_data</name> <operator>+=</operator> <name>c1_linesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c2_shift_h</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <name>c2_shift_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c2_data</name> <operator>+=</operator> <name>c2_linesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>d0_data</name> <operator>+=</operator> <name>d0_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d1_data</name> <operator>+=</operator> <name>d1_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d2_data</name> <operator>+=</operator> <name>d2_linesize</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACOLOR16_FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>column</name></type></parameter>, <parameter><type><name>mirror</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static int acolor16_##name(AVFilterContext *ctx, void *arg, int jobnr, int nb_jobs) { WaveformContext *s = ctx-&gt;priv; ThreadData *td = arg; AVFrame *in = td-&gt;in; AVFrame *out = td-&gt;out; int component = td-&gt;component; int offset_y = td-&gt;offset_y; int offset_x = td-&gt;offset_x; acolor16(s, in, out, component, s-&gt;intensity,offset_y, offset_x, column, mirror, jobnr, nb_jobs); return 0; }</cpp:value></cpp:define>



















<macro><name>ACOLOR16_FUNC</name><argument_list>(<argument>column_mirror</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>ACOLOR16_FUNC</name><argument_list>(<argument>column</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>ACOLOR16_FUNC</name><argument_list>(<argument>row_mirror</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>ACOLOR16_FUNC</name><argument_list>(<argument>row</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>acolor</name><parameter_list>(<parameter><decl><type><name>WaveformContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>component</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>intensity</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>offset_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset_x</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mirror</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>plane</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>component</name></expr>]</index></name><operator>.</operator><name>plane</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_h</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_w</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sliceh_start</name> <init>= <expr><ternary><condition><expr><operator>!</operator><name>column</name></expr> ?</condition><then> <expr><operator>(</operator><name>src_h</name> <operator>*</operator> <name>jobnr</name><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sliceh_end</name> <init>= <expr><ternary><condition><expr><operator>!</operator><name>column</name></expr> ?</condition><then> <expr><operator>(</operator><name>src_h</name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr> </then><else>: <expr><name>src_h</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slicew_start</name> <init>= <expr><ternary><condition><expr><name>column</name></expr> ?</condition><then> <expr><operator>(</operator><name>src_w</name> <operator>*</operator> <name>jobnr</name><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slicew_end</name> <init>= <expr><ternary><condition><expr><name>column</name></expr> ?</condition><then> <expr><operator>(</operator><name>src_w</name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr> </then><else>: <expr><name>src_w</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c0_shift_w</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_w</name><index>[ <expr><name>component</name> <operator>+</operator> <literal type="number">0</literal></expr> ]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1_shift_w</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_w</name><index>[<expr><operator>(</operator><name>component</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c2_shift_w</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_w</name><index>[<expr><operator>(</operator><name>component</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c0_shift_h</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_h</name><index>[ <expr><name>component</name> <operator>+</operator> <literal type="number">0</literal></expr> ]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1_shift_h</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_h</name><index>[<expr><operator>(</operator><name>component</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c2_shift_h</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>shift_h</name><index>[<expr><operator>(</operator><name>component</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c0_linesize</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[ <expr><name>plane</name> <operator>+</operator> <literal type="number">0</literal></expr> ]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1_linesize</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c2_linesize</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>c0_data</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>sliceh_start</name> <operator>&gt;&gt;</operator> <name>c0_shift_h</name><operator>)</operator> <operator>*</operator> <name>c0_linesize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>c1_data</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>sliceh_start</name> <operator>&gt;&gt;</operator> <name>c1_shift_h</name><operator>)</operator> <operator>*</operator> <name>c1_linesize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>c2_data</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>sliceh_start</name> <operator>&gt;&gt;</operator> <name>c2_shift_h</name><operator>)</operator> <operator>*</operator> <name>c2_linesize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d0_linesize</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[ <expr><name>plane</name> <operator>+</operator> <literal type="number">0</literal></expr> ]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d1_linesize</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d2_linesize</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>max</name> <init>= <expr><literal type="number">255</literal> <operator>-</operator> <name>intensity</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>column</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d0_signed_linesize</name> <init>= <expr><name>d0_linesize</name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>mirror</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d1_signed_linesize</name> <init>= <expr><name>d1_linesize</name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>mirror</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d2_signed_linesize</name> <init>= <expr><name>d2_linesize</name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>mirror</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d0_data</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>offset_y</name> <operator>*</operator> <name>d0_linesize</name> <operator>+</operator> <name>offset_x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d1_data</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>+</operator> <name>offset_y</name> <operator>*</operator> <name>d1_linesize</name> <operator>+</operator> <name>offset_x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d2_data</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>+</operator> <name>offset_y</name> <operator>*</operator> <name>d2_linesize</name> <operator>+</operator> <name>offset_x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>d0_bottom_line</name> <init>= <expr><name>d0_data</name> <operator>+</operator> <name>d0_linesize</name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>d0</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>mirror</name></expr> ?</condition><then> <expr><name>d0_bottom_line</name></expr> </then><else>: <expr><name>d0_data</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>d1_bottom_line</name> <init>= <expr><name>d1_data</name> <operator>+</operator> <name>d1_linesize</name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>d1</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>mirror</name></expr> ?</condition><then> <expr><name>d1_bottom_line</name></expr> </then><else>: <expr><name>d1_data</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>d2_bottom_line</name> <init>= <expr><name>d2_data</name> <operator>+</operator> <name>d2_linesize</name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>d2</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>mirror</name></expr> ?</condition><then> <expr><name>d2_bottom_line</name></expr> </then><else>: <expr><name>d2_data</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>src_h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>slicew_start</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>slicew_end</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c0</name> <init>= <expr><name><name>c0_data</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <name>c0_shift_w</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1</name> <init>= <expr><name><name>c1_data</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <name>c1_shift_w</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c2</name> <init>= <expr><name><name>c2_data</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <name>c2_shift_w</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>d0</name> <operator>+</operator> <name>d0_signed_linesize</name> <operator>*</operator> <name>c0</name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>intensity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>d1</name> <operator>+</operator> <name>d1_signed_linesize</name> <operator>*</operator> <name>c0</name> <operator>+</operator> <name>x</name><operator>)</operator> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>d2</name> <operator>+</operator> <name>d2_signed_linesize</name> <operator>*</operator> <name>c0</name> <operator>+</operator> <name>x</name><operator>)</operator> <operator>=</operator> <name>c2</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c0_shift_h</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <name>c0_shift_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c0_data</name> <operator>+=</operator> <name>c0_linesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c1_shift_h</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <name>c1_shift_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c1_data</name> <operator>+=</operator> <name>c1_linesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c2_shift_h</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <name>c2_shift_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c2_data</name> <operator>+=</operator> <name>c2_linesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>d0_data</name> <operator>+=</operator> <name>d0_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d1_data</name> <operator>+=</operator> <name>d1_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d2_data</name> <operator>+=</operator> <name>d2_linesize</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d0_data</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>offset_y</name> <operator>+</operator> <name>sliceh_start</name><operator>)</operator> <operator>*</operator> <name>d0_linesize</name> <operator>+</operator> <name>offset_x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d1_data</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>offset_y</name> <operator>+</operator> <name>sliceh_start</name><operator>)</operator> <operator>*</operator> <name>d1_linesize</name> <operator>+</operator> <name>offset_x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d2_data</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>offset_y</name> <operator>+</operator> <name>sliceh_start</name><operator>)</operator> <operator>*</operator> <name>d2_linesize</name> <operator>+</operator> <name>offset_x</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mirror</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>d0_data</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d1_data</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d2_data</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>sliceh_start</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>sliceh_end</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>src_w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c0</name> <init>= <expr><name><name>c0_data</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <name>c0_shift_w</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1</name> <init>= <expr><name><name>c1_data</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <name>c1_shift_w</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c2</name> <init>= <expr><name><name>c2_data</name><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <name>c2_shift_w</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mirror</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>d0_data</name> <operator>-</operator> <name>c0</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>intensity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>d1_data</name> <operator>-</operator> <name>c0</name><operator>)</operator> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>d2_data</name> <operator>-</operator> <name>c0</name><operator>)</operator> <operator>=</operator> <name>c2</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>d0_data</name> <operator>+</operator> <name>c0</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>intensity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>d1_data</name> <operator>+</operator> <name>c0</name><operator>)</operator> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>d2_data</name> <operator>+</operator> <name>c0</name><operator>)</operator> <operator>=</operator> <name>c2</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c0_shift_h</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <name>c0_shift_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c0_data</name> <operator>+=</operator> <name>c0_linesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c1_shift_h</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <name>c1_shift_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c1_data</name> <operator>+=</operator> <name>c1_linesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c2_shift_h</name> <operator>||</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <name>c2_shift_h</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c2_data</name> <operator>+=</operator> <name>c2_linesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>d0_data</name> <operator>+=</operator> <name>d0_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d1_data</name> <operator>+=</operator> <name>d1_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d2_data</name> <operator>+=</operator> <name>d2_linesize</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACOLOR_FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>column</name></type></parameter>, <parameter><type><name>mirror</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static int acolor_##name(AVFilterContext *ctx, void *arg, int jobnr, int nb_jobs) { WaveformContext *s = ctx-&gt;priv; ThreadData *td = arg; AVFrame *in = td-&gt;in; AVFrame *out = td-&gt;out; int component = td-&gt;component; int offset_y = td-&gt;offset_y; int offset_x = td-&gt;offset_x; acolor(s, in, out, component, s-&gt;intensity, offset_y, offset_x, column, mirror, jobnr, nb_jobs); return 0; }</cpp:value></cpp:define>



















<macro><name>ACOLOR_FUNC</name><argument_list>(<argument>column_mirror</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>ACOLOR_FUNC</name><argument_list>(<argument>column</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>ACOLOR_FUNC</name><argument_list>(<argument>row_mirror</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>ACOLOR_FUNC</name><argument_list>(<argument>row</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>black_yuva_color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>black_gbrp_color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GraticuleLines</name></type> <name><name>aflat_digital8</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"16"</literal></expr>, <expr><literal type="number">16</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"16"</literal></expr>, <expr><literal type="number">16</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"16"</literal></expr>, <expr><literal type="number">16</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">0</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"128"</literal></expr>, <expr><literal type="number">128</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"128"</literal></expr>, <expr><literal type="number">128</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"128"</literal></expr>, <expr><literal type="number">128</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"128"</literal></expr>, <expr><literal type="number">128</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"235"</literal></expr>, <expr><literal type="number">235</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"240"</literal></expr>, <expr><literal type="number">240</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"240"</literal></expr>, <expr><literal type="number">240</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"255"</literal></expr>, <expr><literal type="number">255</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GraticuleLines</name></type> <name><name>aflat_digital9</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"32"</literal></expr>, <expr><literal type="number">32</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"32"</literal></expr>, <expr><literal type="number">32</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"32"</literal></expr>, <expr><literal type="number">32</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">0</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"256"</literal></expr>, <expr><literal type="number">256</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"256"</literal></expr>, <expr><literal type="number">256</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"256"</literal></expr>, <expr><literal type="number">256</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"256"</literal></expr>, <expr><literal type="number">256</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"470"</literal></expr>, <expr><literal type="number">470</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"480"</literal></expr>, <expr><literal type="number">480</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"480"</literal></expr>, <expr><literal type="number">480</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"511"</literal></expr>, <expr><literal type="number">511</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GraticuleLines</name></type> <name><name>aflat_digital10</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"64"</literal></expr>, <expr><literal type="number">64</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"64"</literal></expr>, <expr><literal type="number">64</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"64"</literal></expr>, <expr><literal type="number">64</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">0</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"512"</literal></expr>, <expr><literal type="number">512</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"512"</literal></expr>, <expr><literal type="number">512</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"512"</literal></expr>, <expr><literal type="number">512</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"512"</literal></expr>, <expr><literal type="number">512</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"940"</literal></expr>, <expr><literal type="number">940</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"960"</literal></expr>, <expr><literal type="number">960</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"960"</literal></expr>, <expr><literal type="number">960</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"1023"</literal></expr>, <expr><literal type="number">1023</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GraticuleLines</name></type> <name><name>aflat_digital12</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"256"</literal></expr>, <expr><literal type="number">256</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"256"</literal></expr>, <expr><literal type="number">256</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"256"</literal></expr>, <expr><literal type="number">256</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">0</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"2048"</literal></expr>, <expr><literal type="number">2048</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"2048"</literal></expr>, <expr><literal type="number">2048</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"2048"</literal></expr>, <expr><literal type="number">2048</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"2048"</literal></expr>, <expr><literal type="number">2048</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"3760"</literal></expr>, <expr><literal type="number">3760</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"3840"</literal></expr>, <expr><literal type="number">3840</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"3840"</literal></expr>, <expr><literal type="number">3840</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"4095"</literal></expr>, <expr><literal type="number">4095</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GraticuleLines</name></type> <name><name>aflat_millivolts8</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">16</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">16</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">16</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">0</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">71</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">72</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">72</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">64</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">126</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">128</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">128</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">128</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">180</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">184</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">184</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">192</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">235</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">240</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">240</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">255</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GraticuleLines</name></type> <name><name>aflat_millivolts9</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">32</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">32</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">32</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">0</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">142</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">144</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">144</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">128</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">251</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">256</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">256</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">256</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">361</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">368</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">368</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">384</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">470</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">480</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">480</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">511</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GraticuleLines</name></type> <name><name>aflat_millivolts10</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">64</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">64</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">64</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">0</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">283</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">288</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">288</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">256</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">502</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">512</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">512</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">512</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">721</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">736</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">736</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">768</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">940</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">960</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">960</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">1023</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GraticuleLines</name></type> <name><name>aflat_millivolts12</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">256</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">256</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">256</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">0</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">1132</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">1152</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">1152</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">1024</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">2008</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">2048</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">2048</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">2048</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">2884</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">2944</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">2944</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">3072</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">3760</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">3840</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">3840</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">4095</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GraticuleLines</name></type> <name><name>aflat_ire8</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"-25"</literal></expr>, <expr><operator>-</operator><literal type="number">39</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"-25"</literal></expr>, <expr><operator>-</operator><literal type="number">40</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"-25"</literal></expr>, <expr><operator>-</operator><literal type="number">40</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"-25"</literal></expr>, <expr><operator>-</operator><literal type="number">64</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">16</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">16</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">16</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">0</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">71</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">72</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">72</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">64</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">126</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">128</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">128</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">128</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">180</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">184</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">184</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">192</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">235</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">240</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">240</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">256</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"125"</literal></expr>, <expr><literal type="number">290</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"125"</literal></expr>, <expr><literal type="number">296</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"125"</literal></expr>, <expr><literal type="number">296</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"125"</literal></expr>, <expr><literal type="number">320</literal><operator>+</operator><literal type="number">128</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GraticuleLines</name></type> <name><name>aflat_ire9</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"-25"</literal></expr>, <expr><operator>-</operator><literal type="number">78</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"-25"</literal></expr>, <expr><operator>-</operator><literal type="number">80</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"-25"</literal></expr>, <expr><operator>-</operator><literal type="number">80</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"-25"</literal></expr>,<expr><operator>-</operator><literal type="number">128</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">32</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">32</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">32</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">0</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">142</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">144</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">144</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">128</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">251</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">256</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">256</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">256</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">361</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">368</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">368</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">384</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">470</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">480</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">480</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">512</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"125"</literal></expr>, <expr><literal type="number">580</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"125"</literal></expr>, <expr><literal type="number">592</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"125"</literal></expr>, <expr><literal type="number">592</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"125"</literal></expr>, <expr><literal type="number">640</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GraticuleLines</name></type> <name><name>aflat_ire10</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"-25"</literal></expr>,<expr><operator>-</operator><literal type="number">156</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"-25"</literal></expr>,<expr><operator>-</operator><literal type="number">160</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"-25"</literal></expr>,<expr><operator>-</operator><literal type="number">160</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"-25"</literal></expr>, <expr><operator>-</operator><literal type="number">256</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">64</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">64</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">64</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">0</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">283</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">288</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">288</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">256</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">502</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">512</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">512</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">512</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">721</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">736</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">736</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">768</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">940</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">960</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">960</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">1024</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"125"</literal></expr>,<expr><literal type="number">1160</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"125"</literal></expr>,<expr><literal type="number">1184</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"125"</literal></expr>,<expr><literal type="number">1184</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"125"</literal></expr>, <expr><literal type="number">1280</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GraticuleLines</name></type> <name><name>aflat_ire12</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"-25"</literal></expr>, <expr><operator>-</operator><literal type="number">624</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"-25"</literal></expr>, <expr><operator>-</operator><literal type="number">640</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"-25"</literal></expr>, <expr><operator>-</operator><literal type="number">640</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"-25"</literal></expr>,<expr><operator>-</operator><literal type="number">1024</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">256</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">256</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">256</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">0</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">1132</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">1152</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">1152</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">1024</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">2008</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">2048</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">2048</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">2048</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">2884</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">2944</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">2944</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">3072</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">3760</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">3840</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">3840</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">4096</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"125"</literal></expr>, <expr><literal type="number">4640</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"125"</literal></expr>, <expr><literal type="number">4736</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"125"</literal></expr>, <expr><literal type="number">4736</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"125"</literal></expr>, <expr><literal type="number">5120</literal><operator>+</operator><literal type="number">2048</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GraticuleLines</name></type> <name><name>flat_digital8</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"16"</literal></expr>, <expr><literal type="number">16</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"16"</literal></expr>, <expr><literal type="number">16</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"16"</literal></expr>, <expr><literal type="number">16</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">0</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"128"</literal></expr>, <expr><literal type="number">128</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"128"</literal></expr>, <expr><literal type="number">128</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"128"</literal></expr>, <expr><literal type="number">128</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"128"</literal></expr>, <expr><literal type="number">128</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"235"</literal></expr>, <expr><literal type="number">235</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"240"</literal></expr>, <expr><literal type="number">240</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"240"</literal></expr>, <expr><literal type="number">240</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"255"</literal></expr>, <expr><literal type="number">255</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GraticuleLines</name></type> <name><name>flat_digital9</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"32"</literal></expr>, <expr><literal type="number">32</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"32"</literal></expr>, <expr><literal type="number">32</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"32"</literal></expr>, <expr><literal type="number">32</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">0</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"256"</literal></expr>, <expr><literal type="number">256</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"256"</literal></expr>, <expr><literal type="number">256</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"256"</literal></expr>, <expr><literal type="number">256</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"256"</literal></expr>, <expr><literal type="number">256</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"470"</literal></expr>, <expr><literal type="number">470</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"480"</literal></expr>, <expr><literal type="number">480</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"480"</literal></expr>, <expr><literal type="number">480</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"511"</literal></expr>, <expr><literal type="number">511</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GraticuleLines</name></type> <name><name>flat_digital10</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"64"</literal></expr>, <expr><literal type="number">64</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"64"</literal></expr>, <expr><literal type="number">64</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"64"</literal></expr>, <expr><literal type="number">64</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">0</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"512"</literal></expr>, <expr><literal type="number">512</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"512"</literal></expr>, <expr><literal type="number">512</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"512"</literal></expr>, <expr><literal type="number">512</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"512"</literal></expr>, <expr><literal type="number">512</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"940"</literal></expr>, <expr><literal type="number">940</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"960"</literal></expr>, <expr><literal type="number">960</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"960"</literal></expr>, <expr><literal type="number">960</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"1023"</literal></expr>, <expr><literal type="number">1023</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GraticuleLines</name></type> <name><name>flat_digital12</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"256"</literal></expr>, <expr><literal type="number">256</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"256"</literal></expr>, <expr><literal type="number">256</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"256"</literal></expr>, <expr><literal type="number">256</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">0</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"2048"</literal></expr>, <expr><literal type="number">2048</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"2048"</literal></expr>, <expr><literal type="number">2048</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"2048"</literal></expr>, <expr><literal type="number">2048</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"2048"</literal></expr>, <expr><literal type="number">2048</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"3760"</literal></expr>, <expr><literal type="number">3760</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"3840"</literal></expr>, <expr><literal type="number">3840</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"3840"</literal></expr>, <expr><literal type="number">3840</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"4095"</literal></expr>, <expr><literal type="number">4095</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GraticuleLines</name></type> <name><name>flat_millivolts8</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">16</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">16</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">16</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">0</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">71</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">72</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">72</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">64</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">126</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">128</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">128</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">128</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">180</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">184</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">184</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">192</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">235</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">240</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">240</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">255</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GraticuleLines</name></type> <name><name>flat_millivolts9</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">32</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">32</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">32</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">0</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">142</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">144</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">144</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">128</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">251</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">256</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">256</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">256</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">361</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">368</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">368</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">384</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">470</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">480</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">480</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">511</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GraticuleLines</name></type> <name><name>flat_millivolts10</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">64</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">64</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">64</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">0</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">283</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">288</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">288</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">256</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">502</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">512</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">512</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">512</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">721</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">736</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">736</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">768</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">940</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">960</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">960</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">1023</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GraticuleLines</name></type> <name><name>flat_millivolts12</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">256</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">256</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">256</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">0</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">1132</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">1152</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">1152</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">1024</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">2008</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">2048</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">2048</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">2048</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">2884</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">2944</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">2944</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">3072</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">3760</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">3840</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">3840</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">4095</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GraticuleLines</name></type> <name><name>flat_ire8</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"-25"</literal></expr>, <expr><operator>-</operator><literal type="number">39</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"-25"</literal></expr>, <expr><operator>-</operator><literal type="number">40</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"-25"</literal></expr>, <expr><operator>-</operator><literal type="number">40</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"-25"</literal></expr>, <expr><operator>-</operator><literal type="number">64</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">16</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">16</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">16</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">0</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">71</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">72</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">72</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">64</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">126</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">128</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">128</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">128</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">180</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">184</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">184</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">192</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">235</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">240</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">240</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">256</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"125"</literal></expr>, <expr><literal type="number">290</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"125"</literal></expr>, <expr><literal type="number">296</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"125"</literal></expr>, <expr><literal type="number">296</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"125"</literal></expr>, <expr><literal type="number">320</literal><operator>+</operator><literal type="number">256</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GraticuleLines</name></type> <name><name>flat_ire9</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"-25"</literal></expr>, <expr><operator>-</operator><literal type="number">78</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"-25"</literal></expr>, <expr><operator>-</operator><literal type="number">80</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"-25"</literal></expr>, <expr><operator>-</operator><literal type="number">80</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"-25"</literal></expr>,<expr><operator>-</operator><literal type="number">128</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">32</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">32</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">32</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">0</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">142</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">144</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">144</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">128</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">251</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">256</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">256</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">256</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">361</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">368</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">368</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">384</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">470</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">480</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">480</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">512</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"125"</literal></expr>, <expr><literal type="number">580</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"125"</literal></expr>, <expr><literal type="number">592</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"125"</literal></expr>, <expr><literal type="number">592</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"125"</literal></expr>, <expr><literal type="number">640</literal><operator>+</operator><literal type="number">512</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GraticuleLines</name></type> <name><name>flat_ire10</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"-25"</literal></expr>,<expr><operator>-</operator><literal type="number">156</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"-25"</literal></expr>,<expr><operator>-</operator><literal type="number">160</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"-25"</literal></expr>,<expr><operator>-</operator><literal type="number">160</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"-25"</literal></expr>, <expr><operator>-</operator><literal type="number">256</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">64</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">64</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">64</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">0</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">283</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">288</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">288</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">256</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">502</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">512</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">512</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">512</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">721</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">736</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">736</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">768</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">940</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">960</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">960</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">1024</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"125"</literal></expr>,<expr><literal type="number">1160</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"125"</literal></expr>,<expr><literal type="number">1184</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"125"</literal></expr>,<expr><literal type="number">1184</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"125"</literal></expr>, <expr><literal type="number">1280</literal><operator>+</operator><literal type="number">1024</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GraticuleLines</name></type> <name><name>flat_ire12</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"-25"</literal></expr>, <expr><operator>-</operator><literal type="number">624</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"-25"</literal></expr>, <expr><operator>-</operator><literal type="number">640</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"-25"</literal></expr>, <expr><operator>-</operator><literal type="number">640</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"-25"</literal></expr>,<expr><operator>-</operator><literal type="number">1024</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">256</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">256</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">256</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">0</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">1132</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">1152</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">1152</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">1024</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">2008</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">2048</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">2048</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">2048</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">2884</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">2944</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">2944</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">3072</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">3760</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">3840</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">3840</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">4096</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"125"</literal></expr>, <expr><literal type="number">4640</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"125"</literal></expr>, <expr><literal type="number">4736</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"125"</literal></expr>, <expr><literal type="number">4736</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"125"</literal></expr>, <expr><literal type="number">5120</literal><operator>+</operator><literal type="number">4096</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GraticuleLines</name></type> <name><name>digital8</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"16"</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"16"</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"16"</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"128"</literal></expr>, <expr><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"128"</literal></expr>, <expr><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"128"</literal></expr>, <expr><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"128"</literal></expr>, <expr><literal type="number">128</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"235"</literal></expr>, <expr><literal type="number">235</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"240"</literal></expr>, <expr><literal type="number">240</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"240"</literal></expr>, <expr><literal type="number">240</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"255"</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GraticuleLines</name></type> <name><name>digital9</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"32"</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"32"</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"32"</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"256"</literal></expr>, <expr><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"256"</literal></expr>, <expr><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"256"</literal></expr>, <expr><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"256"</literal></expr>, <expr><literal type="number">256</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"470"</literal></expr>, <expr><literal type="number">470</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"480"</literal></expr>, <expr><literal type="number">480</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"480"</literal></expr>, <expr><literal type="number">480</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"511"</literal></expr>, <expr><literal type="number">511</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GraticuleLines</name></type> <name><name>digital10</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"64"</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"64"</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"64"</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"512"</literal></expr>, <expr><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"512"</literal></expr>, <expr><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"512"</literal></expr>, <expr><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"512"</literal></expr>, <expr><literal type="number">512</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"940"</literal></expr>, <expr><literal type="number">940</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"960"</literal></expr>, <expr><literal type="number">960</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"960"</literal></expr>, <expr><literal type="number">960</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"1023"</literal></expr>, <expr><literal type="number">1023</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GraticuleLines</name></type> <name><name>digital12</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"256"</literal></expr>, <expr><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"256"</literal></expr>, <expr><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"256"</literal></expr>, <expr><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"2048"</literal></expr>, <expr><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"2048"</literal></expr>, <expr><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"2048"</literal></expr>, <expr><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"2048"</literal></expr>, <expr><literal type="number">2048</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"3760"</literal></expr>, <expr><literal type="number">3760</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"3840"</literal></expr>, <expr><literal type="number">3840</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"3840"</literal></expr>, <expr><literal type="number">3840</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"4095"</literal></expr>, <expr><literal type="number">4095</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GraticuleLines</name></type> <name><name>millivolts8</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">71</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">72</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">72</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">126</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">128</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">180</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">184</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">184</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">192</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">235</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">240</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">240</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GraticuleLines</name></type> <name><name>millivolts9</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">142</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">144</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">144</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">128</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">251</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">256</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">361</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">368</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">368</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">384</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">470</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">480</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">480</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">511</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GraticuleLines</name></type> <name><name>millivolts10</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">283</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">288</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">288</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">256</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">502</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">512</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">721</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">736</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">736</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">768</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">940</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">960</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">960</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">1023</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GraticuleLines</name></type> <name><name>millivolts12</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">1132</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">1152</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">1152</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"175"</literal></expr>, <expr><literal type="number">1024</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">2008</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"350"</literal></expr>, <expr><literal type="number">2048</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">2884</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">2944</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">2944</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"525"</literal></expr>, <expr><literal type="number">3072</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">3760</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">3840</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">3840</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"700"</literal></expr>, <expr><literal type="number">4095</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GraticuleLines</name></type> <name><name>ire8</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">71</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">72</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">72</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">126</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">128</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">180</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">184</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">184</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">192</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">235</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">240</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">240</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GraticuleLines</name></type> <name><name>ire9</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">142</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">144</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">144</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">128</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">251</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">256</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">361</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">368</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">368</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">384</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">470</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">480</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">480</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">511</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GraticuleLines</name></type> <name><name>ire10</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">283</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">288</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">288</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">256</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">502</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">512</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">721</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">736</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">736</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">768</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">940</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">960</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">960</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">1023</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GraticuleLines</name></type> <name><name>ire12</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">1132</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">1152</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">1152</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"25"</literal></expr>, <expr><literal type="number">1024</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">2008</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">2048</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">2884</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">2944</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">2944</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"75"</literal></expr>, <expr><literal type="number">3072</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">3760</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">3840</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">3840</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">4095</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GraticuleLines</name></type> <name><name>chroma_digital8</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">50</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">50</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">50</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"50"</literal></expr>, <expr><literal type="number">50</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">100</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">100</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">100</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">100</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"150"</literal></expr>, <expr><literal type="number">150</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"150"</literal></expr>, <expr><literal type="number">150</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"150"</literal></expr>, <expr><literal type="number">150</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"150"</literal></expr>, <expr><literal type="number">150</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"200"</literal></expr>, <expr><literal type="number">200</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"200"</literal></expr>, <expr><literal type="number">200</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"200"</literal></expr>, <expr><literal type="number">200</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"200"</literal></expr>, <expr><literal type="number">200</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"255"</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"255"</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"255"</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"255"</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GraticuleLines</name></type> <name><name>chroma_digital9</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">100</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">100</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">100</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"100"</literal></expr>, <expr><literal type="number">100</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"200"</literal></expr>, <expr><literal type="number">200</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"200"</literal></expr>, <expr><literal type="number">200</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"200"</literal></expr>, <expr><literal type="number">200</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"200"</literal></expr>, <expr><literal type="number">200</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"300"</literal></expr>, <expr><literal type="number">300</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"300"</literal></expr>, <expr><literal type="number">300</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"300"</literal></expr>, <expr><literal type="number">300</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"300"</literal></expr>, <expr><literal type="number">300</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"400"</literal></expr>, <expr><literal type="number">400</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"400"</literal></expr>, <expr><literal type="number">400</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"400"</literal></expr>, <expr><literal type="number">400</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"400"</literal></expr>, <expr><literal type="number">400</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"500"</literal></expr>, <expr><literal type="number">500</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"500"</literal></expr>, <expr><literal type="number">500</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"500"</literal></expr>, <expr><literal type="number">500</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"500"</literal></expr>, <expr><literal type="number">500</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GraticuleLines</name></type> <name><name>chroma_digital10</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"200"</literal></expr>, <expr><literal type="number">200</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"200"</literal></expr>, <expr><literal type="number">200</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"200"</literal></expr>, <expr><literal type="number">200</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"200"</literal></expr>, <expr><literal type="number">200</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"400"</literal></expr>, <expr><literal type="number">400</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"400"</literal></expr>, <expr><literal type="number">400</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"400"</literal></expr>, <expr><literal type="number">400</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"400"</literal></expr>, <expr><literal type="number">400</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"600"</literal></expr>, <expr><literal type="number">600</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"600"</literal></expr>, <expr><literal type="number">600</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"600"</literal></expr>, <expr><literal type="number">600</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"600"</literal></expr>, <expr><literal type="number">600</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"800"</literal></expr>, <expr><literal type="number">800</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"800"</literal></expr>, <expr><literal type="number">800</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"800"</literal></expr>, <expr><literal type="number">800</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"800"</literal></expr>, <expr><literal type="number">800</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{<expr><literal type="string">"1000"</literal></expr>,<expr><literal type="number">1000</literal></expr> }</block></expr>, <expr><block>{<expr><literal type="string">"1000"</literal></expr>,<expr><literal type="number">1000</literal></expr> }</block></expr>, <expr><block>{<expr><literal type="string">"1000"</literal></expr>,<expr><literal type="number">1000</literal></expr> }</block></expr>, <expr><block>{<expr><literal type="string">"1000"</literal></expr>,<expr><literal type="number">1000</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GraticuleLines</name></type> <name><name>chroma_digital12</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"800"</literal></expr>, <expr><literal type="number">800</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"800"</literal></expr>, <expr><literal type="number">800</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"800"</literal></expr>, <expr><literal type="number">800</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"800"</literal></expr>, <expr><literal type="number">800</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"1600"</literal></expr>, <expr><literal type="number">1600</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"1600"</literal></expr>, <expr><literal type="number">1600</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"1600"</literal></expr>, <expr><literal type="number">1600</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"1600"</literal></expr>, <expr><literal type="number">1600</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"2400"</literal></expr>, <expr><literal type="number">2400</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"2400"</literal></expr>, <expr><literal type="number">2400</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"2400"</literal></expr>, <expr><literal type="number">2400</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"2400"</literal></expr>, <expr><literal type="number">2400</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"3200"</literal></expr>, <expr><literal type="number">3200</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"3200"</literal></expr>, <expr><literal type="number">3200</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"3200"</literal></expr>, <expr><literal type="number">3200</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"3200"</literal></expr>, <expr><literal type="number">3200</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="string">"4000"</literal></expr>, <expr><literal type="number">4000</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"4000"</literal></expr>, <expr><literal type="number">4000</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"4000"</literal></expr>, <expr><literal type="number">4000</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="string">"4000"</literal></expr>, <expr><literal type="number">4000</literal></expr> }</block></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blend_vline</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linesize</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>step</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <name>step</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>v</name> <operator>*</operator> <name>o1</name> <operator>+</operator> <name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>o2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>linesize</name> <operator>*</operator> <name>step</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blend_vline16</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ddst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linesize</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>step</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>ddst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <name>step</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>v</name> <operator>*</operator> <name>o1</name> <operator>+</operator> <name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>o2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><name>linesize</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name>step</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blend_hline</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unused</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>step</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <name>step</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>v</name> <operator>*</operator> <name>o1</name> <operator>+</operator> <name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name>o2</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blend_hline16</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ddst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unused</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>step</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>ddst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <name>step</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>v</name> <operator>*</operator> <name>o1</name> <operator>+</operator> <name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name>o2</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_htext</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mult</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>font</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>font_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>plane</name></decl>;</decl_stmt>

<expr_stmt><expr><name>font</name> <operator>=</operator> <name>avpriv_cga_font</name></expr><operator>,</operator> <expr><name>font_height</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>char_y</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>color</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>char_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>char_y</name> <operator>&lt;</operator> <name>font_height</name></expr>;</condition> <incr><expr><name>char_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>mask</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</init> <condition><expr><name>mask</name></expr>;</condition> <incr><expr><name>mask</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>font</name><index>[<expr><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>font_height</name> <operator>+</operator> <name>char_y</name></expr>]</index></name> <operator>&amp;</operator> <name>mask</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>o2</name> <operator>+</operator> <name>v</name> <operator>*</operator> <name>o1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_htext16</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mult</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>font</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>font_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>plane</name></decl>;</decl_stmt>

<expr_stmt><expr><name>font</name> <operator>=</operator> <name>avpriv_cga_font</name></expr><operator>,</operator> <expr><name>font_height</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>char_y</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>color</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>*</operator> <name>mult</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>char_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>char_y</name> <operator>&lt;</operator> <name>font_height</name></expr>;</condition> <incr><expr><name>char_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>mask</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</init> <condition><expr><name>mask</name></expr>;</condition> <incr><expr><name>mask</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>font</name><index>[<expr><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>font_height</name> <operator>+</operator> <name>char_y</name></expr>]</index></name> <operator>&amp;</operator> <name>mask</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>o2</name> <operator>+</operator> <name>v</name> <operator>*</operator> <name>o1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_vtext</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mult</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>font</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>font_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>plane</name></decl>;</decl_stmt>

<expr_stmt><expr><name>font</name> <operator>=</operator> <name>avpriv_cga_font</name></expr><operator>,</operator> <expr><name>font_height</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>char_y</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>color</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>char_y</name> <operator>=</operator> <name>font_height</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>char_y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>char_y</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>y</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">10</literal><operator>)</operator> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>mask</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</init> <condition><expr><name>mask</name></expr>;</condition> <incr><expr><name>mask</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>font</name><index>[<expr><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>font_height</name> <operator>+</operator> <name>font_height</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>char_y</name></expr>]</index></name> <operator>&amp;</operator> <name>mask</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>char_y</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><name>char_y</name></expr>]</index></name> <operator>*</operator> <name>o2</name> <operator>+</operator> <name>v</name> <operator>*</operator> <name>o1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_vtext16</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mult</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>font</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>font_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>plane</name></decl>;</decl_stmt>

<expr_stmt><expr><name>font</name> <operator>=</operator> <name>avpriv_cga_font</name></expr><operator>,</operator> <expr><name>font_height</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>char_y</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>color</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>*</operator> <name>mult</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>char_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>char_y</name> <operator>&lt;</operator> <name>font_height</name></expr>;</condition> <incr><expr><name>char_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>y</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">10</literal><operator>)</operator> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>mask</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</init> <condition><expr><name>mask</name></expr>;</condition> <incr><expr><name>mask</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>font</name><index>[<expr><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>font_height</name> <operator>+</operator> <name>font_height</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>char_y</name></expr>]</index></name> <operator>&amp;</operator> <name>mask</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>char_y</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><name>char_y</name></expr>]</index></name> <operator>*</operator> <name>o2</name> <operator>+</operator> <name>v</name> <operator>*</operator> <name>o1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>iblend_vline</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linesize</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>step</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <name>step</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>-</operator> <name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>o1</name> <operator>+</operator> <name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>o2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>linesize</name> <operator>*</operator> <name>step</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>iblend_vline16</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ddst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linesize</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>step</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>ddst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <name>step</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>-</operator> <name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>o1</name> <operator>+</operator> <name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>o2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><name>linesize</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name>step</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>iblend_hline</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unused</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>step</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <name>step</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>-</operator> <name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>o1</name> <operator>+</operator> <name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name>o2</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>iblend_hline16</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ddst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unused</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>step</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>ddst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <name>step</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>-</operator> <name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>o1</name> <operator>+</operator> <name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name>o2</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>idraw_htext</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mult</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>font</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>font_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>plane</name></decl>;</decl_stmt>

<expr_stmt><expr><name>font</name> <operator>=</operator> <name>avpriv_cga_font</name></expr><operator>,</operator> <expr><name>font_height</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>char_y</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>color</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>char_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>char_y</name> <operator>&lt;</operator> <name>font_height</name></expr>;</condition> <incr><expr><name>char_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>mask</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</init> <condition><expr><name>mask</name></expr>;</condition> <incr><expr><name>mask</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>font</name><index>[<expr><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>font_height</name> <operator>+</operator> <name>char_y</name></expr>]</index></name> <operator>&amp;</operator> <name>mask</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>o2</name> <operator>+</operator> <operator>(</operator><name>v</name> <operator>-</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>o1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>idraw_htext16</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mult</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>font</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>font_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>plane</name></decl>;</decl_stmt>

<expr_stmt><expr><name>font</name> <operator>=</operator> <name>avpriv_cga_font</name></expr><operator>,</operator> <expr><name>font_height</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>char_y</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>color</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>*</operator> <name>mult</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>char_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>char_y</name> <operator>&lt;</operator> <name>font_height</name></expr>;</condition> <incr><expr><name>char_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>mask</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</init> <condition><expr><name>mask</name></expr>;</condition> <incr><expr><name>mask</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>font</name><index>[<expr><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>font_height</name> <operator>+</operator> <name>char_y</name></expr>]</index></name> <operator>&amp;</operator> <name>mask</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>o2</name> <operator>+</operator> <operator>(</operator><name>v</name> <operator>-</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>o1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>idraw_vtext</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mult</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>font</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>font_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>plane</name></decl>;</decl_stmt>

<expr_stmt><expr><name>font</name> <operator>=</operator> <name>avpriv_cga_font</name></expr><operator>,</operator> <expr><name>font_height</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>char_y</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>color</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>char_y</name> <operator>=</operator> <name>font_height</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>char_y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>char_y</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>y</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">10</literal><operator>)</operator> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>mask</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</init> <condition><expr><name>mask</name></expr>;</condition> <incr><expr><name>mask</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>font</name><index>[<expr><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>font_height</name> <operator>+</operator> <name>font_height</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>char_y</name></expr>]</index></name> <operator>&amp;</operator> <name>mask</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>char_y</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><name>char_y</name></expr>]</index></name> <operator>*</operator> <name>o2</name> <operator>+</operator> <operator>(</operator><name>v</name> <operator>-</operator> <name><name>p</name><index>[<expr><name>char_y</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>o1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>idraw_vtext16</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mult</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>font</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>font_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>plane</name></decl>;</decl_stmt>

<expr_stmt><expr><name>font</name> <operator>=</operator> <name>avpriv_cga_font</name></expr><operator>,</operator> <expr><name>font_height</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>char_y</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>color</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>*</operator> <name>mult</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>char_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>char_y</name> <operator>&lt;</operator> <name>font_height</name></expr>;</condition> <incr><expr><name>char_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>y</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">10</literal><operator>)</operator> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>mask</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</init> <condition><expr><name>mask</name></expr>;</condition> <incr><expr><name>mask</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>font</name><index>[<expr><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>font_height</name> <operator>+</operator> <name>font_height</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>char_y</name></expr>]</index></name> <operator>&amp;</operator> <name>mask</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>char_y</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><name>char_y</name></expr>]</index></name> <operator>*</operator> <name>o2</name> <operator>+</operator> <operator>(</operator><name>v</name> <operator>-</operator> <name><name>p</name><index>[<expr><name>char_y</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>o1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>graticule_none</name><parameter_list>(<parameter><decl><type><name>WaveformContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>graticule_row</name><parameter_list>(<parameter><decl><type><name>WaveformContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>step</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>o1</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>opacity</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>o2</name> <init>= <expr><literal type="number">1.</literal> <operator>-</operator> <name>o1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>height</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>display</name></name> <operator>==</operator> <name>PARADE</name></expr> ?</condition><then> <expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>acomp</name></name></expr> </then><else>: <expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>C</name></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>offset_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>offset_y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>c</name><operator>)</operator> <operator>&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>pcomp</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>display</name></name> <operator>&amp;&amp;</operator> <name>k</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>C</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>rgb</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>v</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>grat_yuva_color</name><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>pos</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>glines</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name><name>line</name><index>[<expr><name>C</name></expr>]</index></name><operator>.</operator><name>pos</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>offset_x</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mirror</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>pos</name></expr> </then><else>: <expr><name>pos</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name> <operator>+</operator> <name>offset_y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>p</name></expr>]</index></name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>blend_line</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><name>o1</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>glines</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name><name>line</name><index>[<expr><name>C</name></expr>]</index></name><operator>.</operator><name>name</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>pos</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>glines</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name><name>line</name><index>[<expr><name>C</name></expr>]</index></name><operator>.</operator><name>pos</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>offset_x</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mirror</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>pos</name></expr> </then><else>: <expr><name>pos</name></expr></else></ternary><operator>)</operator> <operator>-</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>draw_text</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>offset_y</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>o1</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>grat_yuva_color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>offset_x</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>display</name></name> <operator>==</operator> <name>STACK</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>offset_y</name> <operator>+=</operator> <name>height</name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>display</name></name> <operator>==</operator> <name>PARADE</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>graticule16_row</name><parameter_list>(<parameter><decl><type><name>WaveformContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>step</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>o1</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>opacity</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>o2</name> <init>= <expr><literal type="number">1.</literal> <operator>-</operator> <name>o1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mult</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>max</name></name> <operator>/</operator> <literal type="number">256</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>height</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>display</name></name> <operator>==</operator> <name>PARADE</name></expr> ?</condition><then> <expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>acomp</name></name></expr> </then><else>: <expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>C</name></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>offset_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>offset_y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>c</name><operator>)</operator> <operator>&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>pcomp</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>display</name></name> <operator>&amp;&amp;</operator> <name>k</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>C</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>rgb</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>v</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>grat_yuva_color</name><index>[<expr><name>p</name></expr>]</index></name> <operator>*</operator> <name>mult</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name></expr> ;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>pos</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>glines</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name><name>line</name><index>[<expr><name>C</name></expr>]</index></name><operator>.</operator><name>pos</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>offset_x</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mirror</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>pos</name></expr> </then><else>: <expr><name>pos</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name> <operator>+</operator> <name>offset_y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>p</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>blend_line</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><name>o1</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>glines</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name><name>line</name><index>[<expr><name>C</name></expr>]</index></name><operator>.</operator><name>name</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>pos</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>glines</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name><name>line</name><index>[<expr><name>C</name></expr>]</index></name><operator>.</operator><name>pos</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>offset_x</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mirror</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>pos</name></expr> </then><else>: <expr><name>pos</name></expr></else></ternary><operator>)</operator> <operator>-</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>draw_text</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>offset_y</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>mult</name></expr></argument>, <argument><expr><name>o1</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>grat_yuva_color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>offset_x</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>display</name></name> <operator>==</operator> <name>STACK</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>offset_y</name> <operator>+=</operator> <name>height</name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>display</name></name> <operator>==</operator> <name>PARADE</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>graticule_column</name><parameter_list>(<parameter><decl><type><name>WaveformContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>step</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>o1</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>opacity</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>o2</name> <init>= <expr><literal type="number">1.</literal> <operator>-</operator> <name>o1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>width</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>display</name></name> <operator>==</operator> <name>PARADE</name></expr> ?</condition><then> <expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>acomp</name></name></expr> </then><else>: <expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>C</name></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>offset_y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>offset_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>c</name><operator>)</operator> <operator>&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>pcomp</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>display</name></name> <operator>&amp;&amp;</operator> <name>k</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>C</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>rgb</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>v</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>grat_yuva_color</name><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name></expr> ;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>pos</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>glines</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name><name>line</name><index>[<expr><name>C</name></expr>]</index></name><operator>.</operator><name>pos</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>offset_y</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mirror</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>pos</name></expr> </then><else>: <expr><name>pos</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>p</name></expr>]</index></name> <operator>+</operator> <name>offset_x</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>blend_line</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>o1</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>glines</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name><name>line</name><index>[<expr><name>C</name></expr>]</index></name><operator>.</operator><name>name</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>pos</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>glines</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name><name>line</name><index>[<expr><name>C</name></expr>]</index></name><operator>.</operator><name>pos</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>offset_y</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mirror</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>pos</name></expr> </then><else>: <expr><name>pos</name></expr></else></ternary><operator>)</operator> <operator>-</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>draw_text</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>+</operator> <name>offset_x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>o1</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>grat_yuva_color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>offset_y</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>display</name></name> <operator>==</operator> <name>STACK</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>offset_x</name> <operator>+=</operator> <name>width</name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>display</name></name> <operator>==</operator> <name>PARADE</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>graticule16_column</name><parameter_list>(<parameter><decl><type><name>WaveformContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>step</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>o1</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>opacity</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>o2</name> <init>= <expr><literal type="number">1.</literal> <operator>-</operator> <name>o1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mult</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>max</name></name> <operator>/</operator> <literal type="number">256</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>width</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>display</name></name> <operator>==</operator> <name>PARADE</name></expr> ?</condition><then> <expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>acomp</name></name></expr> </then><else>: <expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>C</name></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>offset_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>offset_y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>c</name><operator>)</operator> <operator>&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>pcomp</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>display</name></name> <operator>&amp;&amp;</operator> <name>k</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>C</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>rgb</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>v</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>grat_yuva_color</name><index>[<expr><name>p</name></expr>]</index></name> <operator>*</operator> <name>mult</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name></expr> ;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>pos</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>glines</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name><name>line</name><index>[<expr><name>C</name></expr>]</index></name><operator>.</operator><name>pos</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>offset_y</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mirror</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>pos</name></expr> </then><else>: <expr><name>pos</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>p</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <name>offset_x</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>blend_line</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>o1</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>glines</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name><name>line</name><index>[<expr><name>C</name></expr>]</index></name><operator>.</operator><name>name</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>pos</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>glines</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name><name>line</name><index>[<expr><name>C</name></expr>]</index></name><operator>.</operator><name>pos</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>offset_y</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mirror</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>pos</name></expr></then><else>: <expr><name>pos</name></expr></else></ternary><operator>)</operator> <operator>-</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>draw_text</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>+</operator> <name>offset_x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>mult</name></expr></argument>, <argument><expr><name>o1</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>grat_yuva_color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>offset_y</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>display</name></name> <operator>==</operator> <name>STACK</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>offset_x</name> <operator>+=</operator> <name>width</name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>display</name></name> <operator>==</operator> <name>PARADE</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WaveformContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>desc</name></name> <operator>=</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>bits</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>intensity</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fintensity</name></name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>max</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>shift_w</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>shift_w</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>shift_h</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>shift_h</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>shift_w</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>shift_w</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>shift_h</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>shift_h</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>graticulef</name></name> <operator>=</operator> <name>graticule_none</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>filter</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>XFLAT</name></expr>:</case>
<case>case <expr><name>YFLAT</name></expr>:</case>
<case>case <expr><name>AFLAT</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">256</literal> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FLAT</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">256</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>filter</name></name> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>bits</name></name> <operator>&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mirror</name></name> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x1100</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>lowpass_column_mirror</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x1000</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>lowpass_row_mirror</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x0100</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>lowpass_column</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x0000</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>lowpass_row</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x1110</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>lowpass16_column_mirror</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x1010</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>lowpass16_row_mirror</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x0110</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>lowpass16_column</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x0010</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>lowpass16_row</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x1101</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>flat_column_mirror</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x1001</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>flat_row_mirror</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x0101</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>flat_column</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x0001</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>flat_row</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x1111</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>flat16_column_mirror</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x1011</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>flat16_row_mirror</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x0111</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>flat16_column</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x0011</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>flat16_row</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x1102</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>aflat_column_mirror</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x1002</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>aflat_row_mirror</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x0102</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>aflat_column</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x0002</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>aflat_row</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x1112</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>aflat16_column_mirror</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x1012</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>aflat16_row_mirror</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x0112</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>aflat16_column</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x0012</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>aflat16_row</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x1103</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>chroma_column_mirror</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x1003</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>chroma_row_mirror</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x0103</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>chroma_column</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x0003</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>chroma_row</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x1113</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>chroma16_column_mirror</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x1013</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>chroma16_row_mirror</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x0113</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>chroma16_column</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x0013</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>chroma16_row</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x1104</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>color_column_mirror</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x1004</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>color_row_mirror</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x0104</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>color_column</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x0004</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>color_row</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x1114</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>color16_column_mirror</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x1014</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>color16_row_mirror</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x0114</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>color16_column</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x0014</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>color16_row</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x1105</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>acolor_column_mirror</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x1005</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>acolor_row_mirror</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x0105</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>acolor_column</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x0005</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>acolor_row</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x1115</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>acolor16_column_mirror</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x1015</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>acolor16_row_mirror</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x0115</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>acolor16_column</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x0015</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>acolor16_row</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x1106</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>xflat_column_mirror</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x1006</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>xflat_row_mirror</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x0106</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>xflat_column</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x0006</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>xflat_row</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x1116</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>xflat16_column_mirror</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x1016</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>xflat16_row_mirror</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x0116</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>xflat16_column</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x0016</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>xflat16_row</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x1107</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>yflat_column_mirror</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x1007</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>yflat_row_mirror</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x0107</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>yflat_column</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x0007</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>yflat_row</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x1117</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>yflat16_column_mirror</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x1017</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>yflat16_row_mirror</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x0117</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>yflat16_column</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x0017</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name> <operator>=</operator> <name>yflat16_row</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>grat_yuva_color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>grat_yuva_color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>graticule</name></name> <operator>==</operator> <name>GRAT_INVERT</name></expr> ?</condition><then> <expr><literal type="number">255</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>grat_yuva_color</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>graticule</name></name> <operator>==</operator> <name>GRAT_ORANGE</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>graticule</name></name> <operator>==</operator> <name>GRAT_INVERT</name></expr> ?</condition><then> <expr><literal type="number">255</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>grat_yuva_color</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>graticule</name></name> <operator>!=</operator> <name>GRAT_INVERT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>blend_line</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>bits</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>blend_vline</name></expr> </then><else>: <expr><name>blend_vline16</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>draw_text</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>bits</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>draw_vtext</name></expr> </then><else>: <expr><name>draw_vtext16</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>graticule</name></name> <operator>!=</operator> <name>GRAT_INVERT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>blend_line</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>bits</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>blend_hline</name></expr> </then><else>: <expr><name>blend_hline16</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>draw_text</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>bits</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>draw_htext</name></expr> </then><else>: <expr><name>draw_htext16</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>graticule</name></name> <operator>==</operator> <name>GRAT_INVERT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>blend_line</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>bits</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>iblend_vline</name></expr> </then><else>: <expr><name>iblend_vline16</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>draw_text</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>bits</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>idraw_vtext</name></expr> </then><else>: <expr><name>idraw_vtext16</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>graticule</name></name> <operator>==</operator> <name>GRAT_INVERT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>blend_line</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>bits</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>iblend_hline</name></expr> </then><else>: <expr><name>iblend_hline16</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>draw_text</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>bits</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>idraw_htext</name></expr> </then><else>: <expr><name>idraw_htext16</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>filter</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LOWPASS</name></expr>:</case>
<case>case <expr><name>COLOR</name></expr>:</case>
<case>case <expr><name>ACOLOR</name></expr>:</case>
<case>case <expr><name>CHROMA</name></expr>:</case>
<case>case <expr><name>AFLAT</name></expr>:</case>
<case>case <expr><name>XFLAT</name></expr>:</case>
<case>case <expr><name>YFLAT</name></expr>:</case>
<case>case <expr><name>FLAT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>graticule</name></name> <operator>&gt;</operator> <name>GRAT_NONE</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>graticulef</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>bits</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>graticule16_column</name></expr> </then><else>: <expr><name>graticule_column</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>graticule</name></name> <operator>&gt;</operator> <name>GRAT_NONE</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>graticulef</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>bits</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>graticule16_row</name></expr> </then><else>: <expr><name>graticule_row</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>filter</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>COLOR</name></expr>:</case>
<case>case <expr><name>ACOLOR</name></expr>:</case>
<case>case <expr><name>LOWPASS</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>scale</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DIGITAL</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bits</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>digital8</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>digital8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">9</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>digital9</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>digital9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>digital10</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>digital10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">12</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>digital12</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>digital12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><name>MILLIVOLTS</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bits</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>millivolts8</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>millivolts8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">9</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>millivolts9</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>millivolts9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>millivolts10</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>millivolts10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">12</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>millivolts12</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>millivolts12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><name>IRE</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bits</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>ire8</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>ire8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">9</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>ire9</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>ire9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>ire10</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>ire10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">12</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>ire12</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>ire12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><name>CHROMA</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>scale</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DIGITAL</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bits</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>chroma_digital8</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>chroma_digital8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">9</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>chroma_digital9</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>chroma_digital9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>chroma_digital10</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>chroma_digital10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">12</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>chroma_digital12</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>chroma_digital12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><name>MILLIVOLTS</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bits</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>millivolts8</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>millivolts8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">9</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>millivolts9</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>millivolts9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>millivolts10</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>millivolts10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">12</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>millivolts12</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>millivolts12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><name>IRE</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bits</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>ire8</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>ire8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">9</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>ire9</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>ire9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>ire10</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>ire10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">12</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>ire12</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>ire12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><name>XFLAT</name></expr>:</case>
<case>case <expr><name>YFLAT</name></expr>:</case>
<case>case <expr><name>AFLAT</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>scale</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DIGITAL</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bits</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>aflat_digital8</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>aflat_digital8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">9</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>aflat_digital9</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>aflat_digital9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>aflat_digital10</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>aflat_digital10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">12</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>aflat_digital12</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>aflat_digital12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><name>MILLIVOLTS</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bits</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>aflat_millivolts8</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>aflat_millivolts8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">9</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>aflat_millivolts9</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>aflat_millivolts9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>aflat_millivolts10</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>aflat_millivolts10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">12</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>aflat_millivolts12</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>aflat_millivolts12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><name>IRE</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bits</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>aflat_ire8</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>aflat_ire8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">9</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>aflat_ire9</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>aflat_ire9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>aflat_ire10</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>aflat_ire10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">12</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>aflat_ire12</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>aflat_ire12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><name>FLAT</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>scale</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DIGITAL</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bits</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>flat_digital8</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>flat_digital8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">9</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>flat_digital9</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>flat_digital9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>flat_digital10</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>flat_digital10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">12</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>flat_digital12</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>flat_digital12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><name>MILLIVOLTS</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bits</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>flat_millivolts8</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>flat_millivolts8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">9</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>flat_millivolts9</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>flat_millivolts9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>flat_millivolts10</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>flat_millivolts10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">12</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>flat_millivolts12</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>flat_millivolts12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><name>IRE</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bits</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>flat_ire8</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>flat_ire8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">9</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>flat_ire9</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>flat_ire9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>flat_ire10</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>flat_ire10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">12</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>glines</name></name> <operator>=</operator> <operator>(</operator><name>GraticuleLines</name> <operator>*</operator><operator>)</operator><name>flat_ire12</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_glines</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>flat_ire12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>bits</name></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tint</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ftint</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tint</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ftint</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_GBRAP</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP9</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP10</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP12</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rgb</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bg_color</name></name></expr></argument>, <argument><expr><name>black_gbrp_color</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bg_color</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bg_color</name></name></expr></argument>, <argument><expr><name>black_yuva_color</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bg_color</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bg_color</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*=</operator> <name><name>s</name><operator>-&gt;</operator><name>bgopacity</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_output</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WaveformContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>comp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>pcomp</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>comp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>acomp</name></name> <operator>=</operator> <name>comp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>acomp</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>odesc</name></name> <operator>=</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dcomp</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>odesc</name><operator>-&gt;</operator><name>nb_components</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>peak</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>comp</name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>display</name></name> <operator>==</operator> <name>STACK</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>comp</name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>display</name></name> <operator>==</operator> <name>PARADE</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>comp</name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>display</name></name> <operator>==</operator> <name>STACK</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>*</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>comp</name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>display</name></name> <operator>==</operator> <name>PARADE</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>peak</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">32</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>peak</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>peak</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>plane</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>plane</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>p</name><operator>)</operator> <operator>&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>pcomp</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>emax</name><index>[<expr><name>plane</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>peak</name></name> <operator>+</operator> <name>size</name> <operator>*</operator> <operator>(</operator><name>plane</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>k</name> <operator>+</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>emin</name><index>[<expr><name>plane</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>peak</name></name> <operator>+</operator> <name>size</name> <operator>*</operator> <operator>(</operator><name>plane</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>k</name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>j</name><operator>++</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>display</name></name> <operator>==</operator> <name>STACK</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>estart</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>eend</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>offset</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>emax</name><index>[<expr><name>plane</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>estart</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>emin</name><index>[<expr><name>plane</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>eend</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WaveformContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <name>AVCOL_RANGE_JPEG</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>dcomp</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bits</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>odesc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>plane</name></expr>]</index></name> <operator>+</operator>
<name>i</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>odesc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>plane</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bg_color</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mult</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>max</name></name> <operator>/</operator> <literal type="number">256</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>odesc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bg_color</name><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <name>mult</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>odesc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>plane</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>k</name><operator>)</operator> <operator>&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>pcomp</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>plane</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>plane</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ThreadData</name></type> <name>td</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset_x</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>display</name></name> <operator>==</operator> <name>PARADE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset_x</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name></expr> ?</condition><then> <expr><name>i</name><operator>++</operator> <operator>*</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>offset_y</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>i</name><operator>++</operator> <operator>*</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>offset_y</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name></expr> ?</condition><then> <expr><name>i</name><operator>++</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <operator>!</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>display</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>offset_x</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>i</name><operator>++</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <operator>!</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>display</name></name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>in</name></name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td</name><operator>.</operator><name>out</name></name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td</name><operator>.</operator><name>component</name></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td</name><operator>.</operator><name>offset_y</name></name> <operator>=</operator> <name>offset_y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td</name><operator>.</operator><name>offset_x</name></name> <operator>=</operator> <name>offset_x</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>waveform_slice</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>td</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>ff_filter_get_nb_threads</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>filter</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LOWPASS</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bits</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>envelope</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>rgb</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>display</name></name> <operator>==</operator> <name>OVERLAY</name></expr> ?</condition><then> <expr><name>plane</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name></expr> ?</condition><then> <expr><name>offset_x</name></expr> </then><else>: <expr><name>offset_y</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>envelope16</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>rgb</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>display</name></name> <operator>==</operator> <name>OVERLAY</name></expr> ?</condition><then> <expr><name>plane</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name></expr> ?</condition><then> <expr><name>offset_x</name></expr> </then><else>: <expr><name>offset_y</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>ACOLOR</name></expr>:</case>
<case>case <expr><name>CHROMA</name></expr>:</case>
<case>case <expr><name>COLOR</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bits</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>envelope</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name></expr> ?</condition><then> <expr><name>offset_x</name></expr> </then><else>: <expr><name>offset_y</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>envelope16</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name></expr> ?</condition><then> <expr><name>offset_x</name></expr> </then><else>: <expr><name>offset_y</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>FLAT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bits</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>envelope</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name></expr> ?</condition><then> <expr><name>offset_x</name></expr> </then><else>: <expr><name>offset_y</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>envelope</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name></expr> ?</condition><then> <expr><name>offset_x</name></expr> </then><else>: <expr><name>offset_y</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>envelope16</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name></expr> ?</condition><then> <expr><name>offset_x</name></expr> </then><else>: <expr><name>offset_y</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>envelope16</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name></expr> ?</condition><then> <expr><name>offset_x</name></expr> </then><else>: <expr><name>offset_y</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>AFLAT</name></expr>:</case>
<case>case <expr><name>XFLAT</name></expr>:</case>
<case>case <expr><name>YFLAT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bits</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>envelope</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">0</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name></expr> ?</condition><then> <expr><name>offset_x</name></expr> </then><else>: <expr><name>offset_y</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>envelope</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name></expr> ?</condition><then> <expr><name>offset_x</name></expr> </then><else>: <expr><name>offset_y</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>envelope</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name></expr> ?</condition><then> <expr><name>offset_x</name></expr> </then><else>: <expr><name>offset_y</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>envelope16</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">0</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name></expr> ?</condition><then> <expr><name>offset_x</name></expr> </then><else>: <expr><name>offset_y</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>envelope16</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name></expr> ?</condition><then> <expr><name>offset_x</name></expr> </then><else>: <expr><name>offset_y</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>envelope16</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><operator>(</operator><name>plane</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomp</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name></expr> ?</condition><then> <expr><name>offset_x</name></expr> </then><else>: <expr><name>offset_y</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>graticulef</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WaveformContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>peak</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_output</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_waveform</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"waveform"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Video waveform monitor."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WaveformContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>waveform_class</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>outputs</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SLICE_THREADS</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
