<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vf_vidstabdetect.c">



















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_RESULT_NAME</name></cpp:macro> <cpp:value>"transforms.trf"</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vid.stab/libvidstab.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vidstabutils.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>StabData</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VSMotionDetect</name></type> <name>md</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VSMotionDetectConfig</name></type> <name>conf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
}</block></struct></type> <name>StabData</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(StabData, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSETC</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(offsetof(StabData, conf)+offsetof(VSMotionDetectConfig, x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_VIDEO_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>vidstabdetect_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"result"</literal></expr>, <expr><literal type="string">"path to the file used to write the transforms"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>DEFAULT_RESULT_NAME</name></expr>}</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"shakiness"</literal></expr>, <expr><literal type="string">"how shaky is the video and how quick is the camera?"</literal>
<literal type="string">" 1: little (fast) 10: very strong/quick (slow)"</literal></expr>, <expr><call><name>OFFSETC</name><argument_list>(<argument><expr><name>shakiness</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">5</literal></expr>}</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"accuracy"</literal></expr>, <expr><literal type="string">"(&gt;=shakiness) 1: low 15: high (slow)"</literal></expr>, <expr><call><name>OFFSETC</name><argument_list>(<argument><expr><name>accuracy</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">15</literal></expr>}</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"stepsize"</literal></expr>, <expr><literal type="string">"region around minimum is scanned with 1 pixel resolution"</literal></expr>, <expr><call><name>OFFSETC</name><argument_list>(<argument><expr><name>stepSize</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">6</literal></expr>}</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"mincontrast"</literal></expr>, <expr><literal type="string">"below this contrast a field is discarded (0-1)"</literal></expr>, <expr><call><name>OFFSETC</name><argument_list>(<argument><expr><name>contrastThreshold</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">0.25</literal></expr>}</block></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"show"</literal></expr>, <expr><literal type="string">"0: draw nothing; 1,2: show fields and transforms"</literal></expr>, <expr><call><name>OFFSETC</name><argument_list>(<argument><expr><name>show</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"tripod"</literal></expr>, <expr><literal type="string">"virtual tripod mode (if &gt;0): motion is compared to a reference"</literal>
<literal type="string">" reference frame (frame #is the value)"</literal></expr>, <expr><call><name>OFFSETC</name><argument_list>(<argument><expr><name>virtualTripod</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>vidstabdetect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>StabData</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ff_vs_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>class</name></name> <operator>=</operator> <operator>&amp;</operator><name>vidstabdetect_class</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"vidstabdetect filter: init %s\n"</literal></expr></argument>, <argument><expr><name>LIBVIDSTAB_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>StabData</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VSMotionDetect</name> <modifier>*</modifier></type><name>md</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>md</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>f</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>f</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vsMotionDetectionCleanup</name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_YUV444P</name></expr>, <expr><name>AV_PIX_FMT_YUV422P</name></expr>, <expr><name>AV_PIX_FMT_YUV420P</name></expr>,
<expr><name>AV_PIX_FMT_YUV411P</name></expr>, <expr><name>AV_PIX_FMT_YUV410P</name></expr>, <expr><name>AV_PIX_FMT_YUVA420P</name></expr>,
<expr><name>AV_PIX_FMT_YUV440P</name></expr>, <expr><name>AV_PIX_FMT_GRAY8</name></expr>,
<expr><name>AV_PIX_FMT_RGB24</name></expr>, <expr><name>AV_PIX_FMT_BGR24</name></expr>, <expr><name>AV_PIX_FMT_RGBA</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StabData</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VSMotionDetect</name><modifier>*</modifier></type> <name>md</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>md</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VSFrameInfo</name></type> <name>fi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_planar</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_PLANAR</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vsFrameInfoInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fi</name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>,
<argument><expr><call><name>ff_av2vs_pixfmt</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_planar</name> <operator>&amp;&amp;</operator> <name><name>fi</name><operator>.</operator><name>bytesPerPixel</name></name> <operator>!=</operator> <call><name>av_get_bits_per_pixel</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"pixel-format error: wrong bits/per/pixel, please report a BUG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fi</name><operator>.</operator><name>log2ChromaW</name></name> <operator>!=</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"pixel-format error: log2_chroma_w, please report a BUG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fi</name><operator>.</operator><name>log2ChromaH</name></name> <operator>!=</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"pixel-format error: log2_chroma_h, please report a BUG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>algo</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>modName</name></name> <operator>=</operator> <literal type="string">"vidstabdetect"</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vsMotionDetectInit</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>conf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fi</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"initialization of Motion Detection failed, please report a BUG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vsMotionDetectGetConfig</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>conf</name></name></expr></argument>, <argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Video stabilization settings (pass 1/2):\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" shakiness = %d\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>shakiness</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" accuracy = %d\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>accuracy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" stepsize = %d\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>stepSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" mincontrast = %f\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>contrastThreshold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" tripod = %d\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>virtualTripod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" show = %d\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>show</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" result = %s\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>f</name></name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>result</name></name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>f</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot open transform file %s\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vsPrepareFile</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot write to transform file %s\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StabData</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VSMotionDetect</name> <modifier>*</modifier></type><name>md</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>md</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LocalMotions</name></type> <name>localmotions</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VSFrame</name></type> <name>frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>plane</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>show</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>av_frame_is_writable</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_frame_make_writable</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <name><name>md</name><operator>-&gt;</operator><name>fi</name><operator>.</operator><name>planes</name></name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>frame</name><operator>.</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>.</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><call><name>vsMotionDetection</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>localmotions</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"motion detection failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>AVERROR_EXTERNAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vsWriteToFile</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>localmotions</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VS_OK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot write to transform file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vs_vector_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name>localmotions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>avfilter_vf_vidstabdetect_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>avfilter_vf_vidstabdetect_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_vidstabdetect</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"vidstabdetect"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Extract relative transformations, "</literal>
<literal type="string">"pass 1 of 2 for stabilization "</literal>
<literal type="string">"(see vidstabtransform for pass 2)."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>StabData</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>avfilter_vf_vidstabdetect_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>avfilter_vf_vidstabdetect_outputs</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>vidstabdetect_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
