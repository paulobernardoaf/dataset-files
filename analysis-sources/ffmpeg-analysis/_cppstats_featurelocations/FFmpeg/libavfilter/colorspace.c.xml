<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\colorspace.c">


















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/frame.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mastering_display_metadata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"colorspace.h"</cpp:file></cpp:include>


<function><type><name>void</name></type> <name>ff_matrix_invert_3x3</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>double</name></type> <name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>m00</name> <init>= <expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>m01</name> <init>= <expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>m02</name> <init>= <expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>,
<decl><type ref="prev"/><name>m10</name> <init>= <expr><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>m11</name> <init>= <expr><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>m12</name> <init>= <expr><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>,
<decl><type ref="prev"/><name>m20</name> <init>= <expr><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>m21</name> <init>= <expr><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>m22</name> <init>= <expr><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>det</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>m11</name> <operator>*</operator> <name>m22</name> <operator>-</operator> <name>m21</name> <operator>*</operator> <name>m12</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>m01</name> <operator>*</operator> <name>m22</name> <operator>-</operator> <name>m21</name> <operator>*</operator> <name>m02</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>m01</name> <operator>*</operator> <name>m12</name> <operator>-</operator> <name>m11</name> <operator>*</operator> <name>m02</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>m10</name> <operator>*</operator> <name>m22</name> <operator>-</operator> <name>m20</name> <operator>*</operator> <name>m12</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>m00</name> <operator>*</operator> <name>m22</name> <operator>-</operator> <name>m20</name> <operator>*</operator> <name>m02</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>m00</name> <operator>*</operator> <name>m12</name> <operator>-</operator> <name>m10</name> <operator>*</operator> <name>m02</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>m10</name> <operator>*</operator> <name>m21</name> <operator>-</operator> <name>m20</name> <operator>*</operator> <name>m11</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>m00</name> <operator>*</operator> <name>m21</name> <operator>-</operator> <name>m20</name> <operator>*</operator> <name>m01</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>m00</name> <operator>*</operator> <name>m11</name> <operator>-</operator> <name>m10</name> <operator>*</operator> <name>m01</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>det</name> <operator>=</operator> <name>m00</name> <operator>*</operator> <name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>m10</name> <operator>*</operator> <name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>m20</name> <operator>*</operator> <name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>det</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>/</operator> <name>det</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>*=</operator> <name>det</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_matrix_mul_3x3</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>double</name></type> <name><name>src1</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name></type> <name><name>src2</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>src2</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>src1</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>+</operator>
<name><name>src2</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>src1</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>+</operator>
<name><name>src2</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>src1</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>ff_fill_rgb2xyz_table</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>PrimaryCoefficients</name></name> <modifier>*</modifier></type><name>coeffs</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>WhitepointCoefficients</name></name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name><name>rgb2xyz</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name><name>i</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>sr</name></decl>, <decl><type ref="prev"/><name>sg</name></decl>, <decl><type ref="prev"/><name>sb</name></decl>, <decl><type ref="prev"/><name>zw</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rgb2xyz</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>coeffs</name><operator>-&gt;</operator><name>xr</name></name> <operator>/</operator> <name><name>coeffs</name><operator>-&gt;</operator><name>yr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rgb2xyz</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>coeffs</name><operator>-&gt;</operator><name>xg</name></name> <operator>/</operator> <name><name>coeffs</name><operator>-&gt;</operator><name>yg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rgb2xyz</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>coeffs</name><operator>-&gt;</operator><name>xb</name></name> <operator>/</operator> <name><name>coeffs</name><operator>-&gt;</operator><name>yb</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rgb2xyz</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>rgb2xyz</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>rgb2xyz</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rgb2xyz</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <name><name>coeffs</name><operator>-&gt;</operator><name>xr</name></name> <operator>-</operator> <name><name>coeffs</name><operator>-&gt;</operator><name>yr</name></name><operator>)</operator> <operator>/</operator> <name><name>coeffs</name><operator>-&gt;</operator><name>yr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rgb2xyz</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <name><name>coeffs</name><operator>-&gt;</operator><name>xg</name></name> <operator>-</operator> <name><name>coeffs</name><operator>-&gt;</operator><name>yg</name></name><operator>)</operator> <operator>/</operator> <name><name>coeffs</name><operator>-&gt;</operator><name>yg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rgb2xyz</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <name><name>coeffs</name><operator>-&gt;</operator><name>xb</name></name> <operator>-</operator> <name><name>coeffs</name><operator>-&gt;</operator><name>yb</name></name><operator>)</operator> <operator>/</operator> <name><name>coeffs</name><operator>-&gt;</operator><name>yb</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_matrix_invert_3x3</name><argument_list>(<argument><expr><name>rgb2xyz</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>zw</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>xw</name></name> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>yw</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sr</name> <operator>=</operator> <name><name>i</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>wp</name><operator>-&gt;</operator><name>xw</name></name> <operator>+</operator> <name><name>i</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>wp</name><operator>-&gt;</operator><name>yw</name></name> <operator>+</operator> <name><name>i</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>zw</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <name><name>i</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>wp</name><operator>-&gt;</operator><name>xw</name></name> <operator>+</operator> <name><name>i</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>wp</name><operator>-&gt;</operator><name>yw</name></name> <operator>+</operator> <name><name>i</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>zw</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sb</name> <operator>=</operator> <name><name>i</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>wp</name><operator>-&gt;</operator><name>xw</name></name> <operator>+</operator> <name><name>i</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>wp</name><operator>-&gt;</operator><name>yw</name></name> <operator>+</operator> <name><name>i</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>zw</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rgb2xyz</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <name>sr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rgb2xyz</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*=</operator> <name>sg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rgb2xyz</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*=</operator> <name>sb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rgb2xyz</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <name>sr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rgb2xyz</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*=</operator> <name>sg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rgb2xyz</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*=</operator> <name>sb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rgb2xyz</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <name>sr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rgb2xyz</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*=</operator> <name>sg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rgb2xyz</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*=</operator> <name>sb</name></expr>;</expr_stmt>
</block_content>}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>ycgco_matrix</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><literal type="number">0.25</literal></expr>, <expr><literal type="number">0.5</literal></expr>, <expr><literal type="number">0.25</literal></expr> }</block></expr>,
<expr><block>{ <expr><operator>-</operator><literal type="number">0.25</literal></expr>, <expr><literal type="number">0.5</literal></expr>, <expr><operator>-</operator><literal type="number">0.25</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">0.5</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>gbr_matrix</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">0.5</literal></expr>, <expr><literal type="number">0.5</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.5</literal></expr>, <expr><operator>-</operator><literal type="number">0.5</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>







<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>LumaCoefficients</name></name></type> <name><name>luma_coefficients</name><index>[<expr><name>AVCOL_SPC_NB</name></expr>]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>AVCOL_SPC_FCC</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">0.30</literal></expr>, <expr><literal type="number">0.59</literal></expr>, <expr><literal type="number">0.11</literal></expr> }</block></expr>,
<expr><index>[<expr><name>AVCOL_SPC_BT470BG</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">0.299</literal></expr>, <expr><literal type="number">0.587</literal></expr>, <expr><literal type="number">0.114</literal></expr> }</block></expr>,
<expr><index>[<expr><name>AVCOL_SPC_SMPTE170M</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">0.299</literal></expr>, <expr><literal type="number">0.587</literal></expr>, <expr><literal type="number">0.114</literal></expr> }</block></expr>,
<expr><index>[<expr><name>AVCOL_SPC_BT709</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">0.2126</literal></expr>, <expr><literal type="number">0.7152</literal></expr>, <expr><literal type="number">0.0722</literal></expr> }</block></expr>,
<expr><index>[<expr><name>AVCOL_SPC_SMPTE240M</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">0.212</literal></expr>, <expr><literal type="number">0.701</literal></expr>, <expr><literal type="number">0.087</literal></expr> }</block></expr>,
<expr><index>[<expr><name>AVCOL_SPC_YCOCG</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">0.25</literal></expr>, <expr><literal type="number">0.5</literal></expr>, <expr><literal type="number">0.25</literal></expr> }</block></expr>,
<expr><index>[<expr><name>AVCOL_SPC_RGB</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><index>[<expr><name>AVCOL_SPC_BT2020_NCL</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">0.2627</literal></expr>, <expr><literal type="number">0.6780</literal></expr>, <expr><literal type="number">0.0593</literal></expr> }</block></expr>,
<expr><index>[<expr><name>AVCOL_SPC_BT2020_CL</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">0.2627</literal></expr>, <expr><literal type="number">0.6780</literal></expr>, <expr><literal type="number">0.0593</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>const</specifier> <name><name>struct</name> <name>LumaCoefficients</name></name> <modifier>*</modifier></type><name>ff_get_luma_coefficients</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVColorSpace</name></name></type> <name>csp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>LumaCoefficients</name></name> <modifier>*</modifier></type><name>coeffs</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>csp</name> <operator>&gt;=</operator> <name>AVCOL_SPC_NB</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>coeffs</name> <operator>=</operator> <operator>&amp;</operator><name><name>luma_coefficients</name><index>[<expr><name>csp</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>coeffs</name><operator>-&gt;</operator><name>cr</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>coeffs</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_fill_rgb2yuv_table</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>LumaCoefficients</name></name> <modifier>*</modifier></type><name>coeffs</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name><name>rgb2yuv</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>bscale</name></decl>, <decl><type ref="prev"/><name>rscale</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>coeffs</name><operator>-&gt;</operator><name>cr</name></name> <operator>==</operator> <literal type="number">0.25</literal> <operator>&amp;&amp;</operator> <name><name>coeffs</name><operator>-&gt;</operator><name>cg</name></name> <operator>==</operator> <literal type="number">0.5</literal> <operator>&amp;&amp;</operator> <name><name>coeffs</name><operator>-&gt;</operator><name>cb</name></name> <operator>==</operator> <literal type="number">0.25</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>rgb2yuv</name></expr></argument>, <argument><expr><name>ycgco_matrix</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>coeffs</name><operator>-&gt;</operator><name>cr</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>coeffs</name><operator>-&gt;</operator><name>cg</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>coeffs</name><operator>-&gt;</operator><name>cb</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>rgb2yuv</name></expr></argument>, <argument><expr><name>gbr_matrix</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rgb2yuv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>coeffs</name><operator>-&gt;</operator><name>cr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rgb2yuv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>coeffs</name><operator>-&gt;</operator><name>cg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rgb2yuv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>coeffs</name><operator>-&gt;</operator><name>cb</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bscale</name> <operator>=</operator> <literal type="number">0.5</literal> <operator>/</operator> <operator>(</operator><name><name>coeffs</name><operator>-&gt;</operator><name>cb</name></name> <operator>-</operator> <literal type="number">1.0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>rscale</name> <operator>=</operator> <literal type="number">0.5</literal> <operator>/</operator> <operator>(</operator><name><name>coeffs</name><operator>-&gt;</operator><name>cr</name></name> <operator>-</operator> <literal type="number">1.0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rgb2yuv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>bscale</name> <operator>*</operator> <name><name>coeffs</name><operator>-&gt;</operator><name>cr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rgb2yuv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>bscale</name> <operator>*</operator> <name><name>coeffs</name><operator>-&gt;</operator><name>cg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rgb2yuv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rgb2yuv</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rgb2yuv</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>rscale</name> <operator>*</operator> <name><name>coeffs</name><operator>-&gt;</operator><name>cg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rgb2yuv</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>rscale</name> <operator>*</operator> <name><name>coeffs</name><operator>-&gt;</operator><name>cb</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>double</name></type> <name>ff_determine_signal_peak</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFrameSideData</name> <modifier>*</modifier></type><name>sd</name> <init>= <expr><call><name>av_frame_get_side_data</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>AV_FRAME_DATA_CONTENT_LIGHT_LEVEL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>peak</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sd</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVContentLightMetadata</name> <modifier>*</modifier></type><name>clm</name> <init>= <expr><operator>(</operator><name>AVContentLightMetadata</name> <operator>*</operator><operator>)</operator><name><name>sd</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>peak</name> <operator>=</operator> <name><name>clm</name><operator>-&gt;</operator><name>MaxCLL</name></name> <operator>/</operator> <name>REFERENCE_WHITE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sd</name> <operator>=</operator> <call><name>av_frame_get_side_data</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>AV_FRAME_DATA_MASTERING_DISPLAY_METADATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>peak</name> <operator>&amp;&amp;</operator> <name>sd</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVMasteringDisplayMetadata</name> <modifier>*</modifier></type><name>metadata</name> <init>= <expr><operator>(</operator><name>AVMasteringDisplayMetadata</name> <operator>*</operator><operator>)</operator><name><name>sd</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>metadata</name><operator>-&gt;</operator><name>has_luminance</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>peak</name> <operator>=</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name><name>metadata</name><operator>-&gt;</operator><name>max_luminance</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <name>REFERENCE_WHITE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>peak</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>peak</name> <operator>=</operator> <ternary><condition><expr><name><name>in</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>==</operator> <name>AVCOL_TRC_SMPTE2084</name></expr> ?</condition><then> <expr><literal type="number">100.0f</literal></expr> </then><else>: <expr><literal type="number">10.0f</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>peak</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_update_hdr_metadata</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>peak</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFrameSideData</name> <modifier>*</modifier></type><name>sd</name> <init>= <expr><call><name>av_frame_get_side_data</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>AV_FRAME_DATA_CONTENT_LIGHT_LEVEL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sd</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVContentLightMetadata</name> <modifier>*</modifier></type><name>clm</name> <init>= <expr><operator>(</operator><name>AVContentLightMetadata</name> <operator>*</operator><operator>)</operator><name><name>sd</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>clm</name><operator>-&gt;</operator><name>MaxCLL</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>peak</name> <operator>*</operator> <name>REFERENCE_WHITE</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sd</name> <operator>=</operator> <call><name>av_frame_get_side_data</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>AV_FRAME_DATA_MASTERING_DISPLAY_METADATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sd</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVMasteringDisplayMetadata</name> <modifier>*</modifier></type><name>metadata</name> <init>= <expr><operator>(</operator><name>AVMasteringDisplayMetadata</name> <operator>*</operator><operator>)</operator><name><name>sd</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>metadata</name><operator>-&gt;</operator><name>has_luminance</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>metadata</name><operator>-&gt;</operator><name>max_luminance</name></name> <operator>=</operator> <call><name>av_d2q</name><argument_list>(<argument><expr><name>peak</name> <operator>*</operator> <name>REFERENCE_WHITE</name></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
