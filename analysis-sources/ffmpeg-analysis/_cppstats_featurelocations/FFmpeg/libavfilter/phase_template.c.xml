<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\phase_template.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>pixel</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>accumulator</name></cpp:undef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEPTH</name> <operator>==</operator> <literal type="number">8</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pixel</name></cpp:macro> <cpp:value>uint8_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>accumulator</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pixel</name></cpp:macro> <cpp:value>uint16_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>accumulator</name></cpp:macro> <cpp:value>int64_t</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fn3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a##_##b</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fn2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fn3(a,b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fn</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fn2(a, DEPTH)</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIFF</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>as</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>bs</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((t) = ((*(a) - (b)[bs]) &lt;&lt; 2) + (a)[(as) &lt;&lt; 1] - (b)[-(bs)], (t) * (t))</cpp:value></cpp:define>





<function><type><specifier>static</specifier> <name><name>enum</name> <name>PhaseMode</name></name> <name>fn</name></type>(<name>analyze_plane</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>PhaseMode</name></name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>old</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>new</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>bdiff</name></decl>, <decl><type ref="prev"/><name>tdiff</name></decl>, <decl><type ref="prev"/><name>pdiff</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>AUTO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <ternary><condition><expr><name><name>new</name><operator>-&gt;</operator><name>interlaced_frame</name></name></expr> ?</condition><then> <expr><ternary><condition><expr><name><name>new</name><operator>-&gt;</operator><name>top_field_first</name></name></expr> ?</condition><then>
<expr><name>TOP_FIRST</name></expr> </then><else>: <expr><name>BOTTOM_FIRST</name></expr></else></ternary></expr> </then><else>: <expr><name>PROGRESSIVE</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>AUTO_ANALYZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <ternary><condition><expr><name><name>new</name><operator>-&gt;</operator><name>interlaced_frame</name></name></expr> ?</condition><then> <expr><ternary><condition><expr><name><name>new</name><operator>-&gt;</operator><name>top_field_first</name></name></expr> ?</condition><then>
<expr><name>TOP_FIRST_ANALYZE</name></expr> </then><else>: <expr><name>BOTTOM_FIRST_ANALYZE</name></expr></else></ternary></expr> </then><else>: <expr><name>FULL_ANALYZE</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&lt;=</operator> <name>BOTTOM_FIRST</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bdiff</name> <operator>=</operator> <name>pdiff</name> <operator>=</operator> <name>tdiff</name> <operator>=</operator> <literal type="number">65536.0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>factor</name> <init>= <expr><literal type="number">1.</literal> <operator>/</operator> <operator>(</operator><literal type="number">25.</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ns</name> <init>= <expr><name><name>new</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>os</name> <init>= <expr><name><name>old</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>nptr</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name><name>new</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>optr</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name><name>old</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name> <init>= <expr><name><name>new</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w</name> <init>= <expr><name><name>new</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>accumulator</name></type> <name>bdif</name></decl>, <decl><type ref="prev"/><name>tdif</name></decl>, <decl><type ref="prev"/><name>pdif</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>scale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>top</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>rend</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name> <init>= <expr><name>nptr</name> <operator>+</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name>ns</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bdiff</name> <operator>=</operator> <name>pdiff</name> <operator>=</operator> <name>tdiff</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nptr</name> <operator>+=</operator> <name>ns</name></expr>;</expr_stmt>
<expr_stmt><expr><name>optr</name> <operator>+=</operator> <name>os</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>nptr</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pdif</name> <operator>=</operator> <name>tdif</name> <operator>=</operator> <name>bdif</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TOP_FIRST_ANALYZE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>top</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>rend</name> <operator>=</operator> <name>nptr</name> <operator>+</operator> <name>w</name></expr>;</init> <condition><expr><name>nptr</name> <operator>&lt;</operator> <name>rend</name></expr>;</condition> <incr><expr><name>nptr</name><operator>++</operator></expr><operator>,</operator> <expr><name>optr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>pdif</name> <operator>+=</operator> <call><name>DIFF</name><argument_list>(<argument><expr><name>nptr</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>nptr</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tdif</name> <operator>+=</operator> <call><name>DIFF</name><argument_list>(<argument><expr><name>nptr</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>optr</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>rend</name> <operator>=</operator> <name>nptr</name> <operator>+</operator> <name>w</name></expr>;</init> <condition><expr><name>nptr</name> <operator>&lt;</operator> <name>rend</name></expr>;</condition> <incr><expr><name>nptr</name><operator>++</operator></expr><operator>,</operator> <expr><name>optr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>pdif</name> <operator>+=</operator> <call><name>DIFF</name><argument_list>(<argument><expr><name>nptr</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>nptr</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tdif</name> <operator>+=</operator> <call><name>DIFF</name><argument_list>(<argument><expr><name>optr</name></expr></argument>, <argument><expr><name>os</name></expr></argument>, <argument><expr><name>nptr</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>BOTTOM_FIRST_ANALYZE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>top</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>rend</name> <operator>=</operator> <name>nptr</name> <operator>+</operator> <name>w</name></expr>;</init> <condition><expr><name>nptr</name> <operator>&lt;</operator> <name>rend</name></expr>;</condition> <incr><expr><name>nptr</name><operator>++</operator></expr><operator>,</operator> <expr><name>optr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>pdif</name> <operator>+=</operator> <call><name>DIFF</name><argument_list>(<argument><expr><name>nptr</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>nptr</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bdif</name> <operator>+=</operator> <call><name>DIFF</name><argument_list>(<argument><expr><name>optr</name></expr></argument>, <argument><expr><name>os</name></expr></argument>, <argument><expr><name>nptr</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>rend</name> <operator>=</operator> <name>nptr</name> <operator>+</operator> <name>w</name></expr>;</init> <condition><expr><name>nptr</name> <operator>&lt;</operator> <name>rend</name></expr>;</condition> <incr><expr><name>nptr</name><operator>++</operator></expr><operator>,</operator> <expr><name>optr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>pdif</name> <operator>+=</operator> <call><name>DIFF</name><argument_list>(<argument><expr><name>nptr</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>nptr</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bdif</name> <operator>+=</operator> <call><name>DIFF</name><argument_list>(<argument><expr><name>nptr</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>optr</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>ANALYZE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>top</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>rend</name> <operator>=</operator> <name>nptr</name> <operator>+</operator> <name>w</name></expr>;</init> <condition><expr><name>nptr</name> <operator>&lt;</operator> <name>rend</name></expr>;</condition> <incr><expr><name>nptr</name><operator>++</operator></expr><operator>,</operator> <expr><name>optr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>tdif</name> <operator>+=</operator> <call><name>DIFF</name><argument_list>(<argument><expr><name>nptr</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>optr</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bdif</name> <operator>+=</operator> <call><name>DIFF</name><argument_list>(<argument><expr><name>optr</name></expr></argument>, <argument><expr><name>os</name></expr></argument>, <argument><expr><name>nptr</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>rend</name> <operator>=</operator> <name>nptr</name> <operator>+</operator> <name>w</name></expr>;</init> <condition><expr><name>nptr</name> <operator>&lt;</operator> <name>rend</name></expr>;</condition> <incr><expr><name>nptr</name><operator>++</operator></expr><operator>,</operator> <expr><name>optr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>bdif</name> <operator>+=</operator> <call><name>DIFF</name><argument_list>(<argument><expr><name>nptr</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>optr</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tdif</name> <operator>+=</operator> <call><name>DIFF</name><argument_list>(<argument><expr><name>optr</name></expr></argument>, <argument><expr><name>os</name></expr></argument>, <argument><expr><name>nptr</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>FULL_ANALYZE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>top</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>rend</name> <operator>=</operator> <name>nptr</name> <operator>+</operator> <name>w</name></expr>;</init> <condition><expr><name>nptr</name> <operator>&lt;</operator> <name>rend</name></expr>;</condition> <incr><expr><name>nptr</name><operator>++</operator></expr><operator>,</operator> <expr><name>optr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>pdif</name> <operator>+=</operator> <call><name>DIFF</name><argument_list>(<argument><expr><name>nptr</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>nptr</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tdif</name> <operator>+=</operator> <call><name>DIFF</name><argument_list>(<argument><expr><name>nptr</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>optr</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bdif</name> <operator>+=</operator> <call><name>DIFF</name><argument_list>(<argument><expr><name>optr</name></expr></argument>, <argument><expr><name>os</name></expr></argument>, <argument><expr><name>nptr</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>rend</name> <operator>=</operator> <name>nptr</name> <operator>+</operator> <name>w</name></expr>;</init> <condition><expr><name>nptr</name> <operator>&lt;</operator> <name>rend</name></expr>;</condition> <incr><expr><name>nptr</name><operator>++</operator></expr><operator>,</operator> <expr><name>optr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>pdif</name> <operator>+=</operator> <call><name>DIFF</name><argument_list>(<argument><expr><name>nptr</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>nptr</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bdif</name> <operator>+=</operator> <call><name>DIFF</name><argument_list>(<argument><expr><name>nptr</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>optr</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tdif</name> <operator>+=</operator> <call><name>DIFF</name><argument_list>(<argument><expr><name>optr</name></expr></argument>, <argument><expr><name>os</name></expr></argument>, <argument><expr><name>nptr</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><name>pdiff</name> <operator>+=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>pdif</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tdiff</name> <operator>+=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>tdif</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bdiff</name> <operator>+=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>bdif</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nptr</name> <operator>+=</operator> <name>ns</name> <operator>-</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>optr</name> <operator>+=</operator> <name>os</name> <operator>-</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>top</name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>/</operator> <operator>(</operator><name>w</name> <operator>*</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pdiff</name> <operator>*=</operator> <name>scale</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tdiff</name> <operator>*=</operator> <name>scale</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bdiff</name> <operator>*=</operator> <name>scale</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>TOP_FIRST_ANALYZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bdiff</name> <operator>=</operator> <literal type="number">65536.0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>BOTTOM_FIRST_ANALYZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tdiff</name> <operator>=</operator> <literal type="number">65536.0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>ANALYZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pdiff</name> <operator>=</operator> <literal type="number">65536.0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bdiff</name> <operator>&lt;</operator> <name>pdiff</name> <operator>&amp;&amp;</operator> <name>bdiff</name> <operator>&lt;</operator> <name>tdiff</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>BOTTOM_FIRST</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tdiff</name> <operator>&lt;</operator> <name>pdiff</name> <operator>&amp;&amp;</operator> <name>tdiff</name> <operator>&lt;</operator> <name>bdiff</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>TOP_FIRST</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>PROGRESSIVE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"mode=%c tdiff=%f bdiff=%f pdiff=%f\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>mode</name> <operator>==</operator> <name>BOTTOM_FIRST</name></expr> ?</condition><then> <expr><literal type="char">'b'</literal></expr> </then><else>: <expr><ternary><condition><expr><name>mode</name> <operator>==</operator> <name>TOP_FIRST</name></expr> ?</condition><then> <expr><literal type="char">'t'</literal></expr> </then><else>: <expr><literal type="char">'p'</literal></expr></else></ternary></expr></else></ternary></expr></argument>,
<argument><expr><name>tdiff</name></expr></argument>, <argument><expr><name>bdiff</name></expr></argument>, <argument><expr><name>pdiff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>mode</name></expr>;</return>
</block_content>}</block></function>
</unit>
