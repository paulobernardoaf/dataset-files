<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vf_hqx.c">




























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>hqxfunc_t</name>)<parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>HQXContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hqxfunc_t</name></type> <name>func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>rgbtoyuv</name><index>[<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">24</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>HQXContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ThreadData</name> <block>{
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl>, <modifier>*</modifier><name>out</name>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>rgbtoyuv</name></decl>;</decl_stmt>
}</block></struct></type> <name>ThreadData</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(HQXContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_VIDEO_PARAM</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>hqx_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"n"</literal></expr>, <expr><literal type="string">"set scale factor"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">3</literal></expr>}</block></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>hqx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>uint32_t</name></type> <name>rgb2yuv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>r2y</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>r2y</name><index>[<expr><name>c</name> <operator>&amp;</operator> <literal type="number">0xffffff</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>yuv_diff</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>yuv1</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>yuv2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YMASK</name></cpp:macro> <cpp:value>0xff0000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UMASK</name></cpp:macro> <cpp:value>0x00ff00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VMASK</name></cpp:macro> <cpp:value>0x0000ff</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ABSDIFF</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(abs((int)(a)-(int)(b)))</cpp:value></cpp:define>

<return>return <expr><call><name>ABSDIFF</name><argument_list>(<argument><expr><name>yuv1</name> <operator>&amp;</operator> <name>YMASK</name></expr></argument>, <argument><expr><name>yuv2</name> <operator>&amp;</operator> <name>YMASK</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <operator>(</operator><literal type="number">48</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>||</operator>
<call><name>ABSDIFF</name><argument_list>(<argument><expr><name>yuv1</name> <operator>&amp;</operator> <name>UMASK</name></expr></argument>, <argument><expr><name>yuv2</name> <operator>&amp;</operator> <name>UMASK</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <operator>(</operator> <literal type="number">7</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>||</operator>
<call><name>ABSDIFF</name><argument_list>(<argument><expr><name>yuv1</name> <operator>&amp;</operator> <name>VMASK</name></expr></argument>, <argument><expr><name>yuv2</name> <operator>&amp;</operator> <name>VMASK</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <operator>(</operator> <literal type="number">6</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>uint32_t</name></type> <name>interp_2px</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w1</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>c1</name> <operator>&amp;</operator> <literal type="number">0xff00ff00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <name>w1</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>c2</name> <operator>&amp;</operator> <literal type="number">0xff00ff00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <name>w2</name><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>s</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff00ff00</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>c1</name> <operator>&amp;</operator> <literal type="number">0x00ff00ff</literal><operator>)</operator> <operator>)</operator> <operator>*</operator> <name>w1</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>c2</name> <operator>&amp;</operator> <literal type="number">0x00ff00ff</literal><operator>)</operator> <operator>)</operator> <operator>*</operator> <name>w2</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>s</name> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00ff00ff</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>uint32_t</name></type> <name>interp_3px</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w1</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w2</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>c3</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w3</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>c1</name> <operator>&amp;</operator> <literal type="number">0xff00ff00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <name>w1</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>c2</name> <operator>&amp;</operator> <literal type="number">0xff00ff00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <name>w2</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>c3</name> <operator>&amp;</operator> <literal type="number">0xff00ff00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <name>w3</name><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>s</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff00ff00</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>c1</name> <operator>&amp;</operator> <literal type="number">0x00ff00ff</literal><operator>)</operator> <operator>)</operator> <operator>*</operator> <name>w1</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>c2</name> <operator>&amp;</operator> <literal type="number">0x00ff00ff</literal><operator>)</operator> <operator>)</operator> <operator>*</operator> <name>w2</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>c3</name> <operator>&amp;</operator> <literal type="number">0x00ff00ff</literal><operator>)</operator> <operator>)</operator> <operator>*</operator> <name>w3</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>s</name> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00ff00ff</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((k_shuffled &amp; (m)) == (r))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DROP4</name><parameter_list>(<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((z) &gt; 4 ? (z)-1 : (z))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>rot</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &gt;&gt; ((rot) ? 7-DROP4(n) : DROP4(n)) &amp; 1) &lt;&lt; DROP4(p##n))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WDIFF</name><parameter_list>(<parameter><type><name>c1</name></type></parameter>, <parameter><type><name>c2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>yuv_diff(rgb2yuv(r2y, c1), rgb2yuv(r2y, c2))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERP_BOOTSTRAP</name><parameter_list>(<parameter><type><name>rot</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>const int k_shuffled = SHF(k,rot,0) | SHF(k,rot,1) | SHF(k,rot,2) | SHF(k,rot,3) | 0 | SHF(k,rot,5) | SHF(k,rot,6) | SHF(k,rot,7) | SHF(k,rot,8); const uint32_t w0 = w[p0], w1 = w[p1], w3 = w[p3], w4 = w[p4], w5 = w[p5], w7 = w[p7]</cpp:value></cpp:define>











<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>uint32_t</name></type> <name>hq2x_interp_1x1</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>r2y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>w</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>p0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>p3</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p4</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p5</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>p6</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p7</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p8</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>INTERP_BOOTSTRAP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>P</name><argument_list>(<argument><expr><literal type="number">0xbf</literal></expr></argument>,<argument><expr><literal type="number">0x37</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xdb</literal></expr></argument>,<argument><expr><literal type="number">0x13</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>WDIFF</name><argument_list>(<argument><expr><name>w1</name></expr></argument>, <argument><expr><name>w5</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>interp_2px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>w3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>P</name><argument_list>(<argument><expr><literal type="number">0xdb</literal></expr></argument>,<argument><expr><literal type="number">0x49</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xef</literal></expr></argument>,<argument><expr><literal type="number">0x6d</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>WDIFF</name><argument_list>(<argument><expr><name>w7</name></expr></argument>, <argument><expr><name>w3</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>interp_2px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>P</name><argument_list>(<argument><expr><literal type="number">0x0b</literal></expr></argument>,<argument><expr><literal type="number">0x0b</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xfe</literal></expr></argument>,<argument><expr><literal type="number">0x4a</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xfe</literal></expr></argument>,<argument><expr><literal type="number">0x1a</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>WDIFF</name><argument_list>(<argument><expr><name>w3</name></expr></argument>, <argument><expr><name>w1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>w4</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>P</name><argument_list>(<argument><expr><literal type="number">0x6f</literal></expr></argument>,<argument><expr><literal type="number">0x2a</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x5b</literal></expr></argument>,<argument><expr><literal type="number">0x0a</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xbf</literal></expr></argument>,<argument><expr><literal type="number">0x3a</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xdf</literal></expr></argument>,<argument><expr><literal type="number">0x5a</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>P</name><argument_list>(<argument><expr><literal type="number">0x9f</literal></expr></argument>,<argument><expr><literal type="number">0x8a</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xcf</literal></expr></argument>,<argument><expr><literal type="number">0x8a</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xef</literal></expr></argument>,<argument><expr><literal type="number">0x4e</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x3f</literal></expr></argument>,<argument><expr><literal type="number">0x0e</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>P</name><argument_list>(<argument><expr><literal type="number">0xfb</literal></expr></argument>,<argument><expr><literal type="number">0x5a</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xbb</literal></expr></argument>,<argument><expr><literal type="number">0x8a</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x7f</literal></expr></argument>,<argument><expr><literal type="number">0x5a</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xaf</literal></expr></argument>,<argument><expr><literal type="number">0x8a</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>P</name><argument_list>(<argument><expr><literal type="number">0xeb</literal></expr></argument>,<argument><expr><literal type="number">0x8a</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>WDIFF</name><argument_list>(<argument><expr><name>w3</name></expr></argument>, <argument><expr><name>w1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>interp_2px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>w0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>P</name><argument_list>(<argument><expr><literal type="number">0x0b</literal></expr></argument>,<argument><expr><literal type="number">0x08</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>interp_3px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>w0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>P</name><argument_list>(<argument><expr><literal type="number">0x0b</literal></expr></argument>,<argument><expr><literal type="number">0x02</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>interp_3px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>w0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>w3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>P</name><argument_list>(<argument><expr><literal type="number">0x2f</literal></expr></argument>,<argument><expr><literal type="number">0x2f</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>interp_3px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><name>w3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>P</name><argument_list>(<argument><expr><literal type="number">0xbf</literal></expr></argument>,<argument><expr><literal type="number">0x37</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xdb</literal></expr></argument>,<argument><expr><literal type="number">0x13</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>interp_3px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>w3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>P</name><argument_list>(<argument><expr><literal type="number">0xdb</literal></expr></argument>,<argument><expr><literal type="number">0x49</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xef</literal></expr></argument>,<argument><expr><literal type="number">0x6d</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>interp_3px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>w3</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>P</name><argument_list>(<argument><expr><literal type="number">0x1b</literal></expr></argument>,<argument><expr><literal type="number">0x03</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x4f</literal></expr></argument>,<argument><expr><literal type="number">0x43</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x8b</literal></expr></argument>,<argument><expr><literal type="number">0x83</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x6b</literal></expr></argument>,<argument><expr><literal type="number">0x43</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>interp_2px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>w3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>P</name><argument_list>(<argument><expr><literal type="number">0x4b</literal></expr></argument>,<argument><expr><literal type="number">0x09</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x8b</literal></expr></argument>,<argument><expr><literal type="number">0x89</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x1f</literal></expr></argument>,<argument><expr><literal type="number">0x19</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x3b</literal></expr></argument>,<argument><expr><literal type="number">0x19</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>interp_2px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>P</name><argument_list>(<argument><expr><literal type="number">0x7e</literal></expr></argument>,<argument><expr><literal type="number">0x2a</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xef</literal></expr></argument>,<argument><expr><literal type="number">0xab</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xbf</literal></expr></argument>,<argument><expr><literal type="number">0x8f</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x7e</literal></expr></argument>,<argument><expr><literal type="number">0x0e</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>interp_3px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>w3</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>P</name><argument_list>(<argument><expr><literal type="number">0xfb</literal></expr></argument>,<argument><expr><literal type="number">0x6a</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x6f</literal></expr></argument>,<argument><expr><literal type="number">0x6e</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x3f</literal></expr></argument>,<argument><expr><literal type="number">0x3e</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xfb</literal></expr></argument>,<argument><expr><literal type="number">0xfa</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>P</name><argument_list>(<argument><expr><literal type="number">0xdf</literal></expr></argument>,<argument><expr><literal type="number">0xde</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xdf</literal></expr></argument>,<argument><expr><literal type="number">0x1e</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>interp_2px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>w0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>P</name><argument_list>(<argument><expr><literal type="number">0x0a</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x4f</literal></expr></argument>,<argument><expr><literal type="number">0x4b</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x9f</literal></expr></argument>,<argument><expr><literal type="number">0x1b</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x2f</literal></expr></argument>,<argument><expr><literal type="number">0x0b</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>P</name><argument_list>(<argument><expr><literal type="number">0xbe</literal></expr></argument>,<argument><expr><literal type="number">0x0a</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xee</literal></expr></argument>,<argument><expr><literal type="number">0x0a</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x7e</literal></expr></argument>,<argument><expr><literal type="number">0x0a</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xeb</literal></expr></argument>,<argument><expr><literal type="number">0x4b</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>P</name><argument_list>(<argument><expr><literal type="number">0x3b</literal></expr></argument>,<argument><expr><literal type="number">0x1b</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>interp_3px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>w3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>interp_3px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>w3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>hq3x_interp_2x1</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_linesize</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>r2y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>w</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>pos00</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos01</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>p0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>p3</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p4</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p5</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>p6</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p7</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p8</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>rotate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>INTERP_BOOTSTRAP</name><argument_list>(<argument><expr><name>rotate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst00</name> <init>= <expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>dst_linesize</name><operator>*</operator><operator>(</operator><name>pos00</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>pos00</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst01</name> <init>= <expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>dst_linesize</name><operator>*</operator><operator>(</operator><name>pos01</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>pos01</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>P</name><argument_list>(<argument><expr><literal type="number">0xdb</literal></expr></argument>,<argument><expr><literal type="number">0x49</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xef</literal></expr></argument>,<argument><expr><literal type="number">0x6d</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>WDIFF</name><argument_list>(<argument><expr><name>w7</name></expr></argument>, <argument><expr><name>w3</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst00</name> <operator>=</operator> <call><name>interp_2px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>P</name><argument_list>(<argument><expr><literal type="number">0xbf</literal></expr></argument>,<argument><expr><literal type="number">0x37</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xdb</literal></expr></argument>,<argument><expr><literal type="number">0x13</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>WDIFF</name><argument_list>(<argument><expr><name>w1</name></expr></argument>, <argument><expr><name>w5</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst00</name> <operator>=</operator> <call><name>interp_2px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>w3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>P</name><argument_list>(<argument><expr><literal type="number">0x0b</literal></expr></argument>,<argument><expr><literal type="number">0x0b</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xfe</literal></expr></argument>,<argument><expr><literal type="number">0x4a</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xfe</literal></expr></argument>,<argument><expr><literal type="number">0x1a</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>WDIFF</name><argument_list>(<argument><expr><name>w3</name></expr></argument>, <argument><expr><name>w1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst00</name> <operator>=</operator> <name>w4</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>P</name><argument_list>(<argument><expr><literal type="number">0x6f</literal></expr></argument>,<argument><expr><literal type="number">0x2a</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x5b</literal></expr></argument>,<argument><expr><literal type="number">0x0a</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xbf</literal></expr></argument>,<argument><expr><literal type="number">0x3a</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xdf</literal></expr></argument>,<argument><expr><literal type="number">0x5a</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>P</name><argument_list>(<argument><expr><literal type="number">0x9f</literal></expr></argument>,<argument><expr><literal type="number">0x8a</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xcf</literal></expr></argument>,<argument><expr><literal type="number">0x8a</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xef</literal></expr></argument>,<argument><expr><literal type="number">0x4e</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x3f</literal></expr></argument>,<argument><expr><literal type="number">0x0e</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>P</name><argument_list>(<argument><expr><literal type="number">0xfb</literal></expr></argument>,<argument><expr><literal type="number">0x5a</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xbb</literal></expr></argument>,<argument><expr><literal type="number">0x8a</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x7f</literal></expr></argument>,<argument><expr><literal type="number">0x5a</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xaf</literal></expr></argument>,<argument><expr><literal type="number">0x8a</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>P</name><argument_list>(<argument><expr><literal type="number">0xeb</literal></expr></argument>,<argument><expr><literal type="number">0x8a</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>WDIFF</name><argument_list>(<argument><expr><name>w3</name></expr></argument>, <argument><expr><name>w1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst00</name> <operator>=</operator> <call><name>interp_2px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>w0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>P</name><argument_list>(<argument><expr><literal type="number">0x4b</literal></expr></argument>,<argument><expr><literal type="number">0x09</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x8b</literal></expr></argument>,<argument><expr><literal type="number">0x89</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x1f</literal></expr></argument>,<argument><expr><literal type="number">0x19</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x3b</literal></expr></argument>,<argument><expr><literal type="number">0x19</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst00</name> <operator>=</operator> <call><name>interp_2px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>P</name><argument_list>(<argument><expr><literal type="number">0x1b</literal></expr></argument>,<argument><expr><literal type="number">0x03</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x4f</literal></expr></argument>,<argument><expr><literal type="number">0x43</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x8b</literal></expr></argument>,<argument><expr><literal type="number">0x83</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x6b</literal></expr></argument>,<argument><expr><literal type="number">0x43</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst00</name> <operator>=</operator> <call><name>interp_2px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>w3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>P</name><argument_list>(<argument><expr><literal type="number">0x7e</literal></expr></argument>,<argument><expr><literal type="number">0x2a</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xef</literal></expr></argument>,<argument><expr><literal type="number">0xab</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xbf</literal></expr></argument>,<argument><expr><literal type="number">0x8f</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x7e</literal></expr></argument>,<argument><expr><literal type="number">0x0e</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst00</name> <operator>=</operator> <call><name>interp_2px</name><argument_list>(<argument><expr><name>w3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>P</name><argument_list>(<argument><expr><literal type="number">0x4f</literal></expr></argument>,<argument><expr><literal type="number">0x4b</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x9f</literal></expr></argument>,<argument><expr><literal type="number">0x1b</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x2f</literal></expr></argument>,<argument><expr><literal type="number">0x0b</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xbe</literal></expr></argument>,<argument><expr><literal type="number">0x0a</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>P</name><argument_list>(<argument><expr><literal type="number">0xee</literal></expr></argument>,<argument><expr><literal type="number">0x0a</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x7e</literal></expr></argument>,<argument><expr><literal type="number">0x0a</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xeb</literal></expr></argument>,<argument><expr><literal type="number">0x4b</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x3b</literal></expr></argument>,<argument><expr><literal type="number">0x1b</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst00</name> <operator>=</operator> <call><name>interp_3px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>w3</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>P</name><argument_list>(<argument><expr><literal type="number">0x0b</literal></expr></argument>,<argument><expr><literal type="number">0x08</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xf9</literal></expr></argument>,<argument><expr><literal type="number">0x68</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xf3</literal></expr></argument>,<argument><expr><literal type="number">0x62</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x6d</literal></expr></argument>,<argument><expr><literal type="number">0x6c</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>P</name><argument_list>(<argument><expr><literal type="number">0x67</literal></expr></argument>,<argument><expr><literal type="number">0x66</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x3d</literal></expr></argument>,<argument><expr><literal type="number">0x3c</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x37</literal></expr></argument>,<argument><expr><literal type="number">0x36</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xf9</literal></expr></argument>,<argument><expr><literal type="number">0xf8</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>P</name><argument_list>(<argument><expr><literal type="number">0xdd</literal></expr></argument>,<argument><expr><literal type="number">0xdc</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xf3</literal></expr></argument>,<argument><expr><literal type="number">0xf2</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xd7</literal></expr></argument>,<argument><expr><literal type="number">0xd6</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xdd</literal></expr></argument>,<argument><expr><literal type="number">0x1c</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>P</name><argument_list>(<argument><expr><literal type="number">0xd7</literal></expr></argument>,<argument><expr><literal type="number">0x16</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x0b</literal></expr></argument>,<argument><expr><literal type="number">0x02</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst00</name> <operator>=</operator> <call><name>interp_2px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>w0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst00</name> <operator>=</operator> <call><name>interp_3px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>w3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>P</name><argument_list>(<argument><expr><literal type="number">0xfe</literal></expr></argument>,<argument><expr><literal type="number">0xde</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x9e</literal></expr></argument>,<argument><expr><literal type="number">0x16</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xda</literal></expr></argument>,<argument><expr><literal type="number">0x12</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x17</literal></expr></argument>,<argument><expr><literal type="number">0x16</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>P</name><argument_list>(<argument><expr><literal type="number">0x5b</literal></expr></argument>,<argument><expr><literal type="number">0x12</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xbb</literal></expr></argument>,<argument><expr><literal type="number">0x12</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>WDIFF</name><argument_list>(<argument><expr><name>w1</name></expr></argument>, <argument><expr><name>w5</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst01</name> <operator>=</operator> <name>w4</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>P</name><argument_list>(<argument><expr><literal type="number">0x0f</literal></expr></argument>,<argument><expr><literal type="number">0x0b</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x5e</literal></expr></argument>,<argument><expr><literal type="number">0x0a</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xfb</literal></expr></argument>,<argument><expr><literal type="number">0x7b</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x3b</literal></expr></argument>,<argument><expr><literal type="number">0x0b</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>P</name><argument_list>(<argument><expr><literal type="number">0xbe</literal></expr></argument>,<argument><expr><literal type="number">0x0a</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x7a</literal></expr></argument>,<argument><expr><literal type="number">0x0a</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>WDIFF</name><argument_list>(<argument><expr><name>w3</name></expr></argument>, <argument><expr><name>w1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst01</name> <operator>=</operator> <name>w4</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>P</name><argument_list>(<argument><expr><literal type="number">0xbf</literal></expr></argument>,<argument><expr><literal type="number">0x8f</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x7e</literal></expr></argument>,<argument><expr><literal type="number">0x0e</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xbf</literal></expr></argument>,<argument><expr><literal type="number">0x37</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xdb</literal></expr></argument>,<argument><expr><literal type="number">0x13</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst01</name> <operator>=</operator> <call><name>interp_2px</name><argument_list>(<argument><expr><name>w1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>P</name><argument_list>(<argument><expr><literal type="number">0x02</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x7c</literal></expr></argument>,<argument><expr><literal type="number">0x28</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xed</literal></expr></argument>,<argument><expr><literal type="number">0xa9</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xf5</literal></expr></argument>,<argument><expr><literal type="number">0xb4</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>P</name><argument_list>(<argument><expr><literal type="number">0xd9</literal></expr></argument>,<argument><expr><literal type="number">0x90</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst01</name> <operator>=</operator> <call><name>interp_2px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>P</name><argument_list>(<argument><expr><literal type="number">0x4f</literal></expr></argument>,<argument><expr><literal type="number">0x4b</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xfb</literal></expr></argument>,<argument><expr><literal type="number">0x7b</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xfe</literal></expr></argument>,<argument><expr><literal type="number">0x7e</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x9f</literal></expr></argument>,<argument><expr><literal type="number">0x1b</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>P</name><argument_list>(<argument><expr><literal type="number">0x2f</literal></expr></argument>,<argument><expr><literal type="number">0x0b</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xbe</literal></expr></argument>,<argument><expr><literal type="number">0x0a</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x7e</literal></expr></argument>,<argument><expr><literal type="number">0x0a</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xfb</literal></expr></argument>,<argument><expr><literal type="number">0x4b</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>P</name><argument_list>(<argument><expr><literal type="number">0xfb</literal></expr></argument>,<argument><expr><literal type="number">0xdb</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xfe</literal></expr></argument>,<argument><expr><literal type="number">0xde</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xfe</literal></expr></argument>,<argument><expr><literal type="number">0x56</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x57</literal></expr></argument>,<argument><expr><literal type="number">0x56</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>P</name><argument_list>(<argument><expr><literal type="number">0x97</literal></expr></argument>,<argument><expr><literal type="number">0x16</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x3f</literal></expr></argument>,<argument><expr><literal type="number">0x1e</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xdb</literal></expr></argument>,<argument><expr><literal type="number">0x12</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xbb</literal></expr></argument>,<argument><expr><literal type="number">0x12</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst01</name> <operator>=</operator> <call><name>interp_2px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst01</name> <operator>=</operator> <name>w4</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>hq4x_interp_2x2</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_linesize</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>r2y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>w</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>pos00</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos01</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>pos10</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos11</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>p0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>p3</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p4</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p5</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>p6</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p7</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p8</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>INTERP_BOOTSTRAP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst00</name> <init>= <expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>dst_linesize</name><operator>*</operator><operator>(</operator><name>pos00</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>pos00</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst01</name> <init>= <expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>dst_linesize</name><operator>*</operator><operator>(</operator><name>pos01</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>pos01</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst10</name> <init>= <expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>dst_linesize</name><operator>*</operator><operator>(</operator><name>pos10</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>pos10</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst11</name> <init>= <expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>dst_linesize</name><operator>*</operator><operator>(</operator><name>pos11</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>pos11</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cond00</name> <init>= <expr><operator>(</operator><call><name>P</name><argument_list>(<argument><expr><literal type="number">0xbf</literal></expr></argument>,<argument><expr><literal type="number">0x37</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xdb</literal></expr></argument>,<argument><expr><literal type="number">0x13</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>WDIFF</name><argument_list>(<argument><expr><name>w1</name></expr></argument>, <argument><expr><name>w5</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cond01</name> <init>= <expr><operator>(</operator><call><name>P</name><argument_list>(<argument><expr><literal type="number">0xdb</literal></expr></argument>,<argument><expr><literal type="number">0x49</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xef</literal></expr></argument>,<argument><expr><literal type="number">0x6d</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>WDIFF</name><argument_list>(<argument><expr><name>w7</name></expr></argument>, <argument><expr><name>w3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cond02</name> <init>= <expr><operator>(</operator><call><name>P</name><argument_list>(<argument><expr><literal type="number">0x6f</literal></expr></argument>,<argument><expr><literal type="number">0x2a</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x5b</literal></expr></argument>,<argument><expr><literal type="number">0x0a</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xbf</literal></expr></argument>,<argument><expr><literal type="number">0x3a</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>P</name><argument_list>(<argument><expr><literal type="number">0xdf</literal></expr></argument>,<argument><expr><literal type="number">0x5a</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x9f</literal></expr></argument>,<argument><expr><literal type="number">0x8a</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xcf</literal></expr></argument>,<argument><expr><literal type="number">0x8a</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>P</name><argument_list>(<argument><expr><literal type="number">0xef</literal></expr></argument>,<argument><expr><literal type="number">0x4e</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x3f</literal></expr></argument>,<argument><expr><literal type="number">0x0e</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xfb</literal></expr></argument>,<argument><expr><literal type="number">0x5a</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>P</name><argument_list>(<argument><expr><literal type="number">0xbb</literal></expr></argument>,<argument><expr><literal type="number">0x8a</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x7f</literal></expr></argument>,<argument><expr><literal type="number">0x5a</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xaf</literal></expr></argument>,<argument><expr><literal type="number">0x8a</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>P</name><argument_list>(<argument><expr><literal type="number">0xeb</literal></expr></argument>,<argument><expr><literal type="number">0x8a</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>WDIFF</name><argument_list>(<argument><expr><name>w3</name></expr></argument>, <argument><expr><name>w1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cond03</name> <init>= <expr><call><name>P</name><argument_list>(<argument><expr><literal type="number">0xdb</literal></expr></argument>,<argument><expr><literal type="number">0x49</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xef</literal></expr></argument>,<argument><expr><literal type="number">0x6d</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cond04</name> <init>= <expr><call><name>P</name><argument_list>(<argument><expr><literal type="number">0xbf</literal></expr></argument>,<argument><expr><literal type="number">0x37</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xdb</literal></expr></argument>,<argument><expr><literal type="number">0x13</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cond05</name> <init>= <expr><call><name>P</name><argument_list>(<argument><expr><literal type="number">0x1b</literal></expr></argument>,<argument><expr><literal type="number">0x03</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x4f</literal></expr></argument>,<argument><expr><literal type="number">0x43</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x8b</literal></expr></argument>,<argument><expr><literal type="number">0x83</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>P</name><argument_list>(<argument><expr><literal type="number">0x6b</literal></expr></argument>,<argument><expr><literal type="number">0x43</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cond06</name> <init>= <expr><call><name>P</name><argument_list>(<argument><expr><literal type="number">0x4b</literal></expr></argument>,<argument><expr><literal type="number">0x09</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x8b</literal></expr></argument>,<argument><expr><literal type="number">0x89</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x1f</literal></expr></argument>,<argument><expr><literal type="number">0x19</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>P</name><argument_list>(<argument><expr><literal type="number">0x3b</literal></expr></argument>,<argument><expr><literal type="number">0x19</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cond07</name> <init>= <expr><call><name>P</name><argument_list>(<argument><expr><literal type="number">0x0b</literal></expr></argument>,<argument><expr><literal type="number">0x08</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xf9</literal></expr></argument>,<argument><expr><literal type="number">0x68</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xf3</literal></expr></argument>,<argument><expr><literal type="number">0x62</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>P</name><argument_list>(<argument><expr><literal type="number">0x6d</literal></expr></argument>,<argument><expr><literal type="number">0x6c</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x67</literal></expr></argument>,<argument><expr><literal type="number">0x66</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x3d</literal></expr></argument>,<argument><expr><literal type="number">0x3c</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>P</name><argument_list>(<argument><expr><literal type="number">0x37</literal></expr></argument>,<argument><expr><literal type="number">0x36</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xf9</literal></expr></argument>,<argument><expr><literal type="number">0xf8</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xdd</literal></expr></argument>,<argument><expr><literal type="number">0xdc</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>P</name><argument_list>(<argument><expr><literal type="number">0xf3</literal></expr></argument>,<argument><expr><literal type="number">0xf2</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xd7</literal></expr></argument>,<argument><expr><literal type="number">0xd6</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xdd</literal></expr></argument>,<argument><expr><literal type="number">0x1c</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>P</name><argument_list>(<argument><expr><literal type="number">0xd7</literal></expr></argument>,<argument><expr><literal type="number">0x16</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x0b</literal></expr></argument>,<argument><expr><literal type="number">0x02</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cond08</name> <init>= <expr><operator>(</operator><call><name>P</name><argument_list>(<argument><expr><literal type="number">0x0f</literal></expr></argument>,<argument><expr><literal type="number">0x0b</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x2b</literal></expr></argument>,<argument><expr><literal type="number">0x0b</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xfe</literal></expr></argument>,<argument><expr><literal type="number">0x4a</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>P</name><argument_list>(<argument><expr><literal type="number">0xfe</literal></expr></argument>,<argument><expr><literal type="number">0x1a</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>WDIFF</name><argument_list>(<argument><expr><name>w3</name></expr></argument>, <argument><expr><name>w1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cond09</name> <init>= <expr><call><name>P</name><argument_list>(<argument><expr><literal type="number">0x2f</literal></expr></argument>,<argument><expr><literal type="number">0x2f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cond10</name> <init>= <expr><call><name>P</name><argument_list>(<argument><expr><literal type="number">0x0a</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cond11</name> <init>= <expr><call><name>P</name><argument_list>(<argument><expr><literal type="number">0x0b</literal></expr></argument>,<argument><expr><literal type="number">0x09</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cond12</name> <init>= <expr><call><name>P</name><argument_list>(<argument><expr><literal type="number">0x7e</literal></expr></argument>,<argument><expr><literal type="number">0x2a</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xef</literal></expr></argument>,<argument><expr><literal type="number">0xab</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cond13</name> <init>= <expr><call><name>P</name><argument_list>(<argument><expr><literal type="number">0xbf</literal></expr></argument>,<argument><expr><literal type="number">0x8f</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x7e</literal></expr></argument>,<argument><expr><literal type="number">0x0e</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cond14</name> <init>= <expr><call><name>P</name><argument_list>(<argument><expr><literal type="number">0x4f</literal></expr></argument>,<argument><expr><literal type="number">0x4b</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x9f</literal></expr></argument>,<argument><expr><literal type="number">0x1b</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x2f</literal></expr></argument>,<argument><expr><literal type="number">0x0b</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>P</name><argument_list>(<argument><expr><literal type="number">0xbe</literal></expr></argument>,<argument><expr><literal type="number">0x0a</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xee</literal></expr></argument>,<argument><expr><literal type="number">0x0a</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x7e</literal></expr></argument>,<argument><expr><literal type="number">0x0a</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>P</name><argument_list>(<argument><expr><literal type="number">0xeb</literal></expr></argument>,<argument><expr><literal type="number">0x4b</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x3b</literal></expr></argument>,<argument><expr><literal type="number">0x1b</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cond15</name> <init>= <expr><call><name>P</name><argument_list>(<argument><expr><literal type="number">0x0b</literal></expr></argument>,<argument><expr><literal type="number">0x03</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cond00</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst00</name> <operator>=</operator> <call><name>interp_2px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>w3</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cond01</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst00</name> <operator>=</operator> <call><name>interp_2px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>P</name><argument_list>(<argument><expr><literal type="number">0x0b</literal></expr></argument>,<argument><expr><literal type="number">0x0b</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xfe</literal></expr></argument>,<argument><expr><literal type="number">0x4a</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xfe</literal></expr></argument>,<argument><expr><literal type="number">0x1a</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>WDIFF</name><argument_list>(<argument><expr><name>w3</name></expr></argument>, <argument><expr><name>w1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst00</name> <operator>=</operator> <name>w4</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cond02</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst00</name> <operator>=</operator> <call><name>interp_2px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>w0</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cond03</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst00</name> <operator>=</operator> <call><name>interp_2px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>w3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cond04</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst00</name> <operator>=</operator> <call><name>interp_2px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cond05</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst00</name> <operator>=</operator> <call><name>interp_2px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>w3</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cond06</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst00</name> <operator>=</operator> <call><name>interp_2px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>P</name><argument_list>(<argument><expr><literal type="number">0x0f</literal></expr></argument>,<argument><expr><literal type="number">0x0b</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x5e</literal></expr></argument>,<argument><expr><literal type="number">0x0a</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x2b</literal></expr></argument>,<argument><expr><literal type="number">0x0b</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xbe</literal></expr></argument>,<argument><expr><literal type="number">0x0a</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>P</name><argument_list>(<argument><expr><literal type="number">0x7a</literal></expr></argument>,<argument><expr><literal type="number">0x0a</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xee</literal></expr></argument>,<argument><expr><literal type="number">0x0a</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst00</name> <operator>=</operator> <call><name>interp_2px</name><argument_list>(<argument><expr><name>w1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>w3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cond07</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst00</name> <operator>=</operator> <call><name>interp_2px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>w0</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst00</name> <operator>=</operator> <call><name>interp_3px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>w3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cond00</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst01</name> <operator>=</operator> <call><name>interp_2px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>w3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cond08</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst01</name> <operator>=</operator> <name>w4</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cond02</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst01</name> <operator>=</operator> <call><name>interp_2px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>w0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cond09</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst01</name> <operator>=</operator> <name>w4</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cond10</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst01</name> <operator>=</operator> <call><name>interp_3px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>w3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>P</name><argument_list>(<argument><expr><literal type="number">0x0b</literal></expr></argument>,<argument><expr><literal type="number">0x08</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst01</name> <operator>=</operator> <call><name>interp_3px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>w0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cond11</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst01</name> <operator>=</operator> <call><name>interp_2px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cond04</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst01</name> <operator>=</operator> <call><name>interp_2px</name><argument_list>(<argument><expr><name>w1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cond12</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst01</name> <operator>=</operator> <call><name>interp_3px</name><argument_list>(<argument><expr><name>w1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>w3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cond13</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst01</name> <operator>=</operator> <call><name>interp_2px</name><argument_list>(<argument><expr><name>w1</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>w3</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cond05</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst01</name> <operator>=</operator> <call><name>interp_2px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>w3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>P</name><argument_list>(<argument><expr><literal type="number">0xf3</literal></expr></argument>,<argument><expr><literal type="number">0x62</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x67</literal></expr></argument>,<argument><expr><literal type="number">0x66</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x37</literal></expr></argument>,<argument><expr><literal type="number">0x36</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xf3</literal></expr></argument>,<argument><expr><literal type="number">0xf2</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>P</name><argument_list>(<argument><expr><literal type="number">0xd7</literal></expr></argument>,<argument><expr><literal type="number">0xd6</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xd7</literal></expr></argument>,<argument><expr><literal type="number">0x16</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x0b</literal></expr></argument>,<argument><expr><literal type="number">0x02</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst01</name> <operator>=</operator> <call><name>interp_2px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>w0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cond14</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst01</name> <operator>=</operator> <call><name>interp_2px</name><argument_list>(<argument><expr><name>w1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst01</name> <operator>=</operator> <call><name>interp_2px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cond01</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst10</name> <operator>=</operator> <call><name>interp_2px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cond08</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst10</name> <operator>=</operator> <name>w4</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cond02</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst10</name> <operator>=</operator> <call><name>interp_2px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>w0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cond09</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst10</name> <operator>=</operator> <name>w4</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cond10</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst10</name> <operator>=</operator> <call><name>interp_3px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>w3</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>P</name><argument_list>(<argument><expr><literal type="number">0x0b</literal></expr></argument>,<argument><expr><literal type="number">0x02</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst10</name> <operator>=</operator> <call><name>interp_3px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>w3</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>w0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cond15</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst10</name> <operator>=</operator> <call><name>interp_2px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>w3</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cond03</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst10</name> <operator>=</operator> <call><name>interp_2px</name><argument_list>(<argument><expr><name>w3</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cond13</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst10</name> <operator>=</operator> <call><name>interp_3px</name><argument_list>(<argument><expr><name>w3</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cond12</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst10</name> <operator>=</operator> <call><name>interp_2px</name><argument_list>(<argument><expr><name>w3</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cond06</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst10</name> <operator>=</operator> <call><name>interp_2px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>P</name><argument_list>(<argument><expr><literal type="number">0x0b</literal></expr></argument>,<argument><expr><literal type="number">0x08</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xf9</literal></expr></argument>,<argument><expr><literal type="number">0x68</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x6d</literal></expr></argument>,<argument><expr><literal type="number">0x6c</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x3d</literal></expr></argument>,<argument><expr><literal type="number">0x3c</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>P</name><argument_list>(<argument><expr><literal type="number">0xf9</literal></expr></argument>,<argument><expr><literal type="number">0xf8</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xdd</literal></expr></argument>,<argument><expr><literal type="number">0xdc</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xdd</literal></expr></argument>,<argument><expr><literal type="number">0x1c</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst10</name> <operator>=</operator> <call><name>interp_2px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>w0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cond14</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst10</name> <operator>=</operator> <call><name>interp_2px</name><argument_list>(<argument><expr><name>w3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst10</name> <operator>=</operator> <call><name>interp_2px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>w3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>P</name><argument_list>(<argument><expr><literal type="number">0x7f</literal></expr></argument>,<argument><expr><literal type="number">0x2b</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xef</literal></expr></argument>,<argument><expr><literal type="number">0xab</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xbf</literal></expr></argument>,<argument><expr><literal type="number">0x8f</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x7f</literal></expr></argument>,<argument><expr><literal type="number">0x0f</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>WDIFF</name><argument_list>(<argument><expr><name>w3</name></expr></argument>, <argument><expr><name>w1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst11</name> <operator>=</operator> <name>w4</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cond02</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst11</name> <operator>=</operator> <call><name>interp_2px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>w0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cond15</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst11</name> <operator>=</operator> <call><name>interp_2px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>w3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cond11</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst11</name> <operator>=</operator> <call><name>interp_2px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>P</name><argument_list>(<argument><expr><literal type="number">0x0a</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0x7e</literal></expr></argument>,<argument><expr><literal type="number">0x2a</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xef</literal></expr></argument>,<argument><expr><literal type="number">0xab</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>P</name><argument_list>(<argument><expr><literal type="number">0xbf</literal></expr></argument>,<argument><expr><literal type="number">0x8f</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>P</name><argument_list>(<argument><expr><literal type="number">0x7e</literal></expr></argument>,<argument><expr><literal type="number">0x0e</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst11</name> <operator>=</operator> <call><name>interp_3px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>w3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>cond07</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst11</name> <operator>=</operator> <call><name>interp_2px</name><argument_list>(<argument><expr><name>w4</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>w0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst11</name> <operator>=</operator> <name>w4</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>hqx_filter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ThreadData</name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>in</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>out</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>out</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>r2y</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>rgbtoyuv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>height</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>width</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slice_start</name> <init>= <expr><operator>(</operator><name>height</name> <operator>*</operator> <name>jobnr</name> <operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slice_end</name> <init>= <expr><operator>(</operator><name>height</name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_linesize</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_linesize</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>slice_start</name> <operator>*</operator> <name>dst_linesize</name> <operator>*</operator> <name>n</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>slice_start</name> <operator>*</operator> <name>src_linesize</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst32_linesize</name> <init>= <expr><name>dst_linesize</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src32_linesize</name> <init>= <expr><name>src_linesize</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>slice_start</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>slice_end</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src32</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst32</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>prevline</name> <init>= <expr><ternary><condition><expr><name>y</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><name>src32_linesize</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nextline</name> <init>= <expr><ternary><condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name> <operator>-</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>src32_linesize</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>prevcol</name> <init>= <expr><ternary><condition><expr><name>x</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nextcol</name> <init>= <expr><ternary><condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>w</name><index>[<expr><literal type="number">3</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name><name>src32</name><index>[<expr><name>prevcol</name> <operator>+</operator> <name>prevline</name></expr>]</index></name></expr>, <expr><name><name>src32</name><index>[<expr><name>prevline</name></expr>]</index></name></expr>, <expr><name><name>src32</name><index>[<expr><name>prevline</name> <operator>+</operator> <name>nextcol</name></expr>]</index></name></expr>,
<expr><name><name>src32</name><index>[<expr><name>prevcol</name></expr> ]</index></name></expr>, <expr><name><name>src32</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>src32</name><index>[ <expr><name>nextcol</name></expr>]</index></name></expr>,
<expr><name><name>src32</name><index>[<expr><name>prevcol</name> <operator>+</operator> <name>nextline</name></expr>]</index></name></expr>, <expr><name><name>src32</name><index>[<expr><name>nextline</name></expr>]</index></name></expr>, <expr><name><name>src32</name><index>[<expr><name>nextline</name> <operator>+</operator> <name>nextcol</name></expr>]</index></name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>yuv1</name> <init>= <expr><call><name>rgb2yuv</name><argument_list>(<argument><expr><name>r2y</name></expr></argument>, <argument><expr><name><name>w</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pattern</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>w</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>!=</operator> <name><name>w</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><operator>(</operator><call><name>yuv_diff</name><argument_list>(<argument><expr><name>yuv1</name></expr></argument>, <argument><expr><call><name>rgb2yuv</name><argument_list>(<argument><expr><name>r2y</name></expr></argument>, <argument><expr><name><name>w</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>
<operator>|</operator> <operator>(</operator><ternary><condition><expr><name><name>w</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>!=</operator> <name><name>w</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> ?</condition><then> <expr><operator>(</operator><call><name>yuv_diff</name><argument_list>(<argument><expr><name>yuv1</name></expr></argument>, <argument><expr><call><name>rgb2yuv</name><argument_list>(<argument><expr><name>r2y</name></expr></argument>, <argument><expr><name><name>w</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal>
<operator>|</operator> <operator>(</operator><ternary><condition><expr><name><name>w</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>!=</operator> <name><name>w</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> ?</condition><then> <expr><operator>(</operator><call><name>yuv_diff</name><argument_list>(<argument><expr><name>yuv1</name></expr></argument>, <argument><expr><call><name>rgb2yuv</name><argument_list>(<argument><expr><name>r2y</name></expr></argument>, <argument><expr><name><name>w</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal>
<operator>|</operator> <operator>(</operator><ternary><condition><expr><name><name>w</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>!=</operator> <name><name>w</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr> ?</condition><then> <expr><operator>(</operator><call><name>yuv_diff</name><argument_list>(<argument><expr><name>yuv1</name></expr></argument>, <argument><expr><call><name>rgb2yuv</name><argument_list>(<argument><expr><name>r2y</name></expr></argument>, <argument><expr><name><name>w</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal>
<operator>|</operator> <operator>(</operator><ternary><condition><expr><name><name>w</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>!=</operator> <name><name>w</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr> ?</condition><then> <expr><operator>(</operator><call><name>yuv_diff</name><argument_list>(<argument><expr><name>yuv1</name></expr></argument>, <argument><expr><call><name>rgb2yuv</name><argument_list>(<argument><expr><name>r2y</name></expr></argument>, <argument><expr><name><name>w</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal>
<operator>|</operator> <operator>(</operator><ternary><condition><expr><name><name>w</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>!=</operator> <name><name>w</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr> ?</condition><then> <expr><operator>(</operator><call><name>yuv_diff</name><argument_list>(<argument><expr><name>yuv1</name></expr></argument>, <argument><expr><call><name>rgb2yuv</name><argument_list>(<argument><expr><name>r2y</name></expr></argument>, <argument><expr><name><name>w</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal>
<operator>|</operator> <operator>(</operator><ternary><condition><expr><name><name>w</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>!=</operator> <name><name>w</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr> ?</condition><then> <expr><operator>(</operator><call><name>yuv_diff</name><argument_list>(<argument><expr><name>yuv1</name></expr></argument>, <argument><expr><call><name>rgb2yuv</name><argument_list>(<argument><expr><name>r2y</name></expr></argument>, <argument><expr><name><name>w</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal>
<operator>|</operator> <operator>(</operator><ternary><condition><expr><name><name>w</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>!=</operator> <name><name>w</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr> ?</condition><then> <expr><operator>(</operator><call><name>yuv_diff</name><argument_list>(<argument><expr><name>yuv1</name></expr></argument>, <argument><expr><call><name>rgb2yuv</name><argument_list>(<argument><expr><name>r2y</name></expr></argument>, <argument><expr><name><name>w</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst32</name><index>[<expr><name>dst32_linesize</name><operator>*</operator><literal type="number">0</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>hq2x_interp_1x1</name><argument_list>(<argument><expr><name>r2y</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>dst32</name><index>[<expr><name>dst32_linesize</name><operator>*</operator><literal type="number">0</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>hq2x_interp_1x1</name><argument_list>(<argument><expr><name>r2y</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>dst32</name><index>[<expr><name>dst32_linesize</name><operator>*</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>hq2x_interp_1x1</name><argument_list>(<argument><expr><name>r2y</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>dst32</name><index>[<expr><name>dst32_linesize</name><operator>*</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>hq2x_interp_1x1</name><argument_list>(<argument><expr><name>r2y</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hq3x_interp_2x1</name><argument_list>(<argument><expr><name>dst32</name></expr></argument>, <argument><expr><name>dst32_linesize</name></expr></argument>, <argument><expr><name>r2y</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>hq3x_interp_2x1</name><argument_list>(<argument><expr><name>dst32</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>dst32_linesize</name></expr></argument>, <argument><expr><name>r2y</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>hq3x_interp_2x1</name><argument_list>(<argument><expr><name>dst32</name> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><name>dst32_linesize</name></expr></argument>, <argument><expr><name>dst32_linesize</name></expr></argument>, <argument><expr><name>r2y</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>hq3x_interp_2x1</name><argument_list>(<argument><expr><name>dst32</name> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><name>dst32_linesize</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>dst32_linesize</name></expr></argument>, <argument><expr><name>r2y</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>dst32</name><index>[<expr><name>dst32_linesize</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>w</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hq4x_interp_2x2</name><argument_list>(<argument><expr><name>dst32</name></expr></argument>, <argument><expr><name>dst32_linesize</name></expr></argument>, <argument><expr><name>r2y</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>hq4x_interp_2x2</name><argument_list>(<argument><expr><name>dst32</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>dst32_linesize</name></expr></argument>, <argument><expr><name>r2y</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>hq4x_interp_2x2</name><argument_list>(<argument><expr><name>dst32</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>dst32_linesize</name></expr></argument>, <argument><expr><name>dst32_linesize</name></expr></argument>, <argument><expr><name>r2y</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>hq4x_interp_2x2</name><argument_list>(<argument><expr><name>dst32</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>dst32_linesize</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>dst32_linesize</name></expr></argument>, <argument><expr><name>r2y</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>src32</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst32</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_linesize</name> <operator>*</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HQX_FUNC</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static int hq##size##x(AVFilterContext *ctx, void *arg, int jobnr, int nb_jobs) { hqx_filter(arg, jobnr, nb_jobs, size); return 0; }</cpp:value></cpp:define>






<macro><name>HQX_FUNC</name><argument_list>(<argument><literal type="number">2</literal></argument>)</argument_list></macro>
<macro><name>HQX_FUNC</name><argument_list>(<argument><literal type="number">3</literal></argument>)</argument_list></macro>
<macro><name>HQX_FUNC</name><argument_list>(<argument><literal type="number">4</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{<expr><name>AV_PIX_FMT_RGB32</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_output</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HQXContext</name> <modifier>*</modifier></type><name>hqx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <name><name>hqx</name><operator>-&gt;</operator><name>n</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>*</operator> <name><name>hqx</name><operator>-&gt;</operator><name>n</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"fmt:%s size:%dx%d -&gt; size:%dx%d\n"</literal></expr></argument>,
<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HQXContext</name> <modifier>*</modifier></type><name>hqx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ThreadData</name></type> <name>td</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>in</name></name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td</name><operator>.</operator><name>out</name></name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td</name><operator>.</operator><name>rgbtoyuv</name></name> <operator>=</operator> <name><name>hqx</name><operator>-&gt;</operator><name>rgbtoyuv</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>hqx</name><operator>-&gt;</operator><name>func</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>td</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><call><name>ff_filter_get_nb_threads</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HQXContext</name> <modifier>*</modifier></type><name>hqx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>hqxfunc_t</name></type> <name><name>hqxfuncs</name><index>[]</index></name> <init>= <expr><block>{<expr><name>hq2x</name></expr>, <expr><name>hq3x</name></expr>, <expr><name>hq4x</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bg</name></decl>, <decl><type ref="prev"/><name>rg</name></decl>, <decl><type ref="prev"/><name>g</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>bg</name><operator>=</operator><operator>-</operator><literal type="number">255</literal></expr>;</init> <condition><expr><name>bg</name><operator>&lt;</operator><literal type="number">256</literal></expr>;</condition> <incr><expr><name>bg</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>rg</name><operator>=</operator><operator>-</operator><literal type="number">255</literal></expr>;</init> <condition><expr><name>rg</name><operator>&lt;</operator><literal type="number">256</literal></expr>;</condition> <incr><expr><name>rg</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>u</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>-</operator><literal type="number">169</literal><operator>*</operator><name>rg</name> <operator>+</operator> <literal type="number">500</literal><operator>*</operator><name>bg</name><operator>)</operator><operator>/</operator><literal type="number">1000</literal><operator>)</operator> <operator>+</operator> <literal type="number">128</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>v</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator> <literal type="number">500</literal><operator>*</operator><name>rg</name> <operator>-</operator> <literal type="number">81</literal><operator>*</operator><name>bg</name><operator>)</operator><operator>/</operator><literal type="number">1000</literal><operator>)</operator> <operator>+</operator> <literal type="number">128</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>startg</name> <init>= <expr><call><name>FFMAX3</name><argument_list>(<argument><expr><operator>-</operator><name>bg</name></expr></argument>, <argument><expr><operator>-</operator><name>rg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>endg</name> <init>= <expr><call><name>FFMIN3</name><argument_list>(<argument><expr><literal type="number">255</literal><operator>-</operator><name>bg</name></expr></argument>, <argument><expr><literal type="number">255</literal><operator>-</operator><name>rg</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>y</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator> <literal type="number">299</literal><operator>*</operator><name>rg</name> <operator>+</operator> <literal type="number">1000</literal><operator>*</operator><name>startg</name> <operator>+</operator> <literal type="number">114</literal><operator>*</operator><name>bg</name><operator>)</operator><operator>/</operator><literal type="number">1000</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>bg</name> <operator>+</operator> <name>rg</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <literal type="number">0x010101</literal> <operator>*</operator> <name>startg</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <name>startg</name></expr>;</init> <condition><expr><name>g</name> <operator>&lt;=</operator> <name>endg</name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>hqx</name><operator>-&gt;</operator><name>rgbtoyuv</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>y</name><operator>++</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>u</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name><operator>+=</operator> <literal type="number">0x010101</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name><name>hqx</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name><name>hqxfuncs</name><index>[<expr><name><name>hqx</name><operator>-&gt;</operator><name>n</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>hqx_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>hqx_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_output</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_hqx</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"hqx"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Scale the input by 2, 3 or 4 using the hq*x magnification algorithm."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>HQXContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>hqx_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>hqx_outputs</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>hqx_class</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SLICE_THREADS</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
