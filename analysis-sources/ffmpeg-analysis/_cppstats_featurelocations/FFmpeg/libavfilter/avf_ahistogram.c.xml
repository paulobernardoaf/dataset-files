<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\avf_ahistogram.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/parseutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filters.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<enum>enum <name>DisplayScale</name> <block>{ <decl><name>LINEAR</name></decl>, <decl><name>SQRT</name></decl>, <decl><name>CBRT</name></decl>, <decl><name>LOG</name></decl>, <decl><name>RLOG</name></decl>, <decl><name>NB_SCALES</name></decl> }</block>;</enum>
<enum>enum <name>AmplitudeScale</name> <block>{ <decl><name>ALINEAR</name></decl>, <decl><name>ALOG</name></decl>, <decl><name>NB_ASCALES</name></decl> }</block>;</enum>
<enum>enum <name>SlideMode</name> <block>{ <decl><name>REPLACE</name></decl>, <decl><name>SCROLL</name></decl>, <decl><name>NB_SLIDES</name></decl> }</block>;</enum>
<enum>enum <name>DisplayMode</name> <block>{ <decl><name>SINGLE</name></decl>, <decl><name>SEPARATE</name></decl>, <decl><name>NB_DMODES</name></decl> }</block>;</enum>
<enum>enum <name>HistogramMode</name> <block>{ <decl><name>ACCUMULATE</name></decl>, <decl><name>CURRENT</name></decl>, <decl><name>NB_HMODES</name></decl> }</block>;</enum>

<typedef>typedef <type><struct>struct <name>AudioHistogramContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <name>h</name>;</decl_stmt>
<decl_stmt><decl><type><name>AVRational</name></type> <name>frame_rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>achistogram</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>shistogram</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ascale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>phisto</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>histogram_h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>apos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ypos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slide</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dmode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dchannels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>combine_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name><name>in</name><index>[<expr><literal type="number">101</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_samples</name></decl>;</decl_stmt>
}</block></struct></type> <name>AudioHistogramContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(AudioHistogramContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_VIDEO_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>ahistogram_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"dmode"</literal></expr>, <expr><literal type="string">"set method to display channels"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>dmode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SINGLE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_DMODES</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"dmode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"single"</literal></expr>, <expr><literal type="string">"all channels use single histogram"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SINGLE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"dmode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"separate"</literal></expr>, <expr><literal type="string">"each channel have own histogram"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SEPARATE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"dmode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rate"</literal></expr>, <expr><literal type="string">"set video rate"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>frame_rate</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_VIDEO_RATE</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"25"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"r"</literal></expr>, <expr><literal type="string">"set video rate"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>frame_rate</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_VIDEO_RATE</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"25"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"size"</literal></expr>, <expr><literal type="string">"set video size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_IMAGE_SIZE</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"hd720"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"set video size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_IMAGE_SIZE</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"hd720"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"scale"</literal></expr>, <expr><literal type="string">"set display scale"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>LOG</name></expr>}</block></expr>, <expr><name>LINEAR</name></expr>, <expr><name>NB_SCALES</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"scale"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"log"</literal></expr>, <expr><literal type="string">"logarithmic"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>LOG</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"scale"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sqrt"</literal></expr>, <expr><literal type="string">"square root"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SQRT</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"scale"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cbrt"</literal></expr>, <expr><literal type="string">"cubic root"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>CBRT</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"scale"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"lin"</literal></expr>, <expr><literal type="string">"linear"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>LINEAR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"scale"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rlog"</literal></expr>, <expr><literal type="string">"reverse logarithmic"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>RLOG</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"scale"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ascale"</literal></expr>, <expr><literal type="string">"set amplitude scale"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>ascale</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ALOG</name></expr>}</block></expr>, <expr><name>LINEAR</name></expr>, <expr><name>NB_ASCALES</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"ascale"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"log"</literal></expr>, <expr><literal type="string">"logarithmic"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ALOG</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"ascale"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"lin"</literal></expr>, <expr><literal type="string">"linear"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>ALINEAR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"ascale"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"acount"</literal></expr>, <expr><literal type="string">"how much frames to accumulate"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rheight"</literal></expr>, <expr><literal type="string">"set histogram ratio of window height"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>phisto</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.10</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"slide"</literal></expr>, <expr><literal type="string">"set sonogram sliding"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>slide</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>REPLACE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_SLIDES</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"slide"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"replace"</literal></expr>, <expr><literal type="string">"replace old rows with new"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>REPLACE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"slide"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"scroll"</literal></expr>, <expr><literal type="string">"scroll from top to bottom"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SCROLL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"slide"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>ahistogram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>formats</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>layouts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVSampleFormat</name></name></type> <name><name>sample_fmts</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>AV_SAMPLE_FMT_FLTP</name></expr>, <expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>AV_PIX_FMT_YUVA444P</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>sample_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name> <argument_list>(<argument><expr><name>formats</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inlink</name><operator>-&gt;</operator><name>out_formats</name></name></expr></argument> )</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name>layouts</name> <operator>=</operator> <call><name>ff_all_channel_counts</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_channel_layouts_ref</name> <argument_list>(<argument><expr><name>layouts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inlink</name><operator>-&gt;</operator><name>out_channel_layouts</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_all_samplerates</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><name>formats</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inlink</name><operator>-&gt;</operator><name>out_samplerates</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><name>formats</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>outlink</name><operator>-&gt;</operator><name>in_formats</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AudioHistogramContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>av_rescale</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_rate</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_rate</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dchannels</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>dmode</name></name> <operator>==</operator> <name>SINGLE</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>shistogram</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>dchannels</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>shistogram</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>shistogram</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>achistogram</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>dchannels</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>achistogram</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>achistogram</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_output</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AudioHistogramContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>frame_rate</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>histogram_h</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>phisto</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ypos</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>phisto</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dmode</name></name> <operator>==</operator> <name>SEPARATE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>combine_buffer</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>combine_buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>combine_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AudioHistogramContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>H</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>histogram_h</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>bin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>acmax</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>clone</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>out</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>width</name></name> <operator>!=</operator> <name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>out</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>H</name></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>n</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>n</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>n</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>n</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dmode</name></name> <operator>==</operator> <name>SEPARATE</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>combine_buffer</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>y</name></expr> ]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>combine_buffer</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>y</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">127.5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>combine_buffer</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>y</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">127.5</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>H</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>n</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>n</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>n</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>n</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_count</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ascale</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ALINEAR</name></expr>:</case>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>float</name> <operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>c</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>achistogram</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>achistogram</name><index>[<expr><operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>dmode</name></name> <operator>==</operator> <name>SINGLE</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr></then><else>: <expr><name>c</name></expr></else></ternary><operator>)</operator> <operator>*</operator> <name>w</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>bin</name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><call><name>av_clipf</name><argument_list>(<argument><expr><call><name>fabsf</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><name>w</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>achistogram</name><index>[<expr><name>bin</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>in</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>first</name></name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>shistogram</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>shistogram</name><index>[<expr><operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>dmode</name></name> <operator>==</operator> <name>SINGLE</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr></then><else>: <expr><name>c</name></expr></else></ternary><operator>)</operator> <operator>*</operator> <name>w</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src2</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>in</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>first</name></name></expr>]</index></name><operator>-&gt;</operator><name><name>extended_data</name><index>[<expr><name>c</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>bin</name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><call><name>av_clipf</name><argument_list>(<argument><expr><call><name>fabsf</name><argument_list>(<argument><expr><name><name>src2</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><name>w</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shistogram</name><index>[<expr><name>bin</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>ALOG</name></expr>:</case>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>float</name> <operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>c</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>achistogram</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>achistogram</name><index>[<expr><operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>dmode</name></name> <operator>==</operator> <name>SINGLE</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr></then><else>: <expr><name>c</name></expr></else></ternary><operator>)</operator> <operator>*</operator> <name>w</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>bin</name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><call><name>av_clipf</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <call><name>log10</name><argument_list>(<argument><expr><call><name>fabsf</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><name>w</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>achistogram</name><index>[<expr><name>bin</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>in</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>first</name></name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>shistogram</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>shistogram</name><index>[<expr><operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>dmode</name></name> <operator>==</operator> <name>SINGLE</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr></then><else>: <expr><name>c</name></expr></else></ternary><operator>)</operator> <operator>*</operator> <name>w</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src2</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>in</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>first</name></name></expr>]</index></name><operator>-&gt;</operator><name><name>extended_data</name><index>[<expr><name>c</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>bin</name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><call><name>av_clipf</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <call><name>log10</name><argument_list>(<argument><expr><call><name>fabsf</name><argument_list>(<argument><expr><name><name>src2</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><name>w</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shistogram</name><index>[<expr><name>bin</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>in</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>frame_count</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>frame_count</name></name></expr>]</index></name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_count</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frame_count</name></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>w</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>dchannels</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>acmax</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>achistogram</name><index>[<expr><name>n</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>shistogram</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>acmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>dchannels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>shistogram</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>shistogram</name><index>[<expr><name>c</name> <operator>*</operator> <name>w</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>achistogram</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>achistogram</name><index>[<expr><name>c</name> <operator>*</operator> <name>w</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>yf</name></decl>, <decl><type ref="prev"/><name>uf</name></decl>, <decl><type ref="prev"/><name>vf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dmode</name></name> <operator>==</operator> <name>SEPARATE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>yf</name> <operator>=</operator> <literal type="number">256.0f</literal> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>dchannels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>uf</name> <operator>=</operator> <name>yf</name> <operator>*</operator> <name>M_PI</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vf</name> <operator>=</operator> <name>yf</name> <operator>*</operator> <name>M_PI</name></expr>;</expr_stmt>
<expr_stmt><expr><name>uf</name> <operator>*=</operator> <literal type="number">0.5</literal> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <name>c</name><operator>)</operator> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>dchannels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vf</name> <operator>*=</operator> <literal type="number">0.5</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <name>c</name><operator>)</operator> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>dchannels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>aa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>achistogram</name><index>[<expr><name>n</name></expr>]</index></name> <operator>-</operator> <name><name>shistogram</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>scale</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LINEAR</name></expr>:</case>
<expr_stmt><expr><name>aa</name> <operator>=</operator> <name>a</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>acmax</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SQRT</name></expr>:</case>
<expr_stmt><expr><name>aa</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name>acmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CBRT</name></expr>:</case>
<expr_stmt><expr><name>aa</name> <operator>=</operator> <call><name>cbrt</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>cbrt</name><argument_list>(<argument><expr><name>acmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LOG</name></expr>:</case>
<expr_stmt><expr><name>aa</name> <operator>=</operator> <call><name>log2</name><argument_list>(<argument><expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>log2</name><argument_list>(<argument><expr><name>acmax</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>RLOG</name></expr>:</case>
<expr_stmt><expr><name>aa</name> <operator>=</operator> <literal type="number">1.</literal> <operator>-</operator> <call><name>log2</name><argument_list>(<argument><expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>log2</name><argument_list>(<argument><expr><name>acmax</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>aa</name> <operator>==</operator> <literal type="number">1.</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>aa</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name>aa</name> <operator>*</operator> <operator>(</operator><name>H</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dmode</name></name> <operator>==</operator> <name>SINGLE</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>H</name> <operator>-</operator> <name>h</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>H</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <name>H</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name>aa</name> <operator>*</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>ypos</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>n</name></expr>]</index></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>ypos</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">127</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>ypos</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">127</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>ypos</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dmode</name></name> <operator>==</operator> <name>SEPARATE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>combine_buffer</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old</name></decl>;</decl_stmt>

<expr_stmt><expr><name>old</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><operator>(</operator><name>H</name> <operator>-</operator> <name>h</name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>n</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>H</name> <operator>-</operator> <name>h</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>H</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>n</name></expr>]</index></name> <operator>!=</operator> <name>old</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>old</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>n</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>n</name></expr>]</index></name> <operator>=</operator> <name>yf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">128</literal><operator>+</operator><name>uf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">128</literal><operator>+</operator><name>vf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>aa</name> <operator>*</operator> <name>yf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>aa</name> <operator>*</operator> <name>uf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name>aa</name> <operator>*</operator> <name>vf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <name>H</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dmode</name></name> <operator>==</operator> <name>SEPARATE</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>combine_buffer</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>ypos</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>n</name></expr>]</index></name> <operator>=</operator> <name><name>cb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>ypos</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>n</name></expr>]</index></name> <operator>=</operator> <name><name>cb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>ypos</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>n</name></expr>]</index></name> <operator>=</operator> <name><name>cb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>ypos</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>slide</name></name> <operator>==</operator> <name>SCROLL</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr>;</init> <condition><expr><name>y</name> <operator>&gt;=</operator> <name>H</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>y</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>y</name> <operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ypos</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>slide</name></name> <operator>==</operator> <name>SCROLL</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>ypos</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ypos</name></name> <operator>=</operator> <name>H</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>clone</name> <operator>=</operator> <call><name>av_frame_clone</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>clone</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>activate</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AudioHistogramContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FF_FILTER_FORWARD_STATUS_BACK</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>inlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_inlink_consume_samples</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>filter_frame</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>FF_FILTER_FORWARD_STATUS</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>, <argument><expr><name>outlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FF_FILTER_FORWARD_WANTED</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>inlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FFERROR_NOT_READY</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AudioHistogramContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>shistogram</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>achistogram</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>combine_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">101</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>ahistogram_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>ahistogram_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_output</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_avf_ahistogram</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"ahistogram"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Convert input audio to histogram video output."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AudioHistogramContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>activate</name> <operator>=</operator> <name>activate</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>ahistogram_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>ahistogram_outputs</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>ahistogram_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
