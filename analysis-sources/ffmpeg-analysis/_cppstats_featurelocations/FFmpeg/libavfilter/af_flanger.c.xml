<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\af_flanger.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/samplefmt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"generate_wave_table.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERPOLATION_LINEAR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERPOLATION_QUADRATIC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>FlangerContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>delay_min</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>delay_depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>feedback_gain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>delay_gain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>speed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wave_shape</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>channel_phase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>interpolation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>in_gain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_samples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>delay_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>delay_buf_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>delay_last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>lfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lfo_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lfo_pos</name></decl>;</decl_stmt>
}</block></struct></type> <name>FlangerContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(FlangerContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A</name></cpp:macro> <cpp:value>AV_OPT_FLAG_AUDIO_PARAM|AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>flanger_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"delay"</literal></expr>, <expr><literal type="string">"base delay in milliseconds"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>delay_min</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><name>A</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"depth"</literal></expr>, <expr><literal type="string">"added swept delay in milliseconds"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>delay_depth</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">2</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><name>A</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"regen"</literal></expr>, <expr><literal type="string">"percentage regeneration (delayed signal feedback)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>feedback_gain</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">95</literal></expr>, <expr><literal type="number">95</literal></expr>, <expr><name>A</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"width"</literal></expr>, <expr><literal type="string">"percentage of delayed signal mixed with original"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>delay_gain</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">71</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><name>A</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"speed"</literal></expr>, <expr><literal type="string">"sweeps per second (Hz)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>speed</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.5</literal></expr>}</block></expr>, <expr><literal type="number">0.1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><name>A</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"shape"</literal></expr>, <expr><literal type="string">"swept wave shape"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>wave_shape</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WAVE_SIN</name></expr>}</block></expr>, <expr><name>WAVE_SIN</name></expr>, <expr><name>WAVE_NB</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>A</name></expr>, <expr><literal type="string">"type"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"triangular"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WAVE_TRI</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A</name></expr>, <expr><literal type="string">"type"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"t"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WAVE_TRI</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A</name></expr>, <expr><literal type="string">"type"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sinusoidal"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WAVE_SIN</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A</name></expr>, <expr><literal type="string">"type"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"s"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WAVE_SIN</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A</name></expr>, <expr><literal type="string">"type"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"phase"</literal></expr>, <expr><literal type="string">"swept wave percentage phase-shift for multi-channel"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>channel_phase</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">25</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><name>A</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"interp"</literal></expr>, <expr><literal type="string">"delay-line interpolation"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>interpolation</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>A</name></expr>, <expr><literal type="string">"itype"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"linear"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>INTERPOLATION_LINEAR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A</name></expr>, <expr><literal type="string">"itype"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"quadratic"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>INTERPOLATION_QUADRATIC</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A</name></expr>, <expr><literal type="string">"itype"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>flanger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FlangerContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>feedback_gain</name></name> <operator>/=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>delay_gain</name></name> <operator>/=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_phase</name></name> <operator>/=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>delay_min</name></name> <operator>/=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>delay_depth</name></name> <operator>/=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_gain</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>delay_gain</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>delay_gain</name></name> <operator>/=</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>delay_gain</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>delay_gain</name></name> <operator>*=</operator> <literal type="number">1</literal> <operator>-</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>feedback_gain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>layouts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>formats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVSampleFormat</name></name></type> <name><name>sample_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_SAMPLE_FMT_DBLP</name></expr>, <expr><name>AV_SAMPLE_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>layouts</name> <operator>=</operator> <call><name>ff_all_channel_counts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>layouts</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_common_channel_layouts</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>layouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>sample_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>formats</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_all_samplerates</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>formats</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>ff_set_common_samplerates</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FlangerContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_samples</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>delay_min</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>delay_depth</name></name><operator>)</operator> <operator>*</operator> <name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>+</operator> <literal type="number">2.5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lfo_length</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>speed</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>delay_last</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>delay_last</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lfo</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lfo_length</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>lfo</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>lfo</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>delay_last</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_generate_wave_table</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>wave_shape</name></name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_FLT</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lfo</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lfo_length</name></name></expr></argument>,
<argument><expr><call><name>rint</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>delay_min</name></name> <operator>*</operator> <name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>max_samples</name></name> <operator>-</operator> <literal type="number">2.</literal></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name>M_PI_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>av_samples_alloc_array_and_samples</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>delay_buffer</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>max_samples</name></name></expr></argument>,
<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FlangerContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out_frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>chan</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_frame_is_writable</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>out_frame</name> <operator>=</operator> <name>frame</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>out_frame</name> <operator>=</operator> <call><name>ff_get_audio_buffer</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out_frame</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out_frame</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>delay_buf_pos</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>delay_buf_pos</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>max_samples</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>max_samples</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>chan</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>chan</name> <operator>&lt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>chan</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>chan</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name><name>out_frame</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>chan</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>delayed_0</name></decl>, <decl><type ref="prev"/><name>delayed_1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>delayed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>in</name></decl>, <decl><type ref="prev"/><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>channel_phase</name> <init>= <expr><name>chan</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>lfo_length</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>channel_phase</name></name> <operator>+</operator> <literal type="number">.5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>delay</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>lfo</name><index>[<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>lfo_pos</name></name> <operator>+</operator> <name>channel_phase</name><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>lfo_length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>int_delay</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name>delay</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>frac_delay</name> <init>= <expr><call><name>modf</name><argument_list>(<argument><expr><name>delay</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delay</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>delay_buffer</name> <init>= <expr><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>delay_buffer</name><index>[<expr><name>chan</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>in</name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>delay_buffer</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>delay_buf_pos</name></name></expr>]</index></name> <operator>=</operator> <name>in</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>delay_last</name><index>[<expr><name>chan</name></expr>]</index></name> <operator>*</operator>
<name><name>s</name><operator>-&gt;</operator><name>feedback_gain</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>delayed_0</name> <operator>=</operator> <name><name>delay_buffer</name><index>[<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>delay_buf_pos</name></name> <operator>+</operator> <name>int_delay</name><operator>++</operator><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>max_samples</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>delayed_1</name> <operator>=</operator> <name><name>delay_buffer</name><index>[<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>delay_buf_pos</name></name> <operator>+</operator> <name>int_delay</name><operator>++</operator><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>max_samples</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>interpolation</name></name> <operator>==</operator> <name>INTERPOLATION_LINEAR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>delayed</name> <operator>=</operator> <name>delayed_0</name> <operator>+</operator> <operator>(</operator><name>delayed_1</name> <operator>-</operator> <name>delayed_0</name><operator>)</operator> <operator>*</operator> <name>frac_delay</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>delayed_2</name> <init>= <expr><name><name>delay_buffer</name><index>[<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>delay_buf_pos</name></name> <operator>+</operator> <name>int_delay</name><operator>++</operator><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>max_samples</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>delayed_2</name> <operator>-=</operator> <name>delayed_0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>delayed_1</name> <operator>-=</operator> <name>delayed_0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>delayed_2</name> <operator>*</operator> <literal type="number">.5</literal> <operator>-</operator> <name>delayed_1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>delayed_1</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <name>delayed_2</name> <operator>*</operator><literal type="number">.5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>delayed</name> <operator>=</operator> <name>delayed_0</name> <operator>+</operator> <operator>(</operator><name>a</name> <operator>*</operator> <name>frac_delay</name> <operator>+</operator> <name>b</name><operator>)</operator> <operator>*</operator> <name>frac_delay</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>delay_last</name><index>[<expr><name>chan</name></expr>]</index></name> <operator>=</operator> <name>delayed</name></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <name>in</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>in_gain</name></name> <operator>+</operator> <name>delayed</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>delay_gain</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lfo_pos</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>lfo_pos</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>lfo_length</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>frame</name> <operator>!=</operator> <name>out_frame</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out_frame</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FlangerContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>lfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>delay_last</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>delay_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>delay_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>delay_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>flanger_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>flanger_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_af_flanger</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"flanger"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Apply a flanging effect to the audio."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FlangerContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>flanger_class</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>flanger_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>flanger_outputs</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
