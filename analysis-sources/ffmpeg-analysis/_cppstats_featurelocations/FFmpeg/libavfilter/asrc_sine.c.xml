<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\asrc_sine.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/eval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>SineContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>frequency</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>beep_factor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>samples_per_frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name>samples_per_frame_expr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sample_rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>sin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>phi</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>dphi</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name></type> <name>beep_period</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>beep_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>beep_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>phi_beep</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>dphi_beep</name></decl>;</decl_stmt> 
}</block></struct></type> <name>SineContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONTEXT</name></cpp:macro> <cpp:value>SineContext</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_AUDIO_PARAM|AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_GENERIC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>field</name></type></parameter>, <parameter><type><name>def</name></type></parameter>, <parameter><type><name>min</name></type></parameter>, <parameter><type><name>max</name></type></parameter>, <parameter><type><name>descr</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>deffield</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ name, descr, offsetof(CONTEXT, field), AV_OPT_TYPE_ ##type, { .deffield = def }, min, max, FLAGS, __VA_ARGS__ }</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_INT</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>field</name></type></parameter>, <parameter><type><name>def</name></type></parameter>, <parameter><type><name>min</name></type></parameter>, <parameter><type><name>max</name></type></parameter>, <parameter><type><name>descr</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OPT_GENERIC(name, field, def, min, max, descr, INT, i64, __VA_ARGS__)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_DBL</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>field</name></type></parameter>, <parameter><type><name>def</name></type></parameter>, <parameter><type><name>min</name></type></parameter>, <parameter><type><name>max</name></type></parameter>, <parameter><type><name>descr</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OPT_GENERIC(name, field, def, min, max, descr, DOUBLE, dbl, __VA_ARGS__)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_DUR</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>field</name></type></parameter>, <parameter><type><name>def</name></type></parameter>, <parameter><type><name>min</name></type></parameter>, <parameter><type><name>max</name></type></parameter>, <parameter><type><name>descr</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OPT_GENERIC(name, field, def, min, max, descr, DURATION, str, __VA_ARGS__)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_STR</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>field</name></type></parameter>, <parameter><type><name>def</name></type></parameter>, <parameter><type><name>min</name></type></parameter>, <parameter><type><name>max</name></type></parameter>, <parameter><type><name>descr</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OPT_GENERIC(name, field, def, min, max, descr, STRING, str, __VA_ARGS__)</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>sine_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>OPT_DBL</name><argument_list>(<argument><expr><literal type="string">"frequency"</literal></expr></argument>, <argument><expr><name>frequency</name></expr></argument>, <argument><expr><literal type="number">440</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DBL_MAX</name></expr></argument>, <argument><expr><literal type="string">"set the sine frequency"</literal></expr></argument>,)</argument_list></call></expr>,
<expr><call><name>OPT_DBL</name><argument_list>(<argument><expr><literal type="string">"f"</literal></expr></argument>, <argument><expr><name>frequency</name></expr></argument>, <argument><expr><literal type="number">440</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DBL_MAX</name></expr></argument>, <argument><expr><literal type="string">"set the sine frequency"</literal></expr></argument>,)</argument_list></call></expr>,
<expr><call><name>OPT_DBL</name><argument_list>(<argument><expr><literal type="string">"beep_factor"</literal></expr></argument>, <argument><expr><name>beep_factor</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DBL_MAX</name></expr></argument>, <argument><expr><literal type="string">"set the beep frequency factor"</literal></expr></argument>,)</argument_list></call></expr>,
<expr><call><name>OPT_DBL</name><argument_list>(<argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><name>beep_factor</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DBL_MAX</name></expr></argument>, <argument><expr><literal type="string">"set the beep frequency factor"</literal></expr></argument>,)</argument_list></call></expr>,
<expr><call><name>OPT_INT</name><argument_list>(<argument><expr><literal type="string">"sample_rate"</literal></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>, <argument><expr><literal type="number">44100</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><literal type="string">"set the sample rate"</literal></expr></argument>,)</argument_list></call></expr>,
<expr><call><name>OPT_INT</name><argument_list>(<argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>, <argument><expr><literal type="number">44100</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><literal type="string">"set the sample rate"</literal></expr></argument>,)</argument_list></call></expr>,
<expr><call><name>OPT_DUR</name><argument_list>(<argument><expr><literal type="string">"duration"</literal></expr></argument>, <argument><expr><name>duration</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT64_MAX</name></expr></argument>, <argument><expr><literal type="string">"set the audio duration"</literal></expr></argument>,)</argument_list></call></expr>,
<expr><call><name>OPT_DUR</name><argument_list>(<argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><name>duration</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT64_MAX</name></expr></argument>, <argument><expr><literal type="string">"set the audio duration"</literal></expr></argument>,)</argument_list></call></expr>,
<expr><call><name>OPT_STR</name><argument_list>(<argument><expr><literal type="string">"samples_per_frame"</literal></expr></argument>, <argument><expr><name>samples_per_frame</name></expr></argument>, <argument><expr><literal type="string">"1024"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"set the number of samples per frame"</literal></expr></argument>,)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>sine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_PERIOD</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMPLITUDE</name></cpp:macro> <cpp:value>4095</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMPLITUDE_SHIFT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>make_sin_table</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>sin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>half_pi</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>LOG_PERIOD</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>ampls</name> <init>= <expr><name>AMPLITUDE</name> <operator>&lt;&lt;</operator> <name>AMPLITUDE_SHIFT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>unit2</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>ampls</name> <operator>*</operator> <name>ampls</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>step</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>new_k</name></decl>, <decl><type ref="prev"/><name>n2</name></decl>;</decl_stmt>



<expr_stmt><expr><name><name>sin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sin</name><index>[<expr><name>half_pi</name></expr>]</index></name> <operator>=</operator> <name>ampls</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>step</name> <operator>=</operator> <name>half_pi</name></expr>;</init> <condition><expr><name>step</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>step</name> <operator>/=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>


<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0x10000</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>half_pi</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>step</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>sin</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>sin</name><index>[<expr><name>i</name> <operator>+</operator> <name>step</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>sin</name><index>[<expr><name>half_pi</name> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>+</operator> <name><name>sin</name><index>[<expr><name>half_pi</name> <operator>-</operator> <name>i</name> <operator>-</operator> <name>step</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n2</name> <operator>=</operator> <name>s</name> <operator>*</operator> <name>s</name> <operator>+</operator> <name>c</name> <operator>*</operator> <name>c</name></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>new_k</name> <operator>=</operator> <operator>(</operator><name>k</name> <operator>+</operator> <name>unit2</name> <operator>/</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>k</name> <operator>*</operator> <name>n2</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <name>new_k</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name>new_k</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>sin</name><index>[<expr><name>i</name> <operator>+</operator> <name>step</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>k</name> <operator>*</operator> <name>s</name> <operator>+</operator> <literal type="number">0x7FFF</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sin</name><index>[<expr><name>half_pi</name> <operator>-</operator> <name>i</name> <operator>-</operator> <name>step</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>k</name> <operator>*</operator> <name>c</name> <operator>+</operator> <literal type="number">0x8000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>half_pi</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sin</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>sin</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>AMPLITUDE_SHIFT</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>AMPLITUDE_SHIFT</name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>half_pi</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sin</name><index>[<expr><name>half_pi</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sin</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>half_pi</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sin</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>half_pi</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>sin</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>var_names</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"n"</literal></expr>,
<expr><literal type="string">"pts"</literal></expr>,
<expr><literal type="string">"t"</literal></expr>,
<expr><literal type="string">"TB"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<enum>enum <block>{
<decl><name>VAR_N</name></decl>,
<decl><name>VAR_PTS</name></decl>,
<decl><name>VAR_T</name></decl>,
<decl><name>VAR_TB</name></decl>,
<decl><name>VAR_VARS_NB</name></decl>
}</block>;</enum>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SineContext</name> <modifier>*</modifier></type><name>sine</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>sine</name><operator>-&gt;</operator><name>sin</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>sine</name><operator>-&gt;</operator><name>sin</name></name></expr></argument>)</argument_list></sizeof> <operator>&lt;&lt;</operator> <name>LOG_PERIOD</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sine</name><operator>-&gt;</operator><name>dphi</name></name> <operator>=</operator> <call><name>ldexp</name><argument_list>(<argument><expr><name><name>sine</name><operator>-&gt;</operator><name>frequency</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call> <operator>/</operator> <name><name>sine</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>+</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>make_sin_table</name><argument_list>(<argument><expr><name><name>sine</name><operator>-&gt;</operator><name>sin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sine</name><operator>-&gt;</operator><name>beep_factor</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sine</name><operator>-&gt;</operator><name>beep_period</name></name> <operator>=</operator> <name><name>sine</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sine</name><operator>-&gt;</operator><name>beep_length</name></name> <operator>=</operator> <name><name>sine</name><operator>-&gt;</operator><name>beep_period</name></name> <operator>/</operator> <literal type="number">25</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sine</name><operator>-&gt;</operator><name>dphi_beep</name></name> <operator>=</operator> <call><name>ldexp</name><argument_list>(<argument><expr><name><name>sine</name><operator>-&gt;</operator><name>beep_factor</name></name> <operator>*</operator> <name><name>sine</name><operator>-&gt;</operator><name>frequency</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call> <operator>/</operator>
<name><name>sine</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>+</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_expr_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sine</name><operator>-&gt;</operator><name>samples_per_frame_expr</name></name></expr></argument>,
<argument><expr><name><name>sine</name><operator>-&gt;</operator><name>samples_per_frame</name></name></expr></argument>, <argument><expr><name>var_names</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SineContext</name> <modifier>*</modifier></type><name>sine</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name><name>sine</name><operator>-&gt;</operator><name>samples_per_frame_expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sine</name><operator>-&gt;</operator><name>samples_per_frame_expr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sine</name><operator>-&gt;</operator><name>sin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SineContext</name> <modifier>*</modifier></type><name>sine</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int64_t</name></type> <name><name>chlayouts</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>AV_CH_LAYOUT_MONO</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>sample_rates</name><index>[]</index></name> <init>= <expr><block>{ <expr><name><name>sine</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVSampleFormat</name></name></type> <name><name>sample_fmts</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>AV_SAMPLE_FMT_S16</name></expr>,
<expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>formats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>layouts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>sample_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>formats</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_common_formats</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>layouts</name> <operator>=</operator> <call><name>avfilter_make_format64_list</name><argument_list>(<argument><expr><name>chlayouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>layouts</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_common_channel_layouts</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>layouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>sample_rates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>formats</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>ff_set_common_samplerates</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>config_props</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SineContext</name> <modifier>*</modifier></type><name>sine</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sine</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <call><name>av_rescale</name><argument_list>(<argument><expr><name><name>sine</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>, <argument><expr><name><name>sine</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><name>AV_TIME_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>request_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SineContext</name> <modifier>*</modifier></type><name>sine</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>values</name><index>[<expr><name>VAR_VARS_NB</name></expr>]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>VAR_N</name></expr>]</index> <operator>=</operator> <name><name>outlink</name><operator>-&gt;</operator><name>frame_count_in</name></name></expr>,
<expr><index>[<expr><name>VAR_PTS</name></expr>]</index> <operator>=</operator> <name><name>sine</name><operator>-&gt;</operator><name>pts</name></name></expr>,
<expr><index>[<expr><name>VAR_T</name></expr>]</index> <operator>=</operator> <name><name>sine</name><operator>-&gt;</operator><name>pts</name></name> <operator>*</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>,
<expr><index>[<expr><name>VAR_TB</name></expr>]</index> <operator>=</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nb_samples</name> <init>= <expr><call><name>lrint</name><argument_list>(<argument><expr><call><name>av_expr_eval</name><argument_list>(<argument><expr><name><name>sine</name><operator>-&gt;</operator><name>samples_per_frame_expr</name></name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>sine</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>samples</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_samples</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>sine</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"nb samples expression evaluated to %d, "</literal>
<literal type="string">"defaulting to 1024\n"</literal></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nb_samples</name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sine</name><operator>-&gt;</operator><name>duration</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nb_samples</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>nb_samples</name></expr></argument>, <argument><expr><name><name>sine</name><operator>-&gt;</operator><name>duration</name></name> <operator>-</operator> <name><name>sine</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>nb_samples</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nb_samples</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>frame</name> <operator>=</operator> <call><name>ff_get_audio_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>samples</name> <operator>=</operator> <operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sine</name><operator>-&gt;</operator><name>sin</name><index>[<expr><name><name>sine</name><operator>-&gt;</operator><name>phi</name></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>LOG_PERIOD</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sine</name><operator>-&gt;</operator><name>phi</name></name> <operator>+=</operator> <name><name>sine</name><operator>-&gt;</operator><name>dphi</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sine</name><operator>-&gt;</operator><name>beep_index</name></name> <operator>&lt;</operator> <name><name>sine</name><operator>-&gt;</operator><name>beep_length</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>sine</name><operator>-&gt;</operator><name>sin</name><index>[<expr><name><name>sine</name><operator>-&gt;</operator><name>phi_beep</name></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>LOG_PERIOD</name><operator>)</operator></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sine</name><operator>-&gt;</operator><name>phi_beep</name></name> <operator>+=</operator> <name><name>sine</name><operator>-&gt;</operator><name>dphi_beep</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>sine</name><operator>-&gt;</operator><name>beep_index</name></name> <operator>==</operator> <name><name>sine</name><operator>-&gt;</operator><name>beep_period</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sine</name><operator>-&gt;</operator><name>beep_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>sine</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sine</name><operator>-&gt;</operator><name>pts</name></name> <operator>+=</operator> <name>nb_samples</name></expr>;</expr_stmt>
<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>sine_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>request_frame</name> <operator>=</operator> <name>request_frame</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_props</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_asrc_sine</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"sine"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Generate sine wave audio signal."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SineContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>sine_outputs</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>sine_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
