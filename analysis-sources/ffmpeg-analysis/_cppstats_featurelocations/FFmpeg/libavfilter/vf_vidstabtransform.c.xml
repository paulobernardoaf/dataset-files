<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vf_vidstabtransform.c">



















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_INPUT_NAME</name></cpp:macro> <cpp:value>"transforms.trf"</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vid.stab/libvidstab.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vidstabutils.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>TransformContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VSTransformData</name></type> <name>td</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VSTransformConfig</name></type> <name>conf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VSTransformations</name></type> <name>trans</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>tripod</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>debug</name></decl>;</decl_stmt>
}</block></struct></type> <name>TransformContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(TransformContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSETC</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(offsetof(TransformContext, conf)+offsetof(VSTransformConfig, x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_VIDEO_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>vidstabtransform_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"input"</literal></expr>, <expr><literal type="string">"set path to the file storing the transforms"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>,
<expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>DEFAULT_INPUT_NAME</name></expr>}</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"smoothing"</literal></expr>, <expr><literal type="string">"set number of frames*2 + 1 used for lowpass filtering"</literal></expr>, <expr><call><name>OFFSETC</name><argument_list>(<argument><expr><name>smoothing</name></expr></argument>)</argument_list></call></expr>,
<expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">15</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1000</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"optalgo"</literal></expr>, <expr><literal type="string">"set camera path optimization algo"</literal></expr>, <expr><call><name>OFFSETC</name><argument_list>(<argument><expr><name>camPathAlgo</name></expr></argument>)</argument_list></call></expr>,
<expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>VSOptimalL1</name></expr>}</block></expr>, <expr><name>VSOptimalL1</name></expr>, <expr><name>VSAvg</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"optalgo"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"opt"</literal></expr>, <expr><literal type="string">"global optimization"</literal></expr>, <expr><literal type="number">0</literal></expr>, 
<expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>VSOptimalL1</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"optalgo"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"gauss"</literal></expr>, <expr><literal type="string">"gaussian kernel"</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>VSGaussian</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"optalgo"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"avg"</literal></expr>, <expr><literal type="string">"simple averaging on motion"</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>VSAvg</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"optalgo"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"maxshift"</literal></expr>, <expr><literal type="string">"set maximal number of pixels to translate image"</literal></expr>, <expr><call><name>OFFSETC</name><argument_list>(<argument><expr><name>maxShift</name></expr></argument>)</argument_list></call></expr>,
<expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">500</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"maxangle"</literal></expr>, <expr><literal type="string">"set maximal angle in rad to rotate image"</literal></expr>, <expr><call><name>OFFSETC</name><argument_list>(<argument><expr><name>maxAngle</name></expr></argument>)</argument_list></call></expr>,
<expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <operator>-</operator><literal type="number">1.0</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><literal type="number">3.14</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"crop"</literal></expr>, <expr><literal type="string">"set cropping mode"</literal></expr>, <expr><call><name>OFFSETC</name><argument_list>(<argument><expr><name>crop</name></expr></argument>)</argument_list></call></expr>,
<expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"crop"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"keep"</literal></expr>, <expr><literal type="string">"keep border"</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>VSKeepBorder</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"crop"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"black"</literal></expr>, <expr><literal type="string">"black border"</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>VSCropBorder</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"crop"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"invert"</literal></expr>, <expr><literal type="string">"invert transforms"</literal></expr>, <expr><call><name>OFFSETC</name><argument_list>(<argument><expr><name>invert</name></expr></argument>)</argument_list></call></expr>,
<expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"relative"</literal></expr>, <expr><literal type="string">"consider transforms as relative"</literal></expr>, <expr><call><name>OFFSETC</name><argument_list>(<argument><expr><name>relative</name></expr></argument>)</argument_list></call></expr>,
<expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"zoom"</literal></expr>, <expr><literal type="string">"set percentage to zoom (&gt;0: zoom in, &lt;0: zoom out"</literal></expr>, <expr><call><name>OFFSETC</name><argument_list>(<argument><expr><name>zoom</name></expr></argument>)</argument_list></call></expr>,
<expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">100</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"optzoom"</literal></expr>, <expr><literal type="string">"set optimal zoom (0: nothing, 1: optimal static zoom, 2: optimal dynamic zoom)"</literal></expr>, <expr><call><name>OFFSETC</name><argument_list>(<argument><expr><name>optZoom</name></expr></argument>)</argument_list></call></expr>,
<expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"zoomspeed"</literal></expr>, <expr><literal type="string">"for adative zoom: percent to zoom maximally each frame"</literal></expr>, <expr><call><name>OFFSETC</name><argument_list>(<argument><expr><name>zoomSpeed</name></expr></argument>)</argument_list></call></expr>,
<expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">0.25</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"interpol"</literal></expr>, <expr><literal type="string">"set type of interpolation"</literal></expr>, <expr><call><name>OFFSETC</name><argument_list>(<argument><expr><name>interpolType</name></expr></argument>)</argument_list></call></expr>,
<expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">2</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"interpol"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"no"</literal></expr>, <expr><literal type="string">"no interpolation"</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>VS_Zero</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"interpol"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"linear"</literal></expr>, <expr><literal type="string">"linear (horizontal)"</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>VS_Linear</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"interpol"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bilinear"</literal></expr>,<expr><literal type="string">"bi-linear"</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>VS_BiLinear</name></expr>}</block></expr>,<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"interpol"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"bicubic"</literal></expr>, <expr><literal type="string">"bi-cubic"</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>VS_BiCubic</name></expr> }</block></expr>,<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"interpol"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"tripod"</literal></expr>, <expr><literal type="string">"enable virtual tripod mode (same as relative=0:smoothing=0)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>tripod</name></expr></argument>)</argument_list></call></expr>,
<expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"debug"</literal></expr>, <expr><literal type="string">"enable debug mode and writer global motions information to file"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>debug</name></expr></argument>)</argument_list></call></expr>,
<expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>vidstabtransform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TransformContext</name> <modifier>*</modifier></type><name>tc</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ff_vs_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>class</name></name> <operator>=</operator> <operator>&amp;</operator><name>vidstabtransform_class</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"vidstabtransform filter: init %s\n"</literal></expr></argument>, <argument><expr><name>LIBVIDSTAB_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TransformContext</name> <modifier>*</modifier></type><name>tc</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vsTransformDataCleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tc</name><operator>-&gt;</operator><name>td</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vsTransformationsCleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tc</name><operator>-&gt;</operator><name>trans</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_YUV444P</name></expr>, <expr><name>AV_PIX_FMT_YUV422P</name></expr>, <expr><name>AV_PIX_FMT_YUV420P</name></expr>,
<expr><name>AV_PIX_FMT_YUV411P</name></expr>, <expr><name>AV_PIX_FMT_YUV410P</name></expr>, <expr><name>AV_PIX_FMT_YUVA420P</name></expr>,
<expr><name>AV_PIX_FMT_YUV440P</name></expr>, <expr><name>AV_PIX_FMT_GRAY8</name></expr>,
<expr><name>AV_PIX_FMT_RGB24</name></expr>, <expr><name>AV_PIX_FMT_BGR24</name></expr>, <expr><name>AV_PIX_FMT_RGBA</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TransformContext</name> <modifier>*</modifier></type><name>tc</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_planar</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_PLANAR</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VSTransformData</name> <modifier>*</modifier></type><name>td</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>tc</name><operator>-&gt;</operator><name>td</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VSFrameInfo</name></type> <name>fi_src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VSFrameInfo</name></type> <name>fi_dest</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vsFrameInfoInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fi_src</name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>,
<argument><expr><call><name>ff_av2vs_pixfmt</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>vsFrameInfoInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fi_dest</name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>,
<argument><expr><call><name>ff_av2vs_pixfmt</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unknown pixel format: %i (%s)"</literal></expr></argument>,
<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>is_planar</name> <operator>&amp;&amp;</operator> <name><name>fi_src</name><operator>.</operator><name>bytesPerPixel</name></name> <operator>!=</operator> <call><name>av_get_bits_per_pixel</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">8</literal><operator>)</operator> <operator>||</operator>
<name><name>fi_src</name><operator>.</operator><name>log2ChromaW</name></name> <operator>!=</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name> <operator>||</operator>
<name><name>fi_src</name><operator>.</operator><name>log2ChromaH</name></name> <operator>!=</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"pixel-format error: bpp %i&lt;&gt;%i "</literal></expr></argument>,
<argument><expr><name><name>fi_src</name><operator>.</operator><name>bytesPerPixel</name></name></expr></argument>, <argument><expr><call><name>av_get_bits_per_pixel</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"chroma_subsampl: w: %i&lt;&gt;%i h: %i&lt;&gt;%i\n"</literal></expr></argument>,
<argument><expr><name><name>fi_src</name><operator>.</operator><name>log2ChromaW</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></argument>,
<argument><expr><name><name>fi_src</name><operator>.</operator><name>log2ChromaH</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>modName</name></name> <operator>=</operator> <literal type="string">"vidstabtransform"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>verbose</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>tc</name><operator>-&gt;</operator><name>debug</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tc</name><operator>-&gt;</operator><name>tripod</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Virtual tripod mode: relative=0, smoothing=0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>relative</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>smoothing</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>simpleMotionCalculation</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>storeTransforms</name></name> <operator>=</operator> <name><name>tc</name><operator>-&gt;</operator><name>debug</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>smoothZoom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vsTransformDataInit</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tc</name><operator>-&gt;</operator><name>conf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fi_src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fi_dest</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"initialization of vid.stab transform failed, please report a BUG\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vsTransformGetConfig</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tc</name><operator>-&gt;</operator><name>conf</name></name></expr></argument>, <argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Video transformation/stabilization settings (pass 2/2):\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" input = %s\n"</literal></expr></argument>, <argument><expr><name><name>tc</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" smoothing = %d\n"</literal></expr></argument>, <argument><expr><name><name>tc</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>smoothing</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" optalgo = %s\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>tc</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>camPathAlgo</name></name> <operator>==</operator> <name>VSOptimalL1</name></expr> ?</condition><then> <expr><literal type="string">"opt"</literal></expr> </then><else>:
<expr><operator>(</operator><ternary><condition><expr><name><name>tc</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>camPathAlgo</name></name> <operator>==</operator> <name>VSGaussian</name></expr> ?</condition><then> <expr><literal type="string">"gauss"</literal></expr> </then><else>: <expr><literal type="string">"avg"</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" maxshift = %d\n"</literal></expr></argument>, <argument><expr><name><name>tc</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>maxShift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" maxangle = %f\n"</literal></expr></argument>, <argument><expr><name><name>tc</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>maxAngle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" crop = %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>tc</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>crop</name></name></expr> ?</condition><then> <expr><literal type="string">"Black"</literal></expr> </then><else>: <expr><literal type="string">"Keep"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" relative = %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>tc</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>relative</name></name></expr> ?</condition><then> <expr><literal type="string">"True"</literal></expr></then><else>: <expr><literal type="string">"False"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" invert = %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>tc</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>invert</name></name></expr> ?</condition><then> <expr><literal type="string">"True"</literal></expr> </then><else>: <expr><literal type="string">"False"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" zoom = %f\n"</literal></expr></argument>, <argument><expr><name><name>tc</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>zoom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" optzoom = %s\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>tc</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>optZoom</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">"Static (1)"</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name><name>tc</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>optZoom</name></name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="string">"Dynamic (2)"</literal></expr> </then><else>: <expr><literal type="string">"Off (0)"</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tc</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>optZoom</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" zoomspeed = %g\n"</literal></expr></argument>, <argument><expr><name><name>tc</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>zoomSpeed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" interpol = %s\n"</literal></expr></argument>, <argument><expr><call><name>getInterpolationTypeName</name><argument_list>(<argument><expr><name><name>tc</name><operator>-&gt;</operator><name>conf</name><operator>.</operator><name>interpolType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>tc</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot open input file %s\n"</literal></expr></argument>, <argument><expr><name><name>tc</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>VSManyLocalMotions</name></type> <name>mlms</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vsReadLocalMotionsFile</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mlms</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VS_OK</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vsLocalmotions2Transforms</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mlms</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tc</name><operator>-&gt;</operator><name>trans</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"calculating transformations failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vsReadOldTransforms</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tc</name><operator>-&gt;</operator><name>trans</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"error parsing input file %s\n"</literal></expr></argument>, <argument><expr><name><name>tc</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vsPreprocessTransforms</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tc</name><operator>-&gt;</operator><name>trans</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"error while preprocessing transforms\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TransformContext</name> <modifier>*</modifier></type><name>tc</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VSTransformData</name><modifier>*</modifier></type> <name>td</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>tc</name><operator>-&gt;</operator><name>td</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>direct</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VSFrame</name></type> <name>inframe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>plane</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_frame_is_writable</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>direct</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <call><name>vsTransformGetSrcFrameInfo</name><argument_list>(<argument><expr><name>td</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>planes</name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>inframe</name><operator>.</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inframe</name><operator>.</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>direct</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vsTransformPrepare</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inframe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<decl_stmt><decl><type><name>VSFrame</name></type> <name>outframe</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <call><name>vsTransformGetDestFrameInfo</name><argument_list>(<argument><expr><name>td</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>planes</name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>outframe</name><operator>.</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outframe</name><operator>.</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>vsTransformPrepare</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inframe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vsDoTransform</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><call><name>vsGetNextTransform</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tc</name><operator>-&gt;</operator><name>trans</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vsTransformFinish</name><argument_list>(<argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>direct</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>avfilter_vf_vidstabtransform_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>avfilter_vf_vidstabtransform_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_vidstabtransform</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"vidstabtransform"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Transform the frames, "</literal>
<literal type="string">"pass 2 of 2 for stabilization "</literal>
<literal type="string">"(see vidstabdetect for pass 1)."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TransformContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>avfilter_vf_vidstabtransform_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>avfilter_vf_vidstabtransform_outputs</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>vidstabtransform_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
