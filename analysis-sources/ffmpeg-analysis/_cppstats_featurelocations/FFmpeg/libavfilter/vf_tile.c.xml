<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vf_tile.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"drawutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>TileContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>w</name></decl>, <name>h</name>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>margin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>padding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>overlap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>init_padding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>current</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>nb_frames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFDrawContext</name></type> <name>draw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFDrawColor</name></type> <name>blank</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out_ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>prev_out_ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>rgba_color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>TileContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(TileContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM|AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>tile_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"layout"</literal></expr>, <expr><literal type="string">"set grid size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_IMAGE_SIZE</name></expr>,
<expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"6x5"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"nb_frames"</literal></expr>, <expr><literal type="string">"set maximum number of frame to render"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>nb_frames</name></expr></argument>)</argument_list></call></expr>,
<expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"margin"</literal></expr>, <expr><literal type="string">"set outer border margin in pixels"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>margin</name></expr></argument>)</argument_list></call></expr>,
<expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1024</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"padding"</literal></expr>, <expr><literal type="string">"set inner border thickness in pixels"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>padding</name></expr></argument>)</argument_list></call></expr>,
<expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1024</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"color"</literal></expr>, <expr><literal type="string">"set the color of the unused area"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>rgba_color</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_COLOR</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"black"</literal></expr>}</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"overlap"</literal></expr>, <expr><literal type="string">"set how many frames to overlap for each render"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>overlap</name></expr></argument>)</argument_list></call></expr>,
<expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"init_padding"</literal></expr>, <expr><literal type="string">" set how many frames to initially pad"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>init_padding</name></expr></argument>)</argument_list></call></expr>,
<expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>tile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TileContext</name> <modifier>*</modifier></type><name>tile</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tile</name><operator>-&gt;</operator><name>w</name></name> <operator>&gt;</operator> <name>UINT_MAX</name> <operator>/</operator> <name><name>tile</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Tile size %ux%u is insane.\n"</literal></expr></argument>,
<argument><expr><name><name>tile</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>tile</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tile</name><operator>-&gt;</operator><name>padding</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>tile</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <operator>(</operator><name>UINT32_MAX</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>tile</name><operator>-&gt;</operator><name>margin</name></name><operator>)</operator> <operator>/</operator> <name><name>tile</name><operator>-&gt;</operator><name>padding</name></name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>tile</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <operator>(</operator><name>UINT32_MAX</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>tile</name><operator>-&gt;</operator><name>margin</name></name><operator>)</operator> <operator>/</operator> <name><name>tile</name><operator>-&gt;</operator><name>padding</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Combination of Tile size %ux%u, padding %d and margin %d overflows.\n"</literal></expr></argument>,
<argument><expr><name><name>tile</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>tile</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>tile</name><operator>-&gt;</operator><name>padding</name></name></expr></argument>, <argument><expr><name><name>tile</name><operator>-&gt;</operator><name>margin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tile</name><operator>-&gt;</operator><name>nb_frames</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tile</name><operator>-&gt;</operator><name>nb_frames</name></name> <operator>=</operator> <name><name>tile</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <name><name>tile</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>tile</name><operator>-&gt;</operator><name>nb_frames</name></name> <operator>&gt;</operator> <name><name>tile</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <name><name>tile</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"nb_frames must be less than or equal to %dx%d=%d\n"</literal></expr></argument>,
<argument><expr><name><name>tile</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>tile</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>tile</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <name><name>tile</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tile</name><operator>-&gt;</operator><name>overlap</name></name> <operator>&gt;=</operator> <name><name>tile</name><operator>-&gt;</operator><name>nb_frames</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"overlap must be less than %d\n"</literal></expr></argument>, <argument><expr><name><name>tile</name><operator>-&gt;</operator><name>nb_frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tile</name><operator>-&gt;</operator><name>overlap</name></name> <operator>=</operator> <name><name>tile</name><operator>-&gt;</operator><name>nb_frames</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tile</name><operator>-&gt;</operator><name>init_padding</name></name> <operator>&gt;=</operator> <name><name>tile</name><operator>-&gt;</operator><name>nb_frames</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"init_padding must be less than %d\n"</literal></expr></argument>, <argument><expr><name><name>tile</name><operator>-&gt;</operator><name>nb_frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>tile</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name><name>tile</name><operator>-&gt;</operator><name>init_padding</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>ff_draw_supported_pixel_formats</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_props</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TileContext</name> <modifier>*</modifier></type><name>tile</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>total_margin_w</name> <init>= <expr><operator>(</operator><name><name>tile</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>tile</name><operator>-&gt;</operator><name>padding</name></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>tile</name><operator>-&gt;</operator><name>margin</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>total_margin_h</name> <init>= <expr><operator>(</operator><name><name>tile</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>tile</name><operator>-&gt;</operator><name>padding</name></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>tile</name><operator>-&gt;</operator><name>margin</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>&gt;</operator> <operator>(</operator><name>INT_MAX</name> <operator>-</operator> <name>total_margin_w</name><operator>)</operator> <operator>/</operator> <name><name>tile</name><operator>-&gt;</operator><name>w</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Total width %ux%u is too much.\n"</literal></expr></argument>,
<argument><expr><name><name>tile</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>&gt;</operator> <operator>(</operator><name>INT_MAX</name> <operator>-</operator> <name>total_margin_h</name><operator>)</operator> <operator>/</operator> <name><name>tile</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Total height %ux%u is too much.\n"</literal></expr></argument>,
<argument><expr><name><name>tile</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>tile</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>+</operator> <name>total_margin_w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>tile</name><operator>-&gt;</operator><name>h</name></name> <operator>*</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>+</operator> <name>total_margin_h</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>frame_rate</name></name> <operator>=</operator> <call><name>av_mul_q</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>frame_rate</name></name></expr></argument>,
<argument><expr><call><name>av_make_q</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>tile</name><operator>-&gt;</operator><name>nb_frames</name></name> <operator>-</operator> <name><name>tile</name><operator>-&gt;</operator><name>overlap</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_draw_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tile</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_draw_color</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tile</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tile</name><operator>-&gt;</operator><name>blank</name></name></expr></argument>, <argument><expr><name><name>tile</name><operator>-&gt;</operator><name>rgba_color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_tile_pos</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>current</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TileContext</name> <modifier>*</modifier></type><name>tile</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>tx</name> <init>= <expr><name>current</name> <operator>%</operator> <name><name>tile</name><operator>-&gt;</operator><name>w</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>ty</name> <init>= <expr><name>current</name> <operator>/</operator> <name><name>tile</name><operator>-&gt;</operator><name>w</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name><name>tile</name><operator>-&gt;</operator><name>margin</name></name> <operator>+</operator> <operator>(</operator><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>+</operator> <name><name>tile</name><operator>-&gt;</operator><name>padding</name></name><operator>)</operator> <operator>*</operator> <name>tx</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name><name>tile</name><operator>-&gt;</operator><name>margin</name></name> <operator>+</operator> <operator>(</operator><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>+</operator> <name><name>tile</name><operator>-&gt;</operator><name>padding</name></name><operator>)</operator> <operator>*</operator> <name>ty</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_blank_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out_buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TileContext</name> <modifier>*</modifier></type><name>tile</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>x0</name></decl>, <decl><type ref="prev"/><name>y0</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_tile_pos</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y0</name></expr></argument>, <argument><expr><name><name>tile</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tile</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tile</name><operator>-&gt;</operator><name>blank</name></name></expr></argument>,
<argument><expr><name><name>out_buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>out_buf</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,
<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tile</name><operator>-&gt;</operator><name>current</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>end_last_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TileContext</name> <modifier>*</modifier></type><name>tile</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out_buf</name> <init>= <expr><name><name>tile</name><operator>-&gt;</operator><name>out_ref</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>tile</name><operator>-&gt;</operator><name>current</name></name> <operator>&lt;</operator> <name><name>tile</name><operator>-&gt;</operator><name>nb_frames</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>draw_blank_frame</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>out_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>tile</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name><name>tile</name><operator>-&gt;</operator><name>overlap</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tile</name><operator>-&gt;</operator><name>current</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tile</name><operator>-&gt;</operator><name>prev_out_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tile</name><operator>-&gt;</operator><name>prev_out_ref</name></name> <operator>=</operator> <call><name>av_frame_clone</name><argument_list>(<argument><expr><name>out_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tile</name><operator>-&gt;</operator><name>out_ref</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>picref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TileContext</name> <modifier>*</modifier></type><name>tile</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>x0</name></decl>, <decl><type ref="prev"/><name>y0</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tile</name><operator>-&gt;</operator><name>out_ref</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tile</name><operator>-&gt;</operator><name>out_ref</name></name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tile</name><operator>-&gt;</operator><name>out_ref</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name><name>tile</name><operator>-&gt;</operator><name>out_ref</name></name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tile</name><operator>-&gt;</operator><name>out_ref</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tile</name><operator>-&gt;</operator><name>out_ref</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>tile</name><operator>-&gt;</operator><name>margin</name></name> <operator>||</operator> <name><name>tile</name><operator>-&gt;</operator><name>padding</name></name> <operator>||</operator> <name><name>tile</name><operator>-&gt;</operator><name>init_padding</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tile</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tile</name><operator>-&gt;</operator><name>blank</name></name></expr></argument>,
<argument><expr><name><name>tile</name><operator>-&gt;</operator><name>out_ref</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
<argument><expr><name><name>tile</name><operator>-&gt;</operator><name>out_ref</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tile</name><operator>-&gt;</operator><name>init_padding</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tile</name><operator>-&gt;</operator><name>prev_out_ref</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>x1</name></decl>, <decl><type ref="prev"/><name>y1</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>tile</name><operator>-&gt;</operator><name>nb_frames</name></name> <operator>-</operator> <name><name>tile</name><operator>-&gt;</operator><name>overlap</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tile</name><operator>-&gt;</operator><name>nb_frames</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>get_tile_pos</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y1</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_tile_pos</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y0</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <operator>(</operator><name><name>tile</name><operator>-&gt;</operator><name>nb_frames</name></name> <operator>-</operator> <name><name>tile</name><operator>-&gt;</operator><name>overlap</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_copy_rectangle2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tile</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>,
<argument><expr><name><name>tile</name><operator>-&gt;</operator><name>out_ref</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>tile</name><operator>-&gt;</operator><name>out_ref</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,
<argument><expr><name><name>tile</name><operator>-&gt;</operator><name>prev_out_ref</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>tile</name><operator>-&gt;</operator><name>prev_out_ref</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,
<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>get_tile_pos</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y0</name></expr></argument>, <argument><expr><name><name>tile</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_copy_rectangle2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tile</name><operator>-&gt;</operator><name>draw</name></name></expr></argument>,
<argument><expr><name><name>tile</name><operator>-&gt;</operator><name>out_ref</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>tile</name><operator>-&gt;</operator><name>out_ref</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,
<argument><expr><name><name>picref</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>picref</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,
<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>tile</name><operator>-&gt;</operator><name>current</name></name> <operator>==</operator> <name><name>tile</name><operator>-&gt;</operator><name>nb_frames</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>end_last_frame</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>request_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TileContext</name> <modifier>*</modifier></type><name>tile</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>ff_request_frame</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>AVERROR_EOF</name> <operator>&amp;&amp;</operator> <name><name>tile</name><operator>-&gt;</operator><name>current</name></name> <operator>&amp;&amp;</operator> <name><name>tile</name><operator>-&gt;</operator><name>out_ref</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>end_last_frame</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TileContext</name> <modifier>*</modifier></type><name>tile</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tile</name><operator>-&gt;</operator><name>out_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tile</name><operator>-&gt;</operator><name>prev_out_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>tile_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>tile_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_props</name></expr>,
<expr><operator>.</operator><name>request_frame</name> <operator>=</operator> <name>request_frame</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_tile</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"tile"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Tile several successive frames together."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TileContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>tile_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>tile_outputs</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>tile_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
