<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vf_kerndeint.c">



























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>KerndeintContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>thresh</name></decl>, <name>map</name>, <name>order</name>, <name>sharp</name>, <name>twoway</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vsub</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_packed_rgb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>tmp_data</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>tmp_linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>tmp_bwidth</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block></struct></type> <name>KerndeintContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(KerndeintContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM|AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>kerndeint_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"thresh"</literal></expr>, <expr><literal type="string">"set the threshold"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>thresh</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">10</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"map"</literal></expr>, <expr><literal type="string">"set the map"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"order"</literal></expr>, <expr><literal type="string">"set the order"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sharp"</literal></expr>, <expr><literal type="string">"set sharpening"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sharp</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"twoway"</literal></expr>, <expr><literal type="string">"set twoway"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>twoway</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>kerndeint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>KerndeintContext</name> <modifier>*</modifier></type><name>kerndeint</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>kerndeint</name><operator>-&gt;</operator><name>tmp_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_YUV420P</name></expr>,
<expr><name>AV_PIX_FMT_YUYV422</name></expr>,
<expr><name>AV_PIX_FMT_ARGB</name></expr>, <expr><name>AV_PIX_FMT_0RGB</name></expr>,
<expr><name>AV_PIX_FMT_ABGR</name></expr>, <expr><name>AV_PIX_FMT_0BGR</name></expr>,
<expr><name>AV_PIX_FMT_RGBA</name></expr>, <expr><name>AV_PIX_FMT_RGB0</name></expr>,
<expr><name>AV_PIX_FMT_BGRA</name></expr>, <expr><name>AV_PIX_FMT_BGR0</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_props</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>KerndeintContext</name> <modifier>*</modifier></type><name>kerndeint</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>kerndeint</name><operator>-&gt;</operator><name>is_packed_rgb</name></name> <operator>=</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>flags</name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_RGB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kerndeint</name><operator>-&gt;</operator><name>vsub</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_image_alloc</name><argument_list>(<argument><expr><name><name>kerndeint</name><operator>-&gt;</operator><name>tmp_data</name></name></expr></argument>, <argument><expr><name><name>kerndeint</name><operator>-&gt;</operator><name>tmp_linesize</name></name></expr></argument>,
<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>kerndeint</name><operator>-&gt;</operator><name>tmp_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_image_fill_linesizes</name><argument_list>(<argument><expr><name><name>kerndeint</name><operator>-&gt;</operator><name>tmp_bwidth</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>inpic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>KerndeintContext</name> <modifier>*</modifier></type><name>kerndeint</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>outpic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>prvp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>prvpp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>prvpn</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>prvppp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>prvpnn</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>prvp4p</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>prvp4n</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcpp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcpn</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcppp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcpnn</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcp3p</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcp3n</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcp4p</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcp4n</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstp_saved</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcp_saved</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>src_linesize</name></decl>, <decl><type ref="prev"/><name>psrc_linesize</name></decl>, <decl><type ref="prev"/><name>dst_linesize</name></decl>, <decl><type ref="prev"/><name>bwidth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>plane</name></decl>, <decl><type ref="prev"/><name>val</name></decl>, <decl><type ref="prev"/><name>hi</name></decl>, <decl><type ref="prev"/><name>lo</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><name><name>kerndeint</name><operator>-&gt;</operator><name>frame</name></name><operator>++</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>valf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>thresh</name> <init>= <expr><name><name>kerndeint</name><operator>-&gt;</operator><name>thresh</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>order</name> <init>= <expr><name><name>kerndeint</name><operator>-&gt;</operator><name>order</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>map</name> <init>= <expr><name><name>kerndeint</name><operator>-&gt;</operator><name>map</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sharp</name> <init>= <expr><name><name>kerndeint</name><operator>-&gt;</operator><name>sharp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>twoway</name> <init>= <expr><name><name>kerndeint</name><operator>-&gt;</operator><name>twoway</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>is_packed_rgb</name> <init>= <expr><name><name>kerndeint</name><operator>-&gt;</operator><name>is_packed_rgb</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>outpic</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>outpic</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inpic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>outpic</name></expr></argument>, <argument><expr><name>inpic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outpic</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>inpic</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>inpic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <ternary><condition><expr><name>plane</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr> </then><else>: <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>kerndeint</name><operator>-&gt;</operator><name>vsub</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>bwidth</name> <operator>=</operator> <name><name>kerndeint</name><operator>-&gt;</operator><name>tmp_bwidth</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcp_saved</name> <operator>=</operator> <name><name>inpic</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src_linesize</name> <operator>=</operator> <name><name>inpic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>psrc_linesize</name> <operator>=</operator> <name><name>kerndeint</name><operator>-&gt;</operator><name>tmp_linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dstp_saved</name> <operator>=</operator> <name><name>outpic</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_linesize</name> <operator>=</operator> <name><name>outpic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>srcp</name> <operator>=</operator> <name>srcp_saved</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>order</name><operator>)</operator> <operator>*</operator> <name>src_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dstp</name> <operator>=</operator> <name>dstp_saved</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>order</name><operator>)</operator> <operator>*</operator> <name>dst_linesize</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dstp</name></expr></argument>, <argument><expr><name>srcp</name></expr></argument>, <argument><expr><name>bwidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>srcp</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>src_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dstp</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>dst_linesize</name></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dstp_saved</name> <operator>+</operator> <name>order</name> <operator>*</operator> <name>dst_linesize</name></expr></argument>, <argument><expr><name>srcp_saved</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>order</name><operator>)</operator> <operator>*</operator> <name>src_linesize</name></expr></argument>, <argument><expr><name>bwidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dstp_saved</name> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>+</operator> <name>order</name> <operator>)</operator> <operator>*</operator> <name>dst_linesize</name></expr></argument>, <argument><expr><name>srcp_saved</name> <operator>+</operator> <operator>(</operator><literal type="number">3</literal> <operator>-</operator> <name>order</name><operator>)</operator> <operator>*</operator> <name>src_linesize</name></expr></argument>, <argument><expr><name>bwidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dstp_saved</name> <operator>+</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <name>order</name><operator>)</operator> <operator>*</operator> <name>dst_linesize</name></expr></argument>, <argument><expr><name>srcp_saved</name> <operator>+</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>order</name><operator>)</operator> <operator>*</operator> <name>src_linesize</name></expr></argument>, <argument><expr><name>bwidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dstp_saved</name> <operator>+</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">4</literal> <operator>+</operator> <name>order</name><operator>)</operator> <operator>*</operator> <name>dst_linesize</name></expr></argument>, <argument><expr><name>srcp_saved</name> <operator>+</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">3</literal> <operator>-</operator> <name>order</name><operator>)</operator> <operator>*</operator> <name>src_linesize</name></expr></argument>, <argument><expr><name>bwidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>prvp</name> <operator>=</operator> <name><name>kerndeint</name><operator>-&gt;</operator><name>tmp_data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <name>psrc_linesize</name> <operator>-</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>order</name><operator>)</operator> <operator>*</operator> <name>psrc_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prvpp</name> <operator>=</operator> <name>prvp</name> <operator>-</operator> <name>psrc_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prvppp</name> <operator>=</operator> <name>prvp</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>psrc_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prvp4p</name> <operator>=</operator> <name>prvp</name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <name>psrc_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prvpn</name> <operator>=</operator> <name>prvp</name> <operator>+</operator> <name>psrc_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prvpnn</name> <operator>=</operator> <name>prvp</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>psrc_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prvp4n</name> <operator>=</operator> <name>prvp</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>psrc_linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcp</name> <operator>=</operator> <name>srcp_saved</name> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <name>src_linesize</name> <operator>-</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>order</name><operator>)</operator> <operator>*</operator> <name>src_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>srcpp</name> <operator>=</operator> <name>srcp</name> <operator>-</operator> <name>src_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>srcppp</name> <operator>=</operator> <name>srcp</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>src_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>srcp3p</name> <operator>=</operator> <name>srcp</name> <operator>-</operator> <literal type="number">3</literal> <operator>*</operator> <name>src_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>srcp4p</name> <operator>=</operator> <name>srcp</name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <name>src_linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcpn</name> <operator>=</operator> <name>srcp</name> <operator>+</operator> <name>src_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>srcpnn</name> <operator>=</operator> <name>srcp</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>src_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>srcp3n</name> <operator>=</operator> <name>srcp</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>src_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>srcp4n</name> <operator>=</operator> <name>srcp</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>src_linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstp</name> <operator>=</operator> <name>dstp_saved</name> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <name>dst_linesize</name> <operator>-</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>order</name><operator>)</operator> <operator>*</operator> <name>dst_linesize</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">5</literal> <operator>-</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>order</name><operator>)</operator></expr>;</init> <condition><expr><name>y</name> <operator>&lt;=</operator> <name>h</name> <operator>-</operator> <literal type="number">5</literal> <operator>-</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>order</name><operator>)</operator></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>bwidth</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>thresh</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>n</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>prvp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>srcp</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>thresh</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>prvpp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>srcpp</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>thresh</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>prvpn</name><index>[<expr><name>x</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>srcpn</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>thresh</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>map</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>g</name> <operator>=</operator> <name>x</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_packed_rgb</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>dstp</name> <operator>+</operator> <name>g</name></expr></argument>, <argument><expr><literal type="number">0xffffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>g</name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUYV422</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>dstp</name> <operator>+</operator> <name>g</name></expr></argument>, <argument><expr><literal type="number">0xeb80eb80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>g</name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>dstp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>plane</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">235</literal></expr> </then><else>: <expr><literal type="number">128</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>is_packed_rgb</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hi</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>lo</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUYV422</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hi</name> <operator>=</operator> <ternary><condition><expr><name>x</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">240</literal></expr> </then><else>: <expr><literal type="number">235</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>lo</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>hi</name> <operator>=</operator> <ternary><condition><expr><name>plane</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">235</literal></expr> </then><else>: <expr><literal type="number">240</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>lo</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sharp</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>twoway</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>valf</name> <operator>=</operator> <operator>+</operator> <literal type="number">0.526</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>srcpp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>srcpn</name><index>[<expr><name>x</name></expr>]</index></name><operator>)</operator>
<operator>+</operator> <literal type="number">0.170</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>srcp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>prvp</name><index>[<expr><name>x</name></expr>]</index></name><operator>)</operator>
<operator>-</operator> <literal type="number">0.116</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>srcppp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>srcpnn</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>prvppp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>prvpnn</name><index>[<expr><name>x</name></expr>]</index></name><operator>)</operator>
<operator>-</operator> <literal type="number">0.026</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>srcp3p</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>srcp3n</name><index>[<expr><name>x</name></expr>]</index></name><operator>)</operator>
<operator>+</operator> <literal type="number">0.031</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>srcp4p</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>srcp4n</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>prvp4p</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>prvp4n</name><index>[<expr><name>x</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>valf</name> <operator>=</operator> <operator>+</operator> <literal type="number">0.526</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>srcpp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>srcpn</name><index>[<expr><name>x</name></expr>]</index></name><operator>)</operator>
<operator>+</operator> <literal type="number">0.170</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>prvp</name><index>[<expr><name>x</name></expr>]</index></name><operator>)</operator>
<operator>-</operator> <literal type="number">0.116</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>prvppp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>prvpnn</name><index>[<expr><name>x</name></expr>]</index></name><operator>)</operator>
<operator>-</operator> <literal type="number">0.026</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>srcp3p</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>srcp3n</name><index>[<expr><name>x</name></expr>]</index></name><operator>)</operator>
<operator>+</operator> <literal type="number">0.031</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>prvp4p</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>prvp4p</name><index>[<expr><name>x</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>dstp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>valf</name></expr></argument>, <argument><expr><name>lo</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>twoway</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>srcpp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>srcpn</name><index>[<expr><name>x</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>srcp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>prvp</name><index>[<expr><name>x</name></expr>]</index></name><operator>)</operator>
<operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>srcppp</name><index>[<expr><name>x</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>srcpnn</name><index>[<expr><name>x</name></expr>]</index></name><operator>)</operator>
<operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>prvppp</name><index>[<expr><name>x</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>prvpnn</name><index>[<expr><name>x</name></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>srcpp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>srcpn</name><index>[<expr><name>x</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>prvp</name><index>[<expr><name>x</name></expr>]</index></name><operator>)</operator>
<operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>prvppp</name><index>[<expr><name>x</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>prvpnn</name><index>[<expr><name>x</name></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>dstp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>lo</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>dstp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>srcp</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>prvp</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>psrc_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prvpp</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>psrc_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prvppp</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>psrc_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prvpn</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>psrc_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prvpnn</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>psrc_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prvp4p</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>psrc_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prvp4n</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>psrc_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>srcp</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>src_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>srcpp</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>src_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>srcppp</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>src_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>srcp3p</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>src_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>srcp4p</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>src_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>srcpn</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>src_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>srcpnn</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>src_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>srcp3n</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>src_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>srcp4n</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>src_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dstp</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>dst_linesize</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>srcp</name> <operator>=</operator> <name><name>inpic</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dstp</name> <operator>=</operator> <name><name>kerndeint</name><operator>-&gt;</operator><name>tmp_data</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_image_copy_plane</name><argument_list>(<argument><expr><name>dstp</name></expr></argument>, <argument><expr><name>psrc_linesize</name></expr></argument>, <argument><expr><name>srcp</name></expr></argument>, <argument><expr><name>src_linesize</name></expr></argument>, <argument><expr><name>bwidth</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inpic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>outpic</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>kerndeint_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_props</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>kerndeint_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_kerndeint</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"kerndeint"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Apply kernel deinterlacing to the input."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>KerndeintContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>kerndeint_class</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>kerndeint_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>kerndeint_outputs</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
