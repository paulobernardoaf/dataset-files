<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vf_derain.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/avio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnn_interface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>DRContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>filter_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>model_filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DNNBackendType</name></type> <name>backend_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DNNModule</name> <modifier>*</modifier></type><name>dnn_module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DNNModel</name> <modifier>*</modifier></type><name>model</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DNNData</name></type> <name>input</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DNNData</name></type> <name>output</name></decl>;</decl_stmt>
}</block></struct></type> <name>DRContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>min</name></type></parameter>, <parameter><type><name>max</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x &lt; min ? min : (x &gt; max ? max : x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(DRContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM | AV_OPT_FLAG_VIDEO_PARAM</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>derain_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"filter_type"</literal></expr>, <expr><literal type="string">"filter type(derain/dehaze)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>filter_type</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"type"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"derain"</literal></expr>, <expr><literal type="string">"derain filter flag"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"type"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dehaze"</literal></expr>, <expr><literal type="string">"dehaze filter flag"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"type"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dnn_backend"</literal></expr>, <expr><literal type="string">"DNN backend"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>backend_type</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"backend"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"native"</literal></expr>, <expr><literal type="string">"native backend flag"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"backend"</literal></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>CONFIG_LIBTENSORFLOW</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"tensorflow"</literal></expr>, <expr><literal type="string">"tensorflow backend flag"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"backend"</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><literal type="string">"model"</literal></expr>, <expr><literal type="string">"path to model file"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>model_filename</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>derain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>formats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pixel_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_RGB24</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pixel_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_inputs</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DRContext</name> <modifier>*</modifier></type><name>dr_context</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>model_output_name</name> <init>= <expr><literal type="string">"y"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DNNReturnType</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dr_context</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dr_context</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dr_context</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>channels</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name><name>dr_context</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>set_input_output</name></name><operator>)</operator><operator>(</operator><name><name>dr_context</name><operator>-&gt;</operator><name>model</name><operator>-&gt;</operator><name>model</name></name><operator>,</operator> <operator>&amp;</operator><name><name>dr_context</name><operator>-&gt;</operator><name>input</name></name><operator>,</operator> <literal type="string">"x"</literal><operator>,</operator> <operator>&amp;</operator><name>model_output_name</name><operator>,</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>DNN_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not set input and output for the model\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DRContext</name> <modifier>*</modifier></type><name>dr_context</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DNNReturnType</name></type> <name>dnn_result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pad_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not allocate memory for output frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name>i</name> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>j</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name>i</name> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>j</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>dr_context</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>t</name></expr>]</index> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>/</operator> <literal type="number">255.0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name>dnn_result</name> <operator>=</operator> <operator>(</operator><name><name>dr_context</name><operator>-&gt;</operator><name>dnn_module</name><operator>-&gt;</operator><name>execute_model</name></name><operator>)</operator><operator>(</operator><name><name>dr_context</name><operator>-&gt;</operator><name>model</name></name><operator>,</operator> <operator>&amp;</operator><name><name>dr_context</name><operator>-&gt;</operator><name>output</name></name><operator>,</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dnn_result</name> <operator>!=</operator> <name>DNN_SUCCESS</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"failed to execute model\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>dr_context</name><operator>-&gt;</operator><name>output</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>dr_context</name><operator>-&gt;</operator><name>output</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>dr_context</name><operator>-&gt;</operator><name>output</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>dr_context</name><operator>-&gt;</operator><name>output</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pad_size</name> <operator>=</operator> <operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <name><name>out</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name>i</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>j</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name>i</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>j</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>t_in</name> <init>= <expr><operator>(</operator><name>i</name> <operator>+</operator> <name>pad_size</name><operator>)</operator> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>j</name> <operator>+</operator> <name>pad_size</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>CLIP</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>dr_context</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>t_in</name></expr>]</index> <operator>-</operator> <operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>dr_context</name><operator>-&gt;</operator><name>output</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>t</name></expr>]</index><operator>)</operator> <operator>*</operator> <literal type="number">255</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DRContext</name> <modifier>*</modifier></type><name>dr_context</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dr_context</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>dt</name></name> <operator>=</operator> <name>DNN_FLOAT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dr_context</name><operator>-&gt;</operator><name>dnn_module</name></name> <operator>=</operator> <call><name>ff_get_dnn_module</name><argument_list>(<argument><expr><name><name>dr_context</name><operator>-&gt;</operator><name>backend_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dr_context</name><operator>-&gt;</operator><name>dnn_module</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not create DNN module for requested backend\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dr_context</name><operator>-&gt;</operator><name>model_filename</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"model file for network is not specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dr_context</name><operator>-&gt;</operator><name>dnn_module</name><operator>-&gt;</operator><name>load_model</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"load_model for network is not specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dr_context</name><operator>-&gt;</operator><name>model</name></name> <operator>=</operator> <operator>(</operator><name><name>dr_context</name><operator>-&gt;</operator><name>dnn_module</name><operator>-&gt;</operator><name>load_model</name></name><operator>)</operator><operator>(</operator><name><name>dr_context</name><operator>-&gt;</operator><name>model_filename</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dr_context</name><operator>-&gt;</operator><name>model</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not load DNN model\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DRContext</name> <modifier>*</modifier></type><name>dr_context</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dr_context</name><operator>-&gt;</operator><name>dnn_module</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name><name>dr_context</name><operator>-&gt;</operator><name>dnn_module</name><operator>-&gt;</operator><name>free_model</name></name><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>dr_context</name><operator>-&gt;</operator><name>model</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dr_context</name><operator>-&gt;</operator><name>dnn_module</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>derain_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_inputs</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>derain_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_derain</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"derain"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Apply derain filter to the input."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DRContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>derain_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>derain_outputs</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>derain_class</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
