<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vf_readeia608.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/timestamp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LAG</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLOCK_BITSIZE_MIN</name></cpp:macro> <cpp:value>0.2f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLOCK_BITSIZE_MAX</name></cpp:macro> <cpp:value>1.5f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYNC_BITSIZE_MIN</name></cpp:macro> <cpp:value>12.f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYNC_BITSIZE_MAX</name></cpp:macro> <cpp:value>15.f</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>LineItem</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>input</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>output</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>unfiltered</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>filtered</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>average</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>deviation</name></decl>;</decl_stmt>
}</block></struct></type> <name>LineItem</name>;</typedef>

<typedef>typedef <type><struct>struct <name>CodeItem</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>bit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
}</block></struct></type> <name>CodeItem</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ReadEIA608Context</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>, <name>end</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_found</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>white</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>black</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>spw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>chp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>histogram</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CodeItem</name> <modifier>*</modifier></type><name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LineItem</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
}</block></struct></type> <name>ReadEIA608Context</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(ReadEIA608Context, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM|AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>readeia608_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"scan_min"</literal></expr>, <expr><literal type="string">"set from which line to scan for codes"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"scan_max"</literal></expr>, <expr><literal type="string">"set to which line to scan for codes"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">29</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"spw"</literal></expr>, <expr><literal type="string">"set ratio of width reserved for sync code detection"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>spw</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">.27</literal></expr>}</block></expr>, <expr><literal type="number">0.1</literal></expr>, <expr><literal type="number">0.7</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"chp"</literal></expr>, <expr><literal type="string">"check and apply parity bit"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>chp</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"lp"</literal></expr>, <expr><literal type="string">"lowpass line prior to processing"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>lp</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>readeia608</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pixel_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_GRAY8</name></expr>,
<expr><name>AV_PIX_FMT_YUV410P</name></expr>, <expr><name>AV_PIX_FMT_YUV411P</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_YUV422P</name></expr>,
<expr><name>AV_PIX_FMT_YUV440P</name></expr>, <expr><name>AV_PIX_FMT_YUV444P</name></expr>,
<expr><name>AV_PIX_FMT_YUVJ420P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ422P</name></expr>,
<expr><name>AV_PIX_FMT_YUVJ440P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ444P</name></expr>,
<expr><name>AV_PIX_FMT_YUVJ411P</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>formats</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pixel_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>formats</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ReadEIA608Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>+</operator> <name>LAG</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>end</name></name> <operator>&gt;=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Last line to scan too large, clipping.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>start</name></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid range.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>line</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>build_histogram</name><parameter_list>(<parameter><decl><type><name>ReadEIA608Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>LineItem</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>histogram</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>histogram</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>LAG</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>+</operator> <name>LAG</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>histogram</name><index>[<expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>input</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>find_black_and_white</name><parameter_list>(<parameter><decl><type><name>ReadEIA608Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>middle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>black</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>white</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>histogram</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>histogram</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>middle</name> <operator>=</operator> <name>start</name> <operator>+</operator> <operator>(</operator><name>end</name> <operator>-</operator> <name>start</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>middle</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>histogram</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>cnt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>histogram</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>black</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>end</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name>middle</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>histogram</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>cnt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cnt</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>histogram</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>white</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>black</name></name> <operator>=</operator> <name>black</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>white</name></name> <operator>=</operator> <name>white</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>meanf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LineItem</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>sum</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>, <decl><type ref="prev"/><name>mean</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>filtered</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>mean</name> <operator>=</operator> <name>sum</name> <operator>/</operator> <name>len</name></expr>;</expr_stmt>

<return>return <expr><name>mean</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>stddevf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LineItem</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>m</name> <init>= <expr><call><name>meanf</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>standard_deviation</name> <init>= <expr><literal type="number">0.f</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>standard_deviation</name> <operator>+=</operator> <operator>(</operator><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>filtered</name> <operator>-</operator> <name>m</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>filtered</name> <operator>-</operator> <name>m</name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><call><name>sqrtf</name><argument_list>(<argument><expr><name>standard_deviation</name> <operator>/</operator> <operator>(</operator><name>len</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>thresholding</name><parameter_list>(<parameter><decl><type><name>ReadEIA608Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>LineItem</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>lag</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>threshold</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>influence</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>lag</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>+</operator> <name>lag</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>unfiltered</name> <operator>=</operator> <name><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>input</name> <operator>/</operator> <literal type="number">255.f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>filtered</name> <operator>=</operator> <name><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>unfiltered</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lag</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>unfiltered</name> <operator>=</operator> <call><name>meanf</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>spw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>filtered</name> <operator>=</operator> <name><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>unfiltered</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>line</name><index>[<expr><name>lag</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>average</name> <operator>=</operator> <call><name>meanf</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>lag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><index>[<expr><name>lag</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>deviation</name> <operator>=</operator> <call><name>stddevf</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>lag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>lag</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>+</operator> <name>lag</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fabsf</name><argument_list>(<argument><expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>unfiltered</name> <operator>-</operator> <name><name>line</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>average</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>threshold</name> <operator>*</operator> <name><name>line</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>deviation</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>unfiltered</name> <operator>&gt;</operator> <name><name>line</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>average</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>output</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>output</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>filtered</name> <operator>=</operator> <name>influence</name> <operator>*</operator> <name><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>unfiltered</name> <operator>+</operator> <operator>(</operator><literal type="number">1.f</literal> <operator>-</operator> <name>influence</name><operator>)</operator> <operator>*</operator> <name><name>line</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>filtered</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>distance_from_black</name></decl>, <decl><type ref="prev"/><name>distance_from_white</name></decl>;</decl_stmt>

<expr_stmt><expr><name>distance_from_black</name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>input</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>black</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>distance_from_white</name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>input</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>white</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>output</name> <operator>=</operator> <ternary><condition><expr><name>distance_from_black</name> <operator>&lt;=</operator> <name>distance_from_white</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">255</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>average</name> <operator>=</operator> <call><name>meanf</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name>i</name> <operator>-</operator> <name>lag</name></expr></argument>, <argument><expr><name>lag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>deviation</name> <operator>=</operator> <call><name>stddevf</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name>i</name> <operator>-</operator> <name>lag</name></expr></argument>, <argument><expr><name>lag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>periods</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LineItem</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>CodeItem</name> <modifier>*</modifier></type><name>code</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>hold</name> <init>= <expr><name><name>line</name><index>[<expr><name>LAG</name></expr>]</index></name><operator>.</operator><name>output</name></expr></init></decl>, <decl><type ref="prev"/><name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last</name> <init>= <expr><name>LAG</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>code</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>LAG</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>+</operator> <name>LAG</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>output</name> <operator>!=</operator> <name>hold</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>code</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name>i</name> <operator>-</operator> <name>last</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>code</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>bit</name> <operator>=</operator> <name>hold</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hold</name> <operator>=</operator> <name><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>output</name></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>code</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name>LAG</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>last</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>code</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>bit</name> <operator>=</operator> <name>hold</name></expr>;</expr_stmt>

<return>return <expr><name>cnt</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dump_code</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ReadEIA608Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%d:"</literal></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" %03d"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>code</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>extract_line</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ReadEIA608Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LineItem</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>line</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>byte</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>codes</name><index>[<expr><literal type="number">19</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>bit_size</name> <init>= <expr><literal type="number">0.f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>parity</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>w</name> <operator>+</operator> <name>LAG</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <operator>&amp;</operator><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>nb_line</name> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>lp</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>w</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>w</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>f</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>w</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>line</name><index>[<expr><name>LAG</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>input</name> <operator>=</operator> <operator>(</operator><name><name>src</name><index>[<expr><name>a</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><name>b</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><name>c</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><name>d</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><name>e</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><name>f</name></expr>]</index></name> <operator>+</operator> <literal type="number">6</literal><operator>)</operator> <operator>/</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>line</name><index>[<expr><name>LAG</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>input</name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>build_histogram</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>find_black_and_white</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>white</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>black</name></name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>thresholding</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>LAG</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>periods</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_code</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>nb_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">15</literal> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>code</name><index>[<expr><literal type="number">14</literal></expr>]</index></name><operator>.</operator><name>bit</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<name>w</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>code</name><index>[<expr><literal type="number">14</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>&lt;</operator> <name>SYNC_BITSIZE_MIN</name> <operator>||</operator>
<name>w</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>code</name><index>[<expr><literal type="number">14</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>&gt;</operator> <name>SYNC_BITSIZE_MAX</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">14</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>bit_size</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>code</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>bit_size</name> <operator>/=</operator> <literal type="number">19.f</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">14</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>code</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>/</operator> <name>bit_size</name> <operator>&gt;</operator> <name>CLOCK_BITSIZE_MAX</name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>code</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>/</operator> <name>bit_size</name> <operator>&lt;</operator> <name>CLOCK_BITSIZE_MIN</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>code</name><index>[<expr><literal type="number">15</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>/</operator> <name>bit_size</name> <operator>&lt;</operator> <literal type="number">0.45f</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">14</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>run</name></decl>, <decl><type ref="prev"/><name>bit</name></decl>;</decl_stmt>

<expr_stmt><expr><name>run</name> <operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>code</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>/</operator> <name>bit_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bit</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>code</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bit</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">19</literal> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;</operator> <name>run</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>codes</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>bit</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <literal type="number">19</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>parity</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>codes</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <name>ch</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>parity</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>byte</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>|=</operator> <name>b</name> <operator>&lt;&lt;</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>chp</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>parity</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>byte</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x7F</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>key</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>value</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>





<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"lavfi.readeia608.%d.cc"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_found</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"0x%02X%02X"</literal></expr></argument>, <argument><expr><name><name>byte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>byte</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>in</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"lavfi.readeia608.%d.line"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_found</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>nb_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>in</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_found</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ReadEIA608Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_found</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>start</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>end</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>extract_line</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ReadEIA608Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>readeia608_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>readeia608_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_readeia608</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"readeia608"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Read EIA-608 Closed Caption codes from input video and write them to frame metadata."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ReadEIA608Context</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>readeia608_class</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>readeia608_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>readeia608_outputs</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
