<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vf_vectorscope.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/parseutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/xga_font_data.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<enum>enum <name>GraticuleType</name> <block>{
<decl><name>GRAT_NONE</name></decl>,
<decl><name>GRAT_GREEN</name></decl>,
<decl><name>GRAT_COLOR</name></decl>,
<decl><name>GRAT_INVERT</name></decl>,
<decl><name>NB_GRATICULES</name></decl>
}</block>;</enum>

<enum>enum <name>VectorscopeMode</name> <block>{
<decl><name>TINT</name></decl>,
<decl><name>COLOR</name></decl>,
<decl><name>COLOR2</name></decl>,
<decl><name>COLOR3</name></decl>,
<decl><name>COLOR4</name></decl>,
<decl><name>COLOR5</name></decl>,
<decl><name>MODE_NB</name></decl>
}</block>;</enum>

<typedef>typedef <type><struct>struct <name>VectorscopeContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>intensity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>fintensity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>bg_color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>ftint</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>planewidth</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>planeheight</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hsub</name></decl>, <name>vsub</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <name>y</name>, <name>pd</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_yuv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mult</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>envelope</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>graticule</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>opacity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>bgopacity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>lthreshold</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>hthreshold</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>tint</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tmin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tmax</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>colorspace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>peak_memory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>peak</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>vectorscope</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>VectorscopeContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>graticulef</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>VectorscopeContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>X</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>Y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>D</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>P</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>VectorscopeContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(VectorscopeContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_VIDEO_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>vectorscope_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"mode"</literal></expr>, <expr><literal type="string">"set vectorscope mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MODE_NB</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"m"</literal></expr>, <expr><literal type="string">"set vectorscope mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MODE_NB</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"gray"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>TINT</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"tint"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>TINT</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"color"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>COLOR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"color2"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>COLOR2</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"color3"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>COLOR3</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"color4"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>COLOR4</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"color5"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>COLOR5</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"x"</literal></expr>, <expr><literal type="string">"set color component on X axis"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"y"</literal></expr>, <expr><literal type="string">"set color component on Y axis"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">2</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"intensity"</literal></expr>, <expr><literal type="string">"set intensity"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>fintensity</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.004</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"i"</literal></expr>, <expr><literal type="string">"set intensity"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>fintensity</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.004</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"envelope"</literal></expr>, <expr><literal type="string">"set envelope"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>envelope</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"envelope"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"e"</literal></expr>, <expr><literal type="string">"set envelope"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>envelope</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"envelope"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"none"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"envelope"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"instant"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"envelope"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"peak"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">2</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"envelope"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"peak+instant"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">3</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"envelope"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"graticule"</literal></expr>, <expr><literal type="string">"set graticule"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>graticule</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>GRAT_NONE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_GRATICULES</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"graticule"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"g"</literal></expr>, <expr><literal type="string">"set graticule"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>graticule</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>GRAT_NONE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_GRATICULES</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"graticule"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"none"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>GRAT_NONE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"graticule"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"green"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>GRAT_GREEN</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"graticule"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"color"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>GRAT_COLOR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"graticule"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"invert"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>GRAT_INVERT</name></expr>}</block></expr>,<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"graticule"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"opacity"</literal></expr>, <expr><literal type="string">"set graticule opacity"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>opacity</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.75</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"o"</literal></expr>, <expr><literal type="string">"set graticule opacity"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>opacity</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.75</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"flags"</literal></expr>, <expr><literal type="string">"set graticule flags"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLAGS</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">4</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"flags"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"f"</literal></expr>, <expr><literal type="string">"set graticule flags"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLAGS</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">4</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"flags"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"white"</literal></expr>, <expr><literal type="string">"draw white point"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"black"</literal></expr>, <expr><literal type="string">"draw black point"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">2</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"name"</literal></expr>, <expr><literal type="string">"draw point name"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">4</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"flags"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bgopacity"</literal></expr>, <expr><literal type="string">"set background opacity"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>bgopacity</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.3</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"set background opacity"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>bgopacity</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.3</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"lthreshold"</literal></expr>, <expr><literal type="string">"set low threshold"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>lthreshold</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"l"</literal></expr>, <expr><literal type="string">"set low threshold"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>lthreshold</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"hthreshold"</literal></expr>, <expr><literal type="string">"set high threshold"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>hthreshold</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"h"</literal></expr>, <expr><literal type="string">"set high threshold"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>hthreshold</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"colorspace"</literal></expr>, <expr><literal type="string">"set colorspace"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>colorspace</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"colorspace"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"set colorspace"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>colorspace</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"colorspace"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"auto"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"colorspace"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"601"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"colorspace"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"709"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">2</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"colorspace"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"tint0"</literal></expr>, <expr><literal type="string">"set 1st tint"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>ftint</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"t0"</literal></expr>, <expr><literal type="string">"set 1st tint"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>ftint</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"tint1"</literal></expr>, <expr><literal type="string">"set 2nd tint"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>ftint</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"t1"</literal></expr>, <expr><literal type="string">"set 2nd tint"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>ftint</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>vectorscope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>out_yuv8_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_YUVA444P</name></expr>, <expr><name>AV_PIX_FMT_YUV444P</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>out_yuv9_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_YUVA444P9</name></expr>, <expr><name>AV_PIX_FMT_YUV444P9</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>out_yuv10_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_YUVA444P10</name></expr>, <expr><name>AV_PIX_FMT_YUV444P10</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>out_yuv12_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_YUVA444P12</name></expr>, <expr><name>AV_PIX_FMT_YUV444P12</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>out_rgb8_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_GBRAP</name></expr>, <expr><name>AV_PIX_FMT_GBRP</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>out_rgb9_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_GBRP9</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>out_rgb10_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_GBRP10</name></expr>, <expr><name>AV_PIX_FMT_GBRAP10</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>out_rgb12_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_GBRP12</name></expr>, <expr><name>AV_PIX_FMT_GBRAP12</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>in1_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_YUVA444P</name></expr>, <expr><name>AV_PIX_FMT_YUV444P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ444P</name></expr>,
<expr><name>AV_PIX_FMT_YUV444P9</name></expr>, <expr><name>AV_PIX_FMT_YUV444P10</name></expr>,
<expr><name>AV_PIX_FMT_YUVA444P9</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P10</name></expr>,
<expr><name>AV_PIX_FMT_YUVA444P12</name></expr>, <expr><name>AV_PIX_FMT_YUV444P12</name></expr>,
<expr><name>AV_PIX_FMT_GBRAP</name></expr>, <expr><name>AV_PIX_FMT_GBRP</name></expr>,
<expr><name>AV_PIX_FMT_GBRP9</name></expr>, <expr><name>AV_PIX_FMT_GBRP10</name></expr>, <expr><name>AV_PIX_FMT_GBRAP10</name></expr>,
<expr><name>AV_PIX_FMT_GBRP12</name></expr>, <expr><name>AV_PIX_FMT_GBRAP12</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>in2_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_YUVA420P</name></expr>, <expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ420P</name></expr>,
<expr><name>AV_PIX_FMT_YUVA422P</name></expr>, <expr><name>AV_PIX_FMT_YUV422P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ422P</name></expr>,
<expr><name>AV_PIX_FMT_YUVA444P</name></expr>, <expr><name>AV_PIX_FMT_YUV444P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ444P</name></expr>,
<expr><name>AV_PIX_FMT_YUV411P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ411P</name></expr>,
<expr><name>AV_PIX_FMT_YUV440P</name></expr>, <expr><name>AV_PIX_FMT_YUV410P</name></expr>,
<expr><name>AV_PIX_FMT_GBRAP</name></expr>, <expr><name>AV_PIX_FMT_GBRP</name></expr>,
<expr><name>AV_PIX_FMT_GBRP9</name></expr>, <expr><name>AV_PIX_FMT_GBRP10</name></expr>, <expr><name>AV_PIX_FMT_GBRAP10</name></expr>,
<expr><name>AV_PIX_FMT_GBRP12</name></expr>, <expr><name>AV_PIX_FMT_GBRAP12</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P9</name></expr>, <expr><name>AV_PIX_FMT_YUV422P9</name></expr>, <expr><name>AV_PIX_FMT_YUV444P9</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P10</name></expr>, <expr><name>AV_PIX_FMT_YUV422P10</name></expr>, <expr><name>AV_PIX_FMT_YUV444P10</name></expr>,
<expr><name>AV_PIX_FMT_YUVA420P9</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P9</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P9</name></expr>,
<expr><name>AV_PIX_FMT_YUVA420P10</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P10</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P10</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P12</name></expr>, <expr><name>AV_PIX_FMT_YUV422P12</name></expr>, <expr><name>AV_PIX_FMT_YUV444P12</name></expr>, <expr><name>AV_PIX_FMT_YUV440P12</name></expr>,
<expr><name>AV_PIX_FMT_YUVA422P12</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P12</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VectorscopeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier></type><name>out_pix_fmts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>avff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>, <decl><type ref="prev"/><name>rgb</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>in_formats</name> <operator>||</operator>
<operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>in_formats</name><operator>-&gt;</operator><name>nb_formats</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>out_formats</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier></type><name>in_pix_fmts</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>x</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>y</name></name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>x</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>y</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>in_pix_fmts</name> <operator>=</operator> <name>in2_pix_fmts</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>in_pix_fmts</name> <operator>=</operator> <name>in1_pix_fmts</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>in_pix_fmts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>out_formats</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>avff</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>in_formats</name></expr>;</expr_stmt>
<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>avff</name><operator>-&gt;</operator><name>formats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rgb</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_RGB</name></expr>;</expr_stmt>
<expr_stmt><expr><name>depth</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avff</name><operator>-&gt;</operator><name>nb_formats</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>avff</name><operator>-&gt;</operator><name>formats</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rgb</name> <operator>!=</operator> <operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_RGB</name><operator>)</operator> <operator>||</operator>
<name>depth</name> <operator>!=</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>rgb</name> <operator>&amp;&amp;</operator> <name>depth</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>out_pix_fmts</name> <operator>=</operator> <name>out_rgb8_pix_fmts</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>rgb</name> <operator>&amp;&amp;</operator> <name>depth</name> <operator>==</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>out_pix_fmts</name> <operator>=</operator> <name>out_rgb9_pix_fmts</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>rgb</name> <operator>&amp;&amp;</operator> <name>depth</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>out_pix_fmts</name> <operator>=</operator> <name>out_rgb10_pix_fmts</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>rgb</name> <operator>&amp;&amp;</operator> <name>depth</name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>out_pix_fmts</name> <operator>=</operator> <name>out_rgb12_pix_fmts</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>depth</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>out_pix_fmts</name> <operator>=</operator> <name>out_yuv8_pix_fmts</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>depth</name> <operator>==</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>out_pix_fmts</name> <operator>=</operator> <name>out_yuv9_pix_fmts</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>depth</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>out_pix_fmts</name> <operator>=</operator> <name>out_yuv10_pix_fmts</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>depth</name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>out_pix_fmts</name> <operator>=</operator> <name>out_yuv12_pix_fmts</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>out_pix_fmts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>in_formats</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_output</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VectorscopeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>intensity</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fintensity</name></name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>peak_memory</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>peak_memory</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>peak</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>peak</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>peak</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>peak</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>peak_memory</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>envelope_instant16</name><parameter_list>(<parameter><decl><type><name>VectorscopeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dlinesize</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dpd</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>COLOR</name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>is_yuv</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>pd</name></name></expr>]</index></name></expr> </then><else>: <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>max</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pos</name> <init>= <expr><name>i</name> <operator>*</operator> <name>dlinesize</name> <operator>+</operator> <name>j</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>poa</name> <init>= <expr><operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>dlinesize</name> <operator>+</operator> <name>j</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pob</name> <init>= <expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>dlinesize</name> <operator>+</operator> <name>j</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dpd</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>!</operator><name>j</name> <operator>||</operator> <operator>!</operator><name><name>dpd</name><index>[<expr><name>pos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>j</name> <operator>==</operator> <operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>dpd</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator>
<operator>||</operator> <operator>(</operator><operator>(</operator><operator>!</operator><name>i</name> <operator>||</operator> <operator>!</operator><name><name>dpd</name><index>[<expr><name>poa</name></expr>]</index></name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>==</operator> <operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>dpd</name><index>[<expr><name>pob</name></expr>]</index></name><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dpd</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>envelope_peak16</name><parameter_list>(<parameter><decl><type><name>VectorscopeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dlinesize</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dpd</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>COLOR</name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>is_yuv</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>pd</name></name></expr>]</index></name></expr> </then><else>: <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>max</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pos</name> <init>= <expr><name>i</name> <operator>*</operator> <name>dlinesize</name> <operator>+</operator> <name>j</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dpd</name><index>[<expr><name>pos</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>peak</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>envelope</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>envelope_instant16</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pos</name> <init>= <expr><name>i</name> <operator>*</operator> <name>dlinesize</name> <operator>+</operator> <name>j</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>peak</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>!</operator><name>j</name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>peak</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>j</name> <operator>==</operator> <operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>peak</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator>
<operator>||</operator> <operator>(</operator><operator>(</operator><operator>!</operator><name>i</name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>peak</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>==</operator> <operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>peak</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dpd</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>envelope_instant</name><parameter_list>(<parameter><decl><type><name>VectorscopeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dlinesize</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dpd</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>COLOR</name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>is_yuv</name></name></expr> ?</condition><then> <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>pd</name></name></expr>]</index></name></expr> </then><else>: <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pos</name> <init>= <expr><name>i</name> <operator>*</operator> <name>dlinesize</name> <operator>+</operator> <name>j</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>poa</name> <init>= <expr><operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>dlinesize</name> <operator>+</operator> <name>j</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pob</name> <init>= <expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>dlinesize</name> <operator>+</operator> <name>j</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dpd</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>!</operator><name>j</name> <operator>||</operator> <operator>!</operator><name><name>dpd</name><index>[<expr><name>pos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>j</name> <operator>==</operator> <operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>dpd</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator>
<operator>||</operator> <operator>(</operator><operator>(</operator><operator>!</operator><name>i</name> <operator>||</operator> <operator>!</operator><name><name>dpd</name><index>[<expr><name>poa</name></expr>]</index></name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>==</operator> <operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>dpd</name><index>[<expr><name>pob</name></expr>]</index></name><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dpd</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>envelope_peak</name><parameter_list>(<parameter><decl><type><name>VectorscopeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dlinesize</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dpd</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>COLOR</name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>is_yuv</name></name></expr> ?</condition><then> <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>pd</name></name></expr>]</index></name></expr> </then><else>: <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pos</name> <init>= <expr><name>i</name> <operator>*</operator> <name>dlinesize</name> <operator>+</operator> <name>j</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dpd</name><index>[<expr><name>pos</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>peak</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>envelope</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>envelope_instant</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pos</name> <init>= <expr><name>i</name> <operator>*</operator> <name>dlinesize</name> <operator>+</operator> <name>j</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>peak</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>!</operator><name>j</name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>peak</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>j</name> <operator>==</operator> <operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>peak</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator>
<operator>||</operator> <operator>(</operator><operator>(</operator><operator>!</operator><name>i</name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>peak</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>==</operator> <operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>peak</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dpd</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>envelope16</name><parameter_list>(<parameter><decl><type><name>VectorscopeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>envelope</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>envelope</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>envelope_instant16</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>envelope_peak16</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>envelope</name><parameter_list>(<parameter><decl><type><name>VectorscopeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>envelope</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>envelope</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>envelope_instant</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>envelope_peak</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vectorscope16</name><parameter_list>(<parameter><decl><type><name>VectorscopeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator> <specifier>const</specifier> <operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slinesizex</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>x</name></name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slinesizey</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>y</name></name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slinesized</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>pd</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dlinesize</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>intensity</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>intensity</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>px</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl>, <decl><type ref="prev"/><name>py</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>y</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><name>py</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>px</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>spx</name> <init>= <expr><name><name>src</name><index>[<expr><name>px</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>spy</name> <init>= <expr><name><name>src</name><index>[<expr><name>py</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>spd</name> <init>= <expr><name><name>src</name><index>[<expr><name>pd</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>hsub</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>hsub</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>vsub</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>vsub</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dpx</name> <init>= <expr><name><name>dst</name><index>[<expr><name>px</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dpy</name> <init>= <expr><name><name>dst</name><index>[<expr><name>py</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dpd</name> <init>= <expr><name><name>dst</name><index>[<expr><name>pd</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dp1</name> <init>= <expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dp2</name> <init>= <expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>max</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mid</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>tmin</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>tmin</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>tmax</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>tmax</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>dst</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>height</name></name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AV_WN16</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <name>j</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>COLOR</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>COLOR5</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>k</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>pd</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>bg_color</name><index>[<expr><name>k</name></expr>]</index></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
</block_content>}</block></for>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>COLOR</name></expr>:</case>
<case>case <expr><name>COLOR5</name></expr>:</case>
<case>case <expr><name>TINT</name></expr>:</case>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>iwx</name> <init>= <expr><name>i</name> <operator>*</operator> <name>slinesizex</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>iwy</name> <init>= <expr><name>i</name> <operator>*</operator> <name>slinesizey</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>iwd</name> <init>= <expr><name>i</name> <operator>*</operator> <name>slinesized</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>x</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>spx</name><index>[<expr><name>iwx</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>y</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>spy</name><index>[<expr><name>iwy</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>z</name> <init>= <expr><name><name>spd</name><index>[<expr><name>iwd</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pos</name> <init>= <expr><name>y</name> <operator>*</operator> <name>dlinesize</name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>z</name> <argument_list type="generic">&lt; <argument><expr><name>tmin</name> <operator>||</operator> <name>z</name></expr></argument> &gt;</argument_list></name> <name>tmax</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dpd</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>dpd</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>+</operator> <name>intensity</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>COLOR2</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_yuv</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>iw1</name> <init>= <expr><name>i</name> <operator>*</operator> <name>slinesizex</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>iw2</name> <init>= <expr><name>i</name> <operator>*</operator> <name>slinesizey</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>iwd</name> <init>= <expr><name>i</name> <operator>*</operator> <name>slinesized</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>x</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>spx</name><index>[<expr><name>iw1</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>y</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>spy</name><index>[<expr><name>iw2</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>z</name> <init>= <expr><name><name>spd</name><index>[<expr><name>iwd</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pos</name> <init>= <expr><name>y</name> <operator>*</operator> <name>dlinesize</name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>z</name> <argument_list type="generic">&lt; <argument><expr><name>tmin</name> <operator>||</operator> <name>z</name></expr></argument> &gt;</argument_list></name> <name>tmax</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dpd</name><index>[<expr><name>pos</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dpd</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>mid</name> <operator>-</operator> <name>x</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>mid</name> <operator>-</operator> <name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dpx</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpy</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>iw1</name> <init>= <expr><name>i</name> <operator>*</operator> <name>slinesizex</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>iw2</name> <init>= <expr><name>i</name> <operator>*</operator> <name>slinesizey</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>iwd</name> <init>= <expr><name>i</name> <operator>*</operator> <name>slinesized</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>x</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>spx</name><index>[<expr><name>iw1</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>y</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>spy</name><index>[<expr><name>iw2</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>z</name> <init>= <expr><name><name>spd</name><index>[<expr><name>iwd</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pos</name> <init>= <expr><name>y</name> <operator>*</operator> <name>dlinesize</name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>z</name> <argument_list type="generic">&lt; <argument><expr><name>tmin</name> <operator>||</operator> <name>z</name></expr></argument> &gt;</argument_list></name> <name>tmax</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dpd</name><index>[<expr><name>pos</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dpd</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>y</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dpx</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpy</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>COLOR3</name></expr>:</case>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>iw1</name> <init>= <expr><name>i</name> <operator>*</operator> <name>slinesizex</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>iw2</name> <init>= <expr><name>i</name> <operator>*</operator> <name>slinesizey</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>iwd</name> <init>= <expr><name>i</name> <operator>*</operator> <name>slinesized</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>x</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>spx</name><index>[<expr><name>iw1</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>y</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>spy</name><index>[<expr><name>iw2</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>z</name> <init>= <expr><name><name>spd</name><index>[<expr><name>iwd</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pos</name> <init>= <expr><name>y</name> <operator>*</operator> <name>dlinesize</name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>z</name> <argument_list type="generic">&lt; <argument><expr><name>tmin</name> <operator>||</operator> <name>z</name></expr></argument> &gt;</argument_list></name> <name>tmax</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dpd</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><name><name>dpd</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>+</operator> <name>intensity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpx</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpy</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>COLOR4</name></expr>:</case>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>iwx</name> <init>= <expr><operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <name>vsub</name><operator>)</operator> <operator>*</operator> <name>slinesizex</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>iwy</name> <init>= <expr><operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <name>vsub</name><operator>)</operator> <operator>*</operator> <name>slinesizey</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>iwd</name> <init>= <expr><name>i</name> <operator>*</operator> <name>slinesized</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>x</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>spx</name><index>[<expr><name>iwx</name> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <name>hsub</name><operator>)</operator></expr>]</index></name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>y</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>spy</name><index>[<expr><name>iwy</name> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <name>hsub</name><operator>)</operator></expr>]</index></name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>z</name> <init>= <expr><name><name>spd</name><index>[<expr><name>iwd</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pos</name> <init>= <expr><name>y</name> <operator>*</operator> <name>dlinesize</name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>z</name> <argument_list type="generic">&lt; <argument><expr><name>tmin</name> <operator>||</operator> <name>z</name></expr></argument> &gt;</argument_list></name> <name>tmax</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dpd</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name><name>dpd</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpx</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpy</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>envelope16</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><name>i</name> <operator>*</operator> <name>dlinesize</name> <operator>+</operator> <name>j</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dpd</name><index>[<expr><name>pos</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name>max</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>TINT</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>is_yuv</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>tint</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>mid</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>tint</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>mid</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pos</name> <init>= <expr><name>i</name> <operator>*</operator> <name>dlinesize</name> <operator>+</operator> <name>j</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dpd</name><index>[<expr><name>pos</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dp1</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>tint</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dp2</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>tint</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>TINT</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>is_yuv</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pos</name> <init>= <expr><name>i</name> <operator>*</operator> <name>dlinesize</name> <operator>+</operator> <name>j</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dpd</name><index>[<expr><name>pos</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dpx</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>dpd</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>+</operator> <name><name>dpd</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>ftint</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpy</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>dpd</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>+</operator> <name><name>dpd</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>ftint</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>COLOR</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dpd</name><index>[<expr><name>i</name> <operator>*</operator> <name>dlinesize</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dpx</name><index>[<expr><name>i</name> <operator>*</operator> <name>dlinesize</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpy</name><index>[<expr><name>i</name> <operator>*</operator> <name>dlinesize</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpd</name><index>[<expr><name>i</name> <operator>*</operator> <name>dlinesize</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>COLOR5</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dpd</name><index>[<expr><name>i</name> <operator>*</operator> <name>dlinesize</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dpx</name><index>[<expr><name>i</name> <operator>*</operator> <name>dlinesize</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpy</name><index>[<expr><name>i</name> <operator>*</operator> <name>dlinesize</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpd</name><index>[<expr><name>i</name> <operator>*</operator> <name>dlinesize</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name>mid</name> <operator>*</operator> <name>M_SQRT2</name> <operator>-</operator> <call><name>hypot</name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <name>mid</name></expr></argument>, <argument><expr><name>j</name> <operator>-</operator> <name>mid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vectorscope8</name><parameter_list>(<parameter><decl><type><name>VectorscopeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator> <specifier>const</specifier> <operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slinesizex</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>x</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slinesizey</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>y</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slinesized</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>pd</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dlinesize</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>intensity</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>intensity</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>px</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl>, <decl><type ref="prev"/><name>py</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>y</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><name>py</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>px</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>spx</name> <init>= <expr><name><name>src</name><index>[<expr><name>px</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>spy</name> <init>= <expr><name><name>src</name><index>[<expr><name>py</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>spd</name> <init>= <expr><name><name>src</name><index>[<expr><name>pd</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>hsub</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>hsub</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>vsub</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>vsub</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dpx</name> <init>= <expr><name><name>dst</name><index>[<expr><name>px</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dpy</name> <init>= <expr><name><name>dst</name><index>[<expr><name>py</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dpd</name> <init>= <expr><name><name>dst</name><index>[<expr><name>pd</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dp1</name> <init>= <expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dp2</name> <init>= <expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>tmin</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>tmin</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>tmax</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>tmax</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>dst</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>height</name></name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>COLOR</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>COLOR5</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>k</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>pd</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>bg_color</name><index>[<expr><name>k</name></expr>]</index></name></expr></else></ternary></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>COLOR5</name></expr>:</case>
<case>case <expr><name>COLOR</name></expr>:</case>
<case>case <expr><name>TINT</name></expr>:</case>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>iwx</name> <init>= <expr><name>i</name> <operator>*</operator> <name>slinesizex</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>iwy</name> <init>= <expr><name>i</name> <operator>*</operator> <name>slinesizey</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>iwd</name> <init>= <expr><name>i</name> <operator>*</operator> <name>slinesized</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>x</name> <init>= <expr><name><name>spx</name><index>[<expr><name>iwx</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>y</name> <init>= <expr><name><name>spy</name><index>[<expr><name>iwy</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>z</name> <init>= <expr><name><name>spd</name><index>[<expr><name>iwd</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pos</name> <init>= <expr><name>y</name> <operator>*</operator> <name>dlinesize</name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>z</name> <argument_list type="generic">&lt; <argument><expr><name>tmin</name> <operator>||</operator> <name>z</name></expr></argument> &gt;</argument_list></name> <name>tmax</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dpd</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>dpd</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>+</operator> <name>intensity</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>COLOR2</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_yuv</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>iw1</name> <init>= <expr><name>i</name> <operator>*</operator> <name>slinesizex</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>iw2</name> <init>= <expr><name>i</name> <operator>*</operator> <name>slinesizey</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>iwd</name> <init>= <expr><name>i</name> <operator>*</operator> <name>slinesized</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>x</name> <init>= <expr><name><name>spx</name><index>[<expr><name>iw1</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>y</name> <init>= <expr><name><name>spy</name><index>[<expr><name>iw2</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>z</name> <init>= <expr><name><name>spd</name><index>[<expr><name>iwd</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pos</name> <init>= <expr><name>y</name> <operator>*</operator> <name>dlinesize</name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>z</name> <argument_list type="generic">&lt; <argument><expr><name>tmin</name> <operator>||</operator> <name>z</name></expr></argument> &gt;</argument_list></name> <name>tmax</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dpd</name><index>[<expr><name>pos</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dpd</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><literal type="number">128</literal> <operator>-</operator> <name>x</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>FFABS</name><argument_list>(<argument><expr><literal type="number">128</literal> <operator>-</operator> <name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dpx</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpy</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>iw1</name> <init>= <expr><name>i</name> <operator>*</operator> <name>slinesizex</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>iw2</name> <init>= <expr><name>i</name> <operator>*</operator> <name>slinesizey</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>iwd</name> <init>= <expr><name>i</name> <operator>*</operator> <name>slinesized</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>x</name> <init>= <expr><name><name>spx</name><index>[<expr><name>iw1</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>y</name> <init>= <expr><name><name>spy</name><index>[<expr><name>iw2</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>z</name> <init>= <expr><name><name>spd</name><index>[<expr><name>iwd</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pos</name> <init>= <expr><name>y</name> <operator>*</operator> <name>dlinesize</name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>z</name> <argument_list type="generic">&lt; <argument><expr><name>tmin</name> <operator>||</operator> <name>z</name></expr></argument> &gt;</argument_list></name> <name>tmax</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dpd</name><index>[<expr><name>pos</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dpd</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>y</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dpx</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpy</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>COLOR3</name></expr>:</case>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>iw1</name> <init>= <expr><name>i</name> <operator>*</operator> <name>slinesizex</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>iw2</name> <init>= <expr><name>i</name> <operator>*</operator> <name>slinesizey</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>iwd</name> <init>= <expr><name>i</name> <operator>*</operator> <name>slinesized</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>x</name> <init>= <expr><name><name>spx</name><index>[<expr><name>iw1</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>y</name> <init>= <expr><name><name>spy</name><index>[<expr><name>iw2</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>z</name> <init>= <expr><name><name>spd</name><index>[<expr><name>iwd</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pos</name> <init>= <expr><name>y</name> <operator>*</operator> <name>dlinesize</name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>z</name> <argument_list type="generic">&lt; <argument><expr><name>tmin</name> <operator>||</operator> <name>z</name></expr></argument> &gt;</argument_list></name> <name>tmax</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dpd</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><name><name>dpd</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>+</operator> <name>intensity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpx</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpy</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>COLOR4</name></expr>:</case>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>iwx</name> <init>= <expr><operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <name>vsub</name><operator>)</operator> <operator>*</operator> <name>slinesizex</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>iwy</name> <init>= <expr><operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <name>vsub</name><operator>)</operator> <operator>*</operator> <name>slinesizey</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>iwd</name> <init>= <expr><name>i</name> <operator>*</operator> <name>slinesized</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>x</name> <init>= <expr><name><name>spx</name><index>[<expr><name>iwx</name> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <name>hsub</name><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>y</name> <init>= <expr><name><name>spy</name><index>[<expr><name>iwy</name> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <name>hsub</name><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>z</name> <init>= <expr><name><name>spd</name><index>[<expr><name>iwd</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pos</name> <init>= <expr><name>y</name> <operator>*</operator> <name>dlinesize</name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>z</name> <argument_list type="generic">&lt; <argument><expr><name>tmin</name> <operator>||</operator> <name>z</name></expr></argument> &gt;</argument_list></name> <name>tmax</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dpd</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name><name>dpd</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpx</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpy</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>envelope</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><name>i</name> <operator>*</operator> <name>dlinesize</name> <operator>+</operator> <name>j</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dpd</name><index>[<expr><name>pos</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>TINT</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>is_yuv</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>tint</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">128</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>tint</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">128</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pos</name> <init>= <expr><name>i</name> <operator>*</operator> <name>dlinesize</name> <operator>+</operator> <name>j</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dpd</name><index>[<expr><name>pos</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dp1</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>tint</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dp2</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>tint</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>TINT</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>is_yuv</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pos</name> <init>= <expr><name>i</name> <operator>*</operator> <name>dlinesize</name> <operator>+</operator> <name>j</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dpd</name><index>[<expr><name>pos</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dpx</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dpd</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>+</operator> <name><name>dpd</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>ftint</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpy</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dpd</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>+</operator> <name><name>dpd</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>ftint</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>COLOR</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dpd</name><index>[<expr><name>i</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>pd</name></expr>]</index></name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dpx</name><index>[<expr><name>i</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>px</name></expr>]</index></name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpy</name><index>[<expr><name>i</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>py</name></expr>]</index></name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpd</name><index>[<expr><name>i</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>pd</name></expr>]</index></name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>COLOR5</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dpd</name><index>[<expr><name>i</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>pd</name></expr>]</index></name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dpx</name><index>[<expr><name>i</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>px</name></expr>]</index></name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpy</name><index>[<expr><name>i</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>py</name></expr>]</index></name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dpd</name><index>[<expr><name>i</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>pd</name></expr>]</index></name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">128</literal> <operator>*</operator> <name>M_SQRT2</name> <operator>-</operator> <call><name>hypot</name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <literal type="number">128</literal></expr></argument>, <argument><expr><name>j</name> <operator>-</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>positions_name</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"R"</literal></expr>, <expr><literal type="string">"B"</literal></expr>, <expr><literal type="string">"Cy"</literal></expr>, <expr><literal type="string">"Yl"</literal></expr>, <expr><literal type="string">"G"</literal></expr>, <expr><literal type="string">"Mg"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <specifier>static</specifier> <name>uint16_t</name></type> <name><name>positions</name><index>[]</index><index>[<expr><literal type="number">14</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><block>{ <expr><literal type="number">81</literal></expr>, <expr><literal type="number">90</literal></expr>, <expr><literal type="number">240</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">41</literal></expr>, <expr><literal type="number">240</literal></expr>, <expr><literal type="number">110</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">170</literal></expr>, <expr><literal type="number">166</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">210</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">146</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">145</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">34</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">106</literal></expr>, <expr><literal type="number">202</literal></expr>, <expr><literal type="number">222</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">162</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">142</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">131</literal></expr>, <expr><literal type="number">156</literal></expr>, <expr><literal type="number">44</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">112</literal></expr>, <expr><literal type="number">72</literal></expr>, <expr><literal type="number">58</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">84</literal></expr>, <expr><literal type="number">184</literal></expr>, <expr><literal type="number">198</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">65</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">212</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">35</literal></expr>, <expr><literal type="number">212</literal></expr>, <expr><literal type="number">114</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">235</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><literal type="number">63</literal></expr>, <expr><literal type="number">102</literal></expr>, <expr><literal type="number">240</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">32</literal></expr>, <expr><literal type="number">240</literal></expr>, <expr><literal type="number">118</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">188</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">219</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">138</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">173</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">26</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">78</literal></expr>, <expr><literal type="number">214</literal></expr>, <expr><literal type="number">230</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">28</literal></expr>, <expr><literal type="number">212</literal></expr>, <expr><literal type="number">120</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">51</literal></expr>, <expr><literal type="number">109</literal></expr>, <expr><literal type="number">212</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">63</literal></expr>, <expr><literal type="number">193</literal></expr>, <expr><literal type="number">204</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">133</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">52</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">145</literal></expr>, <expr><literal type="number">147</literal></expr>, <expr><literal type="number">44</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">168</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">136</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">235</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><literal type="number">81</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">90</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">240</literal><operator>*</operator><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">41</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">240</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">110</literal><operator>*</operator><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">170</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">166</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">16</literal><operator>*</operator><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">210</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">16</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">146</literal><operator>*</operator><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">145</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">54</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">34</literal><operator>*</operator><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">106</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">202</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">222</literal><operator>*</operator><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">162</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">44</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">142</literal><operator>*</operator><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">131</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">156</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">44</literal><operator>*</operator><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">112</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">72</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">58</literal><operator>*</operator><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">84</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">184</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">198</literal><operator>*</operator><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">65</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">100</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">212</literal><operator>*</operator><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">35</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">212</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">114</literal><operator>*</operator><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">470</literal></expr>, <expr><literal type="number">256</literal></expr>, <expr><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">32</literal></expr>, <expr><literal type="number">256</literal></expr>, <expr><literal type="number">256</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><literal type="number">63</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">102</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">240</literal><operator>*</operator><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">32</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">240</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">118</literal><operator>*</operator><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">188</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">154</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">16</literal><operator>*</operator><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">219</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">16</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">138</literal><operator>*</operator><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">173</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">42</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">26</literal><operator>*</operator><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">78</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">214</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">230</literal><operator>*</operator><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">28</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">212</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">120</literal><operator>*</operator><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">51</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">109</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">212</literal><operator>*</operator><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">63</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">193</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">204</literal><operator>*</operator><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">133</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">63</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">52</literal><operator>*</operator><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">145</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">147</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">44</literal><operator>*</operator><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">168</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">44</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">136</literal><operator>*</operator><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">470</literal></expr>, <expr><literal type="number">256</literal></expr>, <expr><literal type="number">256</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">32</literal></expr>, <expr><literal type="number">256</literal></expr>, <expr><literal type="number">256</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><literal type="number">81</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">90</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">240</literal><operator>*</operator><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">41</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">240</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">110</literal><operator>*</operator><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">170</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">166</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">16</literal><operator>*</operator><literal type="number">4</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">210</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">16</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">146</literal><operator>*</operator><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">145</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">54</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">34</literal><operator>*</operator><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">106</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">202</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">222</literal><operator>*</operator><literal type="number">4</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">162</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">44</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">142</literal><operator>*</operator><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">131</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">156</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">44</literal><operator>*</operator><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">112</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">72</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">58</literal><operator>*</operator><literal type="number">4</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">84</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">184</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">198</literal><operator>*</operator><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">65</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">100</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">212</literal><operator>*</operator><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">35</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">212</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">114</literal><operator>*</operator><literal type="number">4</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">940</literal></expr>, <expr><literal type="number">512</literal></expr>, <expr><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">64</literal></expr>, <expr><literal type="number">512</literal></expr>, <expr><literal type="number">512</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><literal type="number">63</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">102</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">240</literal><operator>*</operator><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">32</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">240</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">118</literal><operator>*</operator><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">188</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">154</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">16</literal><operator>*</operator><literal type="number">4</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">219</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">16</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">138</literal><operator>*</operator><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">173</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">42</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">26</literal><operator>*</operator><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">78</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">214</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">230</literal><operator>*</operator><literal type="number">4</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">28</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">212</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">120</literal><operator>*</operator><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">51</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">109</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">212</literal><operator>*</operator><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">63</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">193</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">204</literal><operator>*</operator><literal type="number">4</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">133</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">63</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">52</literal><operator>*</operator><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">145</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">147</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">44</literal><operator>*</operator><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">168</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">44</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">136</literal><operator>*</operator><literal type="number">4</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">940</literal></expr>, <expr><literal type="number">512</literal></expr>, <expr><literal type="number">512</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">64</literal></expr>, <expr><literal type="number">512</literal></expr>, <expr><literal type="number">512</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><literal type="number">81</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">90</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">240</literal><operator>*</operator><literal type="number">8</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">41</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">240</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">110</literal><operator>*</operator><literal type="number">8</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">170</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">166</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">16</literal><operator>*</operator><literal type="number">8</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">210</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">16</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">146</literal><operator>*</operator><literal type="number">8</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">145</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">54</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">34</literal><operator>*</operator><literal type="number">8</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">106</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">202</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">222</literal><operator>*</operator><literal type="number">8</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">162</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">44</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">142</literal><operator>*</operator><literal type="number">8</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">131</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">156</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">44</literal><operator>*</operator><literal type="number">8</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">112</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">72</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">58</literal><operator>*</operator><literal type="number">8</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">84</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">184</literal><operator>*</operator><literal type="number">4</literal></expr>, <expr><literal type="number">198</literal><operator>*</operator><literal type="number">8</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">65</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">100</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">212</literal><operator>*</operator><literal type="number">8</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">35</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">212</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">114</literal><operator>*</operator><literal type="number">8</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1880</literal></expr>, <expr><literal type="number">1024</literal></expr>, <expr><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">128</literal></expr>, <expr><literal type="number">1024</literal></expr>, <expr><literal type="number">1024</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><literal type="number">63</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">102</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">240</literal><operator>*</operator><literal type="number">8</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">32</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">240</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">118</literal><operator>*</operator><literal type="number">8</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">188</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">154</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">16</literal><operator>*</operator><literal type="number">8</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">219</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">16</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">138</literal><operator>*</operator><literal type="number">8</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">173</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">42</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">26</literal><operator>*</operator><literal type="number">8</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">78</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">214</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">230</literal><operator>*</operator><literal type="number">8</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">28</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">212</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">120</literal><operator>*</operator><literal type="number">8</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">51</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">109</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">212</literal><operator>*</operator><literal type="number">8</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">63</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">193</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">204</literal><operator>*</operator><literal type="number">8</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">133</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">63</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">52</literal><operator>*</operator><literal type="number">8</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">145</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">147</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">44</literal><operator>*</operator><literal type="number">8</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">168</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">44</literal><operator>*</operator><literal type="number">8</literal></expr>, <expr><literal type="number">136</literal><operator>*</operator><literal type="number">8</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1880</literal></expr>, <expr><literal type="number">1024</literal></expr>, <expr><literal type="number">1024</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">128</literal></expr>, <expr><literal type="number">1024</literal></expr>, <expr><literal type="number">1024</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><literal type="number">81</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">90</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">240</literal><operator>*</operator><literal type="number">16</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">41</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">240</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">110</literal><operator>*</operator><literal type="number">16</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">170</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">166</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal><operator>*</operator><literal type="number">16</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">210</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">146</literal><operator>*</operator><literal type="number">16</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">145</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">54</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">34</literal><operator>*</operator><literal type="number">16</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">106</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">202</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">222</literal><operator>*</operator><literal type="number">16</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">162</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">44</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">142</literal><operator>*</operator><literal type="number">16</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">131</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">156</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">44</literal><operator>*</operator><literal type="number">16</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">112</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">72</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">58</literal><operator>*</operator><literal type="number">16</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">84</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">184</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">198</literal><operator>*</operator><literal type="number">16</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">65</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">100</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">212</literal><operator>*</operator><literal type="number">16</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">35</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">212</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">114</literal><operator>*</operator><literal type="number">16</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3760</literal></expr>, <expr><literal type="number">2048</literal></expr>, <expr><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">256</literal></expr>, <expr><literal type="number">2048</literal></expr>, <expr><literal type="number">2048</literal></expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr><block>{ <expr><literal type="number">63</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">102</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">240</literal><operator>*</operator><literal type="number">16</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">32</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">240</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">118</literal><operator>*</operator><literal type="number">16</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">188</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">154</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal><operator>*</operator><literal type="number">16</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">219</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">138</literal><operator>*</operator><literal type="number">16</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">173</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">42</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">26</literal><operator>*</operator><literal type="number">16</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">78</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">214</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">230</literal><operator>*</operator><literal type="number">16</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">28</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">212</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">120</literal><operator>*</operator><literal type="number">16</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">51</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">109</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">212</literal><operator>*</operator><literal type="number">16</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">63</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">193</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">204</literal><operator>*</operator><literal type="number">16</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">133</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">63</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">52</literal><operator>*</operator><literal type="number">16</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">145</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">147</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">44</literal><operator>*</operator><literal type="number">16</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">168</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">44</literal><operator>*</operator><literal type="number">16</literal></expr>, <expr><literal type="number">136</literal><operator>*</operator><literal type="number">16</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3760</literal></expr>, <expr><literal type="number">2048</literal></expr>, <expr><literal type="number">2048</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">256</literal></expr>, <expr><literal type="number">2048</literal></expr>, <expr><literal type="number">2048</literal></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_dots</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>f</name> <init>= <expr><literal type="number">1.</literal> <operator>-</operator> <name>o</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>V</name> <init>= <expr><name>o</name> <operator>*</operator> <name>v</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><name>L</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><index>[ <expr><name>l</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[ <expr><name>l</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <name>V</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[ <expr><name>l</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[ <expr><name>l</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <name>V</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <name>V</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <name>V</name></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>+=</operator> <name>L</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[ <expr><name>l</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[ <expr><name>l</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <name>V</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[ <expr><name>l</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[ <expr><name>l</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <name>V</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[ <expr><name>l</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[ <expr><name>l</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <name>V</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[ <expr><name>l</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[ <expr><name>l</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <name>V</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <name>V</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <name>V</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <name>V</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <name>V</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_idots</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>L</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>f</name> <init>= <expr><literal type="number">1.</literal> <operator>-</operator> <name>o</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><name>L</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><index>[ <expr><name>l</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[ <expr><name>l</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <operator>(</operator><literal type="number">255</literal> <operator>-</operator> <name><name>dst</name><index>[ <expr><name>l</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>o</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[ <expr><name>l</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[ <expr><name>l</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <operator>(</operator><literal type="number">255</literal> <operator>-</operator> <name><name>dst</name><index>[ <expr><name>l</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>o</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <operator>(</operator><literal type="number">255</literal> <operator>-</operator> <name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>o</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <operator>(</operator><literal type="number">255</literal> <operator>-</operator> <name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>o</name></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>+=</operator> <name>L</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[ <expr><name>l</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[ <expr><name>l</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <operator>(</operator><literal type="number">255</literal> <operator>-</operator> <name><name>dst</name><index>[ <expr><name>l</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>o</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[ <expr><name>l</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[ <expr><name>l</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <operator>(</operator><literal type="number">255</literal> <operator>-</operator> <name><name>dst</name><index>[ <expr><name>l</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>o</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[ <expr><name>l</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[ <expr><name>l</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <operator>(</operator><literal type="number">255</literal> <operator>-</operator> <name><name>dst</name><index>[ <expr><name>l</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>o</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[ <expr><name>l</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[ <expr><name>l</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <operator>(</operator><literal type="number">255</literal> <operator>-</operator> <name><name>dst</name><index>[ <expr><name>l</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>o</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <operator>(</operator><literal type="number">255</literal> <operator>-</operator> <name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>o</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <operator>(</operator><literal type="number">255</literal> <operator>-</operator> <name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>o</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <operator>(</operator><literal type="number">255</literal> <operator>-</operator> <name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>o</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <operator>(</operator><literal type="number">255</literal> <operator>-</operator> <name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>o</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_dots16</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>f</name> <init>= <expr><literal type="number">1.</literal> <operator>-</operator> <name>o</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>V</name> <init>= <expr><name>o</name> <operator>*</operator> <name>v</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><name>L</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><index>[ <expr><name>l</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[ <expr><name>l</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <name>V</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[ <expr><name>l</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[ <expr><name>l</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <name>V</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <name>V</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <name>V</name></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>+=</operator> <name>L</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[ <expr><name>l</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[ <expr><name>l</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <name>V</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[ <expr><name>l</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[ <expr><name>l</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <name>V</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[ <expr><name>l</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[ <expr><name>l</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <name>V</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[ <expr><name>l</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[ <expr><name>l</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <name>V</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <name>V</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <name>V</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <name>V</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <name>V</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_idots16</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>f</name> <init>= <expr><literal type="number">1.</literal> <operator>-</operator> <name>o</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><name>L</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><index>[ <expr><name>l</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[ <expr><name>l</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <operator>(</operator><name>v</name> <operator>-</operator> <name><name>dst</name><index>[ <expr><name>l</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>o</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[ <expr><name>l</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[ <expr><name>l</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <operator>(</operator><name>v</name> <operator>-</operator> <name><name>dst</name><index>[ <expr><name>l</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>o</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <operator>(</operator><name>v</name> <operator>-</operator> <name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>o</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <operator>(</operator><name>v</name> <operator>-</operator> <name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>o</name></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>+=</operator> <name>L</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[ <expr><name>l</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[ <expr><name>l</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <operator>(</operator><name>v</name> <operator>-</operator> <name><name>dst</name><index>[ <expr><name>l</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>o</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[ <expr><name>l</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[ <expr><name>l</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <operator>(</operator><name>v</name> <operator>-</operator> <name><name>dst</name><index>[ <expr><name>l</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>o</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[ <expr><name>l</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[ <expr><name>l</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <operator>(</operator><name>v</name> <operator>-</operator> <name><name>dst</name><index>[ <expr><name>l</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>o</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[ <expr><name>l</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[ <expr><name>l</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <operator>(</operator><name>v</name> <operator>-</operator> <name><name>dst</name><index>[ <expr><name>l</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>o</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <operator>(</operator><name>v</name> <operator>-</operator> <name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>o</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <operator>(</operator><name>v</name> <operator>-</operator> <name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>o</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <operator>(</operator><name>v</name> <operator>-</operator> <name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>o</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <operator>(</operator><name>v</name> <operator>-</operator> <name><name>dst</name><index>[<expr><operator>-</operator><name>l</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>o</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>none_graticule</name><parameter_list>(<parameter><decl><type><name>VectorscopeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>X</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>Y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>D</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>P</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_ihtext</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>font</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>font_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>plane</name></decl>;</decl_stmt>

<expr_stmt><expr><name>font</name> <operator>=</operator> <name>avpriv_cga_font</name></expr><operator>,</operator> <expr><name>font_height</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>char_y</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>char_y</name> <operator>=</operator> <name>font_height</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>char_y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>char_y</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>mask</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</init> <condition><expr><name>mask</name></expr>;</condition> <incr><expr><name>mask</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>font</name><index>[<expr><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>font_height</name> <operator>+</operator> <name>char_y</name></expr>]</index></name> <operator>&amp;</operator> <name>mask</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>o2</name> <operator>+</operator> <operator>(</operator><literal type="number">255</literal> <operator>-</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>o1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_ihtext16</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name><name>color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>font</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>font_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>plane</name></decl>;</decl_stmt>

<expr_stmt><expr><name>font</name> <operator>=</operator> <name>avpriv_cga_font</name></expr><operator>,</operator> <expr><name>font_height</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>char_y</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>color</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>char_y</name> <operator>=</operator> <name>font_height</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>char_y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>char_y</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>mask</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</init> <condition><expr><name>mask</name></expr>;</condition> <incr><expr><name>mask</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>font</name><index>[<expr><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>font_height</name> <operator>+</operator> <name>char_y</name></expr>]</index></name> <operator>&amp;</operator> <name>mask</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>o2</name> <operator>+</operator> <operator>(</operator><name>v</name> <operator>-</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>o1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_htext</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>font</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>font_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>plane</name></decl>;</decl_stmt>

<expr_stmt><expr><name>font</name> <operator>=</operator> <name>avpriv_cga_font</name></expr><operator>,</operator> <expr><name>font_height</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>char_y</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>color</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>char_y</name> <operator>=</operator> <name>font_height</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>char_y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>char_y</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>mask</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</init> <condition><expr><name>mask</name></expr>;</condition> <incr><expr><name>mask</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>font</name><index>[<expr><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>font_height</name> <operator>+</operator> <name>char_y</name></expr>]</index></name> <operator>&amp;</operator> <name>mask</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>o2</name> <operator>+</operator> <name>v</name> <operator>*</operator> <name>o1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_htext16</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>o2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name><name>color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>font</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>font_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>plane</name></decl>;</decl_stmt>

<expr_stmt><expr><name>font</name> <operator>=</operator> <name>avpriv_cga_font</name></expr><operator>,</operator> <expr><name>font_height</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>char_y</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>color</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>char_y</name> <operator>=</operator> <name>font_height</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>char_y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>char_y</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>mask</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</init> <condition><expr><name>mask</name></expr>;</condition> <incr><expr><name>mask</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>font</name><index>[<expr><name><name>txt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>font_height</name> <operator>+</operator> <name>char_y</name></expr>]</index></name> <operator>&amp;</operator> <name>mask</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>o2</name> <operator>+</operator> <name>v</name> <operator>*</operator> <name>o1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>color_graticule16</name><parameter_list>(<parameter><decl><type><name>VectorscopeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>X</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>Y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>D</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>P</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>max</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>o</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>opacity</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>X</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>Y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>D</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>draw_dots16</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>D</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>D</name></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>D</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_dots16</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>X</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>X</name></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>X</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_dots16</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>Y</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>Y</name></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>Y</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>draw_dots16</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><name>X</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><name>Y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><name>D</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>draw_dots16</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>D</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>D</name></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>D</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_dots16</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>X</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>X</name></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>X</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_dots16</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>Y</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>Y</name></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>Y</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>draw_dots16</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><literal type="number">13</literal></expr>]</index><index>[<expr><name>X</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><literal type="number">13</literal></expr>]</index><index>[<expr><name>Y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><literal type="number">13</literal></expr>]</index><index>[<expr><name>D</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>draw_dots16</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>D</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>D</name></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>D</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_dots16</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>X</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>X</name></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>X</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_dots16</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>Y</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>Y</name></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>Y</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>draw_dots16</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>X</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>Y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>D</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>color</name><index>[<expr><name>D</name></expr>]</index></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><index>[<expr><name>X</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><index>[<expr><name>Y</name></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name>max</name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>-=</operator> <literal type="number">14</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;</operator> <name>max</name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>-=</operator> <literal type="number">14</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_htext16</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="number">1.</literal> <operator>-</operator> <name>o</name></expr></argument>, <argument><expr><name><name>positions_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>color_graticule</name><parameter_list>(<parameter><decl><type><name>VectorscopeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>X</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>Y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>D</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>P</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>o</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>opacity</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>X</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>Y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>D</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>draw_dots</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>D</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>D</name></expr>]</index></name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>D</name></expr>]</index></name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_dots</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>X</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>X</name></expr>]</index></name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>X</name></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_dots</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>Y</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>Y</name></expr>]</index></name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>Y</name></expr>]</index></name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>draw_dots</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><name>X</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><name>Y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><name>D</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>draw_dots</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>D</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>D</name></expr>]</index></name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>D</name></expr>]</index></name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_dots</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>X</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>X</name></expr>]</index></name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>X</name></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_dots</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>Y</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>Y</name></expr>]</index></name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>Y</name></expr>]</index></name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>draw_dots</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><literal type="number">13</literal></expr>]</index><index>[<expr><name>X</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><literal type="number">13</literal></expr>]</index><index>[<expr><name>Y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><name>D</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>draw_dots</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>D</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>D</name></expr>]</index></name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>D</name></expr>]</index></name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_dots</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>X</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>X</name></expr>]</index></name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>X</name></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_dots</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>Y</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>Y</name></expr>]</index></name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>Y</name></expr>]</index></name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>draw_dots</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>X</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>Y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>D</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>color</name><index>[<expr><name>D</name></expr>]</index></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><index>[<expr><name>X</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><index>[<expr><name>Y</name></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>-=</operator> <literal type="number">14</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>-=</operator> <literal type="number">14</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_htext</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="number">1.</literal> <operator>-</operator> <name>o</name></expr></argument>, <argument><expr><name><name>positions_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>green_graticule16</name><parameter_list>(<parameter><decl><type><name>VectorscopeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>X</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>Y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>D</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>P</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>max</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>o</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>opacity</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>m</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mult</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>X</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>Y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>draw_dots16</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>*</operator> <name>m</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_dots16</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_dots16</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>draw_dots16</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><name>X</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><name>Y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>draw_dots16</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>*</operator> <name>m</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_dots16</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_dots16</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>draw_dots16</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><literal type="number">13</literal></expr>]</index><index>[<expr><name>X</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><literal type="number">13</literal></expr>]</index><index>[<expr><name>Y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>draw_dots16</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>*</operator> <name>m</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_dots16</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_dots16</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>draw_dots16</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name><name>color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">128</literal> <operator>*</operator> <name>m</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>max</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>X</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>Y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name>max</name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>-=</operator> <literal type="number">14</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;</operator> <name>max</name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>-=</operator> <literal type="number">14</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_htext16</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="number">1.</literal> <operator>-</operator> <name>o</name></expr></argument>, <argument><expr><name><name>positions_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>green_graticule</name><parameter_list>(<parameter><decl><type><name>VectorscopeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>X</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>Y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>D</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>P</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>o</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>opacity</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>X</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>Y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>draw_dots</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_dots</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_dots</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>draw_dots</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><name>X</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><name>Y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>draw_dots</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_dots</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_dots</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>draw_dots</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><literal type="number">13</literal></expr>]</index><index>[<expr><name>X</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><literal type="number">13</literal></expr>]</index><index>[<expr><name>Y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>draw_dots</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_dots</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_dots</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>draw_dots</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">128</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>X</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>Y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>-=</operator> <literal type="number">14</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>-=</operator> <literal type="number">14</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_htext</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="number">1.</literal> <operator>-</operator> <name>o</name></expr></argument>, <argument><expr><name><name>positions_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>invert_graticule16</name><parameter_list>(<parameter><decl><type><name>VectorscopeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>X</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>Y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>D</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>P</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>max</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>o</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>opacity</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>X</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>Y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>draw_idots16</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>D</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>D</name></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>D</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_idots16</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>X</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>X</name></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>X</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_idots16</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>Y</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>Y</name></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>Y</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>draw_dots16</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><name>X</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><name>Y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>draw_idots16</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>D</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>D</name></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>D</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_idots16</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>X</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>X</name></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>X</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_idots16</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>Y</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>Y</name></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>Y</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>draw_dots16</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><literal type="number">13</literal></expr>]</index><index>[<expr><name>X</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><literal type="number">13</literal></expr>]</index><index>[<expr><name>Y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>draw_idots16</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>D</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>D</name></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>D</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_idots16</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>X</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>X</name></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>X</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_idots16</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>Y</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>Y</name></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>Y</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>draw_dots16</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>max</name></expr>, <expr><name>max</name></expr>, <expr><name>max</name></expr>, <expr><name>max</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>X</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>Y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name>max</name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>-=</operator> <literal type="number">14</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;</operator> <name>max</name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>-=</operator> <literal type="number">14</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_ihtext16</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="number">1.</literal> <operator>-</operator> <name>o</name></expr></argument>, <argument><expr><name><name>positions_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>invert_graticule</name><parameter_list>(<parameter><decl><type><name>VectorscopeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>X</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>Y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>D</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>P</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>o</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>opacity</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>X</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>Y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>draw_idots</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>D</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>D</name></expr>]</index></name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>D</name></expr>]</index></name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_idots</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>X</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>X</name></expr>]</index></name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>X</name></expr>]</index></name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_idots</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>Y</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>Y</name></expr>]</index></name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>Y</name></expr>]</index></name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>draw_idots</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><name>X</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><name>Y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>draw_idots</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>D</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>D</name></expr>]</index></name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>D</name></expr>]</index></name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_idots</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>X</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>X</name></expr>]</index></name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>X</name></expr>]</index></name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_idots</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>Y</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>Y</name></expr>]</index></name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>Y</name></expr>]</index></name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>draw_idots</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><literal type="number">13</literal></expr>]</index><index>[<expr><name>X</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><literal type="number">13</literal></expr>]</index><index>[<expr><name>Y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>draw_idots</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>D</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>D</name></expr>]</index></name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>D</name></expr>]</index></name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_idots</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>X</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>X</name></expr>]</index></name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>X</name></expr>]</index></name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_idots</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>Y</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>Y</name></expr>]</index></name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>Y</name></expr>]</index></name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>draw_idots</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>X</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>positions</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>Y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>-=</operator> <literal type="number">14</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>-=</operator> <literal type="number">14</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_ihtext</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="number">1.</literal> <operator>-</operator> <name>o</name></expr></argument>, <argument><expr><name><name>positions_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VectorscopeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>plane</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>colorspace</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cs</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<switch>switch <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>colorspace</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVCOL_SPC_SMPTE170M</name></expr>:</case>
<case>case <expr><name>AVCOL_SPC_BT470BG</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cs</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVCOL_SPC_BT709</name></expr>:</case>
<default>default:</default>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cs</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vectorscope</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>graticulef</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pd</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VectorscopeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>is_yuv</name></name> <operator>=</operator> <operator>!</operator><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_RGB</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mult</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <literal type="number">256</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tmin</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>lthreshold</name></name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tmax</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>hthreshold</name></name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>tmin</name></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>tmax</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"low threshold should be less than high threshold\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>TINT</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>is_yuv</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>x</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>y</name></name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>x</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>y</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>x</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>y</name></name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>x</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>y</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pd</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>x</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>y</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>x</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>y</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pd</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">256</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vectorscope</name></name> <operator>=</operator> <name>vectorscope8</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vectorscope</name></name> <operator>=</operator> <name>vectorscope16</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>graticulef</name></name> <operator>=</operator> <name>none_graticule</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_yuv</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>graticule</name></name> <operator>==</operator> <name>GRAT_GREEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>graticulef</name></name> <operator>=</operator> <name>green_graticule</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>graticule</name></name> <operator>==</operator> <name>GRAT_COLOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>graticulef</name></name> <operator>=</operator> <name>color_graticule</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>graticule</name></name> <operator>==</operator> <name>GRAT_INVERT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>graticulef</name></name> <operator>=</operator> <name>invert_graticule</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_yuv</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>graticule</name></name> <operator>==</operator> <name>GRAT_GREEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>graticulef</name></name> <operator>=</operator> <name>green_graticule16</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>graticule</name></name> <operator>==</operator> <name>GRAT_COLOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>graticulef</name></name> <operator>=</operator> <name>color_graticule16</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>graticule</name></name> <operator>==</operator> <name>GRAT_INVERT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>graticulef</name></name> <operator>=</operator> <name>invert_graticule16</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bg_color</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bgopacity</name></name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tint</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ftint</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tint</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">.5f</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ftint</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_GBRP12</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP10</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP9</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRAP</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bg_color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bg_color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bg_color</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bg_color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bg_color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bg_color</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hsub</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vsub</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VectorscopeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>peak</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>peak_memory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_output</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_vectorscope</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"vectorscope"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Video vectorscope."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VectorscopeContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>vectorscope_class</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>outputs</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
