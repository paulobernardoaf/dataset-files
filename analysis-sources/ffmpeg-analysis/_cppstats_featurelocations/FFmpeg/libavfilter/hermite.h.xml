<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\hermite.h">

















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVFILTER_HERMITE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVFILTER_HERMITE_H</name></cpp:macro></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type> <name>hermite_interpolation</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x0</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x1</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>p0</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>p1</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>m0</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>m1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>width</name> <init>= <expr><name>x1</name> <operator>-</operator> <name>x0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>t</name> <init>= <expr><operator>(</operator><name>x</name> <operator>-</operator> <name>x0</name><operator>)</operator> <operator>/</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>ct0</name></decl>, <decl><type ref="prev"/><name>ct1</name></decl>, <decl><type ref="prev"/><name>ct2</name></decl>, <decl><type ref="prev"/><name>ct3</name></decl>;</decl_stmt>

<expr_stmt><expr><name>m0</name> <operator>*=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m1</name> <operator>*=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t2</name> <operator>=</operator> <name>t</name><operator>*</operator><name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <name>t2</name><operator>*</operator><name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ct0</name> <operator>=</operator> <name>p0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ct1</name> <operator>=</operator> <name>m0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ct2</name> <operator>=</operator> <operator>-</operator><literal type="number">3</literal> <operator>*</operator> <name>p0</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>m0</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>p1</name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ct3</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>p0</name> <operator>+</operator> <name>m0</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>p1</name> <operator>+</operator> <name>m1</name></expr>;</expr_stmt>

<return>return <expr><name>ct3</name> <operator>*</operator> <name>t3</name> <operator>+</operator> <name>ct2</name> <operator>*</operator> <name>t2</name> <operator>+</operator> <name>ct1</name> <operator>*</operator> <name>t</name> <operator>+</operator> <name>ct0</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
