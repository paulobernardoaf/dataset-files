<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vf_scale_qsv.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mfx/mfxvideo.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/eval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hwcontext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hwcontext_qsv.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavfilter/qsvvpp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>var_names</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"PI"</literal></expr>,
<expr><literal type="string">"PHI"</literal></expr>,
<expr><literal type="string">"E"</literal></expr>,
<expr><literal type="string">"in_w"</literal></expr>, <expr><literal type="string">"iw"</literal></expr>,
<expr><literal type="string">"in_h"</literal></expr>, <expr><literal type="string">"ih"</literal></expr>,
<expr><literal type="string">"out_w"</literal></expr>, <expr><literal type="string">"ow"</literal></expr>,
<expr><literal type="string">"out_h"</literal></expr>, <expr><literal type="string">"oh"</literal></expr>,
<expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"dar"</literal></expr>,
<expr><literal type="string">"sar"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<enum>enum <name>var_name</name> <block>{
<decl><name>VAR_PI</name></decl>,
<decl><name>VAR_PHI</name></decl>,
<decl><name>VAR_E</name></decl>,
<decl><name>VAR_IN_W</name></decl>, <decl><name>VAR_IW</name></decl>,
<decl><name>VAR_IN_H</name></decl>, <decl><name>VAR_IH</name></decl>,
<decl><name>VAR_OUT_W</name></decl>, <decl><name>VAR_OW</name></decl>,
<decl><name>VAR_OUT_H</name></decl>, <decl><name>VAR_OH</name></decl>,
<decl><name>VAR_A</name></decl>, <decl><name>VAR_DAR</name></decl>,
<decl><name>VAR_SAR</name></decl>,
<decl><name>VARS_NB</name></decl>
}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QSV_HAVE_SCALING_CONFIG</name></cpp:macro> <cpp:value>QSV_VERSION_ATLEAST(1, 19)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>QSVScaleContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>mfxSession</name></type> <name>session</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxMemId</name> <modifier>*</modifier></type><name>mem_ids_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_mem_ids_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxMemId</name> <modifier>*</modifier></type><name>mem_ids_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_mem_ids_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier><modifier>*</modifier></type><name>surface_ptrs_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_surface_ptrs_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier><modifier>*</modifier></type><name>surface_ptrs_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_surface_ptrs_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxExtOpaqueSurfaceAlloc</name></type> <name>opaque_alloc</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_SCALING_CONFIG</name></expr></cpp:if>
<decl_stmt><decl><type><name>mfxExtVPPScaling</name></type> <name>scale_conf</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxExtBuffer</name> <modifier>*</modifier></type><name><name>ext_buffers</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>QSV_HAVE_SCALING_CONFIG</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_ext_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift_width</name></decl>, <name>shift_height</name>;</decl_stmt>






<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <name>h</name>;</decl_stmt>




<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>w_expr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>h_expr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>format_str</name></decl>;</decl_stmt>
}</block></struct></type> <name>QSVScaleContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>qsvscale_init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>QSVScaleContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>format_str</name></name></expr></argument>, <argument><expr><literal type="string">"same"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <call><name>av_get_pix_fmt</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>format_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unrecognized pixel format: %s\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>format_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>qsvscale_uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>QSVScaleContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>session</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MFXClose</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>session</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mem_ids_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mem_ids_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_mem_ids_in</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_mem_ids_out</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>surface_ptrs_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>surface_ptrs_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_surface_ptrs_in</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_surface_ptrs_out</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qsvscale_query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pixel_formats</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_QSV</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>pix_fmts</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pixel_formats</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_out_pool</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>out_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>QSVScaleContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>in_frames_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>out_frames_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVQSVFramesContext</name> <modifier>*</modifier></type><name>in_frames_hwctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVQSVFramesContext</name> <modifier>*</modifier></type><name>out_frames_hwctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>in_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>out_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>hw_frames_ctx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No hw context provided on input\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>in_frames_ctx</name> <operator>=</operator> <operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>in_frames_hwctx</name> <operator>=</operator> <name><name>in_frames_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>in_format</name> <operator>=</operator> <name><name>in_frames_ctx</name><operator>-&gt;</operator><name>sw_format</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>out_format</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_NONE</name><operator>)</operator></expr> ?</condition><then> <expr><name>in_format</name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>format</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name> <operator>=</operator> <call><name>av_hwframe_ctx_alloc</name><argument_list>(<argument><expr><name><name>in_frames_ctx</name><operator>-&gt;</operator><name>device_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>outlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>out_frames_ctx</name> <operator>=</operator> <operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>outlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>out_frames_hwctx</name> <operator>=</operator> <name><name>out_frames_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_frames_ctx</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_QSV</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_frames_ctx</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>out_width</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_frames_ctx</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>out_height</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_frames_ctx</name><operator>-&gt;</operator><name>sw_format</name></name> <operator>=</operator> <name>out_format</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_frames_ctx</name><operator>-&gt;</operator><name>initial_pool_size</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_frames_hwctx</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>=</operator> <name><name>in_frames_hwctx</name><operator>-&gt;</operator><name>frame_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_filter_init_hw_frames</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>outlink</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_hwframe_ctx_init</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>out_frames_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>mfxFrameInfo</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><operator>&amp;</operator><name><name>out_frames_hwctx</name><operator>-&gt;</operator><name>surfaces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Info</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>CropW</name></name> <operator>=</operator> <name>out_width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>CropH</name></name> <operator>=</operator> <name>out_height</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mfxStatus</name></type> <name>frame_alloc</name><parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxFrameAllocRequest</name> <modifier>*</modifier></type><name>req</name></decl></parameter>,
<parameter><decl><type><name>mfxFrameAllocResponse</name> <modifier>*</modifier></type><name>resp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>pthis</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QSVScaleContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>Type</name></name> <operator>&amp;</operator> <name>MFX_MEMTYPE_VIDEO_MEMORY_PROCESSOR_TARGET</name><operator>)</operator> <operator>||</operator>
<operator>!</operator><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>Type</name></name> <operator>&amp;</operator> <operator>(</operator><name>MFX_MEMTYPE_FROM_VPPIN</name> <operator>|</operator> <name>MFX_MEMTYPE_FROM_VPPOUT</name><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>!</operator><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>Type</name></name> <operator>&amp;</operator> <name>MFX_MEMTYPE_EXTERNAL_FRAME</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>MFX_ERR_UNSUPPORTED</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>Type</name></name> <operator>&amp;</operator> <name>MFX_MEMTYPE_FROM_VPPIN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>resp</name><operator>-&gt;</operator><name>mids</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mem_ids_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resp</name><operator>-&gt;</operator><name>NumFrameActual</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_mem_ids_in</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>resp</name><operator>-&gt;</operator><name>mids</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mem_ids_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resp</name><operator>-&gt;</operator><name>NumFrameActual</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_mem_ids_out</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>MFX_ERR_NONE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mfxStatus</name></type> <name>frame_free</name><parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxFrameAllocResponse</name> <modifier>*</modifier></type><name>resp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>MFX_ERR_NONE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mfxStatus</name></type> <name>frame_lock</name><parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxMemId</name></type> <name>mid</name></decl></parameter>, <parameter><decl><type><name>mfxFrameData</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>MFX_ERR_UNSUPPORTED</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mfxStatus</name></type> <name>frame_unlock</name><parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxMemId</name></type> <name>mid</name></decl></parameter>, <parameter><decl><type><name>mfxFrameData</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>MFX_ERR_UNSUPPORTED</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mfxStatus</name></type> <name>frame_get_hdl</name><parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxMemId</name></type> <name>mid</name></decl></parameter>, <parameter><decl><type><name>mfxHDL</name> <modifier>*</modifier></type><name>hdl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>hdl</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>
<return>return <expr><name>MFX_ERR_NONE</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mfxHandleType</name></type> <name><name>handle_types</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>MFX_HANDLE_VA_DISPLAY</name></expr>,
<expr><name>MFX_HANDLE_D3D9_DEVICE_MANAGER</name></expr>,
<expr><name>MFX_HANDLE_D3D11_DEVICE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_out_session</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>QSVScaleContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>in_frames_ctx</name> <init>= <expr><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>out_frames_ctx</name> <init>= <expr><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVQSVFramesContext</name> <modifier>*</modifier></type><name>in_frames_hwctx</name> <init>= <expr><name><name>in_frames_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVQSVFramesContext</name> <modifier>*</modifier></type><name>out_frames_hwctx</name> <init>= <expr><name><name>out_frames_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVQSVDeviceContext</name> <modifier>*</modifier></type><name>device_hwctx</name> <init>= <expr><name><name>in_frames_ctx</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>opaque</name> <init>= <expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>in_frames_hwctx</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>&amp;</operator> <name>MFX_MEMTYPE_OPAQUE_FRAME</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxHDL</name></type> <name>handle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxHandleType</name></type> <name>handle_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxVersion</name></type> <name>ver</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxIMPL</name></type> <name>impl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxVideoParam</name></type> <name>par</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxStatus</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_ext_buf</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>MFXQueryIMPL</name><argument_list>(<argument><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>impl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>MFX_ERR_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>MFXQueryVersion</name><argument_list>(<argument><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>MFX_ERR_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error querying the session attributes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>handle_types</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>MFXVideoCORE_GetHandle</name><argument_list>(<argument><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><name><name>handle_types</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>MFX_ERR_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>handle_type</name> <operator>=</operator> <name><name>handle_types</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>MFX_ERR_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error getting the session handle\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>MFXInit</name><argument_list>(<argument><expr><name>impl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ver</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>MFX_ERR_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error initializing a session for scaling\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>handle</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>MFXVideoCORE_SetHandle</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><name>handle_type</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>MFX_ERR_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>QSV_RUNTIME_VERSION_ATLEAST</name><argument_list>(<argument><expr><name>ver</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>MFXJoinSession</name><argument_list>(<argument><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>MFX_ERR_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>par</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>par</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>opaque</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>surface_ptrs_in</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>in_frames_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>surface_ptrs_in</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>surface_ptrs_in</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>in_frames_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>surface_ptrs_in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>in_frames_hwctx</name><operator>-&gt;</operator><name>surfaces</name></name> <operator>+</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_surface_ptrs_in</name></name> <operator>=</operator> <name><name>in_frames_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>surface_ptrs_out</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>out_frames_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>surface_ptrs_out</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>surface_ptrs_out</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>out_frames_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>surface_ptrs_out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>out_frames_hwctx</name><operator>-&gt;</operator><name>surfaces</name></name> <operator>+</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_surface_ptrs_out</name></name> <operator>=</operator> <name><name>out_frames_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>opaque_alloc</name><operator>.</operator><name>In</name><operator>.</operator><name>Surfaces</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>surface_ptrs_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>opaque_alloc</name><operator>.</operator><name>In</name><operator>.</operator><name>NumSurface</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_surface_ptrs_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>opaque_alloc</name><operator>.</operator><name>In</name><operator>.</operator><name>Type</name></name> <operator>=</operator> <name><name>in_frames_hwctx</name><operator>-&gt;</operator><name>frame_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>opaque_alloc</name><operator>.</operator><name>Out</name><operator>.</operator><name>Surfaces</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>surface_ptrs_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>opaque_alloc</name><operator>.</operator><name>Out</name><operator>.</operator><name>NumSurface</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_surface_ptrs_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>opaque_alloc</name><operator>.</operator><name>Out</name><operator>.</operator><name>Type</name></name> <operator>=</operator> <name><name>out_frames_hwctx</name><operator>-&gt;</operator><name>frame_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>opaque_alloc</name><operator>.</operator><name>Header</name><operator>.</operator><name>BufferId</name></name> <operator>=</operator> <name>MFX_EXTBUFF_OPAQUE_SURFACE_ALLOCATION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>opaque_alloc</name><operator>.</operator><name>Header</name><operator>.</operator><name>BufferSz</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>opaque_alloc</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ext_buffers</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>num_ext_buf</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mfxExtBuffer</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>opaque_alloc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><operator>.</operator><name>IOPattern</name></name> <operator>=</operator> <name>MFX_IOPATTERN_IN_OPAQUE_MEMORY</name> <operator>|</operator> <name>MFX_IOPATTERN_OUT_OPAQUE_MEMORY</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>mfxFrameAllocator</name></type> <name>frame_allocator</name> <init>= <expr><block>{
<expr><operator>.</operator><name>pthis</name> <operator>=</operator> <name>ctx</name></expr>,
<expr><operator>.</operator><name>Alloc</name> <operator>=</operator> <name>frame_alloc</name></expr>,
<expr><operator>.</operator><name>Lock</name> <operator>=</operator> <name>frame_lock</name></expr>,
<expr><operator>.</operator><name>Unlock</name> <operator>=</operator> <name>frame_unlock</name></expr>,
<expr><operator>.</operator><name>GetHDL</name> <operator>=</operator> <name>frame_get_hdl</name></expr>,
<expr><operator>.</operator><name>Free</name> <operator>=</operator> <name>frame_free</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mem_ids_in</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>in_frames_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mem_ids_in</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>mem_ids_in</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>in_frames_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mem_ids_in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>in_frames_hwctx</name><operator>-&gt;</operator><name>surfaces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>Data</name><operator>.</operator><name>MemId</name></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_mem_ids_in</name></name> <operator>=</operator> <name><name>in_frames_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mem_ids_out</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>out_frames_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mem_ids_out</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>mem_ids_out</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>out_frames_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mem_ids_out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>out_frames_hwctx</name><operator>-&gt;</operator><name>surfaces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>Data</name><operator>.</operator><name>MemId</name></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_mem_ids_out</name></name> <operator>=</operator> <name><name>out_frames_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>MFXVideoCORE_SetFrameAllocator</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frame_allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>MFX_ERR_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>par</name><operator>.</operator><name>IOPattern</name></name> <operator>=</operator> <name>MFX_IOPATTERN_IN_VIDEO_MEMORY</name> <operator>|</operator> <name>MFX_IOPATTERN_OUT_VIDEO_MEMORY</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_SCALING_CONFIG</name></expr></cpp:if>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>scale_conf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mfxExtVPPScaling</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>scale_conf</name><operator>.</operator><name>Header</name><operator>.</operator><name>BufferId</name></name> <operator>=</operator> <name>MFX_EXTBUFF_VPP_SCALING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>scale_conf</name><operator>.</operator><name>Header</name><operator>.</operator><name>BufferSz</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mfxExtVPPScaling</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>scale_conf</name><operator>.</operator><name>ScalingMode</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ext_buffers</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>num_ext_buf</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mfxExtBuffer</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>scale_conf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Scaling mode: %"</literal><name>PRIu16</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>par</name><operator>.</operator><name>ExtParam</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ext_buffers</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>.</operator><name>NumExtParam</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>num_ext_buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><operator>.</operator><name>AsyncDepth</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>par</name><operator>.</operator><name>vpp</name><operator>.</operator><name>In</name></name> <operator>=</operator> <name><name>in_frames_hwctx</name><operator>-&gt;</operator><name>surfaces</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>Info</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>.</operator><name>vpp</name><operator>.</operator><name>Out</name></name> <operator>=</operator> <name><name>out_frames_hwctx</name><operator>-&gt;</operator><name>surfaces</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>Info</name></expr>;</expr_stmt>





<expr_stmt><expr><name><name>par</name><operator>.</operator><name>vpp</name><operator>.</operator><name>In</name><operator>.</operator><name>FrameRateExtN</name></name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>.</operator><name>vpp</name><operator>.</operator><name>In</name><operator>.</operator><name>FrameRateExtD</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>.</operator><name>vpp</name><operator>.</operator><name>Out</name><operator>.</operator><name>FrameRateExtN</name></name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>.</operator><name>vpp</name><operator>.</operator><name>Out</name><operator>.</operator><name>FrameRateExtD</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>MFXVideoVPP_Init</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>MFX_ERR_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error opening the VPP for scaling\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_scale_session</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>out_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>qsvscale_uninit</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_out_pool</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>out_width</name></expr></argument>, <argument><expr><name>out_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_out_session</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qsvscale_config_props</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QSVScaleContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>var_values</name><index>[<expr><name>VARS_NB</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>expr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_PI</name></expr>]</index></name> <operator>=</operator> <name>M_PI</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_PHI</name></expr>]</index></name> <operator>=</operator> <name>M_PHI</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_E</name></expr>]</index></name> <operator>=</operator> <name>M_E</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_IN_W</name></expr>]</index></name> <operator>=</operator> <name><name>var_values</name><index>[<expr><name>VAR_IW</name></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_IN_H</name></expr>]</index></name> <operator>=</operator> <name><name>var_values</name><index>[<expr><name>VAR_IH</name></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_OUT_W</name></expr>]</index></name> <operator>=</operator> <name><name>var_values</name><index>[<expr><name>VAR_OW</name></expr>]</index></name> <operator>=</operator> <name>NAN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_OUT_H</name></expr>]</index></name> <operator>=</operator> <name><name>var_values</name><index>[<expr><name>VAR_OH</name></expr>]</index></name> <operator>=</operator> <name>NAN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_A</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>/</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_SAR</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr> ?</condition><then>
<expr><operator>(</operator><name>double</name><operator>)</operator> <name><name>inlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name> <operator>/</operator> <name><name>inlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_DAR</name></expr>]</index></name> <operator>=</operator> <name><name>var_values</name><index>[<expr><name>VAR_A</name></expr>]</index></name> <operator>*</operator> <name><name>var_values</name><index>[<expr><name>VAR_SAR</name></expr>]</index></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>av_expr_parse_and_eval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><operator>(</operator><name>expr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>w_expr</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>var_names</name></expr></argument>, <argument><expr><name>var_values</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>var_values</name><index>[<expr><name>VAR_OUT_W</name></expr>]</index></name> <operator>=</operator> <name><name>var_values</name><index>[<expr><name>VAR_OW</name></expr>]</index></name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_expr_parse_and_eval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><operator>(</operator><name>expr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>h_expr</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>var_names</name></expr></argument>, <argument><expr><name>var_values</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>var_values</name><index>[<expr><name>VAR_OUT_H</name></expr>]</index></name> <operator>=</operator> <name><name>var_values</name><index>[<expr><name>VAR_OH</name></expr>]</index></name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_expr_parse_and_eval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><operator>(</operator><name>expr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>w_expr</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>var_names</name></expr></argument>, <argument><expr><name>var_values</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>h</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Size values less than -1 are not acceptable.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>w</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>h</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>w</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>h</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>w</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>av_rescale</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>av_rescale</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&gt;</operator> <name>INT_MAX</name> <operator>||</operator> <name>h</name> <operator>&gt;</operator> <name>INT_MAX</name> <operator>||</operator>
<operator>(</operator><name>h</name> <operator>*</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name><operator>)</operator> <operator>&gt;</operator> <name>INT_MAX</name> <operator>||</operator>
<operator>(</operator><name>w</name> <operator>*</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name><operator>)</operator> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Rescaled value for width or height is too big.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_scale_session</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"w:%d h:%d -&gt; w:%d h:%d\n"</literal></expr></argument>,
<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <macro><name>av_mul_q</name><argument_list>(<argument>(AVRational){outlink-&gt;h*inlink-&gt;w</argument>,
<argument>outlink-&gt;w*inlink-&gt;h}</argument>,
<argument>inlink-&gt;sample_aspect_ratio</argument>)</argument_list></macro></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Error when evaluating the expression '%s'\n"</literal></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qsvscale_filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>link</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QSVScaleContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxSyncPoint</name></type> <name>sync</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxStatus</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>MFXVideoVPP_RunFrameVPPAsync</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>session</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>mfxFrameSurface1</name><operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>mfxFrameSurface1</name><operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>MFX_WRN_DEVICE_BUSY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_usleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>err</name> <operator>==</operator> <name>MFX_WRN_DEVICE_BUSY</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>sync</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error during scaling\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_UNKNOWN</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>MFXVideoCORE_SyncOperation</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><name>sync</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>err</name> <operator>==</operator> <name>MFX_WRN_IN_EXECUTION</name></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error synchronizing the operation: %d\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_UNKNOWN</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name> <operator>*</operator> <name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>*</operator> <name><name>link</name><operator>-&gt;</operator><name>w</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name> <operator>*</operator> <name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <name><name>link</name><operator>-&gt;</operator><name>h</name></name></expr></argument>,
<argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(QSVScaleContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM|AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"w"</literal></expr>, <expr><literal type="string">"Output video width"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>w_expr</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"iw"</literal></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"h"</literal></expr>, <expr><literal type="string">"Output video height"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>h_expr</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"ih"</literal></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"format"</literal></expr>, <expr><literal type="string">"Output pixel format"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>format_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"same"</literal></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_SCALING_CONFIG</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"mode"</literal></expr>, <expr><literal type="string">"set scaling mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>MFX_SCALING_MODE_DEFAULT</name></expr>}</block></expr>, <expr><name>MFX_SCALING_MODE_DEFAULT</name></expr>, <expr><name>MFX_SCALING_MODE_QUALITY</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"low_power"</literal></expr>, <expr><literal type="string">"low power mode"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>MFX_SCALING_MODE_LOWPOWER</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"hq"</literal></expr>, <expr><literal type="string">"high quality mode"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>MFX_SCALING_MODE_QUALITY</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr>}</block></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{ <expr><literal type="string">"mode"</literal></expr>, <expr><literal type="string">"(not supported)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"low_power"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"hq"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">2</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>qsvscale_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"scale_qsv"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>qsvscale_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>qsvscale_filter_frame</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>qsvscale_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>qsvscale_config_props</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_scale_qsv</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"scale_qsv"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"QuickSync video scaling and format conversion"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>qsvscale_init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>qsvscale_uninit</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>qsvscale_query_formats</name></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>QSVScaleContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>qsvscale_class</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>qsvscale_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>qsvscale_outputs</name></expr>,

<expr><operator>.</operator><name>flags_internal</name> <operator>=</operator> <name>FF_FILTER_FLAG_HWFRAME_AWARE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
