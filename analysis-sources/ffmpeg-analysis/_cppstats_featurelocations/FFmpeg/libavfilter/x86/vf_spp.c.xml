<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\x86\vf_spp.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/crc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/asm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavfilter/vf_spp.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MMX_INLINE</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>hardthresh_mmx</name><parameter_list>(<parameter><decl><type><name>int16_t</name></type> <name><name>dst</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name><name>src</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>qp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>permutation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bias</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>threshold1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>threshold1</name> <operator>=</operator> <name>qp</name> <operator>*</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>)</operator> <operator>-</operator> <name>bias</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQUANT_CORE</name><parameter_list>(<parameter><type><name>dst0</name></type></parameter>, <parameter><type><name>dst1</name></type></parameter>, <parameter><type><name>dst2</name></type></parameter>, <parameter><type><name>dst3</name></type></parameter>, <parameter><type><name>src0</name></type></parameter>, <parameter><type><name>src1</name></type></parameter>, <parameter><type><name>src2</name></type></parameter>, <parameter><type><name>src3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"movq " #src0 ", %%mm0 \n" "movq " #src1 ", %%mm1 \n" "movq " #src2 ", %%mm2 \n" "movq " #src3 ", %%mm3 \n" "psubw %%mm4, %%mm0 \n" "psubw %%mm4, %%mm1 \n" "psubw %%mm4, %%mm2 \n" "psubw %%mm4, %%mm3 \n" "paddusw %%mm5, %%mm0 \n" "paddusw %%mm5, %%mm1 \n" "paddusw %%mm5, %%mm2 \n" "paddusw %%mm5, %%mm3 \n" "paddw %%mm6, %%mm0 \n" "paddw %%mm6, %%mm1 \n" "paddw %%mm6, %%mm2 \n" "paddw %%mm6, %%mm3 \n" "psubusw %%mm6, %%mm0 \n" "psubusw %%mm6, %%mm1 \n" "psubusw %%mm6, %%mm2 \n" "psubusw %%mm6, %%mm3 \n" "psraw $3, %%mm0 \n" "psraw $3, %%mm1 \n" "psraw $3, %%mm2 \n" "psraw $3, %%mm3 \n" "movq %%mm0, %%mm7 \n" "punpcklwd %%mm2, %%mm0 \n" "punpckhwd %%mm2, %%mm7 \n" "movq %%mm1, %%mm2 \n" "punpcklwd %%mm3, %%mm1 \n" "punpckhwd %%mm3, %%mm2 \n" "movq %%mm0, %%mm3 \n" "punpcklwd %%mm1, %%mm0 \n" "punpckhwd %%mm7, %%mm3 \n" "punpcklwd %%mm2, %%mm7 \n" "punpckhwd %%mm2, %%mm1 \n" "movq %%mm0, " #dst0 " \n" "movq %%mm7, " #dst1 " \n" "movq %%mm3, " #dst2 " \n" "movq %%mm1, " #dst3 " \n"</cpp:value></cpp:define>










































<asm>__asm__ <specifier>volatile</specifier>(
"movd %2, %%mm4 \n"
"movd %3, %%mm5 \n"
"movd %4, %%mm6 \n"
"packssdw %%mm4, %%mm4 \n"
"packssdw %%mm5, %%mm5 \n"
"packssdw %%mm6, %%mm6 \n"
"packssdw %%mm4, %%mm4 \n"
"packssdw %%mm5, %%mm5 \n"
"packssdw %%mm6, %%mm6 \n"
REQUANT_CORE( (%1), 8(%1), 16(%1), 24(%1), (%0), 8(%0), 64(%0), 72(%0))
REQUANT_CORE(32(%1), 40(%1), 48(%1), 56(%1),16(%0),24(%0), 48(%0), 56(%0))
REQUANT_CORE(64(%1), 72(%1), 80(%1), 88(%1),32(%0),40(%0), 96(%0),104(%0))
REQUANT_CORE(96(%1),104(%1),112(%1),120(%1),80(%0),88(%0),112(%0),120(%0))
: : "r" (src), "r" (dst), "g" (threshold1+1), "g" (threshold1+5), "g" (threshold1-4) 
);</asm>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>softthresh_mmx</name><parameter_list>(<parameter><decl><type><name>int16_t</name></type> <name><name>dst</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name><name>src</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>qp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>permutation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bias</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>threshold1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>threshold1</name> <operator>=</operator> <name>qp</name><operator>*</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>)</operator> <operator>-</operator> <name>bias</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>REQUANT_CORE</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQUANT_CORE</name><parameter_list>(<parameter><type><name>dst0</name></type></parameter>, <parameter><type><name>dst1</name></type></parameter>, <parameter><type><name>dst2</name></type></parameter>, <parameter><type><name>dst3</name></type></parameter>, <parameter><type><name>src0</name></type></parameter>, <parameter><type><name>src1</name></type></parameter>, <parameter><type><name>src2</name></type></parameter>, <parameter><type><name>src3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"movq " #src0 ", %%mm0 \n" "movq " #src1 ", %%mm1 \n" "pxor %%mm6, %%mm6 \n" "pxor %%mm7, %%mm7 \n" "pcmpgtw %%mm0, %%mm6 \n" "pcmpgtw %%mm1, %%mm7 \n" "pxor %%mm6, %%mm0 \n" "pxor %%mm7, %%mm1 \n" "psubusw %%mm4, %%mm0 \n" "psubusw %%mm4, %%mm1 \n" "pxor %%mm6, %%mm0 \n" "pxor %%mm7, %%mm1 \n" "movq " #src2 ", %%mm2 \n" "movq " #src3 ", %%mm3 \n" "pxor %%mm6, %%mm6 \n" "pxor %%mm7, %%mm7 \n" "pcmpgtw %%mm2, %%mm6 \n" "pcmpgtw %%mm3, %%mm7 \n" "pxor %%mm6, %%mm2 \n" "pxor %%mm7, %%mm3 \n" "psubusw %%mm4, %%mm2 \n" "psubusw %%mm4, %%mm3 \n" "pxor %%mm6, %%mm2 \n" "pxor %%mm7, %%mm3 \n" "paddsw %%mm5, %%mm0 \n" "paddsw %%mm5, %%mm1 \n" "paddsw %%mm5, %%mm2 \n" "paddsw %%mm5, %%mm3 \n" "psraw $3, %%mm0 \n" "psraw $3, %%mm1 \n" "psraw $3, %%mm2 \n" "psraw $3, %%mm3 \n" "movq %%mm0, %%mm7 \n" "punpcklwd %%mm2, %%mm0 \n" "punpckhwd %%mm2, %%mm7 \n" "movq %%mm1, %%mm2 \n" "punpcklwd %%mm3, %%mm1 \n" "punpckhwd %%mm3, %%mm2 \n" "movq %%mm0, %%mm3 \n" "punpcklwd %%mm1, %%mm0 \n" "punpckhwd %%mm7, %%mm3 \n" "punpcklwd %%mm2, %%mm7 \n" "punpckhwd %%mm2, %%mm1 \n" "movq %%mm0, " #dst0 " \n" "movq %%mm7, " #dst1 " \n" "movq %%mm3, " #dst2 " \n" "movq %%mm1, " #dst3 " \n"</cpp:value></cpp:define>



















































<asm>__asm__ <specifier>volatile</specifier>(
"movd %2, %%mm4 \n"
"movd %3, %%mm5 \n"
"packssdw %%mm4, %%mm4 \n"
"packssdw %%mm5, %%mm5 \n"
"packssdw %%mm4, %%mm4 \n"
"packssdw %%mm5, %%mm5 \n"
REQUANT_CORE( (%1), 8(%1), 16(%1), 24(%1), (%0), 8(%0), 64(%0), 72(%0))
REQUANT_CORE(32(%1), 40(%1), 48(%1), 56(%1),16(%0),24(%0), 48(%0), 56(%0))
REQUANT_CORE(64(%1), 72(%1), 80(%1), 88(%1),32(%0),40(%0), 96(%0),104(%0))
REQUANT_CORE(96(%1),104(%1),112(%1),120(%1),80(%0),88(%0),112(%0),120(%0))
: : "r" (src), "r" (dst), "g" (threshold1), "rm" (4) 
);</asm>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>store_slice_mmx</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dst_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>log2_scale</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>dither</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst1</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>src1</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>
<asm>__asm__ <specifier>volatile</specifier>(
"movq (%3), %%mm3 \n"
"movq (%3), %%mm4 \n"
"movd %4, %%mm2 \n"
"pxor %%mm0, %%mm0 \n"
"punpcklbw %%mm0, %%mm3 \n"
"punpckhbw %%mm0, %%mm4 \n"
"psraw %%mm2, %%mm3 \n"
"psraw %%mm2, %%mm4 \n"
"movd %5, %%mm2 \n"
"1: \n"
"movq (%0), %%mm0 \n"
"movq 8(%0), %%mm1 \n"
"paddw %%mm3, %%mm0 \n"
"paddw %%mm4, %%mm1 \n"
"psraw %%mm2, %%mm0 \n"
"psraw %%mm2, %%mm1 \n"
"packuswb %%mm1, %%mm0 \n"
"movq %%mm0, (%1) \n"
"add $16, %0 \n"
"add $8, %1 \n"
"cmp %2, %1 \n"
" jb 1b \n"
: "+r" (src1), "+r"(dst1)
: "r"(dst + width), "r"(dither[y]), "g"(log2_scale), "g"(MAX_LEVEL - log2_scale)
);</asm>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_spp_init_x86</name><parameter_list>(<parameter><decl><type><name>SPPContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MMX_INLINE</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>cpu_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cpu_flags</name> <operator>&amp;</operator> <name>AV_CPU_FLAG_MMX</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name>mmx_idct_perm_crc</name> <init>= <expr><literal type="number">0xe5e8adc4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>idct_perm_crc</name> <init>=
<expr><call><name>av_crc</name><argument_list>(<argument><expr><call><name>av_crc_get_table</name><argument_list>(<argument><expr><name>AV_CRC_32_IEEE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dct</name><operator>-&gt;</operator><name>idct_permutation</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dct</name><operator>-&gt;</operator><name>idct_permutation</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>bps</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>store_slice</name></name> <operator>=</operator> <name>store_slice_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_opt_get_int</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dct</name></name></expr></argument>, <argument><expr><literal type="string">"bits_per_sample"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bps</name> <operator>&lt;=</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>idct_perm_crc</name> <operator>==</operator> <name>mmx_idct_perm_crc</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>requantize</name></name> <operator>=</operator> <name>hardthresh_mmx</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>requantize</name></name> <operator>=</operator> <name>softthresh_mmx</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
