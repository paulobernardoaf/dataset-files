<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\x86\vf_gradfun_init.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavfilter/gradfun.h"</cpp:file></cpp:include>

<function_decl><type><name>void</name></type> <name>ff_gradfun_filter_line_mmxext</name><parameter_list>(<parameter><decl><type><name>intptr_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>dc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thresh</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>dithers</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_gradfun_filter_line_ssse3</name><parameter_list>(<parameter><decl><type><name>intptr_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>dc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thresh</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>dithers</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_gradfun_blur_line_movdqa_sse2</name><parameter_list>(<parameter><decl><type><name>intptr_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>buf1</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_gradfun_blur_line_movdqu_sse2</name><parameter_list>(<parameter><decl><type><name>intptr_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>buf1</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_X86ASM</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>gradfun_filter_line_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>dc</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thresh</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>dithers</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>intptr_t</name></type> <name>x</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>width</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_gradfun_filter_line_c</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name>dc</name> <operator>+</operator> <name>x</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name>width</name> <operator>-</operator> <name>x</name></expr></argument>, <argument><expr><name>thresh</name></expr></argument>, <argument><expr><name>dithers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>-</operator><name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_gradfun_filter_line_mmxext</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <name>width</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>width</name></expr></argument>, <argument><expr><name>dc</name> <operator>+</operator> <name>width</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name>thresh</name></expr></argument>, <argument><expr><name>dithers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gradfun_filter_line_ssse3</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>dc</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thresh</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>dithers</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>intptr_t</name></type> <name>x</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>width</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_gradfun_filter_line_c</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><name>dc</name> <operator>+</operator> <name>x</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name>width</name> <operator>-</operator> <name>x</name></expr></argument>, <argument><expr><name>thresh</name></expr></argument>, <argument><expr><name>dithers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>-</operator><name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_gradfun_filter_line_ssse3</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <name>width</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>width</name></expr></argument>, <argument><expr><name>dc</name> <operator>+</operator> <name>width</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name>thresh</name></expr></argument>, <argument><expr><name>dithers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gradfun_blur_line_sse2</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dc</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>buf1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_linesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>intptr_t</name></type> <name>x</name> <init>= <expr><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>intptr_t</name><operator>)</operator> <name>src</name> <operator>|</operator> <name>src_linesize</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">15</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_gradfun_blur_line_movdqu_sse2</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>width</name></expr></argument>, <argument><expr><name>buf1</name> <operator>+</operator> <name>width</name></expr></argument>,
<argument><expr><name>dc</name> <operator>+</operator> <name>width</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>width</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name>src</name> <operator>+</operator> <name>width</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>src_linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_gradfun_blur_line_movdqa_sse2</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>width</name></expr></argument>, <argument><expr><name>buf1</name> <operator>+</operator> <name>width</name></expr></argument>,
<argument><expr><name>dc</name> <operator>+</operator> <name>width</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>width</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name>src</name> <operator>+</operator> <name>width</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>src_linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_gradfun_init_x86</name><parameter_list>(<parameter><decl><type><name>GradFunContext</name> <modifier>*</modifier></type><name>gf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_X86ASM</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>cpu_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_MMXEXT</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>gf</name><operator>-&gt;</operator><name>filter_line</name></name> <operator>=</operator> <name>gradfun_filter_line_mmxext</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSSE3</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>gf</name><operator>-&gt;</operator><name>filter_line</name></name> <operator>=</operator> <name>gradfun_filter_line_ssse3</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSE2</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>gf</name><operator>-&gt;</operator><name>blur_line</name></name> <operator>=</operator> <name>gradfun_blur_line_sse2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>
</unit>
