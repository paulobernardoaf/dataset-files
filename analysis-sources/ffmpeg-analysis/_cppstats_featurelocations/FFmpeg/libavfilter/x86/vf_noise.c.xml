<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\x86\vf_noise.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/asm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavfilter/vf_noise.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_INLINE_ASM</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>line_noise_mmx</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>noise</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>x86_reg</name></type> <name>mmx_len</name><init>= <expr><name>len</name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><literal type="number">7</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>noise</name> <operator>+=</operator> <name>shift</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier>(
"mov %3, %%"FF_REG_a" \n\t"
"pcmpeqb %%mm7, %%mm7 \n\t"
"psllw $15, %%mm7 \n\t"
"packsswb %%mm7, %%mm7 \n\t"
".p2align 4 \n\t"
"1: \n\t"
"movq (%0, %%"FF_REG_a"), %%mm0 \n\t"
"movq (%1, %%"FF_REG_a"), %%mm1 \n\t"
"pxor %%mm7, %%mm0 \n\t"
"paddsb %%mm1, %%mm0 \n\t"
"pxor %%mm7, %%mm0 \n\t"
"movq %%mm0, (%2, %%"FF_REG_a") \n\t"
"add $8, %%"FF_REG_a" \n\t"
" js 1b \n\t"
:: "r" (src+mmx_len), "r" (noise+mmx_len), "r" (dst+mmx_len), "g" (-mmx_len)
: "%"FF_REG_a
);</asm>
<if_stmt><if>if <condition>(<expr><name>mmx_len</name> <operator>!=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_line_noise_c</name><argument_list>(<argument><expr><name>dst</name><operator>+</operator><name>mmx_len</name></expr></argument>, <argument><expr><name>src</name><operator>+</operator><name>mmx_len</name></expr></argument>, <argument><expr><name>noise</name><operator>+</operator><name>mmx_len</name></expr></argument>, <argument><expr><name>len</name><operator>-</operator><name>mmx_len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_6REGS</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>line_noise_avg_mmx</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>shift</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>x86_reg</name></type> <name>mmx_len</name> <init>= <expr><name>len</name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><literal type="number">7</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<asm>__asm__ <specifier>volatile</specifier>(
"mov %5, %%"FF_REG_a" \n\t"
".p2align 4 \n\t"
"1: \n\t"
"movq (%1, %%"FF_REG_a"), %%mm1 \n\t"
"movq (%0, %%"FF_REG_a"), %%mm0 \n\t"
"paddb (%2, %%"FF_REG_a"), %%mm1\n\t"
"paddb (%3, %%"FF_REG_a"), %%mm1\n\t"
"movq %%mm0, %%mm2 \n\t"
"movq %%mm1, %%mm3 \n\t"
"punpcklbw %%mm0, %%mm0 \n\t"
"punpckhbw %%mm2, %%mm2 \n\t"
"punpcklbw %%mm1, %%mm1 \n\t"
"punpckhbw %%mm3, %%mm3 \n\t"
"pmulhw %%mm0, %%mm1 \n\t"
"pmulhw %%mm2, %%mm3 \n\t"
"paddw %%mm1, %%mm1 \n\t"
"paddw %%mm3, %%mm3 \n\t"
"paddw %%mm0, %%mm1 \n\t"
"paddw %%mm2, %%mm3 \n\t"
"psrlw $8, %%mm1 \n\t"
"psrlw $8, %%mm3 \n\t"
"packuswb %%mm3, %%mm1 \n\t"
"movq %%mm1, (%4, %%"FF_REG_a") \n\t"
"add $8, %%"FF_REG_a" \n\t"
" js 1b \n\t"
:: "r" (src+mmx_len), "r" (shift[0]+mmx_len), "r" (shift[1]+mmx_len), "r" (shift[2]+mmx_len),
"r" (dst+mmx_len), "g" (-mmx_len)
: "%"FF_REG_a
);</asm>

<if_stmt><if>if <condition>(<expr><name>mmx_len</name> <operator>!=</operator> <name>len</name></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name><name>shift2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>shift</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><name>mmx_len</name></expr>, <expr><name><name>shift</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name>mmx_len</name></expr>, <expr><name><name>shift</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>+</operator><name>mmx_len</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ff_line_noise_avg_c</name><argument_list>(<argument><expr><name>dst</name><operator>+</operator><name>mmx_len</name></expr></argument>, <argument><expr><name>src</name><operator>+</operator><name>mmx_len</name></expr></argument>, <argument><expr><name>len</name><operator>-</operator><name>mmx_len</name></expr></argument>, <argument><expr><name>shift2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>void</name></type> <name>line_noise_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>noise</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>x86_reg</name></type> <name>mmx_len</name> <init>= <expr><name>len</name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><literal type="number">7</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>noise</name> <operator>+=</operator> <name>shift</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier>(
"mov %3, %%"FF_REG_a" \n\t"
"pcmpeqb %%mm7, %%mm7 \n\t"
"psllw $15, %%mm7 \n\t"
"packsswb %%mm7, %%mm7 \n\t"
".p2align 4 \n\t"
"1: \n\t"
"movq (%0, %%"FF_REG_a"), %%mm0 \n\t"
"movq (%1, %%"FF_REG_a"), %%mm1 \n\t"
"pxor %%mm7, %%mm0 \n\t"
"paddsb %%mm1, %%mm0 \n\t"
"pxor %%mm7, %%mm0 \n\t"
"movntq %%mm0, (%2, %%"FF_REG_a") \n\t"
"add $8, %%"FF_REG_a" \n\t"
" js 1b \n\t"
:: "r" (src+mmx_len), "r" (noise+mmx_len), "r" (dst+mmx_len), "g" (-mmx_len)
: "%"FF_REG_a
);</asm>
<if_stmt><if>if <condition>(<expr><name>mmx_len</name> <operator>!=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_line_noise_c</name><argument_list>(<argument><expr><name>dst</name><operator>+</operator><name>mmx_len</name></expr></argument>, <argument><expr><name>src</name><operator>+</operator><name>mmx_len</name></expr></argument>, <argument><expr><name>noise</name><operator>+</operator><name>mmx_len</name></expr></argument>, <argument><expr><name>len</name><operator>-</operator><name>mmx_len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_noise_init_x86</name><parameter_list>(<parameter><decl><type><name>NoiseContext</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_INLINE_ASM</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>cpu_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>INLINE_MMX</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>line_noise</name></name> <operator>=</operator> <name>line_noise_mmx</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_6REGS</name></expr></cpp:if>
<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>line_noise_avg</name></name> <operator>=</operator> <name>line_noise_avg_mmx</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>INLINE_MMXEXT</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>line_noise</name></name> <operator>=</operator> <name>line_noise_mmxext</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
