<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vf_overlay_vulkan.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vulkan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"framesync.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CGROUPS</name></cpp:macro> <cpp:value>(int [3]){ 32, 32, 1 }</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>OverlayVulkanContext</name> <block>{
<decl_stmt><decl><type><name>VulkanFilterContext</name></type> <name>vkctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>initialized</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VulkanPipeline</name> <modifier>*</modifier></type><name>pl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFVkExecContext</name> <modifier>*</modifier></type><name>exec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFFrameSync</name></type> <name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFVkBuffer</name></type> <name>params_buf</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>VkDescriptorImageInfo</name></type> <name><name>main_images</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDescriptorImageInfo</name></type> <name><name>overlay_images</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDescriptorImageInfo</name></type> <name><name>output_images</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkDescriptorBufferInfo</name></type> <name>params_desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>overlay_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>overlay_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>overlay_w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>overlay_h</name></decl>;</decl_stmt>
}</block></struct></type> <name>OverlayVulkanContext</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>overlay_noalpha</name><index>[]</index></name> <init>= <expr><block>{
<macro><name>C</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument>void overlay_noalpha(int i, ivec2 pos)</argument> )</argument_list></macro>
<macro><name>C</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument>{</argument> )</argument_list></macro>
<macro><name>C</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument>if ((o_offset[i].x &lt;= pos.x) &amp;&amp; (o_offset[i].y &lt;= pos.y) &amp;&amp;
(pos.x &lt; (o_offset[i].x + o_size[i].x)) &amp;&amp;
(pos.y &lt; (o_offset[i].y + o_size[i].y))) {</argument> )</argument_list></macro>
<macro><name>C</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument>vec4 res = texture(overlay_img[i], pos - o_offset[i]);</argument> )</argument_list></macro>
<macro><name>C</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument>imageStore(output_img[i], pos, res);</argument> )</argument_list></macro>
<macro><name>C</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument>} else {</argument> )</argument_list></macro>
<macro><name>C</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument>vec4 res = texture(main_img[i], pos);</argument> )</argument_list></macro>
<macro><name>C</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument>imageStore(output_img[i], pos, res);</argument> )</argument_list></macro>
<macro><name>C</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument>}</argument> )</argument_list></macro>
<macro><name>C</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument>}</argument> )</argument_list></macro>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init_filter</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OverlayVulkanContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VkSampler</name> <modifier>*</modifier></type><name>sampler</name> <init>= <expr><call><name>ff_vk_init_sampler</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>VK_FILTER_LINEAR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sampler</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pl</name></name> <operator>=</operator> <call><name>ff_vk_create_pipeline</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>pl</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<block>{<block_content> 
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>planes</name> <init>= <expr><call><name>av_pix_fmt_count_planes</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>vkctx</name><operator>.</operator><name>output_format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VulkanDescriptorSetBinding</name></type> <name><name>desc_i</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"main_img"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER</name></expr>,
<expr><operator>.</operator><name>dimensions</name> <operator>=</operator> <literal type="number">2</literal></expr>,
<expr><operator>.</operator><name>elems</name> <operator>=</operator> <name>planes</name></expr>,
<expr><operator>.</operator><name>stages</name> <operator>=</operator> <name>VK_SHADER_STAGE_COMPUTE_BIT</name></expr>,
<expr><operator>.</operator><name>updater</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>main_images</name></name></expr>,
<expr><operator>.</operator><name>samplers</name> <operator>=</operator> <call><name>DUP_SAMPLER_ARRAY4</name><argument_list>(<argument><expr><operator>*</operator><name>sampler</name></expr></argument>)</argument_list></call></expr>,
}</block></expr>,
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"overlay_img"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER</name></expr>,
<expr><operator>.</operator><name>dimensions</name> <operator>=</operator> <literal type="number">2</literal></expr>,
<expr><operator>.</operator><name>elems</name> <operator>=</operator> <name>planes</name></expr>,
<expr><operator>.</operator><name>stages</name> <operator>=</operator> <name>VK_SHADER_STAGE_COMPUTE_BIT</name></expr>,
<expr><operator>.</operator><name>updater</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>overlay_images</name></name></expr>,
<expr><operator>.</operator><name>samplers</name> <operator>=</operator> <call><name>DUP_SAMPLER_ARRAY4</name><argument_list>(<argument><expr><operator>*</operator><name>sampler</name></expr></argument>)</argument_list></call></expr>,
}</block></expr>,
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"output_img"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>VK_DESCRIPTOR_TYPE_STORAGE_IMAGE</name></expr>,
<expr><operator>.</operator><name>mem_layout</name> <operator>=</operator> <call><name>ff_vk_shader_rep_fmt</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>vkctx</name><operator>.</operator><name>output_format</name></name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>mem_quali</name> <operator>=</operator> <literal type="string">"writeonly"</literal></expr>,
<expr><operator>.</operator><name>dimensions</name> <operator>=</operator> <literal type="number">2</literal></expr>,
<expr><operator>.</operator><name>elems</name> <operator>=</operator> <name>planes</name></expr>,
<expr><operator>.</operator><name>stages</name> <operator>=</operator> <name>VK_SHADER_STAGE_COMPUTE_BIT</name></expr>,
<expr><operator>.</operator><name>updater</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>output_images</name></name></expr>,
}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VulkanDescriptorSetBinding</name></type> <name>desc_b</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"params"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>VK_DESCRIPTOR_TYPE_STORAGE_BUFFER</name></expr>,
<expr><operator>.</operator><name>mem_quali</name> <operator>=</operator> <literal type="string">"readonly"</literal></expr>,
<expr><operator>.</operator><name>mem_layout</name> <operator>=</operator> <literal type="string">"std430"</literal></expr>,
<expr><operator>.</operator><name>stages</name> <operator>=</operator> <name>VK_SHADER_STAGE_COMPUTE_BIT</name></expr>,
<expr><operator>.</operator><name>updater</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>params_desc</name></name></expr>,
<expr><operator>.</operator><name>buf_content</name> <operator>=</operator> <literal type="string">"ivec2 o_offset[3], o_size[3];"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SPIRVShader</name> <modifier>*</modifier></type><name>shd</name> <init>= <expr><call><name>ff_vk_init_shader</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pl</name></name></expr></argument>, <argument><expr><literal type="string">"overlay_compute"</literal></expr></argument>,
<argument><expr><name>VK_SHADER_STAGE_COMPUTE_BIT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>shd</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_vk_set_compute_shader_sizes</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>shd</name></expr></argument>, <argument><expr><name>CGROUPS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RET</name><argument_list>(<argument><expr><call><name>ff_vk_add_descriptor_set</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pl</name></name></expr></argument>, <argument><expr><name>shd</name></expr></argument>, <argument><expr><name>desc_i</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>RET</name><argument_list>(<argument><expr><call><name>ff_vk_add_descriptor_set</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pl</name></name></expr></argument>, <argument><expr><name>shd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>desc_b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>GLSLD</name><argument_list>( <argument><expr><name>overlay_noalpha</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GLSLC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>void</name> <call><name>main</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<macro><name>GLSLC</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument>{</argument> )</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>GLSLC</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument>ivec2 pos = ivec2(gl_GlobalInvocationID.xy);</argument> )</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>GLSLF</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument>int planes = %i;</argument> ,<argument>planes</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>GLSLC</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument>for (int i = <literal type="number">0</literal>; i &lt; planes; i++) {</argument> )</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>GLSLC</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument>overlay_noalpha(i, pos);</argument> )</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>GLSLC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,</argument_list></call></expr></expr_stmt> </block_content>}</block> )</block_content></block>;</function>
<expr_stmt><expr><call><name>GLSLC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,</argument_list></call></expr></expr_stmt> } )<empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>RET</name><argument_list>(<argument><expr><call><name>ff_vk_compile_shader</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>shd</name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}

RET<expr_stmt><expr><operator>(</operator><call><name>ff_vk_init_pipeline_layout</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pl</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RET</name><argument_list>(<argument><expr><call><name>ff_vk_init_compute_pipeline</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pl</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content> 
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>




<struct>struct <block>{
<decl_stmt><decl><type><name>int32_t</name></type> <name><name>o_offset</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name><name>o_size</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><modifier>*</modifier><name>par</name></decl>;</struct>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_vk_create_buf</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>params_buf</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>par</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>VK_BUFFER_USAGE_STORAGE_BUFFER_BIT</name></expr></argument>,
<argument><expr><name>VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_vk_map_buffers</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>params_buf</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>par</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>vkctx</name><operator>.</operator><name>output_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>o_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>overlay_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>o_offset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>overlay_y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>o_offset</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>o_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>o_offset</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>o_offset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>o_offset</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>o_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>o_offset</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>o_offset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>o_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>overlay_w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>o_size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>overlay_h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>o_size</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>o_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>o_size</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>o_size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>o_size</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>o_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>o_size</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>o_size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_vk_unmap_buffers</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>params_buf</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>params_desc</name><operator>.</operator><name>buffer</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>params_buf</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>params_desc</name><operator>.</operator><name>range</name></name> <operator>=</operator> <name>VK_WHOLE_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_vk_update_descriptor_set</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pl</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<expr_stmt><expr><call><name>RET</name><argument_list>(<argument><expr><call><name>ff_vk_create_exec_ctx</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>exec</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>vkctx</name><operator>.</operator><name>hwctx</name><operator>-&gt;</operator><name>queue_family_comp_index</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>initialized</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<return>return <expr><name>err</name></expr>;</return>
}

static <function><type><name>int</name></type> <name>process_frames</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out_f</name></decl></parameter>,
<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>main_f</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>overlay_f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OverlayVulkanContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>planes</name> <init>= <expr><call><name>av_pix_fmt_count_planes</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>vkctx</name><operator>.</operator><name>output_format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVkFrame</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><operator>(</operator><name>AVVkFrame</name> <operator>*</operator><operator>)</operator><name><name>out_f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVVkFrame</name> <modifier>*</modifier></type>main <init>= <expr><operator>(</operator><name>AVVkFrame</name> <operator>*</operator><operator>)</operator><name><name>main_f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVVkFrame</name> <modifier>*</modifier></type><name>overlay</name> <init>= <expr><operator>(</operator><name>AVVkFrame</name> <operator>*</operator><operator>)</operator><name><name>overlay_f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>main_fc</name> <init>= <expr><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>main_f</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>overlay_fc</name> <init>= <expr><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>overlay_f</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>planes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>RET</name><argument_list>(<argument><expr><call><name>ff_vk_create_imageview</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>main_images</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>imageView</name></expr></argument>, <argument><expr>main<operator>-&gt;</operator><name><name>img</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>av_vkfmt_from_pixfmt</name><argument_list>(<argument><expr><name><name>main_fc</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index></expr></argument>,
<argument><expr><name>ff_comp_identity_map</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RET</name><argument_list>(<argument><expr><call><name>ff_vk_create_imageview</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>overlay_images</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>imageView</name></expr></argument>, <argument><expr><name><name>overlay</name><operator>-&gt;</operator><name>img</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>av_vkfmt_from_pixfmt</name><argument_list>(<argument><expr><name><name>overlay_fc</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index></expr></argument>,
<argument><expr><name>ff_comp_identity_map</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RET</name><argument_list>(<argument><expr><call><name>ff_vk_create_imageview</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>output_images</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>imageView</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>img</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>av_vkfmt_from_pixfmt</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>vkctx</name><operator>.</operator><name>output_format</name></name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index></expr></argument>,
<argument><expr><name>ff_comp_identity_map</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>main_images</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>imageLayout</name> <operator>=</operator> <name>VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>overlay_images</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>imageLayout</name> <operator>=</operator> <name>VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>output_images</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>imageLayout</name> <operator>=</operator> <name>VK_IMAGE_LAYOUT_GENERAL</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>ff_vk_update_descriptor_set</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pl</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_vk_start_exec_recording</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>exec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>planes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>VkImageMemoryBarrier</name></type> <name><name>bar</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER</name></expr>,
<expr><operator>.</operator><name>srcAccessMask</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>dstAccessMask</name> <operator>=</operator> <name>VK_ACCESS_SHADER_READ_BIT</name></expr>,
<expr><operator>.</operator><name>oldLayout</name> <operator>=</operator> main<operator>-&gt;</operator><name><name>layout</name><index>[<expr><name>i</name></expr>]</index></name></expr>,
<expr><operator>.</operator><name>newLayout</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>main_images</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>imageLayout</name></expr>,
<expr><operator>.</operator><name>srcQueueFamilyIndex</name> <operator>=</operator> <name>VK_QUEUE_FAMILY_IGNORED</name></expr>,
<expr><operator>.</operator><name>dstQueueFamilyIndex</name> <operator>=</operator> <name>VK_QUEUE_FAMILY_IGNORED</name></expr>,
<expr><operator>.</operator><name>image</name> <operator>=</operator> main<operator>-&gt;</operator><name><name>img</name><index>[<expr><name>i</name></expr>]</index></name></expr>,
<expr><operator>.</operator><name><name>subresourceRange</name><operator>.</operator><name>aspectMask</name></name> <operator>=</operator> <name>VK_IMAGE_ASPECT_COLOR_BIT</name></expr>,
<expr><operator>.</operator><name><name>subresourceRange</name><operator>.</operator><name>levelCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name><name>subresourceRange</name><operator>.</operator><name>layerCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>,
}</block></expr>,
<expr><block>{
<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER</name></expr>,
<expr><operator>.</operator><name>srcAccessMask</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>dstAccessMask</name> <operator>=</operator> <name>VK_ACCESS_SHADER_READ_BIT</name></expr>,
<expr><operator>.</operator><name>oldLayout</name> <operator>=</operator> <name><name>overlay</name><operator>-&gt;</operator><name>layout</name><index>[<expr><name>i</name></expr>]</index></name></expr>,
<expr><operator>.</operator><name>newLayout</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>overlay_images</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>imageLayout</name></expr>,
<expr><operator>.</operator><name>srcQueueFamilyIndex</name> <operator>=</operator> <name>VK_QUEUE_FAMILY_IGNORED</name></expr>,
<expr><operator>.</operator><name>dstQueueFamilyIndex</name> <operator>=</operator> <name>VK_QUEUE_FAMILY_IGNORED</name></expr>,
<expr><operator>.</operator><name>image</name> <operator>=</operator> <name><name>overlay</name><operator>-&gt;</operator><name>img</name><index>[<expr><name>i</name></expr>]</index></name></expr>,
<expr><operator>.</operator><name><name>subresourceRange</name><operator>.</operator><name>aspectMask</name></name> <operator>=</operator> <name>VK_IMAGE_ASPECT_COLOR_BIT</name></expr>,
<expr><operator>.</operator><name><name>subresourceRange</name><operator>.</operator><name>levelCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name><name>subresourceRange</name><operator>.</operator><name>layerCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>,
}</block></expr>,
<expr><block>{
<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER</name></expr>,
<expr><operator>.</operator><name>srcAccessMask</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>dstAccessMask</name> <operator>=</operator> <name>VK_ACCESS_SHADER_WRITE_BIT</name></expr>,
<expr><operator>.</operator><name>oldLayout</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>layout</name><index>[<expr><name>i</name></expr>]</index></name></expr>,
<expr><operator>.</operator><name>newLayout</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>output_images</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>imageLayout</name></expr>,
<expr><operator>.</operator><name>srcQueueFamilyIndex</name> <operator>=</operator> <name>VK_QUEUE_FAMILY_IGNORED</name></expr>,
<expr><operator>.</operator><name>dstQueueFamilyIndex</name> <operator>=</operator> <name>VK_QUEUE_FAMILY_IGNORED</name></expr>,
<expr><operator>.</operator><name>image</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>img</name><index>[<expr><name>i</name></expr>]</index></name></expr>,
<expr><operator>.</operator><name><name>subresourceRange</name><operator>.</operator><name>aspectMask</name></name> <operator>=</operator> <name>VK_IMAGE_ASPECT_COLOR_BIT</name></expr>,
<expr><operator>.</operator><name><name>subresourceRange</name><operator>.</operator><name>levelCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name><name>subresourceRange</name><operator>.</operator><name>layerCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>,
}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vkCmdPipelineBarrier</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>exec</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT</name></expr></argument>,
<argument><expr><name>VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr>main<operator>-&gt;</operator><name><name>layout</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>bar</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>newLayout</name></expr>;</expr_stmt>
<expr_stmt><expr>main<operator>-&gt;</operator><name><name>access</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>bar</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dstAccessMask</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>overlay</name><operator>-&gt;</operator><name>layout</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>bar</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>newLayout</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>overlay</name><operator>-&gt;</operator><name>access</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>bar</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dstAccessMask</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>layout</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>bar</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>newLayout</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>access</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>bar</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>dstAccessMask</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>ff_vk_bind_pipeline_exec</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>exec</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vkCmdDispatch</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>exec</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>,
<argument><expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>vkctx</name><operator>.</operator><name>output_width</name></name></expr></argument>, <argument><expr><name><name>CGROUPS</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>/</operator><name><name>CGROUPS</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>vkctx</name><operator>.</operator><name>output_height</name></name></expr></argument>, <argument><expr><name><name>CGROUPS</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>/</operator><name><name>CGROUPS</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_vk_add_exec_dep</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>exec</name></name></expr></argument>, <argument><expr><name>main_f</name></expr></argument>, <argument><expr><name>VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_vk_add_exec_dep</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>exec</name></name></expr></argument>, <argument><expr><name>overlay_f</name></expr></argument>, <argument><expr><name>VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_vk_add_exec_dep</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>exec</name></name></expr></argument>, <argument><expr><name>out_f</name></expr></argument>, <argument><expr><name>VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_vk_submit_exec_queue</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>exec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<label><name>fail</name>:</label>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>planes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ff_vk_destroy_imageview</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>main_images</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>imageView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_vk_destroy_imageview</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>overlay_images</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>imageView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_vk_destroy_imageview</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>output_images</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>imageView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>overlay_vulkan_blend</name><parameter_list>(<parameter><decl><type><name>FFFrameSync</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>fs</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OverlayVulkanContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>input_main</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>input_overlay</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_framesync_get_frame</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>input_main</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_framesync_get_frame</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>input_overlay</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input_main</name> <operator>||</operator> <operator>!</operator><name>input_overlay</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>initialized</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>main_fc</name> <init>= <expr><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>input_main</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>overlay_fc</name> <init>= <expr><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>input_overlay</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>main_fc</name><operator>-&gt;</operator><name>sw_format</name></name> <operator>!=</operator> <name><name>overlay_fc</name><operator>-&gt;</operator><name>sw_format</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Mismatching sw formats!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>overlay_w</name></name> <operator>=</operator> <name><name>input_overlay</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>overlay_h</name></name> <operator>=</operator> <name><name>input_overlay</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RET</name><argument_list>(<argument><expr><call><name>init_filter</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>RET</name><argument_list>(<argument><expr><call><name>process_frames</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>input_main</name></expr></argument>, <argument><expr><name>input_overlay</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>input_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>overlay_vulkan_config_output</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OverlayVulkanContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_vk_filter_config_output</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_framesync_init_dualinput</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_framesync_configure</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>overlay_vulkan_activate</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OverlayVulkanContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ff_framesync_activate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>overlay_vulkan_init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OverlayVulkanContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>on_event</name></name> <operator>=</operator> <operator>&amp;</operator><name>overlay_vulkan_blend</name></expr>;</expr_stmt>

<return>return <expr><call><name>ff_vk_filter_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>overlay_vulkan_uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OverlayVulkanContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_vk_filter_uninit</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_framesync_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_vk_free_buf</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>params_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>initialized</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(OverlayVulkanContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>(AV_OPT_FLAG_FILTERING_PARAM | AV_OPT_FLAG_VIDEO_PARAM)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>overlay_vulkan_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"x"</literal></expr>, <expr><literal type="string">"Set horizontal offset"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>overlay_x</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"y"</literal></expr>, <expr><literal type="string">"Set vertical offset"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>overlay_y</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>overlay_vulkan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>overlay_vulkan_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"main"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <operator>&amp;</operator><name>ff_vk_filter_config_input</name></expr>,
}</block></expr>,
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"overlay"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <operator>&amp;</operator><name>ff_vk_filter_config_input</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>overlay_vulkan_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <operator>&amp;</operator><name>overlay_vulkan_config_output</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_overlay_vulkan</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"overlay_vulkan"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Overlay a source on top of another"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OverlayVulkanContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <operator>&amp;</operator><name>overlay_vulkan_init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <operator>&amp;</operator><name>overlay_vulkan_uninit</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <operator>&amp;</operator><name>ff_vk_filter_query_formats</name></expr>,
<expr><operator>.</operator><name>activate</name> <operator>=</operator> <operator>&amp;</operator><name>overlay_vulkan_activate</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>overlay_vulkan_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>overlay_vulkan_outputs</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>overlay_vulkan_class</name></expr>,
<expr><operator>.</operator><name>flags_internal</name> <operator>=</operator> <name>FF_FILTER_FLAG_HWFRAME_AWARE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
