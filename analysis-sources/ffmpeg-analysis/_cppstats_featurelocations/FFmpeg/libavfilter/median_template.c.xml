<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\median_template.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>pixel</name></cpp:undef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEPTH</name> <operator>==</operator> <literal type="number">8</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pixel</name></cpp:macro> <cpp:value>uint8_t</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pixel</name></cpp:macro> <cpp:value>uint16_t</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>htype</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>htype</name></cpp:macro> <cpp:value>uint16_t</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>fn</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>fn2</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>fn3</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHIFT</name></cpp:macro> <cpp:value>((DEPTH + 1) / 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BINS</name></cpp:macro> <cpp:value>(1 &lt;&lt; SHIFT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MASK</name></cpp:macro> <cpp:value>(BINS - 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fn3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a##_##b</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fn2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fn3(a,b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fn</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fn2(a, DEPTH)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PICK_COARSE_BIN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(BINS * (x) + ((y) &gt;&gt; SHIFT))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PICK_FINE_BIN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(BINS * ((x) * ((y) &gt;&gt; SHIFT) + (z)) + ((y) &amp; MASK))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name> <name>fn</name></type>(<name>filter_plane</name>)<parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ssrc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_linesize</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ddst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_linesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>slice_h_start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slice_h_end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MedianContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>htype</name> <modifier>*</modifier></type><name>ccoarse</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>coarse</name><index>[<expr><name>jobnr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>htype</name> <modifier>*</modifier></type><name>cfine</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>fine</name><index>[<expr><name>jobnr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>radius</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>radius</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>radiusV</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>radiusV</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>t</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>t</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator><name>ssrc</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>ddst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>srcp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src_linesize</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_linesize</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>cfine</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fine_size</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>cfine</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ccoarse</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>coarse_size</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ccoarse</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>srcp</name> <operator>=</operator> <name>src</name> <operator>+</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>slice_h_start</name> <operator>-</operator> <name>radiusV</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>src_linesize</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>jobnr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>cfine</name><index>[<expr><call><name>PICK_FINE_BIN</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name><name>srcp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>+=</operator> <name>radiusV</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccoarse</name><index>[<expr><call><name>PICK_COARSE_BIN</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>srcp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>+=</operator> <name>radiusV</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>srcp</name> <operator>=</operator> <name>src</name> <operator>+</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>slice_h_start</name> <operator>-</operator> <name>radiusV</name> <operator>-</operator> <operator>(</operator><name>jobnr</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>*</operator> <name>src_linesize</name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>radiusV</name> <operator>+</operator> <operator>(</operator><name>jobnr</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>radiusV</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>cfine</name><index>[<expr><call><name>PICK_FINE_BIN</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name><name>srcp</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccoarse</name><index>[<expr><call><name>PICK_COARSE_BIN</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>srcp</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>srcp</name> <operator>+=</operator> <name>src_linesize</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>srcp</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>slice_h_start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>slice_h_end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>htype</name></type> <name><name>coarse</name><index>[<expr><name>BINS</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>htype</name></type> <name><name>fine</name><index>[<expr><name>BINS</name></expr>]</index><index>[<expr><name>BINS</name></expr>]</index></name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>htype</name></type> <name><name>luc</name><index>[<expr><name>BINS</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>srcp</name> <operator>+</operator> <name>src_linesize</name> <operator>*</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name>radiusV</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>cfine</name><index>[<expr><call><name>PICK_FINE_BIN</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccoarse</name><index>[<expr><call><name>PICK_COARSE_BIN</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>srcp</name> <operator>+</operator> <name>src_linesize</name> <operator>*</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <name>radiusV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>cfine</name><index>[<expr><call><name>PICK_FINE_BIN</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccoarse</name><index>[<expr><call><name>PICK_COARSE_BIN</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>hmuladd</name></name><argument_list>(<argument><expr><name>coarse</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ccoarse</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>radius</name></expr></argument>, <argument><expr><name>BINS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>radius</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>hadd</name></name><argument_list>(<argument><expr><name>coarse</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ccoarse</name><index>[<expr><name>BINS</name> <operator>*</operator> <name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>BINS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>BINS</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>hmuladd</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fine</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cfine</name><index>[<expr><name>BINS</name> <operator>*</operator> <name>width</name> <operator>*</operator> <name>k</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>radius</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>BINS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>htype</name> <modifier>*</modifier></type><name>segment</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>hadd</name></name><argument_list>(<argument><expr><name>coarse</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ccoarse</name><index>[<expr><name>BINS</name> <operator>*</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>j</name> <operator>+</operator> <name>radius</name></expr></argument>, <argument><expr><name>width</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><name>BINS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>BINS</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>coarse</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sum</name> <operator>&gt;</operator> <name>t</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sum</name> <operator>-=</operator> <name><name>coarse</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>k</name> <operator>&lt;</operator> <name>BINS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>luc</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&lt;=</operator> <name>j</name> <operator>-</operator> <name>radius</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fine</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BINS</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>htype</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name><name>luc</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>j</name> <operator>-</operator> <name>radius</name></expr>;</init> <condition><expr><name><name>luc</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&lt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>j</name> <operator>+</operator> <name>radius</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name><name>luc</name><index>[<expr><name>k</name></expr>]</index></name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>hadd</name></name><argument_list>(<argument><expr><name><name>fine</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cfine</name><index>[<expr><name>BINS</name> <operator>*</operator> <operator>(</operator><name>width</name> <operator>*</operator> <name>k</name> <operator>+</operator> <name><name>luc</name><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator></expr>]</index></name></expr></argument>, <argument><expr><name>BINS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name><name>luc</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&lt;</operator> <name>j</name> <operator>+</operator> <name>radius</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>hmuladd</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fine</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cfine</name><index>[<expr><name>BINS</name> <operator>*</operator> <operator>(</operator><name>width</name> <operator>*</operator> <name>k</name> <operator>+</operator> <name>width</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr></argument>, <argument><expr><name>j</name> <operator>+</operator> <name>radius</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>width</name></expr></argument>, <argument><expr><name>BINS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>luc</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>j</name> <operator>+</operator> <name>radius</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name><name>luc</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&lt;</operator> <name>j</name> <operator>+</operator> <name>radius</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name><name>luc</name><index>[<expr><name>k</name></expr>]</index></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>hsub</name></name><argument_list>(<argument><expr><name><name>fine</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cfine</name><index>[<expr><name>BINS</name> <operator>*</operator> <operator>(</operator><name>width</name> <operator>*</operator> <name>k</name> <operator>+</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>luc</name><index>[<expr><name>k</name></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>radius</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>]</index></name></expr></argument>, <argument><expr><name>BINS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>hadd</name></name><argument_list>(<argument><expr><name><name>fine</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cfine</name><index>[<expr><name>BINS</name> <operator>*</operator> <operator>(</operator><name>width</name> <operator>*</operator> <name>k</name> <operator>+</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>luc</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name>width</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>]</index></name></expr></argument>, <argument><expr><name>BINS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>hsub</name></name><argument_list>(<argument><expr><name>coarse</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ccoarse</name><index>[<expr><name>BINS</name> <operator>*</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>j</name> <operator>-</operator> <name>radius</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><name>BINS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>segment</name> <operator>=</operator> <name><name>fine</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name>BINS</name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>segment</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sum</name> <operator>&gt;</operator> <name>t</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>BINS</name> <operator>*</operator> <name>k</name> <operator>+</operator> <name>b</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>b</name> <operator>&lt;</operator> <name>BINS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_linesize</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
</unit>
