<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vf_transpose_npp.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nppi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hwcontext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hwcontext_cuda_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cuda_check.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_CU</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FF_CUDA_CHECK_DL(ctx, device_hwctx-&gt;internal-&gt;cuda_dl, x)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>supported_formats</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_YUV420P</name></expr>,
<expr><name>AV_PIX_FMT_YUV444P</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<enum>enum <name>TransposeStage</name> <block>{
<decl><name>STAGE_ROTATE</name></decl>,
<decl><name>STAGE_TRANSPOSE</name></decl>,
<decl><name>STAGE_NB</name></decl>
}</block>;</enum>

<enum>enum <name>Transpose</name> <block>{
<decl><name>NPP_TRANSPOSE_CCLOCK_FLIP</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>NPP_TRANSPOSE_CLOCK</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>NPP_TRANSPOSE_CCLOCK</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>NPP_TRANSPOSE_CLOCK_FLIP</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <name>Passthrough</name> <block>{
<decl><name>NPP_TRANSPOSE_PT_TYPE_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>NPP_TRANSPOSE_PT_TYPE_LANDSCAPE</name></decl>,
<decl><name>NPP_TRANSPOSE_PT_TYPE_PORTRAIT</name></decl>
}</block>;</enum>

<typedef>typedef <type><struct>struct <name>NPPTransposeStageContext</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>stage_needed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>in_fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>out_fmt</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>
}</block> <decl><name><name>planes_in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <name><name>planes_out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>;</struct>
<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>frames_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>
}</block></struct></type> <name>NPPTransposeStageContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>NPPTransposeContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NPPTransposeStageContext</name></type> <name><name>stages</name><index>[<expr><name>STAGE_NB</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>tmp_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>passthrough</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>dir</name></decl>;</decl_stmt> 
}</block></struct></type> <name>NPPTransposeContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>npptranspose_init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>NPPTransposeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>stages</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stages</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frame</name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>stages</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frame</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tmp_frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>tmp_frame</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>npptranspose_uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>NPPTransposeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>stages</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>stages</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>stages</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frames_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>tmp_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>npptranspose_query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pixel_formats</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_CUDA</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>pix_fmts</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pixel_formats</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_stage</name><parameter_list>(<parameter><decl><type><name>NPPTransposeStageContext</name> <modifier>*</modifier></type><name>stage</name></decl></parameter>, <parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>device_ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>out_ref</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>out_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>in_sw</name></decl>, <decl><type ref="prev"/><name>in_sh</name></decl>, <decl><type ref="prev"/><name>out_sw</name></decl>, <decl><type ref="prev"/><name>out_sh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_pix_fmt_get_chroma_sub_sample</name><argument_list>(<argument><expr><name><name>stage</name><operator>-&gt;</operator><name>in_fmt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in_sw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in_sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_pix_fmt_get_chroma_sub_sample</name><argument_list>(<argument><expr><name><name>stage</name><operator>-&gt;</operator><name>out_fmt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_sw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>stage</name><operator>-&gt;</operator><name>planes_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>width</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>stage</name><operator>-&gt;</operator><name>planes_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <name><name>stage</name><operator>-&gt;</operator><name>planes_in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stage</name><operator>-&gt;</operator><name>planes_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <name><name>stage</name><operator>-&gt;</operator><name>planes_in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>height</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>stage</name><operator>-&gt;</operator><name>planes_in</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>stage</name><operator>-&gt;</operator><name>planes_in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <name><name>stage</name><operator>-&gt;</operator><name>planes_in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>width</name> <operator>&gt;&gt;</operator> <name>in_sw</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stage</name><operator>-&gt;</operator><name>planes_in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <name><name>stage</name><operator>-&gt;</operator><name>planes_in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>height</name> <operator>&gt;&gt;</operator> <name>in_sh</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stage</name><operator>-&gt;</operator><name>planes_out</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <name><name>stage</name><operator>-&gt;</operator><name>planes_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>width</name> <operator>&gt;&gt;</operator> <name>out_sw</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stage</name><operator>-&gt;</operator><name>planes_out</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <name><name>stage</name><operator>-&gt;</operator><name>planes_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>height</name> <operator>&gt;&gt;</operator> <name>out_sh</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>out_ref</name> <operator>=</operator> <call><name>av_hwframe_ctx_alloc</name><argument_list>(<argument><expr><name>device_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out_ref</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>out_ctx</name> <operator>=</operator> <operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>out_ref</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_ctx</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_CUDA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_ctx</name><operator>-&gt;</operator><name>sw_format</name></name> <operator>=</operator> <name><name>stage</name><operator>-&gt;</operator><name>out_fmt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_ctx</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>stage</name><operator>-&gt;</operator><name>planes_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>width</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_ctx</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>stage</name><operator>-&gt;</operator><name>planes_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>height</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_hwframe_ctx_init</name><argument_list>(<argument><expr><name>out_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>stage</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_hwframe_get_buffer</name><argument_list>(<argument><expr><name>out_ref</name></expr></argument>, <argument><expr><name><name>stage</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>stage</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>stage</name><operator>-&gt;</operator><name>planes_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stage</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>stage</name><operator>-&gt;</operator><name>planes_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stage</name><operator>-&gt;</operator><name>frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stage</name><operator>-&gt;</operator><name>frames_ctx</name></name> <operator>=</operator> <name>out_ref</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>format_is_supported</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>supported_formats</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>supported_formats</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>fmt</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_processing_chain</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>out_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>NPPTransposeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>in_frames_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>last_stage</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rot_width</name> <init>= <expr><name>out_width</name></expr></init></decl>, <decl><type ref="prev"/><name>rot_height</name> <init>= <expr><name>out_height</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>hw_frames_ctx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No hw context provided on input\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>in_frames_ctx</name> <operator>=</operator> <operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name><name>in_frames_ctx</name><operator>-&gt;</operator><name>sw_format</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>format_is_supported</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported input format: %s\n"</literal></expr></argument>,
<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dir</name></name> <operator>!=</operator> <name>NPP_TRANSPOSE_CCLOCK_FLIP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stages</name><index>[<expr><name>STAGE_ROTATE</name></expr>]</index></name><operator>.</operator><name>stage_needed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dir</name></name> <operator>==</operator> <name>NPP_TRANSPOSE_CCLOCK_FLIP</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>dir</name></name> <operator>==</operator> <name>NPP_TRANSPOSE_CLOCK_FLIP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stages</name><index>[<expr><name>STAGE_TRANSPOSE</name></expr>]</index></name><operator>.</operator><name>stage_needed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>rot_width</name> <operator>=</operator> <name>in_width</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rot_height</name> <operator>=</operator> <name>in_height</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stages</name><index>[<expr><name>STAGE_ROTATE</name></expr>]</index></name><operator>.</operator><name>in_fmt</name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stages</name><index>[<expr><name>STAGE_ROTATE</name></expr>]</index></name><operator>.</operator><name>out_fmt</name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stages</name><index>[<expr><name>STAGE_ROTATE</name></expr>]</index></name><operator>.</operator><name><name>planes_in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <name>in_width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stages</name><index>[<expr><name>STAGE_ROTATE</name></expr>]</index></name><operator>.</operator><name><name>planes_in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <name>in_height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stages</name><index>[<expr><name>STAGE_ROTATE</name></expr>]</index></name><operator>.</operator><name><name>planes_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <name>rot_width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stages</name><index>[<expr><name>STAGE_ROTATE</name></expr>]</index></name><operator>.</operator><name><name>planes_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <name>rot_height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stages</name><index>[<expr><name>STAGE_TRANSPOSE</name></expr>]</index></name><operator>.</operator><name>in_fmt</name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stages</name><index>[<expr><name>STAGE_TRANSPOSE</name></expr>]</index></name><operator>.</operator><name>out_fmt</name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stages</name><index>[<expr><name>STAGE_TRANSPOSE</name></expr>]</index></name><operator>.</operator><name><name>planes_in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <name>rot_width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stages</name><index>[<expr><name>STAGE_TRANSPOSE</name></expr>]</index></name><operator>.</operator><name><name>planes_in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <name>rot_height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stages</name><index>[<expr><name>STAGE_TRANSPOSE</name></expr>]</index></name><operator>.</operator><name><name>planes_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <name>out_width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stages</name><index>[<expr><name>STAGE_TRANSPOSE</name></expr>]</index></name><operator>.</operator><name><name>planes_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <name>out_height</name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>stages</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>stages</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>stage_needed</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_stage</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>stages</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>in_frames_ctx</name><operator>-&gt;</operator><name>device_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>last_stage</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>last_stage</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>hw_frames_ctx</name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>stages</name><index>[<expr><name>last_stage</name></expr>]</index></name><operator>.</operator><name>frames_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>hw_frames_ctx</name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>hw_frames_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>passthrough</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>hw_frames_ctx</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>npptranspose_config_props</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NPPTransposeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>&gt;=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>passthrough</name></name> <operator>==</operator> <name>NPP_TRANSPOSE_PT_TYPE_LANDSCAPE</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>&lt;=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>passthrough</name></name> <operator>==</operator> <name>NPP_TRANSPOSE_PT_TYPE_PORTRAIT</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>inlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>outlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,
<argument><expr><literal type="string">"w:%d h:%d -&gt; w:%d h:%d (passthrough mode)\n"</literal></expr></argument>,
<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>passthrough</name></name> <operator>=</operator> <name>NPP_TRANSPOSE_PT_TYPE_NONE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{<expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr>, <expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_processing_chain</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"w:%d h:%d -transpose-&gt; w:%d h:%d\n"</literal></expr></argument>,
<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>npptranspose_rotate</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>NPPTransposeStageContext</name> <modifier>*</modifier></type><name>stage</name></decl></parameter>,
<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>NPPTransposeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NppStatus</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>stage</name><operator>-&gt;</operator><name>planes_in</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>iw</name> <init>= <expr><name><name>stage</name><operator>-&gt;</operator><name>planes_in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ih</name> <init>= <expr><name><name>stage</name><operator>-&gt;</operator><name>planes_in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ow</name> <init>= <expr><name><name>stage</name><operator>-&gt;</operator><name>planes_out</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>oh</name> <init>= <expr><name><name>stage</name><operator>-&gt;</operator><name>planes_out</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>double</name></type> <name>angle</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>dir</name></name> <operator>==</operator> <name>NPP_TRANSPOSE_CLOCK</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">90.0</literal></expr> </then><else>: <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>dir</name></name> <operator>==</operator> <name>NPP_TRANSPOSE_CCLOCK</name></expr> ?</condition><then> <expr><literal type="number">90.0</literal></expr> </then><else>: <expr><literal type="number">180.0</literal></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shiftw</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>dir</name></name> <operator>==</operator> <name>NPP_TRANSPOSE_CLOCK</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>dir</name></name> <operator>==</operator> <name>NPP_TRANSPOSE_CLOCK_FLIP</name><operator>)</operator></expr> ?</condition><then> <expr><name>ow</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shifth</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>dir</name></name> <operator>==</operator> <name>NPP_TRANSPOSE_CCLOCK</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>dir</name></name> <operator>==</operator> <name>NPP_TRANSPOSE_CLOCK_FLIP</name><operator>)</operator></expr> ?</condition><then> <expr><name>oh</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <macro><name>nppiRotate_8u_C1R</name><argument_list>(<argument>in-&gt;data[i]</argument>, <argument>(NppiSize){ iw</argument>, <argument>ih }</argument>,
<argument>in-&gt;linesize[i]</argument>, <argument>(NppiRect){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>iw</argument>, <argument>ih }</argument>,
<argument>out-&gt;data[i]</argument>, <argument>out-&gt;linesize[i]</argument>,
<argument>(NppiRect){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>ow</argument>, <argument>oh }</argument>,
<argument>angle</argument>, <argument>shiftw</argument>, <argument>shifth</argument>, <argument>NPPI_INTER_NN</argument>)</argument_list></macro></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>NPP_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"NPP rotate error: %d\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>npptranspose_transpose</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>NPPTransposeStageContext</name> <modifier>*</modifier></type><name>stage</name></decl></parameter>,
<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>NppStatus</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>stage</name><operator>-&gt;</operator><name>planes_in</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>iw</name> <init>= <expr><name><name>stage</name><operator>-&gt;</operator><name>planes_in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ih</name> <init>= <expr><name><name>stage</name><operator>-&gt;</operator><name>planes_in</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <macro><name>nppiTranspose_8u_C1R</name><argument_list>(<argument>in-&gt;data[i]</argument>, <argument>in-&gt;linesize[i]</argument>,
<argument>out-&gt;data[i]</argument>, <argument>out-&gt;linesize[i]</argument>,
<argument>(NppiSize){ iw</argument>, <argument>ih }</argument>)</argument_list></macro></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>NPP_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"NPP transpose error: %d\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><specifier>static</specifier> <call><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator><specifier>const</specifier> <name><name>npptranspose_process</name><index>[]</index></name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>AVFilterContext</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>NPPTransposeStageContext</name> <operator>*</operator><name>stage</name></expr></argument>,
<argument><expr><name>AVFrame</name> <operator>*</operator><name>out</name></expr></argument>, <argument><expr><name>AVFrame</name> <operator>*</operator><name>in</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{
<expr><index>[<expr><name>STAGE_ROTATE</name></expr>]</index> <operator>=</operator> <name>npptranspose_rotate</name></expr>,
<expr><index>[<expr><name>STAGE_TRANSPOSE</name></expr>]</index> <operator>=</operator> <name>npptranspose_transpose</name></expr>
}</block></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>npptranspose_filter</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>NPPTransposeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>in</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>last_stage</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>stages</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>stages</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>stage_needed</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>npptranspose_process</name><index>[<expr><name>i</name></expr>]</index></name><operator>(</operator><name>ctx</name><operator>,</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>stages</name><index>[<expr><name>i</name></expr>]</index></name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>stages</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frame</name><operator>,</operator> <name>src</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>stages</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frame</name></expr>;</expr_stmt>
<expr_stmt><expr><name>last_stage</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>last_stage</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_BUG</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_hwframe_get_buffer</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>tmp_frame</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_move_ref</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_move_ref</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>tmp_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>npptranspose_filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>link</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NPPTransposeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>frames_ctx</name> <init>= <expr><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>outlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCUDADeviceContext</name> <modifier>*</modifier></type><name>device_hwctx</name> <init>= <expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CUcontext</name></type> <name>dummy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>passthrough</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>device_hwctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>cuda_dl</name><operator>-&gt;</operator><name>cuCtxPushCurrent</name></name><argument_list>(<argument><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>cuda_ctx</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>npptranspose_filter</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>device_hwctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>cuda_dl</name><operator>-&gt;</operator><name>cuCtxPopCurrent</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(NPPTransposeContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>(AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_VIDEO_PARAM)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"dir"</literal></expr>, <expr><literal type="string">"set transpose direction"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>NPP_TRANSPOSE_CCLOCK_FLIP</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"dir"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cclock_flip"</literal></expr>, <expr><literal type="string">"rotate counter-clockwise with vertical flip"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>NPP_TRANSPOSE_CCLOCK_FLIP</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"dir"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"clock"</literal></expr>, <expr><literal type="string">"rotate clockwise"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>NPP_TRANSPOSE_CLOCK</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"dir"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cclock"</literal></expr>, <expr><literal type="string">"rotate counter-clockwise"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>NPP_TRANSPOSE_CCLOCK</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"dir"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"clock_flip"</literal></expr>, <expr><literal type="string">"rotate clockwise with vertical flip"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>NPP_TRANSPOSE_CLOCK_FLIP</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"dir"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"passthrough"</literal></expr>, <expr><literal type="string">"do not apply transposition if the input matches the specified geometry"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>passthrough</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>NPP_TRANSPOSE_PT_TYPE_NONE</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"passthrough"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"none"</literal></expr>, <expr><literal type="string">"always apply transposition"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>NPP_TRANSPOSE_PT_TYPE_NONE</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"passthrough"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"landscape"</literal></expr>, <expr><literal type="string">"preserve landscape geometry"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>NPP_TRANSPOSE_PT_TYPE_LANDSCAPE</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"passthrough"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"portrait"</literal></expr>, <expr><literal type="string">"preserve portrait geometry"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>NPP_TRANSPOSE_PT_TYPE_PORTRAIT</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"passthrough"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>npptranspose_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"npptranspose"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>npptranspose_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>npptranspose_filter_frame</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>npptranspose_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>npptranspose_config_props</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_transpose_npp</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"transpose_npp"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"NVIDIA Performance Primitives video transpose"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>npptranspose_init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>npptranspose_uninit</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>npptranspose_query_formats</name></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>NPPTransposeContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>npptranspose_class</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>npptranspose_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>npptranspose_outputs</name></expr>,
<expr><operator>.</operator><name>flags_internal</name> <operator>=</operator> <name>FF_FILTER_FLAG_HWFRAME_AWARE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
