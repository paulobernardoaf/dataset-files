<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\pthread.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/slicethread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>ThreadContext</name> <block>{
<decl_stmt><decl><type><name>AVFilterGraph</name> <modifier>*</modifier></type><name>graph</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVSliceThread</name> <modifier>*</modifier></type><name>thread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>avfilter_action_func</name> <modifier>*</modifier></type><name>func</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>rets</name></decl>;</decl_stmt>
}</block></struct></type> <name>ThreadContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>worker_func</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>threadnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_threads</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ThreadContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name><name>c</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>jobnr</name></expr></argument>, <argument><expr><name>nb_jobs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>rets</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>rets</name><index>[<expr><name>jobnr</name></expr>]</index></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>slice_thread_uninit</name><parameter_list>(<parameter><decl><type><name>ThreadContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>avpriv_slicethread_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>thread_execute</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>avfilter_action_func</name> <modifier>*</modifier></type><name>func</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ret</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ThreadContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>graph</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>thread</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_jobs</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>rets</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avpriv_slicethread_execute</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>nb_jobs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>thread_init_internal</name><parameter_list>(<parameter><decl><type><name>ThreadContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_threads</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>nb_threads</name> <operator>=</operator> <call><name>avpriv_slicethread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>worker_func</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>nb_threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nb_threads</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avpriv_slicethread_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>nb_threads</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_graph_thread_init</name><parameter_list>(<parameter><decl><type><name>AVFilterGraph</name> <modifier>*</modifier></type><name>graph</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>graph</name><operator>-&gt;</operator><name>nb_threads</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>thread_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>thread</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ThreadContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>graph</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>thread</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>thread_init_internal</name><argument_list>(<argument><expr><name><name>graph</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name><name>graph</name><operator>-&gt;</operator><name>nb_threads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>graph</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>thread_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>nb_threads</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>nb_threads</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>thread_execute</name></name> <operator>=</operator> <name>thread_execute</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_graph_thread_free</name><parameter_list>(<parameter><decl><type><name>AVFilterGraph</name> <modifier>*</modifier></type><name>graph</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>graph</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>thread</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>slice_thread_uninit</name><argument_list>(<argument><expr><name><name>graph</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>graph</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
