<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vf_remap.c">





































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/colorspace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"drawutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"framesync.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>RemapContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_planes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_components</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>step</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>fill_rgba</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>fill_color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFFrameSync</name></type> <name>fs</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>remap_slice</name>)<parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>RemapContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(RemapContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_VIDEO_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>remap_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"format"</literal></expr>, <expr><literal type="string">"set output format"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"format"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"color"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"format"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"gray"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"format"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fill"</literal></expr>, <expr><literal type="string">"set the color of the unmapped pixels"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>fill_rgba</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_COLOR</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"black"</literal></expr>}</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>remap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<typedef>typedef <type><struct>struct <name>ThreadData</name> <block>{
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl>, <modifier>*</modifier><name>xin</name>, <modifier>*</modifier><name>yin</name>, <modifier>*</modifier><name>out</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_planes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_components</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>step</name></decl>;</decl_stmt>
}</block></struct></type> <name>ThreadData</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RemapContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_YUVA444P</name></expr>,
<expr><name>AV_PIX_FMT_YUV444P</name></expr>,
<expr><name>AV_PIX_FMT_YUVJ444P</name></expr>,
<expr><name>AV_PIX_FMT_RGB24</name></expr>, <expr><name>AV_PIX_FMT_BGR24</name></expr>,
<expr><name>AV_PIX_FMT_ARGB</name></expr>, <expr><name>AV_PIX_FMT_ABGR</name></expr>, <expr><name>AV_PIX_FMT_RGBA</name></expr>, <expr><name>AV_PIX_FMT_BGRA</name></expr>,
<expr><name>AV_PIX_FMT_GBRP</name></expr>, <expr><name>AV_PIX_FMT_GBRAP</name></expr>,
<expr><name>AV_PIX_FMT_YUV444P9</name></expr>, <expr><name>AV_PIX_FMT_YUV444P10</name></expr>, <expr><name>AV_PIX_FMT_YUV444P12</name></expr>,
<expr><name>AV_PIX_FMT_YUV444P14</name></expr>, <expr><name>AV_PIX_FMT_YUV444P16</name></expr>,
<expr><name>AV_PIX_FMT_YUVA444P9</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P10</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P12</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P16</name></expr>,
<expr><name>AV_PIX_FMT_GBRP9</name></expr>, <expr><name>AV_PIX_FMT_GBRP10</name></expr>, <expr><name>AV_PIX_FMT_GBRP12</name></expr>,
<expr><name>AV_PIX_FMT_GBRP14</name></expr>, <expr><name>AV_PIX_FMT_GBRP16</name></expr>,
<expr><name>AV_PIX_FMT_GBRAP10</name></expr>, <expr><name>AV_PIX_FMT_GBRAP12</name></expr>, <expr><name>AV_PIX_FMT_GBRAP16</name></expr>,
<expr><name>AV_PIX_FMT_RGB48</name></expr>, <expr><name>AV_PIX_FMT_BGR48</name></expr>,
<expr><name>AV_PIX_FMT_RGBA64</name></expr>, <expr><name>AV_PIX_FMT_BGRA64</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>gray_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_GRAY8</name></expr>, <expr><name>AV_PIX_FMT_GRAY9</name></expr>,
<expr><name>AV_PIX_FMT_GRAY10</name></expr>, <expr><name>AV_PIX_FMT_GRAY12</name></expr>,
<expr><name>AV_PIX_FMT_GRAY14</name></expr>, <expr><name>AV_PIX_FMT_GRAY16</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>map_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_GRAY16</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>pix_formats</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>map_formats</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>pix_formats</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>format</name></name></expr> ?</condition><then> <expr><name>gray_pix_fmts</name></expr> </then><else>: <expr><name>pix_fmts</name></expr></else></ternary></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>!</operator><operator>(</operator><name>map_formats</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>map_fmts</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><name>pix_formats</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>out_formats</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><name>map_formats</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>out_formats</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><name>map_formats</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>out_formats</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><name>pix_formats</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>in_formats</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>pix_formats</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pix_formats</name><operator>-&gt;</operator><name>formats</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pix_formats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>map_formats</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map_formats</name><operator>-&gt;</operator><name>formats</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map_formats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_REMAP_PLANAR_FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>bits</name></type></parameter>, <parameter><type><name>div</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static int remap_planar##bits##_##name##_slice(AVFilterContext *ctx, void *arg, int jobnr, int nb_jobs) { RemapContext *s = ctx-&gt;priv; const ThreadData *td = arg; const AVFrame *in = td-&gt;in; const AVFrame *xin = td-&gt;xin; const AVFrame *yin = td-&gt;yin; const AVFrame *out = td-&gt;out; const int slice_start = (out-&gt;height * jobnr ) / nb_jobs; const int slice_end = (out-&gt;height * (jobnr+1)) / nb_jobs; const int xlinesize = xin-&gt;linesize[0] / 2; const int ylinesize = yin-&gt;linesize[0] / 2; int x , y, plane; for (plane = 0; plane &lt; td-&gt;nb_planes ; plane++) { const int dlinesize = out-&gt;linesize[plane] / div; const uint##bits##_t *src = (const uint##bits##_t *)in-&gt;data[plane]; uint##bits##_t *dst = (uint##bits##_t *)out-&gt;data[plane] + slice_start * dlinesize; const int slinesize = in-&gt;linesize[plane] / div; const uint16_t *xmap = (const uint16_t *)xin-&gt;data[0] + slice_start * xlinesize; const uint16_t *ymap = (const uint16_t *)yin-&gt;data[0] + slice_start * ylinesize; const int color = s-&gt;fill_color[plane]; for (y = slice_start; y &lt; slice_end; y++) { for (x = 0; x &lt; out-&gt;width; x++) { if (ymap[x] &lt; in-&gt;height &amp;&amp; xmap[x] &lt; in-&gt;width) { dst[x] = src[ymap[x] * slinesize + xmap[x]]; } else { dst[x] = color; } } dst += dlinesize; xmap += xlinesize; ymap += ylinesize; } } return 0; }</cpp:value></cpp:define>









































<macro><name>DEFINE_REMAP_PLANAR_FUNC</name><argument_list>(<argument>nearest</argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_REMAP_PLANAR_FUNC</name><argument_list>(<argument>nearest</argument>, <argument><literal type="number">16</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_REMAP_PACKED_FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>bits</name></type></parameter>, <parameter><type><name>div</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static int remap_packed##bits##_##name##_slice(AVFilterContext *ctx, void *arg, int jobnr, int nb_jobs) { RemapContext *s = ctx-&gt;priv; const ThreadData *td = arg; const AVFrame *in = td-&gt;in; const AVFrame *xin = td-&gt;xin; const AVFrame *yin = td-&gt;yin; const AVFrame *out = td-&gt;out; const int slice_start = (out-&gt;height * jobnr ) / nb_jobs; const int slice_end = (out-&gt;height * (jobnr+1)) / nb_jobs; const int dlinesize = out-&gt;linesize[0] / div; const int slinesize = in-&gt;linesize[0] / div; const int xlinesize = xin-&gt;linesize[0] / 2; const int ylinesize = yin-&gt;linesize[0] / 2; const uint##bits##_t *src = (const uint##bits##_t *)in-&gt;data[0]; uint##bits##_t *dst = (uint##bits##_t *)out-&gt;data[0] + slice_start * dlinesize; const uint16_t *xmap = (const uint16_t *)xin-&gt;data[0] + slice_start * xlinesize; const uint16_t *ymap = (const uint16_t *)yin-&gt;data[0] + slice_start * ylinesize; const int step = td-&gt;step / div; int c, x, y; for (y = slice_start; y &lt; slice_end; y++) { for (x = 0; x &lt; out-&gt;width; x++) { for (c = 0; c &lt; td-&gt;nb_components; c++) { if (ymap[x] &lt; in-&gt;height &amp;&amp; xmap[x] &lt; in-&gt;width) { dst[x * step + c] = src[ymap[x] * slinesize + xmap[x] * step + c]; } else { dst[x * step + c] = s-&gt;fill_color[c]; } } } dst += dlinesize; xmap += xlinesize; ymap += ylinesize; } return 0; }</cpp:value></cpp:define>








































<macro><name>DEFINE_REMAP_PACKED_FUNC</name><argument_list>(<argument>nearest</argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_REMAP_PACKED_FUNC</name><argument_list>(<argument>nearest</argument>, <argument><literal type="number">16</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RemapContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>depth</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_rgb</name> <init>= <expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_RGB</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>factor</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>depth</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>rgba_map</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_fill_rgba_map</name><argument_list>(<argument><expr><name>rgba_map</name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>=</operator> <call><name>av_pix_fmt_count_planes</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_components</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_rgb</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fill_color</name><index>[<expr><name><name>rgba_map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fill_rgba</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fill_color</name><index>[<expr><name><name>rgba_map</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fill_rgba</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fill_color</name><index>[<expr><name><name>rgba_map</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fill_rgba</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fill_color</name><index>[<expr><name><name>rgba_map</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fill_rgba</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fill_color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>RGB_TO_Y_BT709</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fill_rgba</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fill_rgba</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fill_rgba</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fill_color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>RGB_TO_U_BT709</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fill_rgba</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fill_rgba</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fill_rgba</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fill_color</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>RGB_TO_V_BT709</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fill_rgba</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fill_rgba</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fill_rgba</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fill_color</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fill_rgba</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_components</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>remap_slice</name></name> <operator>=</operator> <name>remap_planar8_nearest_slice</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>remap_slice</name></name> <operator>=</operator> <name>remap_packed8_nearest_slice</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_components</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>remap_slice</name></name> <operator>=</operator> <name>remap_planar16_nearest_slice</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>remap_slice</name></name> <operator>=</operator> <name>remap_packed16_nearest_slice</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <call><name>av_get_padded_bits_per_pixel</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process_frame</name><parameter_list>(<parameter><decl><type><name>FFFrameSync</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>fs</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RemapContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>fs</name><operator>-&gt;</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>in</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>xpic</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ypic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_framesync_get_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_framesync_get_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>xpic</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_framesync_get_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ypic</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>is_disabled</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>av_frame_clone</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>ThreadData</name></type> <name>td</name></decl>;</decl_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>in</name></name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td</name><operator>.</operator><name>xin</name></name> <operator>=</operator> <name>xpic</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td</name><operator>.</operator><name>yin</name></name> <operator>=</operator> <name>ypic</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td</name><operator>.</operator><name>out</name></name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td</name><operator>.</operator><name>nb_planes</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td</name><operator>.</operator><name>nb_components</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_components</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td</name><operator>.</operator><name>step</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>step</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>remap_slice</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>td</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><call><name>ff_filter_get_nb_threads</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>time_base</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_output</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RemapContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>srclink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>xlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>ylink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFFrameSyncIn</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xlink</name><operator>-&gt;</operator><name>w</name></name> <operator>!=</operator> <name><name>ylink</name><operator>-&gt;</operator><name>w</name></name> <operator>||</operator> <name><name>xlink</name><operator>-&gt;</operator><name>h</name></name> <operator>!=</operator> <name><name>ylink</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Second input link %s parameters "</literal>
<literal type="string">"(size %dx%d) do not match the corresponding "</literal>
<literal type="string">"third input link %s parameters (%dx%d)\n"</literal></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>input_pads</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>xlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>xlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>input_pads</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>ylink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>ylink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>xlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>xlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <name><name>srclink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>frame_rate</name></name> <operator>=</operator> <name><name>srclink</name><operator>-&gt;</operator><name>frame_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_framesync_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>in</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>time_base</name> <operator>=</operator> <name><name>srclink</name><operator>-&gt;</operator><name>time_base</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>time_base</name> <operator>=</operator> <name><name>xlink</name><operator>-&gt;</operator><name>time_base</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>time_base</name> <operator>=</operator> <name><name>ylink</name><operator>-&gt;</operator><name>time_base</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sync</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>before</name> <operator>=</operator> <name>EXT_STOP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>after</name> <operator>=</operator> <name>EXT_STOP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sync</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>before</name> <operator>=</operator> <name>EXT_NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>after</name> <operator>=</operator> <name>EXT_INFINITY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>sync</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>before</name> <operator>=</operator> <name>EXT_NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>after</name> <operator>=</operator> <name>EXT_INFINITY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>opaque</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>on_event</name></name> <operator>=</operator> <name>process_frame</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_framesync_configure</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>time_base</name></name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>activate</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RemapContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>ff_framesync_activate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RemapContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_framesync_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>remap_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"source"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,
}</block></expr>,
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"xmap"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
}</block></expr>,
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"ymap"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>remap_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_output</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_remap</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"remap"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Remap pixels."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>RemapContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>activate</name> <operator>=</operator> <name>activate</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>remap_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>remap_outputs</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>remap_class</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC</name> <operator>|</operator> <name>AVFILTER_FLAG_SLICE_THREADS</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
