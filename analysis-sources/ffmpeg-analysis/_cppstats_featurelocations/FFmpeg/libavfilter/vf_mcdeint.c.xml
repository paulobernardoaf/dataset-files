<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vf_mcdeint.c">


















































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<enum>enum <name>MCDeintMode</name> <block>{
<decl><name>MODE_FAST</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>MODE_MEDIUM</name></decl>,
<decl><name>MODE_SLOW</name></decl>,
<decl><name>MODE_EXTRA_SLOW</name></decl>,
<decl><name>MODE_NB</name></decl>,
}</block>;</enum>

<enum>enum <name>MCDeintParity</name> <block>{
<decl><name>PARITY_TFF</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 
<decl><name>PARITY_BFF</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 
}</block>;</enum>

<typedef>typedef <type><struct>struct <name>MCDeintContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>parity</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>qp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>enc_ctx</name></decl>;</decl_stmt>
}</block></struct></type> <name>MCDeintContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(MCDeintContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM|AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONST</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>help</name></type></parameter>, <parameter><type><name>val</name></type></parameter>, <parameter><type><name>unit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ name, help, 0, AV_OPT_TYPE_CONST, {.i64=val}, INT_MIN, INT_MAX, FLAGS, unit }</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>mcdeint_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"mode"</literal></expr>, <expr><literal type="string">"set mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>MODE_FAST</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MODE_NB</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name><operator>=</operator><literal type="string">"mode"</literal></expr> }</block></expr>,
<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"fast"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODE_FAST</name></expr></argument>, <argument><expr><literal type="string">"mode"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"medium"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODE_MEDIUM</name></expr></argument>, <argument><expr><literal type="string">"mode"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"slow"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODE_SLOW</name></expr></argument>, <argument><expr><literal type="string">"mode"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"extra_slow"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MODE_EXTRA_SLOW</name></expr></argument>, <argument><expr><literal type="string">"mode"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"parity"</literal></expr>, <expr><literal type="string">"set the assumed picture field parity"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>parity</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>PARITY_BFF</name></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"parity"</literal></expr> }</block></expr>,
<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"tff"</literal></expr></argument>, <argument><expr><literal type="string">"assume top field first"</literal></expr></argument>, <argument><expr><name>PARITY_TFF</name></expr></argument>, <argument><expr><literal type="string">"parity"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"bff"</literal></expr></argument>, <argument><expr><literal type="string">"assume bottom field first"</literal></expr></argument>, <argument><expr><name>PARITY_BFF</name></expr></argument>, <argument><expr><literal type="string">"parity"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"qp"</literal></expr>, <expr><literal type="string">"set qp"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>qp</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>mcdeint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_props</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MCDeintContext</name> <modifier>*</modifier></type><name>mcdeint</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodec</name> <modifier>*</modifier></type><name>enc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>enc_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>opts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>enc</name> <operator>=</operator> <call><name>avcodec_find_encoder</name><argument_list>(<argument><expr><name>AV_CODEC_ID_SNOW</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Snow encoder is not enabled in libavcodec\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mcdeint</name><operator>-&gt;</operator><name>enc_ctx</name></name> <operator>=</operator> <call><name>avcodec_alloc_context3</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mcdeint</name><operator>-&gt;</operator><name>enc_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>enc_ctx</name> <operator>=</operator> <name><name>mcdeint</name><operator>-&gt;</operator><name>enc_ctx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">25</literal></expr>}</block></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>gop_size</name></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>max_b_frames</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>AV_CODEC_FLAG_QSCALE</name> <operator>|</operator> <name>AV_CODEC_FLAG_LOW_DELAY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>strict_std_compliance</name></name> <operator>=</operator> <name>FF_COMPLIANCE_EXPERIMENTAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>global_quality</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>me_cmp</name></name> <operator>=</operator> <name><name>enc_ctx</name><operator>-&gt;</operator><name>me_sub_cmp</name></name> <operator>=</operator> <name>FF_CMP_SAD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>mb_cmp</name></name> <operator>=</operator> <name>FF_CMP_SSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"memc_only"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"no_bitstream"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>mcdeint</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>MODE_EXTRA_SLOW</name></expr>:</case>
<expr_stmt><expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>refs</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<case>case <expr><name>MODE_SLOW</name></expr>:</case>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"motion_est"</literal></expr></argument>, <argument><expr><literal type="string">"iter"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>MODE_MEDIUM</name></expr>:</case>
<expr_stmt><expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_CODEC_FLAG_4MV</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>dia_size</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<case>case <expr><name>MODE_FAST</name></expr>:</case>
<expr_stmt><expr><name><name>enc_ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_CODEC_FLAG_QPEL</name></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_open2</name><argument_list>(<argument><expr><name>enc_ctx</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MCDeintContext</name> <modifier>*</modifier></type><name>mcdeint</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avcodec_free_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mcdeint</name><operator>-&gt;</operator><name>enc_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>inpic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MCDeintContext</name> <modifier>*</modifier></type><name>mcdeint</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>outpic</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>frame_dec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>got_frame</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>outpic</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>outpic</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inpic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>outpic</name></expr></argument>, <argument><expr><name>inpic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inpic</name><operator>-&gt;</operator><name>quality</name></name> <operator>=</operator> <name><name>mcdeint</name><operator>-&gt;</operator><name>qp</name></name> <operator>*</operator> <name>FF_QP2LAMBDA</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_encode_video2</name><argument_list>(<argument><expr><name><name>mcdeint</name><operator>-&gt;</operator><name>enc_ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><name>inpic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>got_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>frame_dec</name> <operator>=</operator> <name><name>mcdeint</name><operator>-&gt;</operator><name>enc_ctx</name><operator>-&gt;</operator><name>coded_frame</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>is_chroma</name> <init>= <expr><operator>!</operator><operator>!</operator><name>i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name>is_chroma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>is_chroma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fils</name> <init>= <expr><name><name>frame_dec</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>srcs</name> <init>= <expr><name><name>inpic</name> <operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dsts</name> <init>= <expr><name><name>outpic</name> <operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>y</name> <operator>^</operator> <name><name>mcdeint</name><operator>-&gt;</operator><name>parity</name></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>filp</name> <init>= <expr><operator>&amp;</operator><name><name>frame_dec</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>fils</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>srcp</name> <init>= <expr><operator>&amp;</operator><name><name>inpic</name> <operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>srcs</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstp</name> <init>= <expr><operator>&amp;</operator><name><name>outpic</name> <operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>dsts</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <name>h</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>is_edge</name> <init>= <expr><name><name>x</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">3</literal> <operator>||</operator> <name>x</name></expr></argument> &gt;</argument_list></name> <name>w</name><operator>-</operator><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>diff0</name> <init>= <expr><name><name>filp</name><index>[<expr><operator>-</operator><name>fils</name></expr>]</index></name> <operator>-</operator> <name><name>srcp</name><index>[<expr><operator>-</operator><name>srcs</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>diff1</name> <init>= <expr><name><name>filp</name><index>[<expr><operator>+</operator><name>fils</name></expr>]</index></name> <operator>-</operator> <name><name>srcp</name><index>[<expr><operator>+</operator><name>srcs</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>temp</name> <init>= <expr><name><name>filp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DELTA</name><parameter_list>(<parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>av_clip(j, -x, w-1-x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_SCORE_EDGE</name><parameter_list>(<parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>FFABS(srcp[-srcs+DELTA(-1+(j))] - srcp[+srcs+DELTA(-1-(j))])+FFABS(srcp[-srcs+DELTA(j) ] - srcp[+srcs+DELTA( -(j))])+FFABS(srcp[-srcs+DELTA(1+(j)) ] - srcp[+srcs+DELTA( 1-(j))])</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_SCORE</name><parameter_list>(<parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>FFABS(srcp[-srcs-1+(j)] - srcp[+srcs-1-(j)])+FFABS(srcp[-srcs +(j)] - srcp[+srcs -(j)])+FFABS(srcp[-srcs+1+(j)] - srcp[+srcs+1-(j)])</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_EDGE</name><parameter_list>(<parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>{ int score = GET_SCORE_EDGE(j);if (score &lt; spatial_score){spatial_score = score;diff0 = filp[-fils+DELTA(j)] - srcp[-srcs+DELTA(j)];diff1 = filp[+fils+DELTA(-(j))] - srcp[+srcs+DELTA(-(j))];</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK</name><parameter_list>(<parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>{ int score = GET_SCORE(j);if (score &lt; spatial_score){spatial_score= score;diff0 = filp[-fils+(j)] - srcp[-srcs+(j)];diff1 = filp[+fils-(j)] - srcp[+srcs-(j)];</cpp:value></cpp:define>






<if_stmt><if>if <condition>(<expr><name>is_edge</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>spatial_score</name> <init>= <expr><call><name>GET_SCORE_EDGE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<macro><name>CHECK_EDGE</name><argument_list>(<argument>-<literal type="number">1</literal></argument>)</argument_list></macro> <macro><name>CHECK_EDGE</name><argument_list>(<argument>-<literal type="number">2</literal></argument>)</argument_list></macro> </block_content>}</block></if></if_stmt></block_content>}</block></if></if_stmt> </block_content>}</block></for></block_content>}</block></if></if_stmt>
<macro><name>CHECK_EDGE</name><argument_list>( <argument><literal type="number">1</literal></argument>)</argument_list></macro> <macro><name>CHECK_EDGE</name><argument_list>( <argument><literal type="number">2</literal></argument>)</argument_list></macro> </block_content>}</block></for></block_content>}</block></for> </block_content>}</block></function>}
} <if_stmt><else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>spatial_score</name> <init>= <expr><call><name>GET_SCORE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<macro><name>CHECK</name><argument_list>(<argument>-<literal type="number">1</literal></argument>)</argument_list></macro> <macro><name>CHECK</name><argument_list>(<argument>-<literal type="number">2</literal></argument>)</argument_list></macro> </block_content>}</block></else></if_stmt>} }}
CHECK<expr_stmt><expr><operator>(</operator> <literal type="number">1</literal><operator>)</operator> <macro><name>CHECK</name><argument_list>( <argument><literal type="number">2</literal></argument>)</argument_list></macro></expr></expr_stmt> }} }}
}


if <expr_stmt><expr><operator>(</operator><name>diff0</name> <operator>+</operator> <name>diff1</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator>
<name>temp</name> <operator>-=</operator> <operator>(</operator><name>diff0</name> <operator>+</operator> <name>diff1</name> <operator>-</operator> <call><name>FFABS</name><argument_list>(<argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name>diff0</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>diff1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>temp</name> <operator>-=</operator> <operator>(</operator><name>diff0</name> <operator>+</operator> <name>diff1</name> <operator>+</operator> <call><name>FFABS</name><argument_list>(<argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name>diff0</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>diff1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>filp</name> <operator>=</operator> <operator>*</operator><name>dstp</name> <operator>=</operator> <ternary><condition><expr><name>temp</name> <operator>&gt;</operator> <literal type="number">255U</literal></expr> ?</condition><then> <expr><operator>~</operator><operator>(</operator><name>temp</name><operator>&gt;&gt;</operator><literal type="number">31</literal><operator>)</operator></expr> </then><else>: <expr><name>temp</name></expr></else></ternary></expr>;</expr_stmt>
} else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dstp</name> <operator>=</operator> <operator>*</operator><name>filp</name></expr>;</expr_stmt>
</block_content>}</block>
}
}
}

for <expr_stmt><expr><operator>(</operator><name>y</name> <operator>=</operator> <literal type="number">0</literal>; <name>y</name> <operator>&lt;</operator> <name>h</name>; <name>y</name><operator>++</operator><operator>)</operator> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>y</name> <operator>^</operator> <name><name>mcdeint</name><operator>-&gt;</operator><name>parity</name></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>frame_dec</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>fils</name></expr>]</index></name> <operator>=</operator>
<name><name>outpic</name> <operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>dsts</name></expr>]</index></name> <operator>=</operator> <name><name>inpic</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>srcs</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt/></block_content></block></for></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
}
}
}
mcdeint<expr_stmt><expr><operator>-&gt;</operator><name>parity</name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inpic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outpic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>outpic</name></expr></argument>)</argument_list></call></expr>;</return>
}

static <decl_stmt><decl><type><specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>mcdeint_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_props</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>mcdeint_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_mcdeint</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mcdeint"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Apply motion compensating deinterlacing."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MCDeintContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>mcdeint_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>mcdeint_outputs</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>mcdeint_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
