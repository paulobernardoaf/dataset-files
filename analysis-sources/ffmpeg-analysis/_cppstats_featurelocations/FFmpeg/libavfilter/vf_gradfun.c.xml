<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vf_gradfun.c">

































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gradfun.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></expr></argument>, <argument><expr><name>dither</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index> <operator>=</operator> <block>{
<expr><block>{<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x60</literal></expr>,<expr><literal type="number">0x18</literal></expr>,<expr><literal type="number">0x78</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x66</literal></expr>,<expr><literal type="number">0x1E</literal></expr>,<expr><literal type="number">0x7E</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x40</literal></expr>,<expr><literal type="number">0x20</literal></expr>,<expr><literal type="number">0x58</literal></expr>,<expr><literal type="number">0x38</literal></expr>,<expr><literal type="number">0x46</literal></expr>,<expr><literal type="number">0x26</literal></expr>,<expr><literal type="number">0x5E</literal></expr>,<expr><literal type="number">0x3E</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x10</literal></expr>,<expr><literal type="number">0x70</literal></expr>,<expr><literal type="number">0x08</literal></expr>,<expr><literal type="number">0x68</literal></expr>,<expr><literal type="number">0x16</literal></expr>,<expr><literal type="number">0x76</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x6E</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x50</literal></expr>,<expr><literal type="number">0x30</literal></expr>,<expr><literal type="number">0x48</literal></expr>,<expr><literal type="number">0x28</literal></expr>,<expr><literal type="number">0x56</literal></expr>,<expr><literal type="number">0x36</literal></expr>,<expr><literal type="number">0x4E</literal></expr>,<expr><literal type="number">0x2E</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x64</literal></expr>,<expr><literal type="number">0x1C</literal></expr>,<expr><literal type="number">0x7C</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x62</literal></expr>,<expr><literal type="number">0x1A</literal></expr>,<expr><literal type="number">0x7A</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x44</literal></expr>,<expr><literal type="number">0x24</literal></expr>,<expr><literal type="number">0x5C</literal></expr>,<expr><literal type="number">0x3C</literal></expr>,<expr><literal type="number">0x42</literal></expr>,<expr><literal type="number">0x22</literal></expr>,<expr><literal type="number">0x5A</literal></expr>,<expr><literal type="number">0x3A</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x14</literal></expr>,<expr><literal type="number">0x74</literal></expr>,<expr><literal type="number">0x0C</literal></expr>,<expr><literal type="number">0x6C</literal></expr>,<expr><literal type="number">0x12</literal></expr>,<expr><literal type="number">0x72</literal></expr>,<expr><literal type="number">0x0A</literal></expr>,<expr><literal type="number">0x6A</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x54</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x4C</literal></expr>,<expr><literal type="number">0x2C</literal></expr>,<expr><literal type="number">0x52</literal></expr>,<expr><literal type="number">0x32</literal></expr>,<expr><literal type="number">0x4A</literal></expr>,<expr><literal type="number">0x2A</literal></expr>}</block></expr>,
}</block></expr>;</expr_stmt>

<function><type><name>void</name></type> <name>ff_gradfun_filter_line_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>dc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thresh</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>dithers</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>dc</name> <operator>+=</operator> <name>x</name> <operator>&amp;</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pix</name> <init>= <expr><name><name>src</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>delta</name> <init>= <expr><name><name>dc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>pix</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>thresh</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">127</literal> <operator>-</operator> <name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>m</name> <operator>*</operator> <name>m</name> <operator>*</operator> <name>delta</name> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pix</name> <operator>+=</operator> <name>m</name> <operator>+</operator> <name><name>dithers</name><index>[<expr><name>x</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>pix</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_gradfun_blur_line_c</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dc</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>buf1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_linesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>old</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>buf1</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name> <operator>+</operator> <name>src_linesize</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>src_linesize</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>old</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dc</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>v</name> <operator>-</operator> <name>old</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter</name><parameter_list>(<parameter><decl><type><name>GradFunContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_linesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_linesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bstride</name> <init>= <expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>dc_factor</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>r</name> <operator>*</operator> <name>r</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dc</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>bstride</name> <operator>+</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>thresh</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>thresh</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>bstride</name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>r</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>blur_line</name></name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>bstride</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <operator>(</operator><name>y</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>bstride</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>y</name> <operator>*</operator> <name>src_linesize</name></expr></argument>, <argument><expr><name>src_linesize</name></expr></argument>, <argument><expr><name>width</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <name>height</name> <operator>-</operator> <name>r</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mod</name> <init>= <expr><operator>(</operator><operator>(</operator><name>y</name> <operator>+</operator> <name>r</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name>r</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>buf0</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>mod</name> <operator>*</operator> <name>bstride</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>buf1</name> <init>= <expr><name>buf</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>mod</name></expr> ?</condition><then> <expr><name>mod</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary><operator>)</operator> <operator>*</operator> <name>bstride</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>blur_line</name></name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>buf0</name></expr></argument>, <argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <operator>(</operator><name>y</name> <operator>+</operator> <name>r</name><operator>)</operator> <operator>*</operator> <name>src_linesize</name></expr></argument>, <argument><expr><name>src_linesize</name></expr></argument>, <argument><expr><name>width</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>r</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>v</name> <operator>+=</operator> <name><name>dc</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>+=</operator> <name><name>dc</name><index>[<expr><name>x</name></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><name>x</name><operator>-</operator><name>r</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dc</name><index>[<expr><name>x</name><operator>-</operator><name>r</name></expr>]</index></name> <operator>=</operator> <name>v</name> <operator>*</operator> <name>dc_factor</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <operator>(</operator><name>width</name> <operator>+</operator> <name>r</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dc</name><index>[<expr><name>x</name><operator>-</operator><name>r</name></expr>]</index></name> <operator>=</operator> <name>v</name> <operator>*</operator> <name>dc_factor</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <operator>-</operator><name>r</name> <operator>/</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dc</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>dc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>==</operator> <name>r</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>r</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>filter_line</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>dst_linesize</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>src_linesize</name></expr></argument>, <argument><expr><name>dc</name> <operator>-</operator> <name>r</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>thresh</name></expr></argument>, <argument><expr><name><name>dither</name><index>[<expr><name>y</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>filter_line</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>dst_linesize</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>src_linesize</name></expr></argument>, <argument><expr><name>dc</name> <operator>-</operator> <name>r</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>thresh</name></expr></argument>, <argument><expr><name><name>dither</name><index>[<expr><name>y</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>y</name> <operator>&gt;=</operator> <name>height</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>filter_line</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>dst_linesize</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>src_linesize</name></expr></argument>, <argument><expr><name>dc</name> <operator>-</operator> <name>r</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>thresh</name></expr></argument>, <argument><expr><name><name>dither</name><index>[<expr><name>y</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>y</name> <operator>&gt;=</operator> <name>height</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GradFunContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>thresh</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>strength</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>radius</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>radius</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>blur_line</name></name> <operator>=</operator> <name>ff_gradfun_blur_line_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter_line</name></name> <operator>=</operator> <name>ff_gradfun_filter_line_c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_gradfun_init_x86</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"threshold:%.2f radius:%d\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>strength</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>radius</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GradFunContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_YUV410P</name></expr>, <expr><name>AV_PIX_FMT_YUV420P</name></expr>,
<expr><name>AV_PIX_FMT_GRAY8</name></expr>, <expr><name>AV_PIX_FMT_YUV444P</name></expr>,
<expr><name>AV_PIX_FMT_YUV422P</name></expr>, <expr><name>AV_PIX_FMT_YUV411P</name></expr>,
<expr><name>AV_PIX_FMT_YUV440P</name></expr>,
<expr><name>AV_PIX_FMT_GBRP</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GradFunContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hsub</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vsub</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><operator>(</operator><call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>radius</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_w</name></name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name>hsub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_h</name></name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>vsub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_r</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>radius</name></name> <operator>&gt;&gt;</operator> <name>hsub</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>radius</name></name> <operator>&gt;&gt;</operator> <name>vsub</name><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GradFunContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>direct</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_frame_is_writable</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>direct</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>direct</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>radius</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>chroma_w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>chroma_h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>chroma_r</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>r</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>filter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name> <operator>!=</operator> <name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_image_copy_plane</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>direct</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(GradFunContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM|AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>gradfun_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"strength"</literal></expr>, <expr><literal type="string">"The maximum amount by which the filter will change any one pixel."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>strength</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">1.2</literal></expr> }</block></expr>, <expr><literal type="number">0.51</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"radius"</literal></expr>, <expr><literal type="string">"The neighborhood to fit the gradient to."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>radius</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">16</literal></expr> }</block></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>gradfun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>avfilter_vf_gradfun_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>avfilter_vf_gradfun_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_gradfun</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"gradfun"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Debands video quickly using gradients."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GradFunContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>gradfun_class</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>avfilter_vf_gradfun_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>avfilter_vf_gradfun_outputs</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
