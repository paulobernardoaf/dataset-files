<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\af_atempo.c">







































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/avfft.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/eval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/samplefmt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>




<typedef>typedef <type><struct>struct <name>AudioFragment</name> <block>{



<decl_stmt><decl><type><name>int64_t</name></type> <name><name>position</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>nsamples</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>xdat</name></decl>;</decl_stmt>
}</block></struct></type> <name>AudioFragment</name>;</typedef>




<typedef>typedef <type><enum>enum <block>{
<decl><name>YAE_LOAD_FRAGMENT</name></decl>,
<decl><name>YAE_ADJUST_POSITION</name></decl>,
<decl><name>YAE_RELOAD_FRAGMENT</name></decl>,
<decl><name>YAE_OUTPUT_OVERLAP_ADD</name></decl>,
<decl><name>YAE_FLUSH_OUTPUT</name></decl>,
}</block></enum></type> <name>FilterState</name>;</typedef>




<typedef>typedef <type><struct>struct <name>ATempoContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>ring</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>head</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tail</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int64_t</name></type> <name><name>position</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int64_t</name></type> <name>start_pts</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>format</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>channels</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>stride</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>window</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>hann</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>double</name></type> <name>tempo</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int64_t</name></type> <name><name>origin</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>AudioFragment</name></type> <name><name>frag</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>nfrag</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>FilterState</name></type> <name>state</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>RDFTContext</name> <modifier>*</modifier></type><name>real_to_complex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RDFTContext</name> <modifier>*</modifier></type><name>complex_to_real</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>correlation</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>nsamples_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>nsamples_out</name></decl>;</decl_stmt>
}</block></struct></type> <name>ATempoContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YAE_ATEMPO_MIN</name></cpp:macro> <cpp:value>0.5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YAE_ATEMPO_MAX</name></cpp:macro> <cpp:value>100.0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(ATempoContext, x)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>atempo_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"tempo"</literal></expr>, <expr><literal type="string">"set tempo scale factor"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>tempo</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">1.0</literal></expr> }</block></expr>,
<expr><name>YAE_ATEMPO_MIN</name></expr>,
<expr><name>YAE_ATEMPO_MAX</name></expr>,
<expr><name>AV_OPT_FLAG_AUDIO_PARAM</name> <operator>|</operator> <name>AV_OPT_FLAG_FILTERING_PARAM</name> <operator>|</operator> <name>AV_OPT_FLAG_RUNTIME_PARAM</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>atempo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>AudioFragment</name> <modifier>*</modifier></type><name>yae_curr_frag</name><parameter_list>(<parameter><decl><type><name>ATempoContext</name> <modifier>*</modifier></type><name>atempo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name><name>atempo</name><operator>-&gt;</operator><name>frag</name><index>[<expr><name><name>atempo</name><operator>-&gt;</operator><name>nfrag</name></name> <operator>%</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>AudioFragment</name> <modifier>*</modifier></type><name>yae_prev_frag</name><parameter_list>(<parameter><decl><type><name>ATempoContext</name> <modifier>*</modifier></type><name>atempo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name><name>atempo</name><operator>-&gt;</operator><name>frag</name><index>[<expr><operator>(</operator><name><name>atempo</name><operator>-&gt;</operator><name>nfrag</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>yae_clear</name><parameter_list>(<parameter><decl><type><name>ATempoContext</name> <modifier>*</modifier></type><name>atempo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>nfrag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YAE_LOAD_FRAGMENT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>start_pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>origin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>origin</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>frag</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>frag</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>frag</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nsamples</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>frag</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>frag</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>frag</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>nsamples</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>




<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>frag</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>atempo</name><operator>-&gt;</operator><name>window</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>frag</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>atempo</name><operator>-&gt;</operator><name>window</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>atempo</name><operator>-&gt;</operator><name>dst_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>dst_end</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>nsamples_in</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>nsamples_out</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>yae_release_buffers</name><parameter_list>(<parameter><decl><type><name>ATempoContext</name> <modifier>*</modifier></type><name>atempo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>yae_clear</name><argument_list>(<argument><expr><name>atempo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>atempo</name><operator>-&gt;</operator><name>frag</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>atempo</name><operator>-&gt;</operator><name>frag</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>atempo</name><operator>-&gt;</operator><name>frag</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>xdat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>atempo</name><operator>-&gt;</operator><name>frag</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>xdat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>atempo</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>atempo</name><operator>-&gt;</operator><name>hann</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>atempo</name><operator>-&gt;</operator><name>correlation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_rdft_end</name><argument_list>(<argument><expr><name><name>atempo</name><operator>-&gt;</operator><name>real_to_complex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>real_to_complex</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_rdft_end</name><argument_list>(<argument><expr><name><name>atempo</name><operator>-&gt;</operator><name>complex_to_real</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>complex_to_real</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RE_MALLOC_OR_FAIL</name><parameter_list>(<parameter><type><name>field</name></type></parameter>, <parameter><type><name>field_size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { av_freep(&amp;field); field = av_malloc(field_size); if (!field) { yae_release_buffers(atempo); return AVERROR(ENOMEM); } } while (0)</cpp:value></cpp:define>













<function><type><specifier>static</specifier> <name>int</name></type> <name>yae_reset</name><parameter_list>(<parameter><decl><type><name>ATempoContext</name> <modifier>*</modifier></type><name>atempo</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>format</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sample_rate</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sample_size</name> <init>= <expr><call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>nlevels</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>stride</name></name> <operator>=</operator> <name>sample_size</name> <operator>*</operator> <name>channels</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>window</name></name> <operator>=</operator> <name>sample_rate</name> <operator>/</operator> <literal type="number">24</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>nlevels</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name><name>atempo</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pot</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>nlevels</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>pot</name> <operator>&lt;=</operator> <name><name>atempo</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pot</name> <operator>&lt;</operator> <name><name>atempo</name><operator>-&gt;</operator><name>window</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>window</name></name> <operator>=</operator> <name>pot</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nlevels</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>RE_MALLOC_OR_FAIL</name><argument_list>(<argument><expr><name><name>atempo</name><operator>-&gt;</operator><name>frag</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>, <argument><expr><name><name>atempo</name><operator>-&gt;</operator><name>window</name></name> <operator>*</operator> <name><name>atempo</name><operator>-&gt;</operator><name>stride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RE_MALLOC_OR_FAIL</name><argument_list>(<argument><expr><name><name>atempo</name><operator>-&gt;</operator><name>frag</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>, <argument><expr><name><name>atempo</name><operator>-&gt;</operator><name>window</name></name> <operator>*</operator> <name><name>atempo</name><operator>-&gt;</operator><name>stride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RE_MALLOC_OR_FAIL</name><argument_list>(<argument><expr><name><name>atempo</name><operator>-&gt;</operator><name>frag</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>xdat</name></expr></argument>, <argument><expr><name><name>atempo</name><operator>-&gt;</operator><name>window</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FFTComplex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RE_MALLOC_OR_FAIL</name><argument_list>(<argument><expr><name><name>atempo</name><operator>-&gt;</operator><name>frag</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>xdat</name></expr></argument>, <argument><expr><name><name>atempo</name><operator>-&gt;</operator><name>window</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FFTComplex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>av_rdft_end</name><argument_list>(<argument><expr><name><name>atempo</name><operator>-&gt;</operator><name>real_to_complex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>real_to_complex</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_rdft_end</name><argument_list>(<argument><expr><name><name>atempo</name><operator>-&gt;</operator><name>complex_to_real</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>complex_to_real</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>real_to_complex</name></name> <operator>=</operator> <call><name>av_rdft_init</name><argument_list>(<argument><expr><name>nlevels</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>DFT_R2C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>atempo</name><operator>-&gt;</operator><name>real_to_complex</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>yae_release_buffers</name><argument_list>(<argument><expr><name>atempo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>complex_to_real</name></name> <operator>=</operator> <call><name>av_rdft_init</name><argument_list>(<argument><expr><name>nlevels</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>IDFT_C2R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>atempo</name><operator>-&gt;</operator><name>complex_to_real</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>yae_release_buffers</name><argument_list>(<argument><expr><name>atempo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>RE_MALLOC_OR_FAIL</name><argument_list>(<argument><expr><name><name>atempo</name><operator>-&gt;</operator><name>correlation</name></name></expr></argument>, <argument><expr><name><name>atempo</name><operator>-&gt;</operator><name>window</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FFTComplex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>ring</name></name> <operator>=</operator> <name><name>atempo</name><operator>-&gt;</operator><name>window</name></name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RE_MALLOC_OR_FAIL</name><argument_list>(<argument><expr><name><name>atempo</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>atempo</name><operator>-&gt;</operator><name>ring</name></name> <operator>*</operator> <name><name>atempo</name><operator>-&gt;</operator><name>stride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>RE_MALLOC_OR_FAIL</name><argument_list>(<argument><expr><name><name>atempo</name><operator>-&gt;</operator><name>hann</name></name></expr></argument>, <argument><expr><name><name>atempo</name><operator>-&gt;</operator><name>window</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>atempo</name><operator>-&gt;</operator><name>window</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>t</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><name>i</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name><name>atempo</name><operator>-&gt;</operator><name>window</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>h</name> <init>= <expr><literal type="number">0.5</literal> <operator>*</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <call><name>cos</name><argument_list>(<argument><expr><literal type="number">2.0</literal> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <name>t</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>hann</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>h</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>yae_clear</name><argument_list>(<argument><expr><name>atempo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>yae_update</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AudioFragment</name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ATempoContext</name> <modifier>*</modifier></type><name>atempo</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>yae_prev_frag</name><argument_list>(<argument><expr><name>atempo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>origin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>prev</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>atempo</name><operator>-&gt;</operator><name>window</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>origin</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>prev</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>atempo</name><operator>-&gt;</operator><name>window</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yae_init_xdat</name><parameter_list>(<parameter><type><name>scalar_type</name></type></parameter>, <parameter><type><name>scalar_max</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { const uint8_t *src_end = src + frag-&gt;nsamples * atempo-&gt;channels * sizeof(scalar_type); FFTSample *xdat = frag-&gt;xdat; scalar_type tmp; if (atempo-&gt;channels == 1) { for (; src &lt; src_end; xdat++) { tmp = *(const scalar_type *)src; src += sizeof(scalar_type); *xdat = (FFTSample)tmp; } } else { FFTSample s, max, ti, si; int i; for (; src &lt; src_end; xdat++) { tmp = *(const scalar_type *)src; src += sizeof(scalar_type); max = (FFTSample)tmp; s = FFMIN((FFTSample)scalar_max, (FFTSample)fabsf(max)); for (i = 1; i &lt; atempo-&gt;channels; i++) { tmp = *(const scalar_type *)src; src += sizeof(scalar_type); ti = (FFTSample)tmp; si = FFMIN((FFTSample)scalar_max, (FFTSample)fabsf(ti)); if (s &lt; si) { s = si; max = ti; } } *xdat = max; } } } while (0)</cpp:value></cpp:define>

















































<function><type><specifier>static</specifier> <name>void</name></type> <name>yae_downmix</name><parameter_list>(<parameter><decl><type><name>ATempoContext</name> <modifier>*</modifier></type><name>atempo</name></decl></parameter>, <parameter><decl><type><name>AudioFragment</name> <modifier>*</modifier></type><name>frag</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>frag</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>frag</name><operator>-&gt;</operator><name>xdat</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FFTComplex</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>atempo</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>atempo</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_U8</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>yae_init_xdat</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>atempo</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_S16</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>yae_init_xdat</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><literal type="number">32767</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>atempo</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>yae_init_xdat</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><literal type="number">2147483647</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>atempo</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>yae_init_xdat</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>atempo</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_DBL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>yae_init_xdat</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type> <name>yae_load_data</name><parameter_list>(<parameter><decl><type><name>ATempoContext</name> <modifier>*</modifier></type><name>atempo</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src_ref</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_end</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>stop_here</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>*</operator><name>src_ref</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>read_size</name> <init>= <expr><name>stop_here</name> <operator>-</operator> <name><name>atempo</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>stop_here</name> <operator>&lt;=</operator> <name><name>atempo</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>read_size</name> <operator>&lt;=</operator> <name><name>atempo</name><operator>-&gt;</operator><name>ring</name></name> <operator>||</operator> <name><name>atempo</name><operator>-&gt;</operator><name>tempo</name></name> <operator>&gt;</operator> <literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>atempo</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name>stop_here</name> <operator>&amp;&amp;</operator> <name>src</name> <operator>&lt;</operator> <name>src_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>src_samples</name> <init>= <expr><operator>(</operator><name>src_end</name> <operator>-</operator> <name>src</name><operator>)</operator> <operator>/</operator> <name><name>atempo</name><operator>-&gt;</operator><name>stride</name></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>nsamples</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>read_size</name></expr></argument>, <argument><expr><name>src_samples</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>na</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nsamples</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>nsamples</name></expr></argument>, <argument><expr><name><name>atempo</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>na</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>nsamples</name></expr></argument>, <argument><expr><name><name>atempo</name><operator>-&gt;</operator><name>ring</name></name> <operator>-</operator> <name><name>atempo</name><operator>-&gt;</operator><name>tail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nb</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>nsamples</name> <operator>-</operator> <name>na</name></expr></argument>, <argument><expr><name><name>atempo</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>na</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>atempo</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>atempo</name><operator>-&gt;</operator><name>tail</name></name> <operator>*</operator> <name><name>atempo</name><operator>-&gt;</operator><name>stride</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>na</name> <operator>*</operator> <name><name>atempo</name><operator>-&gt;</operator><name>stride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>na</name> <operator>*</operator> <name><name>atempo</name><operator>-&gt;</operator><name>stride</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>na</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>atempo</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name>na</name></expr></argument>, <argument><expr><name><name>atempo</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <operator>(</operator><name><name>atempo</name><operator>-&gt;</operator><name>tail</name></name> <operator>+</operator> <name>na</name><operator>)</operator> <operator>%</operator> <name><name>atempo</name><operator>-&gt;</operator><name>ring</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator>
<ternary><condition><expr><name><name>atempo</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <name><name>atempo</name><operator>-&gt;</operator><name>ring</name></name></expr> ?</condition><then>
<expr><name><name>atempo</name><operator>-&gt;</operator><name>tail</name></name> <operator>-</operator> <name><name>atempo</name><operator>-&gt;</operator><name>size</name></name></expr> </then><else>:
<expr><name><name>atempo</name><operator>-&gt;</operator><name>tail</name></name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nb</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name><name>atempo</name><operator>-&gt;</operator><name>buffer</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>nb</name> <operator>*</operator> <name><name>atempo</name><operator>-&gt;</operator><name>stride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>nb</name> <operator>*</operator> <name><name>atempo</name><operator>-&gt;</operator><name>stride</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>nb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>atempo</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name>nb</name></expr></argument>, <argument><expr><name><name>atempo</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <operator>(</operator><name><name>atempo</name><operator>-&gt;</operator><name>tail</name></name> <operator>+</operator> <name>nb</name><operator>)</operator> <operator>%</operator> <name><name>atempo</name><operator>-&gt;</operator><name>ring</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator>
<ternary><condition><expr><name><name>atempo</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <name><name>atempo</name><operator>-&gt;</operator><name>ring</name></name></expr> ?</condition><then>
<expr><name><name>atempo</name><operator>-&gt;</operator><name>tail</name></name> <operator>-</operator> <name><name>atempo</name><operator>-&gt;</operator><name>size</name></name></expr> </then><else>:
<expr><name><name>atempo</name><operator>-&gt;</operator><name>tail</name></name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>


<expr_stmt><expr><operator>*</operator><name>src_ref</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>atempo</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <name>stop_here</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name><name>atempo</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>stop_here</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type> <name>yae_load_frag</name><parameter_list>(<parameter><decl><type><name>ATempoContext</name> <modifier>*</modifier></type><name>atempo</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src_ref</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_end</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>AudioFragment</name> <modifier>*</modifier></type><name>frag</name> <init>= <expr><call><name>yae_curr_frag</name><argument_list>(<argument><expr><name>atempo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>missing</name></decl>, <decl><type ref="prev"/><name>start</name></decl>, <decl><type ref="prev"/><name>zeros</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>nsamples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i0</name></decl>, <decl><type ref="prev"/><name>i1</name></decl>, <decl><type ref="prev"/><name>n0</name></decl>, <decl><type ref="prev"/><name>n1</name></decl>, <decl><type ref="prev"/><name>na</name></decl>, <decl><type ref="prev"/><name>nb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>stop_here</name> <init>= <expr><name><name>frag</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>atempo</name><operator>-&gt;</operator><name>window</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>src_ref</name> <operator>&amp;&amp;</operator> <call><name>yae_load_data</name><argument_list>(<argument><expr><name>atempo</name></expr></argument>, <argument><expr><name>src_ref</name></expr></argument>, <argument><expr><name>src_end</name></expr></argument>, <argument><expr><name>stop_here</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>missing</name> <operator>=</operator>
<ternary><condition><expr><name>stop_here</name> <operator>&gt;</operator> <name><name>atempo</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then>
<expr><name>stop_here</name> <operator>-</operator> <name><name>atempo</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>nsamples</name> <operator>=</operator>
<ternary><condition><expr><name>missing</name> <operator>&lt;</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>atempo</name><operator>-&gt;</operator><name>window</name></name></expr> ?</condition><then>
<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>atempo</name><operator>-&gt;</operator><name>window</name></name> <operator>-</operator> <name>missing</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>


<expr_stmt><expr><name><name>frag</name><operator>-&gt;</operator><name>nsamples</name></name> <operator>=</operator> <name>nsamples</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>frag</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>atempo</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>atempo</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>zeros</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frag</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name>start</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>zeros</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>start</name> <operator>-</operator> <name><name>frag</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>nsamples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>zeros</name> <operator>!=</operator> <name>nsamples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zeros</name> <operator>*</operator> <name><name>atempo</name><operator>-&gt;</operator><name>stride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>zeros</name> <operator>*</operator> <name><name>atempo</name><operator>-&gt;</operator><name>stride</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>zeros</name> <operator>==</operator> <name>nsamples</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>na</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>atempo</name><operator>-&gt;</operator><name>head</name></name> <operator>&lt;</operator> <name><name>atempo</name><operator>-&gt;</operator><name>tail</name></name></expr> ?</condition><then>
<expr><name><name>atempo</name><operator>-&gt;</operator><name>tail</name></name> <operator>-</operator> <name><name>atempo</name><operator>-&gt;</operator><name>head</name></name></expr> </then><else>:
<expr><name><name>atempo</name><operator>-&gt;</operator><name>ring</name></name> <operator>-</operator> <name><name>atempo</name><operator>-&gt;</operator><name>head</name></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>nb</name> <operator>=</operator> <ternary><condition><expr><name><name>atempo</name><operator>-&gt;</operator><name>head</name></name> <operator>&lt;</operator> <name><name>atempo</name><operator>-&gt;</operator><name>tail</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>atempo</name><operator>-&gt;</operator><name>tail</name></name></expr></else></ternary></expr>;</expr_stmt>


<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>nsamples</name> <operator>&lt;=</operator> <name>zeros</name> <operator>+</operator> <name>na</name> <operator>+</operator> <name>nb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>atempo</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>atempo</name><operator>-&gt;</operator><name>head</name></name> <operator>*</operator> <name><name>atempo</name><operator>-&gt;</operator><name>stride</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>atempo</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i0</name> <operator>=</operator> <name><name>frag</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>zeros</name> <operator>-</operator> <name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i1</name> <operator>=</operator> <ternary><condition><expr><name>i0</name> <operator>&lt;</operator> <name>na</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>i0</name> <operator>-</operator> <name>na</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>n0</name> <operator>=</operator> <ternary><condition><expr><name>i0</name> <operator>&lt;</operator> <name>na</name></expr> ?</condition><then> <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>na</name> <operator>-</operator> <name>i0</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>nsamples</name> <operator>-</operator> <name>zeros</name><operator>)</operator></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>n1</name> <operator>=</operator> <name>nsamples</name> <operator>-</operator> <name>zeros</name> <operator>-</operator> <name>n0</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n0</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <name>i0</name> <operator>*</operator> <name><name>atempo</name><operator>-&gt;</operator><name>stride</name></name></expr></argument>, <argument><expr><name>n0</name> <operator>*</operator> <name><name>atempo</name><operator>-&gt;</operator><name>stride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>n0</name> <operator>*</operator> <name><name>atempo</name><operator>-&gt;</operator><name>stride</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>b</name> <operator>+</operator> <name>i1</name> <operator>*</operator> <name><name>atempo</name><operator>-&gt;</operator><name>stride</name></name></expr></argument>, <argument><expr><name>n1</name> <operator>*</operator> <name><name>atempo</name><operator>-&gt;</operator><name>stride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>yae_advance_to_next_frag</name><parameter_list>(<parameter><decl><type><name>ATempoContext</name> <modifier>*</modifier></type><name>atempo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>fragment_step</name> <init>= <expr><name><name>atempo</name><operator>-&gt;</operator><name>tempo</name></name> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name><name>atempo</name><operator>-&gt;</operator><name>window</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AudioFragment</name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AudioFragment</name> <modifier>*</modifier></type><name>frag</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>nfrag</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>yae_prev_frag</name><argument_list>(<argument><expr><name>atempo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>frag</name> <operator>=</operator> <call><name>yae_curr_frag</name><argument_list>(<argument><expr><name>atempo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frag</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>prev</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>fragment_step</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frag</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>prev</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>atempo</name><operator>-&gt;</operator><name>window</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frag</name><operator>-&gt;</operator><name>nsamples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>yae_xcorr_via_rdft</name><parameter_list>(<parameter><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>xcorr</name></decl></parameter>,
<parameter><decl><type><name>RDFTContext</name> <modifier>*</modifier></type><name>complex_to_real</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>FFTComplex</name> <modifier>*</modifier></type><name>xa</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>FFTComplex</name> <modifier>*</modifier></type><name>xb</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>xc</name> <init>= <expr><operator>(</operator><name>FFTComplex</name> <operator>*</operator><operator>)</operator><name>xcorr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>





<expr_stmt><expr><name><name>xc</name><operator>-&gt;</operator><name>re</name></name> <operator>=</operator> <name><name>xa</name><operator>-&gt;</operator><name>re</name></name> <operator>*</operator> <name><name>xb</name><operator>-&gt;</operator><name>re</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xc</name><operator>-&gt;</operator><name>im</name></name> <operator>=</operator> <name><name>xa</name><operator>-&gt;</operator><name>im</name></name> <operator>*</operator> <name><name>xb</name><operator>-&gt;</operator><name>im</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>xa</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>xb</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>xc</name><operator>++</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>window</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>xa</name><operator>++</operator></expr><operator>,</operator> <expr><name>xb</name><operator>++</operator></expr><operator>,</operator> <expr><name>xc</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>xc</name><operator>-&gt;</operator><name>re</name></name> <operator>=</operator> <operator>(</operator><name><name>xa</name><operator>-&gt;</operator><name>re</name></name> <operator>*</operator> <name><name>xb</name><operator>-&gt;</operator><name>re</name></name> <operator>+</operator> <name><name>xa</name><operator>-&gt;</operator><name>im</name></name> <operator>*</operator> <name><name>xb</name><operator>-&gt;</operator><name>im</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xc</name><operator>-&gt;</operator><name>im</name></name> <operator>=</operator> <operator>(</operator><name><name>xa</name><operator>-&gt;</operator><name>im</name></name> <operator>*</operator> <name><name>xb</name><operator>-&gt;</operator><name>re</name></name> <operator>-</operator> <name><name>xa</name><operator>-&gt;</operator><name>re</name></name> <operator>*</operator> <name><name>xb</name><operator>-&gt;</operator><name>im</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>av_rdft_calc</name><argument_list>(<argument><expr><name>complex_to_real</name></expr></argument>, <argument><expr><name>xcorr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>yae_align</name><parameter_list>(<parameter><decl><type><name>AudioFragment</name> <modifier>*</modifier></type><name>frag</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AudioFragment</name> <modifier>*</modifier></type><name>prev</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>window</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>delta_max</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>drift</name></decl></parameter>,
<parameter><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>correlation</name></decl></parameter>,
<parameter><decl><type><name>RDFTContext</name> <modifier>*</modifier></type><name>complex_to_real</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>best_offset</name> <init>= <expr><operator>-</operator><name>drift</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFTSample</name></type> <name>best_metric</name> <init>= <expr><operator>-</operator><name>FLT_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>xcorr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>yae_xcorr_via_rdft</name><argument_list>(<argument><expr><name>correlation</name></expr></argument>,
<argument><expr><name>complex_to_real</name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>FFTComplex</name> <operator>*</operator><operator>)</operator><name><name>prev</name><operator>-&gt;</operator><name>xdat</name></name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>FFTComplex</name> <operator>*</operator><operator>)</operator><name><name>frag</name><operator>-&gt;</operator><name>xdat</name></name></expr></argument>,
<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>i0</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>window</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>delta_max</name> <operator>-</operator> <name>drift</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i0</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>i0</name></expr></argument>, <argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i1</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>window</name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <name>delta_max</name> <operator>-</operator> <name>drift</name></expr></argument>, <argument><expr><name>window</name> <operator>-</operator> <name>window</name> <operator>/</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i1</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>i1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>xcorr</name> <operator>=</operator> <name>correlation</name> <operator>+</operator> <name>i0</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>i0</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>xcorr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>FFTSample</name></type> <name>metric</name> <init>= <expr><operator>*</operator><name>xcorr</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>FFTSample</name></type> <name>drifti</name> <init>= <expr><operator>(</operator><name>FFTSample</name><operator>)</operator><operator>(</operator><name>drift</name> <operator>+</operator> <name>i</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>metric</name> <operator>*=</operator> <name>drifti</name> <operator>*</operator> <operator>(</operator><name>FFTSample</name><operator>)</operator><operator>(</operator><name>i</name> <operator>-</operator> <name>i0</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>FFTSample</name><operator>)</operator><operator>(</operator><name>i1</name> <operator>-</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>metric</name> <operator>&gt;</operator> <name>best_metric</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>best_metric</name> <operator>=</operator> <name>metric</name></expr>;</expr_stmt>
<expr_stmt><expr><name>best_offset</name> <operator>=</operator> <name>i</name> <operator>-</operator> <name>window</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>best_offset</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>yae_adjust_position</name><parameter_list>(<parameter><decl><type><name>ATempoContext</name> <modifier>*</modifier></type><name>atempo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AudioFragment</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><call><name>yae_prev_frag</name><argument_list>(<argument><expr><name>atempo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AudioFragment</name> <modifier>*</modifier></type><name>frag</name> <init>= <expr><call><name>yae_curr_frag</name><argument_list>(<argument><expr><name>atempo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>prev_output_position</name> <init>=
<expr><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name><name>prev</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>atempo</name><operator>-&gt;</operator><name>origin</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>atempo</name><operator>-&gt;</operator><name>window</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator>
<name><name>atempo</name><operator>-&gt;</operator><name>tempo</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>ideal_output_position</name> <init>=
<expr><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name><name>prev</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>atempo</name><operator>-&gt;</operator><name>origin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>atempo</name><operator>-&gt;</operator><name>window</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>drift</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>prev_output_position</name> <operator>-</operator> <name>ideal_output_position</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>delta_max</name> <init>= <expr><name><name>atempo</name><operator>-&gt;</operator><name>window</name></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>correction</name> <init>= <expr><call><name>yae_align</name><argument_list>(<argument><expr><name>frag</name></expr></argument>,
<argument><expr><name>prev</name></expr></argument>,
<argument><expr><name><name>atempo</name><operator>-&gt;</operator><name>window</name></name></expr></argument>,
<argument><expr><name>delta_max</name></expr></argument>,
<argument><expr><name>drift</name></expr></argument>,
<argument><expr><name><name>atempo</name><operator>-&gt;</operator><name>correlation</name></name></expr></argument>,
<argument><expr><name><name>atempo</name><operator>-&gt;</operator><name>complex_to_real</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>correction</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>frag</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-=</operator> <name>correction</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>frag</name><operator>-&gt;</operator><name>nsamples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>correction</name></expr>;</return>
</block_content>}</block></function>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yae_blend</name><parameter_list>(<parameter><type><name>scalar_type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { const scalar_type *aaa = (const scalar_type *)a; const scalar_type *bbb = (const scalar_type *)b; scalar_type *out = (scalar_type *)dst; scalar_type *out_end = (scalar_type *)dst_end; int64_t i; for (i = 0; i &lt; overlap &amp;&amp; out &lt; out_end; i++, atempo-&gt;position[1]++, wa++, wb++) { float w0 = *wa; float w1 = *wb; int j; for (j = 0; j &lt; atempo-&gt;channels; j++, aaa++, bbb++, out++) { float t0 = (float)*aaa; float t1 = (float)*bbb; *out = frag-&gt;position[0] + i &lt; 0 ? *aaa : (scalar_type)(t0 * w0 + t1 * w1); } } dst = (uint8_t *)out; } while (0)</cpp:value></cpp:define>




































<function><type><specifier>static</specifier> <name>int</name></type> <name>yae_overlap_add</name><parameter_list>(<parameter><decl><type><name>ATempoContext</name> <modifier>*</modifier></type><name>atempo</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst_ref</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AudioFragment</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><call><name>yae_prev_frag</name><argument_list>(<argument><expr><name>atempo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AudioFragment</name> <modifier>*</modifier></type><name>frag</name> <init>= <expr><call><name>yae_curr_frag</name><argument_list>(<argument><expr><name>atempo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>start_here</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>atempo</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>frag</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>stop_here</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>prev</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>prev</name><operator>-&gt;</operator><name>nsamples</name></name></expr></argument>,
<argument><expr><name><name>frag</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>frag</name><operator>-&gt;</operator><name>nsamples</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>overlap</name> <init>= <expr><name>stop_here</name> <operator>-</operator> <name>start_here</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>ia</name> <init>= <expr><name>start_here</name> <operator>-</operator> <name><name>prev</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>ib</name> <init>= <expr><name>start_here</name> <operator>-</operator> <name><name>frag</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>wa</name> <init>= <expr><name><name>atempo</name><operator>-&gt;</operator><name>hann</name></name> <operator>+</operator> <name>ia</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>wb</name> <init>= <expr><name><name>atempo</name><operator>-&gt;</operator><name>hann</name></name> <operator>+</operator> <name>ib</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>prev</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>ia</name> <operator>*</operator> <name><name>atempo</name><operator>-&gt;</operator><name>stride</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name><name>frag</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>ib</name> <operator>*</operator> <name><name>atempo</name><operator>-&gt;</operator><name>stride</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>*</operator><name>dst_ref</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>start_here</name> <operator>&lt;=</operator> <name>stop_here</name> <operator>&amp;&amp;</operator>
<name><name>frag</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <name>start_here</name> <operator>&amp;&amp;</operator>
<name>overlap</name> <operator>&lt;=</operator> <name><name>frag</name><operator>-&gt;</operator><name>nsamples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>atempo</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_U8</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>yae_blend</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>atempo</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_S16</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>yae_blend</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>atempo</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>yae_blend</name><argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>atempo</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>yae_blend</name><argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>atempo</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_DBL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>yae_blend</name><argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><operator>*</operator><name>dst_ref</name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name><name>atempo</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>stop_here</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>yae_apply</name><parameter_list>(<parameter><decl><type><name>ATempoContext</name> <modifier>*</modifier></type><name>atempo</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src_ref</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_end</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst_ref</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>atempo</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>YAE_LOAD_FRAGMENT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>yae_load_frag</name><argument_list>(<argument><expr><name>atempo</name></expr></argument>, <argument><expr><name>src_ref</name></expr></argument>, <argument><expr><name>src_end</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>yae_downmix</name><argument_list>(<argument><expr><name>atempo</name></expr></argument>, <argument><expr><call><name>yae_curr_frag</name><argument_list>(<argument><expr><name>atempo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>av_rdft_calc</name><argument_list>(<argument><expr><name><name>atempo</name><operator>-&gt;</operator><name>real_to_complex</name></name></expr></argument>, <argument><expr><call><name>yae_curr_frag</name><argument_list>(<argument><expr><name>atempo</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>xdat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>atempo</name><operator>-&gt;</operator><name>nfrag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>yae_advance_to_next_frag</name><argument_list>(<argument><expr><name>atempo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YAE_ADJUST_POSITION</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>atempo</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>YAE_ADJUST_POSITION</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>yae_adjust_position</name><argument_list>(<argument><expr><name>atempo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YAE_RELOAD_FRAGMENT</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YAE_OUTPUT_OVERLAP_ADD</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>atempo</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>YAE_RELOAD_FRAGMENT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>yae_load_frag</name><argument_list>(<argument><expr><name>atempo</name></expr></argument>, <argument><expr><name>src_ref</name></expr></argument>, <argument><expr><name>src_end</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>yae_downmix</name><argument_list>(<argument><expr><name>atempo</name></expr></argument>, <argument><expr><call><name>yae_curr_frag</name><argument_list>(<argument><expr><name>atempo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>av_rdft_calc</name><argument_list>(<argument><expr><name><name>atempo</name><operator>-&gt;</operator><name>real_to_complex</name></name></expr></argument>, <argument><expr><call><name>yae_curr_frag</name><argument_list>(<argument><expr><name>atempo</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>xdat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YAE_OUTPUT_OVERLAP_ADD</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>atempo</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>YAE_OUTPUT_OVERLAP_ADD</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>yae_overlap_add</name><argument_list>(<argument><expr><name>atempo</name></expr></argument>, <argument><expr><name>dst_ref</name></expr></argument>, <argument><expr><name>dst_end</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>yae_advance_to_next_frag</name><argument_list>(<argument><expr><name>atempo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YAE_LOAD_FRAGMENT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type> <name>yae_flush</name><parameter_list>(<parameter><decl><type><name>ATempoContext</name> <modifier>*</modifier></type><name>atempo</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst_ref</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AudioFragment</name> <modifier>*</modifier></type><name>frag</name> <init>= <expr><call><name>yae_curr_frag</name><argument_list>(<argument><expr><name>atempo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>overlap_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>start_here</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>stop_here</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>src_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nbytes</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YAE_FLUSH_OUTPUT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>atempo</name><operator>-&gt;</operator><name>nfrag</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>atempo</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>frag</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>frag</name><operator>-&gt;</operator><name>nsamples</name></name> <operator>&amp;&amp;</operator>
<name><name>atempo</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>frag</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>frag</name><operator>-&gt;</operator><name>nsamples</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frag</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>frag</name><operator>-&gt;</operator><name>nsamples</name></name> <operator>&lt;</operator> <name><name>atempo</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>yae_load_frag</name><argument_list>(<argument><expr><name>atempo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>atempo</name><operator>-&gt;</operator><name>nfrag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>yae_downmix</name><argument_list>(<argument><expr><name>atempo</name></expr></argument>, <argument><expr><name>frag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>av_rdft_calc</name><argument_list>(<argument><expr><name><name>atempo</name><operator>-&gt;</operator><name>real_to_complex</name></name></expr></argument>, <argument><expr><name><name>frag</name><operator>-&gt;</operator><name>xdat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>yae_adjust_position</name><argument_list>(<argument><expr><name>atempo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>yae_load_frag</name><argument_list>(<argument><expr><name>atempo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>overlap_end</name> <operator>=</operator> <name><name>frag</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>atempo</name><operator>-&gt;</operator><name>window</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>frag</name><operator>-&gt;</operator><name>nsamples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>atempo</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name>overlap_end</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>yae_overlap_add</name><argument_list>(<argument><expr><name>atempo</name></expr></argument>, <argument><expr><name>dst_ref</name></expr></argument>, <argument><expr><name>dst_end</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name><name>frag</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>frag</name><operator>-&gt;</operator><name>nsamples</name></name> <operator>&lt;</operator> <name><name>atempo</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>yae_advance_to_next_frag</name><argument_list>(<argument><expr><name>atempo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>start_here</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>atempo</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>overlap_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stop_here</name> <operator>=</operator> <name><name>frag</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>frag</name><operator>-&gt;</operator><name>nsamples</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>start_here</name> <operator>-</operator> <name><name>frag</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>start_here</name> <operator>&lt;=</operator> <name>stop_here</name> <operator>&amp;&amp;</operator> <name><name>frag</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <name>start_here</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name><name>frag</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>offset</name> <operator>*</operator> <name><name>atempo</name><operator>-&gt;</operator><name>stride</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>dst_ref</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src_size</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>stop_here</name> <operator>-</operator> <name>start_here</name><operator>)</operator> <operator>*</operator> <name><name>atempo</name><operator>-&gt;</operator><name>stride</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_size</name> <operator>=</operator> <name>dst_end</name> <operator>-</operator> <name>dst</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nbytes</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>src_size</name></expr></argument>, <argument><expr><name>dst_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>nbytes</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>nbytes</name> <operator>/</operator> <name><name>atempo</name><operator>-&gt;</operator><name>stride</name></name><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><operator>*</operator><name>dst_ref</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>dst</name></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name><name>atempo</name><operator>-&gt;</operator><name>position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>stop_here</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ATempoContext</name> <modifier>*</modifier></type><name>atempo</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YAE_LOAD_FRAGMENT</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ATempoContext</name> <modifier>*</modifier></type><name>atempo</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>yae_release_buffers</name><argument_list>(<argument><expr><name>atempo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>layouts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>formats</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>







<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVSampleFormat</name></name></type> <name><name>sample_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_SAMPLE_FMT_U8</name></expr>,
<expr><name>AV_SAMPLE_FMT_S16</name></expr>,
<expr><name>AV_SAMPLE_FMT_S32</name></expr>,
<expr><name>AV_SAMPLE_FMT_FLT</name></expr>,
<expr><name>AV_SAMPLE_FMT_DBL</name></expr>,
<expr><name>AV_SAMPLE_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>layouts</name> <operator>=</operator> <call><name>ff_all_channel_counts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>layouts</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_common_channel_layouts</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>layouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>sample_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>formats</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_all_samplerates</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>formats</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>ff_set_common_samplerates</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_props</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ATempoContext</name> <modifier>*</modifier></type><name>atempo</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>format</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sample_rate</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>yae_reset</name><argument_list>(<argument><expr><name>atempo</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>push_samples</name><parameter_list>(<parameter><decl><type><name>ATempoContext</name> <modifier>*</modifier></type><name>atempo</name></decl></parameter>,
<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>n_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>dst_buffer</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>outlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>dst_buffer</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name>n_out</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>dst_buffer</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>atempo</name><operator>-&gt;</operator><name>start_pts</name></name> <operator>+</operator>
<macro><name>av_rescale_q</name><argument_list>(<argument>atempo-&gt;nsamples_out</argument>,
<argument>(AVRational){ <literal type="number">1</literal></argument>, <argument>outlink-&gt;sample_rate }</argument>,
<argument>outlink-&gt;time_base</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>atempo</name><operator>-&gt;</operator><name>dst_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>dst_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>dst_end</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>nsamples_out</name></name> <operator>+=</operator> <name>n_out</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>src_buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ATempoContext</name> <modifier>*</modifier></type><name>atempo</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_in</name> <init>= <expr><name><name>src_buffer</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_out</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">0.5</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>n_in</name><operator>)</operator> <operator>/</operator> <name><name>atempo</name><operator>-&gt;</operator><name>tempo</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>src_buffer</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_end</name> <init>= <expr><name>src</name> <operator>+</operator> <name>n_in</name> <operator>*</operator> <name><name>atempo</name><operator>-&gt;</operator><name>stride</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>atempo</name><operator>-&gt;</operator><name>start_pts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>start_pts</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>src_buffer</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>,
<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>,
<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>src</name> <operator>&lt;</operator> <name>src_end</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>atempo</name><operator>-&gt;</operator><name>dst_buffer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>dst_buffer</name></name> <operator>=</operator> <call><name>ff_get_audio_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>n_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>atempo</name><operator>-&gt;</operator><name>dst_buffer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>src_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name><name>atempo</name><operator>-&gt;</operator><name>dst_buffer</name></name></expr></argument>, <argument><expr><name>src_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <name><name>atempo</name><operator>-&gt;</operator><name>dst_buffer</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>dst_end</name></name> <operator>=</operator> <name><name>atempo</name><operator>-&gt;</operator><name>dst</name></name> <operator>+</operator> <name>n_out</name> <operator>*</operator> <name><name>atempo</name><operator>-&gt;</operator><name>stride</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>yae_apply</name><argument_list>(<argument><expr><name>atempo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src</name></expr></argument>, <argument><expr><name>src_end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>atempo</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>, <argument><expr><name><name>atempo</name><operator>-&gt;</operator><name>dst_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>atempo</name><operator>-&gt;</operator><name>dst</name></name> <operator>==</operator> <name><name>atempo</name><operator>-&gt;</operator><name>dst_end</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n_samples</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>atempo</name><operator>-&gt;</operator><name>dst</name></name> <operator>-</operator> <name><name>atempo</name><operator>-&gt;</operator><name>dst_buffer</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>/</operator>
<name><name>atempo</name><operator>-&gt;</operator><name>stride</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>push_samples</name><argument_list>(<argument><expr><name>atempo</name></expr></argument>, <argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>n_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>nsamples_in</name></name> <operator>+=</operator> <name>n_in</name></expr>;</expr_stmt>
<label><name>end</name>:</label>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>src_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>request_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ATempoContext</name> <modifier>*</modifier></type><name>atempo</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_request_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AVERROR_EOF</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n_max</name> <init>= <expr><name><name>atempo</name><operator>-&gt;</operator><name>ring</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>err</name> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>atempo</name><operator>-&gt;</operator><name>dst_buffer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>dst_buffer</name></name> <operator>=</operator> <call><name>ff_get_audio_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>n_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>atempo</name><operator>-&gt;</operator><name>dst_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <name><name>atempo</name><operator>-&gt;</operator><name>dst_buffer</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>dst_end</name></name> <operator>=</operator> <name><name>atempo</name><operator>-&gt;</operator><name>dst</name></name> <operator>+</operator> <name>n_max</name> <operator>*</operator> <name><name>atempo</name><operator>-&gt;</operator><name>stride</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>yae_flush</name><argument_list>(<argument><expr><name>atempo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>atempo</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>, <argument><expr><name><name>atempo</name><operator>-&gt;</operator><name>dst_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n_out</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>atempo</name><operator>-&gt;</operator><name>dst</name></name> <operator>-</operator> <name><name>atempo</name><operator>-&gt;</operator><name>dst_buffer</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>/</operator>
<name><name>atempo</name><operator>-&gt;</operator><name>stride</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n_out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>push_samples</name><argument_list>(<argument><expr><name>atempo</name></expr></argument>, <argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>n_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>atempo</name><operator>-&gt;</operator><name>dst_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>atempo</name><operator>-&gt;</operator><name>dst_end</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process_command</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>res_len</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ff_filter_process_command</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>res_len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>yae_update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>atempo_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_props</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>atempo_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>request_frame</name> <operator>=</operator> <name>request_frame</name></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_af_atempo</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"atempo"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Adjust audio tempo."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>process_command</name> <operator>=</operator> <name>process_command</name></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ATempoContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>atempo_class</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>atempo_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>atempo_outputs</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
