<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vf_lut.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bswap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/eval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"drawutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>var_names</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"w"</literal></expr>, 
<expr><literal type="string">"h"</literal></expr>, 
<expr><literal type="string">"val"</literal></expr>, 
<expr><literal type="string">"maxval"</literal></expr>, 
<expr><literal type="string">"minval"</literal></expr>, 
<expr><literal type="string">"negval"</literal></expr>, 
<expr><literal type="string">"clipval"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<enum>enum <name>var_name</name> <block>{
<decl><name>VAR_W</name></decl>,
<decl><name>VAR_H</name></decl>,
<decl><name>VAR_VAL</name></decl>,
<decl><name>VAR_MAXVAL</name></decl>,
<decl><name>VAR_MINVAL</name></decl>,
<decl><name>VAR_NEGVAL</name></decl>,
<decl><name>VAR_CLIPVAL</name></decl>,
<decl><name>VAR_VARS_NB</name></decl>
}</block>;</enum>

<typedef>typedef <type><struct>struct <name>LutContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>lut</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">256</literal> <operator>*</operator> <literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>comp_expr_str</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name><name>comp_expr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hsub</name></decl>, <name>vsub</name>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>var_values</name><index>[<expr><name>VAR_VARS_NB</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_rgb</name></decl>, <name>is_yuv</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_planar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_16bit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>step</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>negate_alpha</name></decl>;</decl_stmt> 
}</block></struct></type> <name>LutContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Y</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>G</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(LutContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_VIDEO_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"c0"</literal></expr>, <expr><literal type="string">"set component #0 expression"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>comp_expr_str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"clipval"</literal></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"c1"</literal></expr>, <expr><literal type="string">"set component #1 expression"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>comp_expr_str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"clipval"</literal></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"c2"</literal></expr>, <expr><literal type="string">"set component #2 expression"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>comp_expr_str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"clipval"</literal></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"c3"</literal></expr>, <expr><literal type="string">"set component #3 expression"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>comp_expr_str</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"clipval"</literal></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"y"</literal></expr>, <expr><literal type="string">"set Y expression"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>comp_expr_str</name><index>[<expr><name>Y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"clipval"</literal></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"u"</literal></expr>, <expr><literal type="string">"set U expression"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>comp_expr_str</name><index>[<expr><name>U</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"clipval"</literal></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"v"</literal></expr>, <expr><literal type="string">"set V expression"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>comp_expr_str</name><index>[<expr><name>V</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"clipval"</literal></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"r"</literal></expr>, <expr><literal type="string">"set R expression"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>comp_expr_str</name><index>[<expr><name>R</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"clipval"</literal></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"g"</literal></expr>, <expr><literal type="string">"set G expression"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>comp_expr_str</name><index>[<expr><name>G</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"clipval"</literal></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"set B expression"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>comp_expr_str</name><index>[<expr><name>B</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"clipval"</literal></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"set A expression"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>comp_expr_str</name><index>[<expr><name>A</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"clipval"</literal></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LutContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>comp_expr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>comp_expr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>comp_expr_str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV_FORMATS</name></cpp:macro> <cpp:value>AV_PIX_FMT_YUV444P, AV_PIX_FMT_YUV422P, AV_PIX_FMT_YUV420P, AV_PIX_FMT_YUV411P, AV_PIX_FMT_YUV410P, AV_PIX_FMT_YUV440P, AV_PIX_FMT_YUVA420P, AV_PIX_FMT_YUVA422P, AV_PIX_FMT_YUVA444P, AV_PIX_FMT_YUVJ444P, AV_PIX_FMT_YUVJ422P, AV_PIX_FMT_YUVJ420P, AV_PIX_FMT_YUVJ440P, AV_PIX_FMT_YUV444P9LE, AV_PIX_FMT_YUV422P9LE, AV_PIX_FMT_YUV420P9LE, AV_PIX_FMT_YUV444P10LE, AV_PIX_FMT_YUV422P10LE, AV_PIX_FMT_YUV420P10LE, AV_PIX_FMT_YUV440P10LE, AV_PIX_FMT_YUV444P12LE, AV_PIX_FMT_YUV422P12LE, AV_PIX_FMT_YUV420P12LE, AV_PIX_FMT_YUV440P12LE, AV_PIX_FMT_YUV444P14LE, AV_PIX_FMT_YUV422P14LE, AV_PIX_FMT_YUV420P14LE, AV_PIX_FMT_YUV444P16LE, AV_PIX_FMT_YUV422P16LE, AV_PIX_FMT_YUV420P16LE, AV_PIX_FMT_YUVA444P16LE, AV_PIX_FMT_YUVA422P16LE, AV_PIX_FMT_YUVA420P16LE</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGB_FORMATS</name></cpp:macro> <cpp:value>AV_PIX_FMT_ARGB, AV_PIX_FMT_RGBA, AV_PIX_FMT_ABGR, AV_PIX_FMT_BGRA, AV_PIX_FMT_RGB24, AV_PIX_FMT_BGR24, AV_PIX_FMT_RGB48LE, AV_PIX_FMT_RGBA64LE, AV_PIX_FMT_GBRP, AV_PIX_FMT_GBRAP, AV_PIX_FMT_GBRP9LE, AV_PIX_FMT_GBRP10LE, AV_PIX_FMT_GBRAP10LE, AV_PIX_FMT_GBRP12LE, AV_PIX_FMT_GBRP14LE, AV_PIX_FMT_GBRP16LE, AV_PIX_FMT_GBRAP12LE, AV_PIX_FMT_GBRAP16LE</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRAY_FORMATS</name></cpp:macro> <cpp:value>AV_PIX_FMT_GRAY8, AV_PIX_FMT_GRAY9LE, AV_PIX_FMT_GRAY10LE, AV_PIX_FMT_GRAY12LE, AV_PIX_FMT_GRAY14LE, AV_PIX_FMT_GRAY16LE</cpp:value></cpp:define>



<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>yuv_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>YUV_FORMATS</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>rgb_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>RGB_FORMATS</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>all_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>RGB_FORMATS</name></expr>, <expr><name>YUV_FORMATS</name></expr>, <expr><name>GRAY_FORMATS</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LutContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier></type><name>pix_fmts</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>is_rgb</name></name></expr> ?</condition><then> <expr><name>rgb_pix_fmts</name></expr> </then><else>:
<expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>is_yuv</name></name></expr> ?</condition><then> <expr><name>yuv_pix_fmts</name></expr> </then><else>:
<expr><name>all_pix_fmts</name></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>double</name></type> <name>clip</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LutContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>minval</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_MINVAL</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>maxval</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_MAXVAL</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>minval</name></expr></argument>, <argument><expr><name>maxval</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>double</name></type> <name>compute_gammaval</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>gamma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LutContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>val</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_CLIPVAL</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>minval</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_MINVAL</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>maxval</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_MAXVAL</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>pow</name><argument_list>(<argument><expr><operator>(</operator><name>val</name><operator>-</operator><name>minval</name><operator>)</operator><operator>/</operator><operator>(</operator><name>maxval</name><operator>-</operator><name>minval</name><operator>)</operator></expr></argument>, <argument><expr><name>gamma</name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><name>maxval</name><operator>-</operator><name>minval</name><operator>)</operator><operator>+</operator><name>minval</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>double</name></type> <name>compute_gammaval709</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>gamma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LutContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>val</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_CLIPVAL</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>minval</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_MINVAL</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>maxval</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_MAXVAL</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>level</name> <init>= <expr><operator>(</operator><name>val</name> <operator>-</operator> <name>minval</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>maxval</name> <operator>-</operator> <name>minval</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>level</name> <operator>=</operator> <ternary><condition><expr><name>level</name> <operator>&lt;</operator> <literal type="number">0.018</literal></expr> ?</condition><then> <expr><literal type="number">4.5</literal> <operator>*</operator> <name>level</name></expr>
</then><else>: <expr><literal type="number">1.099</literal> <operator>*</operator> <call><name>pow</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>/</operator> <name>gamma</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">0.099</literal></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><name>level</name> <operator>*</operator> <operator>(</operator><name>maxval</name> <operator>-</operator> <name>minval</name><operator>)</operator> <operator>+</operator> <name>minval</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><specifier>static</specifier> <call><call><name>double</name> <argument_list>(<argument><expr><operator>*</operator> <specifier>const</specifier> <name><name>funcs1</name><index>[]</index></name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{
<expr><name>clip</name></expr>,
<expr><name>compute_gammaval</name></expr>,
<expr><name>compute_gammaval709</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>funcs1_names</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"clip"</literal></expr>,
<expr><literal type="string">"gammaval"</literal></expr>,
<expr><literal type="string">"gammaval709"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_props</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LutContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>rgba_map</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>min</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>max</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>, <decl><type ref="prev"/><name>color</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hsub</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vsub</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_W</name></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_H</name></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>is_16bit</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_YUV410P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV411P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV440P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA420P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA422P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA444P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P9LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P9LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P9LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA420P9LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA422P9LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA444P9LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P10LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P10LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV440P10LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P10LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA420P10LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA422P10LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA444P10LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P12LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P12LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV440P12LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P12LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P14LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P14LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P14LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P16LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P16LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P16LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA420P16LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA422P16LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA444P16LE</name></expr>:</case>
<expr_stmt><expr><name><name>min</name><index>[<expr><name>Y</name></expr>]</index></name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>min</name><index>[<expr><name>U</name></expr>]</index></name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>min</name><index>[<expr><name>V</name></expr>]</index></name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>min</name><index>[<expr><name>A</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>max</name><index>[<expr><name>Y</name></expr>]</index></name> <operator>=</operator> <literal type="number">235</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>max</name><index>[<expr><name>U</name></expr>]</index></name> <operator>=</operator> <literal type="number">240</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>max</name><index>[<expr><name>V</name></expr>]</index></name> <operator>=</operator> <literal type="number">240</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>max</name><index>[<expr><name>A</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB48LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_RGBA64LE</name></expr>:</case>
<expr_stmt><expr><name><name>min</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>min</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>min</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>min</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>max</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>max</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>max</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>max</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">65535</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>min</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>min</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>min</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>min</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>max</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>max</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>max</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>max</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>is_yuv</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>is_rgb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>is_planar</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_PLANAR</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_fmt_is_in</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>yuv_pix_fmts</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>is_yuv</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>ff_fmt_is_in</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>rgb_pix_fmts</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>is_rgb</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_rgb</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_fill_rgba_map</name><argument_list>(<argument><expr><name>rgba_map</name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <call><name>av_get_bits_per_pixel</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_16bit</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>step</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>color</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>color</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name></expr>;</condition> <incr><expr><name>color</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>comp</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>is_rgb</name></name></expr> ?</condition><then> <expr><name><name>rgba_map</name><index>[<expr><name>color</name></expr>]</index></name></expr> </then><else>: <expr><name>color</name></expr></else></ternary></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>comp_expr</name><index>[<expr><name>color</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>comp_expr</name><index>[<expr><name>color</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_expr_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>comp_expr</name><index>[<expr><name>color</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>comp_expr_str</name><index>[<expr><name>color</name></expr>]</index></name></expr></argument>,
<argument><expr><name>var_names</name></expr></argument>, <argument><expr><name>funcs1_names</name></expr></argument>, <argument><expr><name>funcs1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Error when parsing the expression '%s' for the component %d and color %d.\n"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>comp_expr_str</name><index>[<expr><name>comp</name></expr>]</index></name></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_MAXVAL</name></expr>]</index></name> <operator>=</operator> <name><name>max</name><index>[<expr><name>color</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_MINVAL</name></expr>]</index></name> <operator>=</operator> <name><name>min</name><index>[<expr><name>color</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>val</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lut</name><index>[<expr><name>comp</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>val</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_VAL</name></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_CLIPVAL</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>min</name><index>[<expr><name>color</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>max</name><index>[<expr><name>color</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_NEGVAL</name></expr>]</index></name> <operator>=</operator>
<call><name>av_clip</name><argument_list>(<argument><expr><name><name>min</name><index>[<expr><name>color</name></expr>]</index></name> <operator>+</operator> <name><name>max</name><index>[<expr><name>color</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>var_values</name><index>[<expr><name>VAR_VAL</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>min</name><index>[<expr><name>color</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>max</name><index>[<expr><name>color</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>av_expr_eval</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>comp_expr</name><index>[<expr><name>color</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>var_values</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Error when evaluating the expression '%s' for the value %d for the component %d.\n"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>comp_expr_str</name><index>[<expr><name>color</name></expr>]</index></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lut</name><index>[<expr><name>comp</name></expr>]</index><index>[<expr><name>val</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>max</name><index>[<expr><name>A</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"val[%d][%d] = %d\n"</literal></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lut</name><index>[<expr><name>comp</name></expr>]</index><index>[<expr><name>val</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>thread_data</name> <block>{
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_PACKED_COMMONLutContext</name></cpp:macro> <cpp:value>*s = ctx-&gt;priv;const struct thread_data *td = arg;int i, j;const int w = td-&gt;w;const int h = td-&gt;h;AVFrame *in = td-&gt;in;AVFrame *out = td-&gt;out;const uint16_t (*tab)[256*256] = (const uint16_t (*)[256*256])s-&gt;lut;const int step = s-&gt;step;const int slice_start = (h * jobnr ) / nb_jobs;const int slice_end = (h * (jobnr+1)) / nb_jobs;</cpp:value></cpp:define>















<function><type><specifier>static</specifier> <name>int</name></type> <name>lut_packed_16bits</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LOAD_PACKED_COMMON</name>

<name>uint16_t</name> <modifier>*</modifier></type><name>inrow</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>outrow</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>inrow0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>outrow0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>in_linesize</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>out_linesize</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>inrow0</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>in</name> <operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>outrow0</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>slice_start</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>slice_end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>inrow</name> <operator>=</operator> <name>inrow0</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>in_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>outrow</name> <operator>=</operator> <name>outrow0</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>out_linesize</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<switch>switch <condition>(<expr><name>step</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>
<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name><name>outrow</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>tab</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>inrow</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name><name>outrow</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>tab</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>inrow</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name><name>outrow</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>inrow</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<default>default:</default> <expr_stmt><expr><name><name>outrow</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>inrow</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name><name>outrow</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>tab</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name><name>inrow</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt> 
<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name><name>outrow</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>tab</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name><name>inrow</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt> 
<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name><name>outrow</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>inrow</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt> 
<default>default:</default> <expr_stmt><expr><name><name>outrow</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>inrow</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></switch>
<expr_stmt><expr><name>outrow</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
<expr_stmt><expr><name>inrow</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>lut_packed_8bits</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LOAD_PACKED_COMMON</name>

<name>uint8_t</name> <modifier>*</modifier></type><name>inrow</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>outrow</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>inrow0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>outrow0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>in_linesize</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>out_linesize</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>inrow0</name> <operator>=</operator> <name><name>in</name> <operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>outrow0</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>slice_start</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>slice_end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>inrow</name> <operator>=</operator> <name>inrow0</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>in_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>outrow</name> <operator>=</operator> <name>outrow0</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>out_linesize</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name>step</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name><name>outrow</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>tab</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name><name>inrow</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt> 
<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name><name>outrow</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>tab</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name><name>inrow</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt> 
<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name><name>outrow</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>inrow</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt> 
<default>default:</default> <expr_stmt><expr><name><name>outrow</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>inrow</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><name>outrow</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
<expr_stmt><expr><name>inrow</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_PLANAR_COMMONLutContext</name></cpp:macro> <cpp:value>*s = ctx-&gt;priv;const struct thread_data *td = arg;int i, j, plane;AVFrame *in = td-&gt;in;AVFrame *out = td-&gt;out;</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLANAR_COMMONint</name></cpp:macro> <cpp:value>vsub = plane == 1 || plane == 2 ? s-&gt;vsub : 0;int hsub = plane == 1 || plane == 2 ? s-&gt;hsub : 0;int h = AV_CEIL_RSHIFT(td-&gt;h, vsub);int w = AV_CEIL_RSHIFT(td-&gt;w, hsub);const uint16_t *tab = s-&gt;lut[plane];const int slice_start = (h * jobnr ) / nb_jobs;const int slice_end = (h * (jobnr+1)) / nb_jobs;</cpp:value></cpp:define>










<function><type><specifier>static</specifier> <name>int</name></type> <name>lut_planar_16bits</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LOAD_PLANAR_COMMON</name>

<name>uint16_t</name> <modifier>*</modifier></type><name>inrow</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>outrow</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>PLANAR_COMMON</name>

<specifier>const</specifier> <name>int</name></type> <name>in_linesize</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>out_linesize</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>inrow</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>in</name> <operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>slice_start</name> <operator>*</operator> <name>in_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>outrow</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>slice_start</name> <operator>*</operator> <name>out_linesize</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>slice_start</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>slice_end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>
<expr_stmt><expr><name><name>outrow</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>tab</name><index>[<expr><call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>inrow</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>outrow</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>tab</name><index>[<expr><name><name>inrow</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>
<expr_stmt><expr><name>inrow</name> <operator>+=</operator> <name>in_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>outrow</name> <operator>+=</operator> <name>out_linesize</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>lut_planar_8bits</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LOAD_PLANAR_COMMON</name>

<name>uint8_t</name> <modifier>*</modifier></type><name>inrow</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>outrow</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>PLANAR_COMMON</name>

<specifier>const</specifier> <name>int</name></type> <name>in_linesize</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>out_linesize</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>inrow</name> <operator>=</operator> <name><name>in</name> <operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>slice_start</name> <operator>*</operator> <name>in_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>outrow</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>slice_start</name> <operator>*</operator> <name>out_linesize</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>slice_start</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>slice_end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>outrow</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>tab</name><index>[<expr><name><name>inrow</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>inrow</name> <operator>+=</operator> <name>in_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>outrow</name> <operator>+=</operator> <name>out_linesize</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACKED_THREAD_DATAstruct</name></cpp:macro> <cpp:value>thread_data td = {.in = in,.out = out,.w = inlink-&gt;w,.h = in-&gt;height,};</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLANAR_THREAD_DATAstruct</name></cpp:macro> <cpp:value>thread_data td = {.in = in,.out = out,.w = inlink-&gt;w,.h = inlink-&gt;h,};</cpp:value></cpp:define>







<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LutContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>direct</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_frame_is_writable</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>direct</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_rgb</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>is_16bit</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>is_planar</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>PACKED_THREAD_DATA</name></type>
<name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>lut_packed_16bits</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>td</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><call><name>ff_filter_get_nb_threads</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_rgb</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>is_planar</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>PACKED_THREAD_DATA</name></type>
<name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>lut_packed_8bits</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>td</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><call><name>ff_filter_get_nb_threads</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_16bit</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>PLANAR_THREAD_DATA</name></type>
<name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>lut_planar_16bits</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>td</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><call><name>ff_filter_get_nb_threads</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>PLANAR_THREAD_DATA</name></type>
<name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>lut_planar_8bits</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>td</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><call><name>ff_filter_get_nb_threads</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>direct</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_props</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_LUT_FILTER</name><parameter_list>(<parameter><type><name>name_</name></type></parameter>, <parameter><type><name>description_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AVFilter ff_vf_##name_ = { .name = #name_, .description = NULL_IF_CONFIG_SMALL(description_), .priv_size = sizeof(LutContext), .priv_class = &amp;name_ ##_class, .init = name_##_init, .uninit = uninit, .query_formats = query_formats, .inputs = inputs, .outputs = outputs, .flags = AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC | AVFILTER_FLAG_SLICE_THREADS, }</cpp:value></cpp:define>













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LUT_FILTER</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lut_options</name></cpp:macro> <cpp:value>options</cpp:value></cpp:define>
<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>lut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lut_init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><call><name>DEFINE_LUT_FILTER</name><argument_list>(<argument><expr><name>lut</name></expr></argument>, <argument><expr><literal type="string">"Compute and apply a lookup table to the RGB/YUV input video."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LUTYUV_FILTER</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lutyuv_options</name></cpp:macro> <cpp:value>options</cpp:value></cpp:define>
<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>lutyuv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>lutyuv_init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LutContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>is_yuv</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><call><name>DEFINE_LUT_FILTER</name><argument_list>(<argument><expr><name>lutyuv</name></expr></argument>, <argument><expr><literal type="string">"Compute and apply a lookup table to the YUV input video."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LUTRGB_FILTER</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lutrgb_options</name></cpp:macro> <cpp:value>options</cpp:value></cpp:define>
<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>lutrgb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>lutrgb_init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LutContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>is_rgb</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><call><name>DEFINE_LUT_FILTER</name><argument_list>(<argument><expr><name>lutrgb</name></expr></argument>, <argument><expr><literal type="string">"Compute and apply a lookup table to the RGB input video."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_NEGATE_FILTER</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>negate_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"negate_alpha"</literal></expr>, <expr><name>NULL</name></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>negate_alpha</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>negate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>negate_init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LutContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"negate_alpha:%d\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>negate_alpha</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>comp_expr_str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>negate_alpha</name></name><operator>)</operator></expr> ?</condition><then>
<expr><literal type="string">"val"</literal></expr> </then><else>: <expr><literal type="string">"negval"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>comp_expr_str</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>uninit</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><call><name>DEFINE_LUT_FILTER</name><argument_list>(<argument><expr><name>negate</name></expr></argument>, <argument><expr><literal type="string">"Negate input video."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
