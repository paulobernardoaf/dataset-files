<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\af_apulsator.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio.h"</cpp:file></cpp:include>

<enum>enum <name>PulsatorModes</name> <block>{ <decl><name>SINE</name></decl>, <decl><name>TRIANGLE</name></decl>, <decl><name>SQUARE</name></decl>, <decl><name>SAWUP</name></decl>, <decl><name>SAWDOWN</name></decl>, <decl><name>NB_MODES</name></decl> }</block>;</enum>
<enum>enum <name>PulsatorTimings</name> <block>{ <decl><name>UNIT_BPM</name></decl>, <decl><name>UNIT_MS</name></decl>, <decl><name>UNIT_HZ</name></decl>, <decl><name>NB_TIMINGS</name></decl> }</block>;</enum>

<typedef>typedef <type><struct>struct <name>SimpleLFO</name> <block>{
<decl_stmt><decl><type><name>double</name></type> <name>phase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>freq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>amount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>pwidth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>srate</name></decl>;</decl_stmt>
}</block></struct></type> <name>SimpleLFO</name>;</typedef>

<typedef>typedef <type><struct>struct <name>AudioPulsatorContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>level_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>level_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>amount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>offset_l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>offset_r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>pwidth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>bpm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>hertz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>timing</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SimpleLFO</name></type> <name>lfoL</name></decl>, <name>lfoR</name>;</decl_stmt>
}</block></struct></type> <name>AudioPulsatorContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(AudioPulsatorContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_AUDIO_PARAM|AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>apulsator_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"level_in"</literal></expr>, <expr><literal type="string">"set input gain"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>level_in</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0.015625</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><name>FLAGS</name></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="string">"level_out"</literal></expr>, <expr><literal type="string">"set output gain"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>level_out</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0.015625</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><name>FLAGS</name></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="string">"mode"</literal></expr>, <expr><literal type="string">"set mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SINE</name></expr>}</block></expr>, <expr><name>SINE</name></expr>, <expr><name>NB_MODES</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sine"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SINE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"triangle"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>TRIANGLE</name></expr>}</block></expr>,<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"square"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SQUARE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sawup"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SAWUP</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sawdown"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SAWDOWN</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"amount"</literal></expr>, <expr><literal type="string">"set modulation"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"offset_l"</literal></expr>, <expr><literal type="string">"set offset L"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>offset_l</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"offset_r"</literal></expr>, <expr><literal type="string">"set offset R"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>offset_r</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">.5</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"width"</literal></expr>, <expr><literal type="string">"set pulse width"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>pwidth</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"timing"</literal></expr>, <expr><literal type="string">"set timing"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>timing</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">2</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_TIMINGS</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"timing"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bpm"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>UNIT_BPM</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"timing"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ms"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>UNIT_MS</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"timing"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"hz"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>UNIT_HZ</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"timing"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bpm"</literal></expr>, <expr><literal type="string">"set BPM"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>bpm</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">120</literal></expr>}</block></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">300</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ms"</literal></expr>, <expr><literal type="string">"set ms"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">500</literal></expr>}</block></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">2000</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"hz"</literal></expr>, <expr><literal type="string">"set frequency"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>hertz</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">2</literal></expr>}</block></expr>, <expr><literal type="number">0.01</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>apulsator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lfo_advance</name><parameter_list>(<parameter><decl><type><name>SimpleLFO</name> <modifier>*</modifier></type><name>lfo</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>lfo</name><operator>-&gt;</operator><name>phase</name></name> <operator>=</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>lfo</name><operator>-&gt;</operator><name>phase</name></name> <operator>+</operator> <name>count</name> <operator>*</operator> <name><name>lfo</name><operator>-&gt;</operator><name>freq</name></name> <operator>/</operator> <name><name>lfo</name><operator>-&gt;</operator><name>srate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lfo</name><operator>-&gt;</operator><name>phase</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lfo</name><operator>-&gt;</operator><name>phase</name></name> <operator>=</operator> <call><name>fmod</name><argument_list>(<argument><expr><name><name>lfo</name><operator>-&gt;</operator><name>phase</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>lfo_get_value</name><parameter_list>(<parameter><decl><type><name>SimpleLFO</name> <modifier>*</modifier></type><name>lfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>phs</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name><name>lfo</name><operator>-&gt;</operator><name>phase</name></name> <operator>/</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">1.99</literal></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0.01</literal></expr></argument>, <argument><expr><name><name>lfo</name><operator>-&gt;</operator><name>pwidth</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>lfo</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>val</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>phs</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>phs</name> <operator>=</operator> <call><name>fmod</name><argument_list>(<argument><expr><name>phs</name></expr></argument>, <argument><expr><literal type="number">1.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>lfo</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SINE</name></expr>:</case>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><name>phs</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>M_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TRIANGLE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>phs</name> <operator>&gt;</operator> <literal type="number">0.75</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>phs</name> <operator>-</operator> <literal type="number">0.75</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>phs</name> <operator>&gt;</operator> <literal type="number">0.25</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>-</operator><literal type="number">4</literal> <operator>*</operator> <name>phs</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>phs</name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>SQUARE</name></expr>:</case>
<expr_stmt><expr><name>val</name> <operator>=</operator> <ternary><condition><expr><name>phs</name> <operator>&lt;</operator> <literal type="number">0.5</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>+</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SAWUP</name></expr>:</case>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>phs</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SAWDOWN</name></expr>:</case>
<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>phs</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default> <expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<return>return <expr><name>val</name> <operator>*</operator> <name><name>lfo</name><operator>-&gt;</operator><name>amount</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AudioPulsatorContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>double</name> <operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nb_samples</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>level_out</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>level_out</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>level_in</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>level_in</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>amount</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>amount</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_frame_is_writable</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>out</name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_audio_buffer</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>outL</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>outR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>inL</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>level_in</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>inR</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>level_in</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>procL</name> <init>= <expr><name>inL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>procR</name> <init>= <expr><name>inR</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>procL</name> <operator>*=</operator> <call><name>lfo_get_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>lfoL</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">0.5</literal> <operator>+</operator> <name>amount</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>procR</name> <operator>*=</operator> <call><name>lfo_get_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>lfoR</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">0.5</literal> <operator>+</operator> <name>amount</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>outL</name> <operator>=</operator> <name>procL</name> <operator>+</operator> <name>inL</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>amount</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>outR</name> <operator>=</operator> <name>procR</name> <operator>+</operator> <name>inR</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>amount</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>outL</name> <operator>*=</operator> <name>level_out</name></expr>;</expr_stmt>
<expr_stmt><expr><name>outR</name> <operator>*=</operator> <name>level_out</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>outL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>outR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lfo_advance</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>lfoL</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lfo_advance</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>lfoR</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>in</name> <operator>!=</operator> <name>out</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>layout</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>formats</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_add_format</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>formats</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_DBL</name></expr></argument> )</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_set_common_formats</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument> , <argument><expr><name>formats</name></expr></argument> )</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_add_channel_layout</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>layout</name></expr></argument> , <argument><expr><name>AV_CH_LAYOUT_STEREO</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_set_common_channel_layouts</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument> , <argument><expr><name>layout</name></expr></argument> )</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_all_samplerates</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ff_set_common_samplerates</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AudioPulsatorContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>freq</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>timing</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>UNIT_BPM</name></expr>:</case> <expr_stmt><expr><name>freq</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bpm</name></name> <operator>/</operator> <literal type="number">60</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UNIT_MS</name></expr>:</case> <expr_stmt><expr><name>freq</name> <operator>=</operator> <literal type="number">1</literal> <operator>/</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ms</name></name> <operator>/</operator> <literal type="number">1000.</literal><operator>)</operator></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UNIT_HZ</name></expr>:</case> <expr_stmt><expr><name>freq</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>hertz</name></name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lfoL</name><operator>.</operator><name>freq</name></name> <operator>=</operator> <name>freq</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lfoR</name><operator>.</operator><name>freq</name></name> <operator>=</operator> <name>freq</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lfoL</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lfoR</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lfoL</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>offset_l</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lfoR</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>offset_r</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lfoL</name><operator>.</operator><name>srate</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lfoR</name><operator>.</operator><name>srate</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lfoL</name><operator>.</operator><name>amount</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>amount</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lfoR</name><operator>.</operator><name>amount</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>amount</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lfoL</name><operator>.</operator><name>pwidth</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pwidth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lfoR</name><operator>.</operator><name>pwidth</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pwidth</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_af_apulsator</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"apulsator"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Audio pulsator."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AudioPulsatorContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>apulsator_class</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>outputs</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
