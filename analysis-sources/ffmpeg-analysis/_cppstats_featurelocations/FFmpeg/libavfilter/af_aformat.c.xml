<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\af_aformat.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>AFormatContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>formats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>sample_rates</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>channel_layouts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>formats_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sample_rates_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>channel_layouts_str</name></decl>;</decl_stmt>
}</block></struct></type> <name>AFormatContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(AFormatContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A</name></cpp:macro> <cpp:value>AV_OPT_FLAG_AUDIO_PARAM</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>aformat_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"sample_fmts"</literal></expr>, <expr><literal type="string">"A '|'-separated list of sample formats."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>formats_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>A</name><operator>|</operator><name>F</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"f"</literal></expr>, <expr><literal type="string">"A '|'-separated list of sample formats."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>formats_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>A</name><operator>|</operator><name>F</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sample_rates"</literal></expr>, <expr><literal type="string">"A '|'-separated list of sample rates."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sample_rates_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>A</name><operator>|</operator><name>F</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"r"</literal></expr>, <expr><literal type="string">"A '|'-separated list of sample rates."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sample_rates_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>A</name><operator>|</operator><name>F</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"channel_layouts"</literal></expr>, <expr><literal type="string">"A '|'-separated list of channel layouts."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>channel_layouts_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>A</name><operator>|</operator><name>F</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cl"</literal></expr>, <expr><literal type="string">"A '|'-separated list of channel layouts."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>channel_layouts_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>A</name><operator>|</operator><name>F</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>aformat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARSE_FORMATS</name><parameter_list>(<parameter><type><name>str</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>list</name></type></parameter>, <parameter><type><name>add_to_list</name></type></parameter>, <parameter><type><name>unref_fn</name></type></parameter>, <parameter><type><name>get_fmt</name></type></parameter>, <parameter><type><name>none</name></type></parameter>, <parameter><type><name>desc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { char *next, *cur = str, sep; int ret; if (str &amp;&amp; strchr(str, ',')) { av_log(ctx, AV_LOG_WARNING, "This syntax is deprecated, use '|' to ""separate %s.\n", desc); sep = ','; } else sep = '|'; while (cur) { type fmt; next = strchr(cur, sep); if (next) *next++ = 0; if ((fmt = get_fmt(cur)) == none) { av_log(ctx, AV_LOG_ERROR, "Error parsing " desc ": %s.\n", cur);return AVERROR(EINVAL); } if ((ret = add_to_list(&amp;list, fmt)) &lt; 0) { unref_fn(&amp;list); return ret; } cur = next; } } while (0)</cpp:value></cpp:define>






























<function><type><specifier>static</specifier> <name>int</name></type> <name>get_sample_rate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>samplerate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name>samplerate</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AFormatContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PARSE_FORMATS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>formats_str</name></name></expr></argument>, <argument><expr>enum <name>AVSampleFormat</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>formats</name></name></expr></argument>,
<argument><expr><name>ff_add_format</name></expr></argument>, <argument><expr><name>ff_formats_unref</name></expr></argument>, <argument><expr><name>av_get_sample_fmt</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_NONE</name></expr></argument>, <argument><expr><literal type="string">"sample format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PARSE_FORMATS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sample_rates_str</name></name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sample_rates</name></name></expr></argument>, <argument><expr><name>ff_add_format</name></expr></argument>, <argument><expr><name>ff_formats_unref</name></expr></argument>,
<argument><expr><name>get_sample_rate</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"sample rate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PARSE_FORMATS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>channel_layouts_str</name></name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>channel_layouts</name></name></expr></argument>,
<argument><expr><name>ff_add_channel_layout</name></expr></argument>, <argument><expr><name>ff_channel_layouts_unref</name></expr></argument>, <argument><expr><name>av_get_channel_layout</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"channel layout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AFormatContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>formats</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>formats</name></name></expr> </then><else>:
<expr><call><name>ff_all_formats</name><argument_list>(<argument><expr><name>AVMEDIA_TYPE_AUDIO</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_common_samplerates</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>sample_rates</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>sample_rates</name></name></expr> </then><else>:
<expr><call><name>ff_all_samplerates</name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>ff_set_common_channel_layouts</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>channel_layouts</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>channel_layouts</name></name></expr> </then><else>:
<expr><call><name>ff_all_channel_counts</name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>avfilter_af_aformat_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>avfilter_af_aformat_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_af_aformat</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"aformat"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Convert the input audio to one of the specified formats."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AFormatContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>aformat_class</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>avfilter_af_aformat_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>avfilter_af_aformat_outputs</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
