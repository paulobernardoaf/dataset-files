<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\fifo.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/samplefmt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>Buf</name> <block>{
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Buf</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>Buf</name>;</typedef>

<typedef>typedef <type><struct>struct <name>FifoContext</name> <block>{
<decl_stmt><decl><type><name>Buf</name></type> <name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Buf</name> <modifier>*</modifier></type><name>last</name></decl>;</decl_stmt> 





<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>allocated_samples</name></decl>;</decl_stmt> 
}</block></struct></type> <name>FifoContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FifoContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>root</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FifoContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Buf</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>buf</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>root</name><operator>.</operator><name>next</name></name></expr>;</init> <condition><expr><name>buf</name></expr>;</condition> <incr><expr><name>buf</name> <operator>=</operator> <name>tmp</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>add_to_queue</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FifoContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <name>frame</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>queue_pop</name><parameter_list>(<parameter><decl><type><name>FifoContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Buf</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>root</name><operator>.</operator><name>next</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>root</name><operator>.</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>root</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>root</name><operator>.</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>root</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>buffer_offset</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nb_channels</name> <init>= <expr><name><name>link</name><operator>-&gt;</operator><name>channels</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>planar</name> <init>= <expr><call><name>av_sample_fmt_is_planar</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>planes</name> <init>= <expr><ternary><condition><expr><name>planar</name></expr> ?</condition><then> <expr><name>nb_channels</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_align</name> <init>= <expr><call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>planar</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>nb_channels</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>&gt;</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>planes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>block_align</name> <operator>*</operator> <name>offset</name></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>data</name></name> <operator>!=</operator> <name><name>frame</name><operator>-&gt;</operator><name>extended_data</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name></name></expr></argument>,
<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>planes</name></expr></argument>, <argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-=</operator> <name>block_align</name><operator>*</operator><name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>-=</operator> <name>offset</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>+=</operator> <macro><name>av_rescale_q</name><argument_list>(<argument>offset</argument>, <argument>(AVRational){<literal type="number">1</literal></argument>, <argument>link-&gt;sample_rate}</argument>,
<argument>link-&gt;time_base</argument>)</argument_list></macro></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>calc_ptr_alignment</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>planes</name> <init>= <expr><ternary><condition><expr><call><name>av_sample_fmt_is_planar</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then>
<expr><name><name>frame</name><operator>-&gt;</operator><name>channels</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>min_align</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>planes</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cur_align</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>p</name></expr>]</index></name> <operator>%</operator> <name>cur_align</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cur_align</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>cur_align</name> <operator>&lt;</operator> <name>min_align</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>min_align</name> <operator>=</operator> <name>cur_align</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>min_align</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>return_audio_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FifoContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>head</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>root</name><operator>.</operator><name>next</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>root</name><operator>.</operator><name>next</name><operator>-&gt;</operator><name>frame</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>head</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>out</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>out</name></name> <operator>&amp;&amp;</operator>
<name><name>head</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>&gt;=</operator> <name><name>link</name><operator>-&gt;</operator><name>request_samples</name></name> <operator>&amp;&amp;</operator>
<call><name>calc_ptr_alignment</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>head</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>==</operator> <name><name>link</name><operator>-&gt;</operator><name>request_samples</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>out</name> <operator>=</operator> <name>head</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>queue_pop</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>av_frame_clone</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name><name>link</name><operator>-&gt;</operator><name>request_samples</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>buffer_offset</name><argument_list>(<argument><expr><name>link</name></expr></argument>, <argument><expr><name>head</name></expr></argument>, <argument><expr><name><name>link</name><operator>-&gt;</operator><name>request_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nb_channels</name> <init>= <expr><name><name>link</name><operator>-&gt;</operator><name>channels</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>out</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <call><name>ff_get_audio_buffer</name><argument_list>(<argument><expr><name>link</name></expr></argument>, <argument><expr><name><name>link</name><operator>-&gt;</operator><name>request_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>out</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>head</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>allocated_samples</name></name> <operator>=</operator> <name><name>link</name><operator>-&gt;</operator><name>request_samples</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>link</name><operator>-&gt;</operator><name>request_samples</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>allocated_samples</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"request_samples changed before the "</literal>
<literal type="string">"buffer was returned.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>allocated_samples</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>root</name><operator>.</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_request_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AVERROR_EOF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_samples_set_silence</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>extended_data</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>allocated_samples</name></name> <operator>-</operator>
<name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>,
<argument><expr><name>nb_channels</name></expr></argument>, <argument><expr><name><name>link</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>allocated_samples</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>root</name><operator>.</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>head</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>root</name><operator>.</operator><name>next</name><operator>-&gt;</operator><name>frame</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>allocated_samples</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>,
<argument><expr><name><name>head</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_samples_copy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>extended_data</name></name></expr></argument>, <argument><expr><name><name>head</name><operator>-&gt;</operator><name>extended_data</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>nb_channels</name></expr></argument>,
<argument><expr><name><name>link</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name><name>head</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>queue_pop</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>buffer_offset</name><argument_list>(<argument><expr><name>link</name></expr></argument>, <argument><expr><name>head</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>out</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>link</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>request_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FifoContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>root</name><operator>.</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_request_frame</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AVERROR_EOF</name> <operator>&amp;&amp;</operator> <name><name>outlink</name><operator>-&gt;</operator><name>request_samples</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>return_audio_frame</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>root</name><operator>.</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>outlink</name><operator>-&gt;</operator><name>request_samples</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>return_audio_frame</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>root</name><operator>.</operator><name>next</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>queue_pop</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>avfilter_vf_fifo_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>add_to_queue</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>avfilter_vf_fifo_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>request_frame</name> <operator>=</operator> <name>request_frame</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_fifo</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"fifo"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Buffer input images and send them when they are requested."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FifoContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>avfilter_vf_fifo_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>avfilter_vf_fifo_outputs</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>avfilter_af_afifo_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>add_to_queue</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>avfilter_af_afifo_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>request_frame</name> <operator>=</operator> <name>request_frame</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_af_afifo</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"afifo"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Buffer input frames and send them when they are requested."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FifoContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>avfilter_af_afifo_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>avfilter_af_afifo_outputs</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
