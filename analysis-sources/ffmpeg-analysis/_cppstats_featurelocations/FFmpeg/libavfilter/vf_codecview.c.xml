<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vf_codecview.c">






























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/motion_vector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MV_P_FOR</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MV_B_FOR</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MV_B_BACK</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MV_TYPE_FOR</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MV_TYPE_BACK</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRAME_TYPE_I</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRAME_TYPE_P</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRAME_TYPE_B</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>CodecViewContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>mv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>frame_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>mv_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hsub</name></decl>, <name>vsub</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>qp</name></decl>;</decl_stmt>
}</block></struct></type> <name>CodecViewContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(CodecViewContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_VIDEO_PARAM</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONST</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>help</name></type></parameter>, <parameter><type><name>val</name></type></parameter>, <parameter><type><name>unit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ name, help, 0, AV_OPT_TYPE_CONST, {.i64=val}, 0, 0, FLAGS, unit }</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>codecview_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"mv"</literal></expr>, <expr><literal type="string">"set motion vectors to visualize"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mv</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLAGS</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mv"</literal></expr> }</block></expr>,
<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"pf"</literal></expr></argument>, <argument><expr><literal type="string">"forward predicted MVs of P-frames"</literal></expr></argument>, <argument><expr><name>MV_P_FOR</name></expr></argument>, <argument><expr><literal type="string">"mv"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"bf"</literal></expr></argument>, <argument><expr><literal type="string">"forward predicted MVs of B-frames"</literal></expr></argument>, <argument><expr><name>MV_B_FOR</name></expr></argument>, <argument><expr><literal type="string">"mv"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"bb"</literal></expr></argument>, <argument><expr><literal type="string">"backward predicted MVs of B-frames"</literal></expr></argument>, <argument><expr><name>MV_B_BACK</name></expr></argument>, <argument><expr><literal type="string">"mv"</literal></expr></argument>)</argument_list></call></expr>,
<expr><block>{ <expr><literal type="string">"qp"</literal></expr>, <expr><name>NULL</name></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>qp</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"mv_type"</literal></expr>, <expr><literal type="string">"set motion vectors type"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mv_type</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLAGS</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mv_type"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"mvt"</literal></expr>, <expr><literal type="string">"set motion vectors type"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mv_type</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLAGS</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mv_type"</literal></expr> }</block></expr>,
<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"fp"</literal></expr></argument>, <argument><expr><literal type="string">"forward predicted MVs"</literal></expr></argument>, <argument><expr><name>MV_TYPE_FOR</name></expr></argument>, <argument><expr><literal type="string">"mv_type"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"bp"</literal></expr></argument>, <argument><expr><literal type="string">"backward predicted MVs"</literal></expr></argument>, <argument><expr><name>MV_TYPE_BACK</name></expr></argument>, <argument><expr><literal type="string">"mv_type"</literal></expr></argument>)</argument_list></call></expr>,
<expr><block>{ <expr><literal type="string">"frame_type"</literal></expr>, <expr><literal type="string">"set frame types to visualize motion vectors of"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>frame_type</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLAGS</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"frame_type"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ft"</literal></expr>, <expr><literal type="string">"set frame types to visualize motion vectors of"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>frame_type</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLAGS</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"frame_type"</literal></expr> }</block></expr>,
<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"if"</literal></expr></argument>, <argument><expr><literal type="string">"I-frames"</literal></expr></argument>, <argument><expr><name>FRAME_TYPE_I</name></expr></argument>, <argument><expr><literal type="string">"frame_type"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"pf"</literal></expr></argument>, <argument><expr><literal type="string">"P-frames"</literal></expr></argument>, <argument><expr><name>FRAME_TYPE_P</name></expr></argument>, <argument><expr><literal type="string">"frame_type"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"bf"</literal></expr></argument>, <argument><expr><literal type="string">"B-frames"</literal></expr></argument>, <argument><expr><name>FRAME_TYPE_B</name></expr></argument>, <argument><expr><literal type="string">"frame_type"</literal></expr></argument>)</argument_list></call></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>codecview</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{<expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>clip_line</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ex</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>sx</name> <operator>&gt;</operator> <operator>*</operator><name>ex</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>clip_line</name><argument_list>(<argument><expr><name>ex</name></expr></argument>, <argument><expr><name>ey</name></expr></argument>, <argument><expr><name>sx</name></expr></argument>, <argument><expr><name>sy</name></expr></argument>, <argument><expr><name>maxx</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ex</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>sy</name> <operator>=</operator> <operator>*</operator><name>ey</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>sy</name> <operator>-</operator> <operator>*</operator><name>ey</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>*</operator><name>ex</name> <operator>/</operator> <operator>(</operator><operator>*</operator><name>ex</name> <operator>-</operator> <operator>*</operator><name>sx</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>sx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ex</name> <operator>&gt;</operator> <name>maxx</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sx</name> <operator>&gt;</operator> <name>maxx</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>ey</name> <operator>=</operator> <operator>*</operator><name>sy</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>ey</name> <operator>-</operator> <operator>*</operator><name>sy</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>maxx</name> <operator>-</operator> <operator>*</operator><name>sx</name><operator>)</operator> <operator>/</operator> <operator>(</operator><operator>*</operator><name>ex</name> <operator>-</operator> <operator>*</operator><name>sx</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ex</name> <operator>=</operator> <name>maxx</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_line</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ey</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>fr</name></decl>, <decl><type ref="prev"/><name>f</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>clip_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ey</name></expr></argument>, <argument><expr><name>w</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>clip_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ex</name></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sx</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>sx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sy</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>sy</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ex</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>ex</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ey</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>ey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>sy</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>sx</name></expr>]</index></name> <operator>+=</operator> <name>color</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name>ex</name> <operator>-</operator> <name>sx</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>ey</name> <operator>-</operator> <name>sy</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sx</name> <operator>&gt;</operator> <name>ex</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>sx</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>sy</name></expr></argument>, <argument><expr><name>ey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>sx</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ex</name> <operator>-=</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ey</name> <operator>-</operator> <name>sy</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>/</operator> <name>ex</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;=</operator> <name>ex</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>*</operator> <name>f</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fr</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>*</operator> <name>f</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[ <expr><name>y</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>color</name> <operator>*</operator> <operator>(</operator><literal type="number">0x10000</literal> <operator>-</operator> <name>fr</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>fr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>buf</name><index>[<expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>color</name> <operator>*</operator> <name>fr</name> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sy</name> <operator>&gt;</operator> <name>ey</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>sx</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>sy</name></expr></argument>, <argument><expr><name>ey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>sx</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ey</name> <operator>-=</operator> <name>sy</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ey</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ex</name> <operator>-</operator> <name>sx</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>/</operator> <name>ey</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for<control>(<init><expr><name>y</name><operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;=</operator> <name>ey</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>y</name><operator>*</operator><name>f</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fr</name> <operator>=</operator> <operator>(</operator><name>y</name><operator>*</operator><name>f</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>y</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>x</name></expr> ]</index></name> <operator>+=</operator> <operator>(</operator><name>color</name> <operator>*</operator> <operator>(</operator><literal type="number">0x10000</literal> <operator>-</operator> <name>fr</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>fr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>buf</name><index>[<expr><name>y</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>color</name> <operator>*</operator> <name>fr</name> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_arrow</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ex</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>ey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tail</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dx</name></decl>,<decl><type ref="prev"/><name>dy</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>direction</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>sx</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>sy</name></expr></argument>, <argument><expr><name>ey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sx</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>sx</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">100</literal></expr></argument>, <argument><expr><name>w</name> <operator>+</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sy</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>sy</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">100</literal></expr></argument>, <argument><expr><name>h</name> <operator>+</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ex</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>ex</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">100</literal></expr></argument>, <argument><expr><name>w</name> <operator>+</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ey</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>ey</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">100</literal></expr></argument>, <argument><expr><name>h</name> <operator>+</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dx</name> <operator>=</operator> <name>ex</name> <operator>-</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dy</name> <operator>=</operator> <name>ey</name> <operator>-</operator> <name>sy</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dx</name> <operator>*</operator> <name>dx</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dy</name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rx</name> <init>= <expr><name>dx</name> <operator>+</operator> <name>dy</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ry</name> <init>= <expr><operator>-</operator><name>dx</name> <operator>+</operator> <name>dy</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name>sqrt</name><argument_list>(<argument><expr><operator>(</operator><name>rx</name> <operator>*</operator> <name>rx</name> <operator>+</operator> <name>ry</name> <operator>*</operator> <name>ry</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>rx</name> <operator>=</operator> <call><name>ROUNDED_DIV</name><argument_list>(<argument><expr><name>rx</name> <operator>*</operator> <literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ry</name> <operator>=</operator> <call><name>ROUNDED_DIV</name><argument_list>(<argument><expr><name>ry</name> <operator>*</operator> <literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tail</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rx</name> <operator>=</operator> <operator>-</operator><name>rx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ry</name> <operator>=</operator> <operator>-</operator><name>ry</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>draw_line</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sx</name></expr></argument>, <argument><expr><name>sy</name></expr></argument>, <argument><expr><name>sx</name> <operator>+</operator> <name>rx</name></expr></argument>, <argument><expr><name>sy</name> <operator>+</operator> <name>ry</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_line</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sx</name></expr></argument>, <argument><expr><name>sy</name></expr></argument>, <argument><expr><name>sx</name> <operator>-</operator> <name>ry</name></expr></argument>, <argument><expr><name>sy</name> <operator>+</operator> <name>rx</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>draw_line</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sx</name></expr></argument>, <argument><expr><name>sy</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>, <argument><expr><name>ey</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodecViewContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>qp</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>qstride</name></decl>, <decl><type ref="prev"/><name>qp_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>qp_table</name> <init>= <expr><call><name>av_frame_get_qp_table</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qstride</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qp_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>qp_table</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>hsub</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>vsub</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pu</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pv</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>lzu</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>lzv</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>qp</name> <init>= <expr><call><name>ff_norm_qscale</name><argument_list>(<argument><expr><name><name>qp_table</name><index>[<expr><operator>(</operator><name>y</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <name>qstride</name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>]</index></name></expr></argument>, <argument><expr><name>qp_type</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">128</literal><operator>/</operator><literal type="number">31</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pu</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>pv</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>qp</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>pu</name> <operator>+=</operator> <name>lzu</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pv</name> <operator>+=</operator> <name>lzv</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mv</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>mv_type</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVFrameSideData</name> <modifier>*</modifier></type><name>sd</name> <init>= <expr><call><name>av_frame_get_side_data</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>AV_FRAME_DATA_MOTION_VECTORS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sd</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVMotionVector</name> <modifier>*</modifier></type><name>mvs</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>AVMotionVector</name> <operator>*</operator><operator>)</operator><name><name>sd</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>is_iframe</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>&amp;</operator> <name>FRAME_TYPE_I</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>frame</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>is_pframe</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>&amp;</operator> <name>FRAME_TYPE_P</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>frame</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_P</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>is_bframe</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>&amp;</operator> <name>FRAME_TYPE_B</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>frame</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sd</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>mvs</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVMotionVector</name> <modifier>*</modifier></type><name>mv</name> <init>= <expr><operator>&amp;</operator><name><name>mvs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>direction</name> <init>= <expr><name><name>mv</name><operator>-&gt;</operator><name>source</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mv_type</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>is_fp</name> <init>= <expr><name>direction</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mv_type</name></name> <operator>&amp;</operator> <name>MV_TYPE_FOR</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>is_bp</name> <init>= <expr><name>direction</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mv_type</name></name> <operator>&amp;</operator> <name>MV_TYPE_BACK</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>is_fp</name> <operator>||</operator> <name>is_bp</name><operator>)</operator><operator>)</operator> <operator>||</operator>
<name>is_iframe</name> <operator>&amp;&amp;</operator> <name>is_fp</name> <operator>||</operator> <name>is_iframe</name> <operator>&amp;&amp;</operator> <name>is_bp</name> <operator>||</operator>
<name>is_pframe</name> <operator>&amp;&amp;</operator> <name>is_fp</name> <operator>||</operator>
<name>is_bframe</name> <operator>&amp;&amp;</operator> <name>is_fp</name> <operator>||</operator> <name>is_bframe</name> <operator>&amp;&amp;</operator> <name>is_bp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>draw_arrow</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mv</name><operator>-&gt;</operator><name>dst_x</name></name></expr></argument>, <argument><expr><name><name>mv</name><operator>-&gt;</operator><name>dst_y</name></name></expr></argument>, <argument><expr><name><name>mv</name><operator>-&gt;</operator><name>src_x</name></name></expr></argument>, <argument><expr><name><name>mv</name><operator>-&gt;</operator><name>src_y</name></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>direction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mv</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>direction</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mv</name></name> <operator>&amp;</operator> <name>MV_P_FOR</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>frame</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_P</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>direction</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mv</name></name> <operator>&amp;</operator> <name>MV_B_FOR</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>frame</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>direction</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mv</name></name> <operator>&amp;</operator> <name>MV_B_BACK</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>frame</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>draw_arrow</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mv</name><operator>-&gt;</operator><name>dst_x</name></name></expr></argument>, <argument><expr><name><name>mv</name><operator>-&gt;</operator><name>dst_y</name></name></expr></argument>, <argument><expr><name><name>mv</name><operator>-&gt;</operator><name>src_x</name></name></expr></argument>, <argument><expr><name><name>mv</name><operator>-&gt;</operator><name>src_y</name></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>direction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodecViewContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hsub</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vsub</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>codecview_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,
<expr><operator>.</operator><name>needs_writable</name> <operator>=</operator> <literal type="number">1</literal></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>codecview_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_codecview</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"codecview"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Visualize information about some codecs."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CodecViewContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>codecview_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>codecview_outputs</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>codecview_class</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
