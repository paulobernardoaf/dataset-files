<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vf_addroi.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/eval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<enum>enum <block>{
<decl><name>X</name></decl>, <decl><name>Y</name></decl>, <decl><name>W</name></decl>, <decl><name>H</name></decl>,
<decl><name>NB_PARAMS</name></decl>,
}</block>;</enum>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>addroi_param_names</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"x"</literal></expr>, <expr><literal type="string">"y"</literal></expr>, <expr><literal type="string">"w"</literal></expr>, <expr><literal type="string">"h"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<enum>enum <block>{
<decl><name>VAR_IW</name></decl>,
<decl><name>VAR_IH</name></decl>,
<decl><name>NB_VARS</name></decl>,
}</block>;</enum>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>addroi_var_names</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"iw"</literal></expr>,
<expr><literal type="string">"ih"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>AddROIContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>region_str</name><index>[<expr><name>NB_PARAMS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name><name>region_expr</name><index>[<expr><name>NB_PARAMS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>region</name><index>[<expr><name>NB_PARAMS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVRational</name></type> <name>qoffset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>clear</name></decl>;</decl_stmt>
}</block></struct></type> <name>AddROIContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>addroi_config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AddROIContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>vars</name><index>[<expr><name>NB_VARS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vars</name><index>[<expr><name>VAR_IW</name></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vars</name><index>[<expr><name>VAR_IH</name></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NB_PARAMS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>max_value</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>X</name></expr>:</case> <expr_stmt><expr><name>max_value</name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>Y</name></expr>:</case> <expr_stmt><expr><name>max_value</name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>W</name></expr>:</case> <expr_stmt><expr><name>max_value</name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>region</name><index>[<expr><name>X</name></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>H</name></expr>:</case> <expr_stmt><expr><name>max_value</name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>region</name><index>[<expr><name>Y</name></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>av_expr_eval</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>region_expr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>vars</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Calculated value %g for %s is "</literal>
<literal type="string">"less than zero - using zero instead.\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>,
<argument><expr><name><name>addroi_param_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>val</name> <operator>&gt;</operator> <name>max_value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Calculated value %g for %s is "</literal>
<literal type="string">"greater than maximum allowed value %d - "</literal>
<literal type="string">"using %d instead.\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>addroi_param_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>max_value</name></expr></argument>, <argument><expr><name>max_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>max_value</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>region</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>addroi_filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AddROIContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVRegionOfInterest</name> <modifier>*</modifier></type><name>roi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrameSideData</name> <modifier>*</modifier></type><name>sd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>clear</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_remove_side_data</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>AV_FRAME_DATA_REGIONS_OF_INTEREST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sd</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>sd</name> <operator>=</operator> <call><name>av_frame_get_side_data</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>AV_FRAME_DATA_REGIONS_OF_INTEREST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sd</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVRegionOfInterest</name> <modifier>*</modifier></type><name>old_roi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>old_roi_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>roi_ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_roi</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>old_roi</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>AVRegionOfInterest</name><operator>*</operator><operator>)</operator><name><name>sd</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_roi_size</name> <operator>=</operator> <name><name>old_roi</name><operator>-&gt;</operator><name>self_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>old_roi_size</name> <operator>&amp;&amp;</operator> <name><name>sd</name><operator>-&gt;</operator><name>size</name></name> <operator>%</operator> <name>old_roi_size</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nb_roi</name> <operator>=</operator> <name><name>sd</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <name>old_roi_size</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>roi_ref</name> <operator>=</operator> <call><name>av_buffer_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>roi</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nb_roi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>roi_ref</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>roi</name> <operator>=</operator> <operator>(</operator><name>AVRegionOfInterest</name><operator>*</operator><operator>)</operator><name><name>roi_ref</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_roi</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>old_roi</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>AVRegionOfInterest</name><operator>*</operator><operator>)</operator>
<operator>(</operator><name><name>sd</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>old_roi_size</name> <operator>*</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>roi</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>AVRegionOfInterest</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>self_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>roi</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>top</name> <operator>=</operator> <name><name>old_roi</name><operator>-&gt;</operator><name>top</name></name></expr>,
<expr><operator>.</operator><name>bottom</name> <operator>=</operator> <name><name>old_roi</name><operator>-&gt;</operator><name>bottom</name></name></expr>,
<expr><operator>.</operator><name>left</name> <operator>=</operator> <name><name>old_roi</name><operator>-&gt;</operator><name>left</name></name></expr>,
<expr><operator>.</operator><name>right</name> <operator>=</operator> <name><name>old_roi</name><operator>-&gt;</operator><name>right</name></name></expr>,
<expr><operator>.</operator><name>qoffset</name> <operator>=</operator> <name><name>old_roi</name><operator>-&gt;</operator><name>qoffset</name></name></expr>,
}</block></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>roi</name><index>[<expr><name>nb_roi</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>AVRegionOfInterest</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>self_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>roi</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>top</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>region</name><index>[<expr><name>Y</name></expr>]</index></name></expr>,
<expr><operator>.</operator><name>bottom</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>region</name><index>[<expr><name>Y</name></expr>]</index></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>region</name><index>[<expr><name>H</name></expr>]</index></name></expr>,
<expr><operator>.</operator><name>left</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>region</name><index>[<expr><name>X</name></expr>]</index></name></expr>,
<expr><operator>.</operator><name>right</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>region</name><index>[<expr><name>X</name></expr>]</index></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>region</name><index>[<expr><name>W</name></expr>]</index></name></expr>,
<expr><operator>.</operator><name>qoffset</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>qoffset</name></name></expr>,
}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_remove_side_data</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>AV_FRAME_DATA_REGIONS_OF_INTEREST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sd</name> <operator>=</operator> <call><name>av_frame_new_side_data_from_buf</name><argument_list>(<argument><expr><name>frame</name></expr></argument>,
<argument><expr><name>AV_FRAME_DATA_REGIONS_OF_INTEREST</name></expr></argument>,
<argument><expr><name>roi_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>roi_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>sd</name> <operator>=</operator> <call><name>av_frame_new_side_data</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>AV_FRAME_DATA_REGIONS_OF_INTEREST</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVRegionOfInterest</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>roi</name> <operator>=</operator> <operator>(</operator><name>AVRegionOfInterest</name><operator>*</operator><operator>)</operator><name><name>sd</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>roi</name> <operator>=</operator> <operator>(</operator><name>AVRegionOfInterest</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>self_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>roi</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>top</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>region</name><index>[<expr><name>Y</name></expr>]</index></name></expr>,
<expr><operator>.</operator><name>bottom</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>region</name><index>[<expr><name>Y</name></expr>]</index></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>region</name><index>[<expr><name>H</name></expr>]</index></name></expr>,
<expr><operator>.</operator><name>left</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>region</name><index>[<expr><name>X</name></expr>]</index></name></expr>,
<expr><operator>.</operator><name>right</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>region</name><index>[<expr><name>X</name></expr>]</index></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>region</name><index>[<expr><name>W</name></expr>]</index></name></expr>,
<expr><operator>.</operator><name>qoffset</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>qoffset</name></name></expr>,
}</block></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>addroi_init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AddROIContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NB_PARAMS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>av_expr_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>region_expr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>region_str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>addroi_var_names</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Error parsing %s expression '%s'.\n"</literal></expr></argument>,
<argument><expr><name><name>addroi_param_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>region_str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>addroi_uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AddROIContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NB_PARAMS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>region_expr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>region_expr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(AddROIContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>addroi_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"x"</literal></expr>, <expr><literal type="string">"Region distance from left edge of frame."</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>region_str</name><index>[<expr><name>X</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"0"</literal></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"y"</literal></expr>, <expr><literal type="string">"Region distance from top edge of frame."</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>region_str</name><index>[<expr><name>Y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"0"</literal></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"w"</literal></expr>, <expr><literal type="string">"Region width."</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>region_str</name><index>[<expr><name>W</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"0"</literal></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"h"</literal></expr>, <expr><literal type="string">"Region height."</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>region_str</name><index>[<expr><name>H</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"0"</literal></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"qoffset"</literal></expr>, <expr><literal type="string">"Quantisation offset to apply in the region."</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>qoffset</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_RATIONAL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <operator>-</operator><literal type="number">0.1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>+</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"clear"</literal></expr>, <expr><literal type="string">"Remove any existing regions of interest before adding the new one."</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>clear</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>addroi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>addroi_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>addroi_config_input</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>addroi_filter_frame</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>addroi_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_addroi</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"addroi"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Add region of interest to frame."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>addroi_init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>addroi_uninit</name></expr>,

<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AddROIContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>addroi_class</name></expr>,

<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>addroi_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>addroi_outputs</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
