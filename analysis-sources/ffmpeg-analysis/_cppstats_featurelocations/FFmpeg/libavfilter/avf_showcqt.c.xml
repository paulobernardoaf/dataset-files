<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\avf_showcqt.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/avfft.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/xga_font_data.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/eval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lavfutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lswsutils.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBFREETYPE</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ft2build.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> FT_FREETYPE_H</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBFONTCONFIG</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fontconfig/fontconfig.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avf_showcqt.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASEFREQ</name></cpp:macro> <cpp:value>20.01523126408007475</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENDFREQ</name></cpp:macro> <cpp:value>20495.59681441799654</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLENGTH</name></cpp:macro> <cpp:value>"384*tc/(384+tc*f)"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLENGTH_MIN</name></cpp:macro> <cpp:value>0.001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VOLUME_MAX</name></cpp:macro> <cpp:value>100.0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FONTCOLOR</name></cpp:macro> <cpp:value>"st(0, (midi(f)-59.5)/12);" "st(1, if(between(ld(0),0,1), 0.5-0.5*cos(2*PI*ld(0)), 0));" "r(1-ld(1)) + b(ld(1))"</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSCHEME</name></cpp:macro> <cpp:value>"1|0.5|0|0|0.5|1"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTS_STEP</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTS_TOLERANCE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(ShowCQTContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>(AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_VIDEO_PARAM)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>showcqt_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"size"</literal></expr>, <expr><literal type="string">"set video size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_IMAGE_SIZE</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"1920x1080"</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"set video size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_IMAGE_SIZE</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"1920x1080"</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fps"</literal></expr>, <expr><literal type="string">"set video rate"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_VIDEO_RATE</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"25"</literal></expr> }</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1000</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rate"</literal></expr>, <expr><literal type="string">"set video rate"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_VIDEO_RATE</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"25"</literal></expr> }</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1000</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"r"</literal></expr>, <expr><literal type="string">"set video rate"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_VIDEO_RATE</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"25"</literal></expr> }</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1000</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bar_h"</literal></expr>, <expr><literal type="string">"set bargraph height"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>bar_h</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"axis_h"</literal></expr>, <expr><literal type="string">"set axis height"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>axis_h</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sono_h"</literal></expr>, <expr><literal type="string">"set sonogram height"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sono_h</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fullhd"</literal></expr>, <expr><literal type="string">"set fullhd size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>fullhd</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sono_v"</literal></expr>, <expr><literal type="string">"set sonogram volume"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sono_v</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"16"</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"volume"</literal></expr>, <expr><literal type="string">"set sonogram volume"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sono_v</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"16"</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bar_v"</literal></expr>, <expr><literal type="string">"set bargraph volume"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>bar_v</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"sono_v"</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"volume2"</literal></expr>, <expr><literal type="string">"set bargraph volume"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>bar_v</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"sono_v"</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sono_g"</literal></expr>, <expr><literal type="string">"set sonogram gamma"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sono_g</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">3.0</literal></expr> }</block></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">7.0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"gamma"</literal></expr>, <expr><literal type="string">"set sonogram gamma"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sono_g</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">3.0</literal></expr> }</block></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">7.0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bar_g"</literal></expr>, <expr><literal type="string">"set bargraph gamma"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>bar_g</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">1.0</literal></expr> }</block></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">7.0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"gamma2"</literal></expr>, <expr><literal type="string">"set bargraph gamma"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>bar_g</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">1.0</literal></expr> }</block></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">7.0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bar_t"</literal></expr>, <expr><literal type="string">"set bar transparency"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>bar_t</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">1.0</literal></expr> }</block></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"timeclamp"</literal></expr>, <expr><literal type="string">"set timeclamp"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>timeclamp</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">0.17</literal></expr> }</block></expr>, <expr><literal type="number">0.002</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"tc"</literal></expr>, <expr><literal type="string">"set timeclamp"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>timeclamp</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">0.17</literal></expr> }</block></expr>, <expr><literal type="number">0.002</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"attack"</literal></expr>, <expr><literal type="string">"set attack time"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>attack</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"basefreq"</literal></expr>, <expr><literal type="string">"set base frequency"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>basefreq</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <name>BASEFREQ</name></expr> }</block></expr>, <expr><literal type="number">10.0</literal></expr>, <expr><literal type="number">100000.0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"endfreq"</literal></expr>, <expr><literal type="string">"set end frequency"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>endfreq</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <name>ENDFREQ</name></expr> }</block></expr>, <expr><literal type="number">10.0</literal></expr>, <expr><literal type="number">100000.0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"coeffclamp"</literal></expr>, <expr><literal type="string">"set coeffclamp"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>coeffclamp</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">1.0</literal></expr> }</block></expr>, <expr><literal type="number">0.1</literal></expr>, <expr><literal type="number">10.0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"tlength"</literal></expr>, <expr><literal type="string">"set tlength"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>tlength</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>TLENGTH</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"count"</literal></expr>, <expr><literal type="string">"set transform count"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">6</literal></expr> }</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fcount"</literal></expr>, <expr><literal type="string">"set frequency count"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>fcount</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fontfile"</literal></expr>, <expr><literal type="string">"set axis font file"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>fontfile</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"font"</literal></expr>, <expr><literal type="string">"set axis font"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fontcolor"</literal></expr>, <expr><literal type="string">"set font color"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>fontcolor</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>FONTCOLOR</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"axisfile"</literal></expr>, <expr><literal type="string">"set axis image"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>axisfile</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"axis"</literal></expr>, <expr><literal type="string">"draw axis"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>axis</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"text"</literal></expr>, <expr><literal type="string">"draw axis"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>axis</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"csp"</literal></expr>, <expr><literal type="string">"set color space"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>csp</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AVCOL_SPC_UNSPECIFIED</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"csp"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unspecified"</literal></expr>, <expr><literal type="string">"unspecified"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AVCOL_SPC_UNSPECIFIED</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"csp"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bt709"</literal></expr>, <expr><literal type="string">"bt709"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AVCOL_SPC_BT709</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"csp"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fcc"</literal></expr>, <expr><literal type="string">"fcc"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AVCOL_SPC_FCC</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"csp"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bt470bg"</literal></expr>, <expr><literal type="string">"bt470bg"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AVCOL_SPC_BT470BG</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"csp"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"smpte170m"</literal></expr>, <expr><literal type="string">"smpte170m"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AVCOL_SPC_SMPTE170M</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"csp"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"smpte240m"</literal></expr>, <expr><literal type="string">"smpte240m"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AVCOL_SPC_SMPTE240M</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"csp"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bt2020ncl"</literal></expr>, <expr><literal type="string">"bt2020ncl"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AVCOL_SPC_BT2020_NCL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"csp"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cscheme"</literal></expr>, <expr><literal type="string">"set color scheme"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>cscheme</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>CSCHEME</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>showcqt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>common_uninit</name><parameter_list>(<parameter><decl><type><name>ShowCQTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><name>AV_LOG_DEBUG</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>plot_time</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fft_time</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"fft_time = %16.3f s.\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_time</name></name> <operator>*</operator> <literal type="number">1e-6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>cqt_time</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"cqt_time = %16.3f s.\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cqt_time</name></name> <operator>*</operator> <literal type="number">1e-6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>process_cqt_time</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"process_cqt_time = %16.3f s.\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>process_cqt_time</name></name> <operator>*</operator> <literal type="number">1e-6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>update_sono_time</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"update_sono_time = %16.3f s.\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>update_sono_time</name></name> <operator>*</operator> <literal type="number">1e-6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>alloc_time</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"alloc_time = %16.3f s.\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>alloc_time</name></name> <operator>*</operator> <literal type="number">1e-6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bar_time</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"bar_time = %16.3f s.\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bar_time</name></name> <operator>*</operator> <literal type="number">1e-6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>axis_time</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"axis_time = %16.3f s.\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>axis_time</name></name> <operator>*</operator> <literal type="number">1e-6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sono_time</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"sono_time = %16.3f s.\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sono_time</name></name> <operator>*</operator> <literal type="number">1e-6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>plot_time</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_time</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>cqt_time</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>process_cqt_time</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>update_sono_time</name></name>
<operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>alloc_time</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>bar_time</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>axis_time</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>sono_time</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>plot_time</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"plot_time = %16.3f s.\n"</literal></expr></argument>, <argument><expr><name>plot_time</name> <operator>*</operator> <literal type="number">1e-6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_time</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cqt_time</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>process_cqt_time</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>update_sono_time</name></name>
<operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>alloc_time</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bar_time</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>axis_time</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sono_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>axis_frame</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>axis_frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>axis_frame</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>axis_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>axis_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sono_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_fft_end</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_ctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>coeffs</name></name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cqt_len</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>coeffs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fft_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fft_result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cqt_result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>attack_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>h_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rcp_h_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>freq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sono_v_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bar_v_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name> <modifier>*</modifier></type><name>create_freq_table</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>log_base</name></decl>, <decl><type ref="prev"/><name>log_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>rcp_n</name> <init>= <expr><literal type="number">1.0</literal> <operator>/</operator> <name>n</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>freq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><name>freq</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>freq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>freq</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>log_base</name> <operator>=</operator> <call><name>log</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>log_end</name> <operator>=</operator> <call><name>log</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>log_freq</name> <init>= <expr><name>log_base</name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>log_end</name> <operator>-</operator> <name>log_base</name><operator>)</operator> <operator>*</operator> <name>rcp_n</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>freq</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>exp</name><argument_list>(<argument><expr><name>log_freq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>freq</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>clip_with_log</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>max</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>nan_replace</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><name>AV_LOG_WARNING</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"[%d] %s is nan, setting it to %g.\n"</literal></expr></argument>,
<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>nan_replace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>nan_replace</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>val</name> <operator>&lt;</operator> <name>min</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"[%d] %s is too low (%g), setting it to %g.\n"</literal></expr></argument>,
<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>min</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>val</name> <operator>&gt;</operator> <name>max</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"[%d] %s it too high (%g), setting it to %g.\n"</literal></expr></argument>,
<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>a_weighting</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>ret</name> <init>= <expr><literal type="number">12200.0</literal><operator>*</operator><literal type="number">12200.0</literal> <operator>*</operator> <operator>(</operator><name>f</name><operator>*</operator><name>f</name><operator>*</operator><name>f</name><operator>*</operator><name>f</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>/=</operator> <operator>(</operator><name>f</name><operator>*</operator><name>f</name> <operator>+</operator> <literal type="number">20.6</literal><operator>*</operator><literal type="number">20.6</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>f</name><operator>*</operator><name>f</name> <operator>+</operator> <literal type="number">12200.0</literal><operator>*</operator><literal type="number">12200.0</literal><operator>)</operator> <operator>*</operator>
<call><name>sqrt</name><argument_list>(<argument><expr><operator>(</operator><name>f</name><operator>*</operator><name>f</name> <operator>+</operator> <literal type="number">107.7</literal><operator>*</operator><literal type="number">107.7</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>f</name><operator>*</operator><name>f</name> <operator>+</operator> <literal type="number">737.9</literal><operator>*</operator><literal type="number">737.9</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>b_weighting</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>ret</name> <init>= <expr><literal type="number">12200.0</literal><operator>*</operator><literal type="number">12200.0</literal> <operator>*</operator> <operator>(</operator><name>f</name><operator>*</operator><name>f</name><operator>*</operator><name>f</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>/=</operator> <operator>(</operator><name>f</name><operator>*</operator><name>f</name> <operator>+</operator> <literal type="number">20.6</literal><operator>*</operator><literal type="number">20.6</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>f</name><operator>*</operator><name>f</name> <operator>+</operator> <literal type="number">12200.0</literal><operator>*</operator><literal type="number">12200.0</literal><operator>)</operator> <operator>*</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name>f</name><operator>*</operator><name>f</name> <operator>+</operator> <literal type="number">158.5</literal><operator>*</operator><literal type="number">158.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>c_weighting</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>ret</name> <init>= <expr><literal type="number">12200.0</literal><operator>*</operator><literal type="number">12200.0</literal> <operator>*</operator> <operator>(</operator><name>f</name><operator>*</operator><name>f</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>/=</operator> <operator>(</operator><name>f</name><operator>*</operator><name>f</name> <operator>+</operator> <literal type="number">20.6</literal><operator>*</operator><literal type="number">20.6</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>f</name><operator>*</operator><name>f</name> <operator>+</operator> <literal type="number">12200.0</literal><operator>*</operator><literal type="number">12200.0</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_volume</name><parameter_list>(<parameter><decl><type><name>ShowCQTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>func_names</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"a_weighting"</literal></expr>, <expr><literal type="string">"b_weighting"</literal></expr>, <expr><literal type="string">"c_weighting"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>sono_names</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"timeclamp"</literal></expr>, <expr><literal type="string">"tc"</literal></expr>, <expr><literal type="string">"frequency"</literal></expr>, <expr><literal type="string">"freq"</literal></expr>, <expr><literal type="string">"f"</literal></expr>, <expr><literal type="string">"bar_v"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>bar_names</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"timeclamp"</literal></expr>, <expr><literal type="string">"tc"</literal></expr>, <expr><literal type="string">"frequency"</literal></expr>, <expr><literal type="string">"freq"</literal></expr>, <expr><literal type="string">"f"</literal></expr>, <expr><literal type="string">"sono_v"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<function_decl><type><name>double</name></type> (<modifier>*</modifier><name>funcs</name><index>[]</index>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list> <init>= <expr><block>{ <expr><name>a_weighting</name></expr></block></expr></init><operator>,</operator> b_weighting<operator>,</operator> c_weighting</function_decl> </block_content>}</block></function><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name>sono</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bar</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sono_v_buf</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cqt_len</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>sono_v_buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bar_v_buf</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cqt_len</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>bar_v_buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>sono_v_buf</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>bar_v_buf</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_expr_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sono</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sono_v</name></name></expr></argument>, <argument><expr><name>sono_names</name></expr></argument>, <argument><expr><name>func_names</name></expr></argument>, <argument><expr><name>funcs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_expr_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bar</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bar_v</name></name></expr></argument>, <argument><expr><name>bar_names</name></expr></argument>, <argument><expr><name>func_names</name></expr></argument>, <argument><expr><name>funcs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cqt_len</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name><name>vars</name><index>[]</index></name> <init>= <expr><block>{ <expr><name><name>s</name><operator>-&gt;</operator><name>timeclamp</name></name></expr>, <expr><name><name>s</name><operator>-&gt;</operator><name>timeclamp</name></name></expr>, <expr><name><name>s</name><operator>-&gt;</operator><name>freq</name><index>[<expr><name>x</name></expr>]</index></name></expr>, <expr><name><name>s</name><operator>-&gt;</operator><name>freq</name><index>[<expr><name>x</name></expr>]</index></name></expr>, <expr><name><name>s</name><operator>-&gt;</operator><name>freq</name><index>[<expr><name>x</name></expr>]</index></name></expr>, <expr><literal type="number">0.0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>vol</name> <init>= <expr><call><name>clip_with_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><literal type="string">"sono_v"</literal></expr></argument>, <argument><expr><call><name>av_expr_eval</name><argument_list>(<argument><expr><name>sono</name></expr></argument>, <argument><expr><name>vars</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name>VOLUME_MAX</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>vars</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>vol</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vol</name> <operator>=</operator> <call><name>clip_with_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><literal type="string">"bar_v"</literal></expr></argument>, <argument><expr><call><name>av_expr_eval</name><argument_list>(<argument><expr><name>bar</name></expr></argument>, <argument><expr><name>vars</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name>VOLUME_MAX</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bar_v_buf</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>vol</name> <operator>*</operator> <name>vol</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vars</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>vol</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vol</name> <operator>=</operator> <call><name>clip_with_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><literal type="string">"sono_v"</literal></expr></argument>, <argument><expr><call><name>av_expr_eval</name><argument_list>(<argument><expr><name>sono</name></expr></argument>, <argument><expr><name>vars</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name>VOLUME_MAX</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sono_v_buf</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>vol</name> <operator>*</operator> <name>vol</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name>sono</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sono_v_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bar_v_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name>sono</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
}

static <function><type><name>void</name></type> <name>cqt_calc</name><parameter_list>(<parameter><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FFTComplex</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Coeffs</name> <modifier>*</modifier></type><name>coeffs</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fft_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>FFTComplex</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>a</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>coeffs</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>len</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>FFTSample</name></type> <name>u</name> <init>= <expr><name><name>coeffs</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name><name>val</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>coeffs</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>+</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>fft_len</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>re</name></name> <operator>+=</operator> <name>u</name> <operator>*</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>.</operator><name>im</name></name> <operator>+=</operator> <name>u</name> <operator>*</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>.</operator><name>re</name></name> <operator>+=</operator> <name>u</name> <operator>*</operator> <name><name>src</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>.</operator><name>im</name></name> <operator>+=</operator> <name>u</name> <operator>*</operator> <name><name>src</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>l</name><operator>.</operator><name>re</name></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>re</name></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>re</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name><operator>.</operator><name>im</name></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>im</name></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>im</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>re</name></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>im</name></name> <operator>+</operator> <name><name>a</name><operator>.</operator><name>im</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>.</operator><name>im</name></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>re</name></name> <operator>-</operator> <name><name>a</name><operator>.</operator><name>re</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>l</name><operator>.</operator><name>re</name></name> <operator>*</operator> <name><name>l</name><operator>.</operator><name>re</name></name> <operator>+</operator> <name><name>l</name><operator>.</operator><name>im</name></name> <operator>*</operator> <name><name>l</name><operator>.</operator><name>im</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>re</name></name> <operator>*</operator> <name><name>r</name><operator>.</operator><name>re</name></name> <operator>+</operator> <name><name>r</name><operator>.</operator><name>im</name></name> <operator>*</operator> <name><name>r</name><operator>.</operator><name>im</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_cqt</name><parameter_list>(<parameter><decl><type><name>ShowCQTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>var_names</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"timeclamp"</literal></expr>, <expr><literal type="string">"tc"</literal></expr>, <expr><literal type="string">"frequency"</literal></expr>, <expr><literal type="string">"freq"</literal></expr>, <expr><literal type="string">"f"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name>expr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rate</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>sample_rate</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_cqt_coeffs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_expr_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>expr</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>tlength</name></name></expr></argument>, <argument><expr><name>var_names</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>coeffs</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cqt_len</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>coeffs</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cqt_len</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name><name>vars</name><index>[]</index></name> <init>= <expr><block>{ <expr><name><name>s</name><operator>-&gt;</operator><name>timeclamp</name></name></expr>, <expr><name><name>s</name><operator>-&gt;</operator><name>timeclamp</name></name></expr>, <expr><name><name>s</name><operator>-&gt;</operator><name>freq</name><index>[<expr><name>k</name></expr>]</index></name></expr>, <expr><name><name>s</name><operator>-&gt;</operator><name>freq</name><index>[<expr><name>k</name></expr>]</index></name></expr>, <expr><name><name>s</name><operator>-&gt;</operator><name>freq</name><index>[<expr><name>k</name></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>flen</name></decl>, <decl><type ref="prev"/><name>center</name></decl>, <decl><type ref="prev"/><name>tlength</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>, <decl><type ref="prev"/><name>m</name> <init>= <expr><name>k</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>freq</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0.5</literal> <operator>*</operator> <name>rate</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tlength</name> <operator>=</operator> <call><name>clip_with_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><literal type="string">"tlength"</literal></expr></argument>, <argument><expr><call><name>av_expr_eval</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><name>vars</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>TLENGTH_MIN</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>timeclamp</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>timeclamp</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flen</name> <operator>=</operator> <literal type="number">8.0</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_len</name></name> <operator>/</operator> <operator>(</operator><name>tlength</name> <operator>*</operator> <name>rate</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>center</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>freq</name><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_len</name></name> <operator>/</operator> <name>rate</name></expr>;</expr_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>ceil</name><argument_list>(<argument><expr><name>center</name> <operator>-</operator> <literal type="number">0.5</literal> <operator>*</operator> <name>flen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_len</name></name></expr></argument>, <argument><expr><call><name>floor</name><argument_list>(<argument><expr><name>center</name> <operator>+</operator> <literal type="number">0.5</literal> <operator>*</operator> <name>flen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>=</operator> <name>start</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>cqt_align</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <operator>(</operator><name>end</name> <operator>|</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>cqt_align</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nb_cqt_coeffs</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;=</operator> <name>end</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>y</name> <init>= <expr><literal type="number">2.0</literal> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <operator>(</operator><name>x</name> <operator>-</operator> <name>center</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>/</operator> <name>flen</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>w</name> <init>= <expr><literal type="number">0.355768</literal> <operator>+</operator> <literal type="number">0.487396</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">0.144232</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>y</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">0.012604</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>*</operator><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>w</name> <operator>*=</operator> <name>sign</name> <operator>*</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_len</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>val</name><index>[<expr><name>x</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>start</name></expr>]</index></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>permute_coeffs</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>permute_coeffs</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>val</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"nb_cqt_coeffs = %d.\n"</literal></expr></argument>, <argument><expr><name>nb_cqt_coeffs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>coeffs</name></name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cqt_len</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>coeffs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>alloc_frame_empty</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>av_frame_get_buffer</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <name>AV_PIX_FMT_RGB24</name> <operator>||</operator> <name>format</name> <operator>==</operator> <name>AV_PIX_FMT_RGBA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>hh</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>format</name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name> <operator>||</operator> <name>format</name> <operator>==</operator> <name>AV_PIX_FMT_YUVA420P</name><operator>)</operator></expr> ?</condition><then> <expr><name>h</name> <operator>/</operator> <literal type="number">2</literal></expr> </then><else>: <expr><name>h</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>hh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>hh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>convert_axis_pixel_format</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>format</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_RGB24</name></expr>:</case> <expr_stmt><expr><name>format</name> <operator>=</operator> <name>AV_PIX_FMT_RGBA</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AV_PIX_FMT_YUV444P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P</name></expr>:</case> <expr_stmt><expr><name>format</name> <operator>=</operator> <name>AV_PIX_FMT_YUVA444P</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>format</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_axis_empty</name><parameter_list>(<parameter><decl><type><name>ShowCQTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>axis_frame</name></name> <operator>=</operator> <call><name>alloc_frame_empty</name><argument_list>(<argument><expr><call><name>convert_axis_pixel_format</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>axis_h</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_axis_from_file</name><parameter_list>(<parameter><decl><type><name>ShowCQTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>tmp_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>tmp_linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>tmp_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tmp_w</name></decl>, <decl><type ref="prev"/><name>tmp_h</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_load_image</name><argument_list>(<argument><expr><name>tmp_data</name></expr></argument>, <argument><expr><name>tmp_linesize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_format</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>axisfile</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>axis_frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_scale_image</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>axis_frame</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>axis_frame</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>axis_h</name></name></expr></argument>,
<argument><expr><call><name>convert_axis_pixel_format</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tmp_data</name></expr></argument>, <argument><expr><name>tmp_linesize</name></expr></argument>, <argument><expr><name>tmp_w</name></expr></argument>, <argument><expr><name>tmp_h</name></expr></argument>,
<argument><expr><name>tmp_format</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>axis_frame</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>axis_frame</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>axis_h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>axis_frame</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <call><name>convert_axis_pixel_format</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>tmp_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>axis_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>tmp_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>midi</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>log2</name><argument_list>(<argument><expr><name>f</name><operator>/</operator><literal type="number">440.0</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">12.0</literal> <operator>+</operator> <literal type="number">69.0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>r_func</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>av_clipd</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>lrint</name><argument_list>(<argument><expr><name>x</name><operator>*</operator><literal type="number">255.0</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>g_func</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>av_clipd</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>lrint</name><argument_list>(<argument><expr><name>x</name><operator>*</operator><literal type="number">255.0</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>b_func</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>av_clipd</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>lrint</name><argument_list>(<argument><expr><name>x</name><operator>*</operator><literal type="number">255.0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_axis_color</name><parameter_list>(<parameter><decl><type><name>ShowCQTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>half</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>var_names</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"timeclamp"</literal></expr>, <expr><literal type="string">"tc"</literal></expr>, <expr><literal type="string">"frequency"</literal></expr>, <expr><literal type="string">"freq"</literal></expr>, <expr><literal type="string">"f"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>func_names</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"midi"</literal></expr>, <expr><literal type="string">"r"</literal></expr>, <expr><literal type="string">"g"</literal></expr>, <expr><literal type="string">"b"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<function_decl><type><name>double</name></type> (<modifier>*</modifier><name>funcs</name><index>[]</index>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list> <init>= <expr><block>{ <expr><name>midi</name></expr></block></expr></init><operator>,</operator> r_func<operator>,</operator> g_func<operator>,</operator> b_func</function_decl> </block_content>}</block></function><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name>expr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>freq</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>xs</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><ternary><condition><expr><name>half</name></expr> ?</condition><then> <expr><literal type="number">1920</literal><operator>/</operator><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1920</literal></expr></else></ternary></expr></init></decl>, <decl><type ref="prev"/><name>height</name> <init>= <expr><ternary><condition><expr><name>half</name></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">32</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>step</name> <init>= <expr><ternary><condition><expr><name>half</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>basefreq</name></name> <operator>!=</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>BASEFREQ</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>endfreq</name></name> <operator>!=</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>ENDFREQ</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"font axis rendering is not implemented in non-default frequency range,"</literal>
<literal type="string">" please use axisfile option instead.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>cqt_len</name></name> <operator>==</operator> <literal type="number">1920</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>freq</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>freq</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>freq</name> <operator>=</operator> <call><name>create_freq_table</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>basefreq</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>endfreq</name></name></expr></argument>, <argument><expr><literal type="number">1920</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_expr_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>expr</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fontcolor</name></name></expr></argument>, <argument><expr><name>var_names</name></expr></argument>, <argument><expr><name>func_names</name></expr></argument>, <argument><expr><name>funcs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>freq</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>freq</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>freq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>xs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr><operator>,</operator> <expr><name>xs</name> <operator>+=</operator> <name>step</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name><name>vars</name><index>[]</index></name> <init>= <expr><block>{ <expr><name><name>s</name><operator>-&gt;</operator><name>timeclamp</name></name></expr>, <expr><name><name>s</name><operator>-&gt;</operator><name>timeclamp</name></name></expr>, <expr><name><name>freq</name><index>[<expr><name>xs</name></expr>]</index></name></expr>, <expr><name><name>freq</name><index>[<expr><name>xs</name></expr>]</index></name></expr>, <expr><name><name>freq</name><index>[<expr><name>xs</name></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>color</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>av_expr_eval</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><name>vars</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>r</name> <init>= <expr><operator>(</operator><name>color</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></init></decl>, <decl><type ref="prev"/><name>g</name> <init>= <expr><operator>(</operator><name>color</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><name>color</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>tmp</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>linesize</name> <init>= <expr><name><name>tmp</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>linesize</name> <operator>*</operator> <name>y</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>linesize</name> <operator>*</operator> <name>y</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>linesize</name> <operator>*</operator> <name>y</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>x</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>freq</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>freq</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>freq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
}

static <function><type><name>int</name></type> <name>render_freetype</name><parameter_list>(<parameter><decl><type><name>ShowCQTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fontfile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBFREETYPE</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><literal type="string">"EF G A BC D "</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>tmp</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>linesize</name> <init>= <expr><name><name>tmp</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FT_Library</name></type> <name>lib</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FT_Face</name></type> <name>face</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>font_width</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>, <decl><type ref="prev"/><name>font_height</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>font_repeat</name> <init>= <expr><name>font_width</name> <operator>*</operator> <literal type="number">12</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>linear_hori_advance</name> <init>= <expr><name>font_width</name> <operator>*</operator> <literal type="number">65536</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>non_monospace_warning</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fontfile</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FT_Init_FreeType</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lib</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FT_New_Face</name><argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><name>fontfile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>face</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FT_Set_Char_Size</name><argument_list>(<argument><expr><name>face</name></expr></argument>, <argument><expr><literal type="number">16</literal><operator>*</operator><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FT_Load_Char</name><argument_list>(<argument><expr><name>face</name></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>, <argument><expr><name>FT_LOAD_RENDER</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FT_Set_Char_Size</name><argument_list>(<argument><expr><name>face</name></expr></argument>, <argument><expr><literal type="number">16</literal><operator>*</operator><literal type="number">64</literal> <operator>*</operator> <name>linear_hori_advance</name> <operator>/</operator> <name><name>face</name><operator>-&gt;</operator><name>glyph</name><operator>-&gt;</operator><name>linearHoriAdvance</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sx</name></decl>, <decl><type ref="prev"/><name>sy</name></decl>, <decl><type ref="prev"/><name>rx</name></decl>, <decl><type ref="prev"/><name>bx</name></decl>, <decl><type ref="prev"/><name>by</name></decl>, <decl><type ref="prev"/><name>dx</name></decl>, <decl><type ref="prev"/><name>dy</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><name>x</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FT_Load_Char</name><argument_list>(<argument><expr><name>face</name></expr></argument>, <argument><expr><name><name>str</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name>FT_LOAD_RENDER</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>face</name><operator>-&gt;</operator><name>glyph</name><operator>-&gt;</operator><name>advance</name><operator>.</operator><name>x</name></name> <operator>!=</operator> <name>font_width</name><operator>*</operator><literal type="number">64</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>non_monospace_warning</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"font is not monospace.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>non_monospace_warning</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sy</name> <operator>=</operator> <name>font_height</name> <operator>-</operator> <literal type="number">8</literal> <operator>-</operator> <name><name>face</name><operator>-&gt;</operator><name>glyph</name><operator>-&gt;</operator><name>bitmap_top</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>rx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>rx</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>rx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>sx</name> <operator>=</operator> <name>rx</name> <operator>*</operator> <name>font_repeat</name> <operator>+</operator> <name>x</name> <operator>*</operator> <name>font_width</name> <operator>+</operator> <name><name>face</name><operator>-&gt;</operator><name>glyph</name><operator>-&gt;</operator><name>bitmap_left</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>by</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>by</name> <operator>&lt;</operator> <name><name>face</name><operator>-&gt;</operator><name>glyph</name><operator>-&gt;</operator><name>bitmap</name><operator>.</operator><name>rows</name></name></expr>;</condition> <incr><expr><name>by</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>dy</name> <operator>=</operator> <name>by</name> <operator>+</operator> <name>sy</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dy</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dy</name> <operator>&gt;=</operator> <name>font_height</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>bx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bx</name> <operator>&lt;</operator> <name><name>face</name><operator>-&gt;</operator><name>glyph</name><operator>-&gt;</operator><name>bitmap</name><operator>.</operator><name>width</name></name></expr>;</condition> <incr><expr><name>bx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>dx</name> <operator>=</operator> <name>bx</name> <operator>+</operator> <name>sx</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dx</name> <operator>&gt;=</operator> <literal type="number">1920</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>dy</name><operator>*</operator><name>linesize</name><operator>+</operator><literal type="number">4</literal><operator>*</operator><name>dx</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>face</name><operator>-&gt;</operator><name>glyph</name><operator>-&gt;</operator><name>bitmap</name><operator>.</operator><name>buffer</name><index>[<expr><name>by</name><operator>*</operator><name><name>face</name><operator>-&gt;</operator><name>glyph</name><operator>-&gt;</operator><name>bitmap</name><operator>.</operator><name>width</name></name><operator>+</operator><name>bx</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>FT_Done_Face</name><argument_list>(<argument><expr><name>face</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FT_Done_FreeType</name><argument_list>(<argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"error while loading freetype font.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FT_Done_Face</name><argument_list>(<argument><expr><name>face</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FT_Done_FreeType</name><argument_list>(<argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name>fontfile</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"freetype is not available, ignoring fontfile option.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>render_fontconfig</name><parameter_list>(<parameter><decl><type><name>ShowCQTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>font</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBFONTCONFIG</name></expr></cpp:if>
<decl_stmt><decl><type><name>FcConfig</name> <modifier>*</modifier></type><name>fontconfig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FcPattern</name> <modifier>*</modifier></type><name>pat</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>best</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FcResult</name></type> <name>result</name> <init>= <expr><name>FcResultMatch</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>font</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>font</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>font</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'|'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>font</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>fontconfig</name> <operator>=</operator> <call><name>FcInitLoadConfigAndFonts</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"impossible to init fontconfig.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>pat</name> <operator>=</operator> <call><name>FcNameParse</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>font</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not parse fontconfig pat.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FcConfigDestroy</name><argument_list>(<argument><expr><name>fontconfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>FcDefaultSubstitute</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FcConfigSubstitute</name><argument_list>(<argument><expr><name>fontconfig</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>FcMatchPattern</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not substitue fontconfig options.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FcPatternDestroy</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FcConfigDestroy</name><argument_list>(<argument><expr><name>fontconfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>best</name> <operator>=</operator> <call><name>FcFontMatch</name><argument_list>(<argument><expr><name>fontconfig</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FcPatternDestroy</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>best</name> <operator>||</operator> <name>result</name> <operator>!=</operator> <name>FcResultMatch</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot find a valid font for %s.\n"</literal></expr></argument>, <argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FcPatternGetString</name><argument_list>(<argument><expr><name>best</name></expr></argument>, <argument><expr><name>FC_FILE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>FcChar8</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>filename</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FcResultMatch</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"no file path for %s\n"</literal></expr></argument>, <argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>render_freetype</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>FcPatternDestroy</name><argument_list>(<argument><expr><name>best</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FcConfigDestroy</name><argument_list>(<argument><expr><name>fontconfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name>font</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"fontconfig is not available, ignoring font option.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>render_default_font</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><literal type="string">"EF G A BC D "</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>tmp</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>linesize</name> <init>= <expr><name><name>tmp</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><literal type="number">1920</literal><operator>/</operator><literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>height</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <name>width</name><operator>/</operator><literal type="number">10</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>startptr</name> <init>= <expr><name>data</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>x</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><name>u</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>v</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>startptr</name> <operator>+</operator> <name>v</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>height</name><operator>/</operator><literal type="number">2</literal> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <name>u</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>mask</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</init> <condition><expr><name>mask</name></expr>;</condition> <incr><expr><name>mask</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name><name>avpriv_vga16_font</name><index>[<expr><name><name>str</name><index>[<expr><name>u</name></expr>]</index></name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>v</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_axis_from_font</name><parameter_list>(<parameter><decl><type><name>ShowCQTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><literal type="number">1920</literal></expr></init></decl>, <decl><type ref="prev"/><name>height</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>default_font</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>alloc_frame_empty</name><argument_list>(<argument><expr><name>AV_PIX_FMT_RGBA</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>axis_frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>render_freetype</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fontfile</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>render_fontconfig</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>font</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>default_font</name> <operator>=</operator> <literal type="number">1</literal><operator>,</operator> <name>ret</name> <operator>=</operator> <call><name>render_default_font</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>default_font</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>width</name> <operator>/=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>height</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_axis_color</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>default_font</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_scale_image</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>axis_frame</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>axis_frame</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>axis_h</name></name></expr></argument>,
<argument><expr><call><name>convert_axis_pixel_format</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_RGBA</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>axis_frame</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>axis_frame</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>axis_h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>axis_frame</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <call><name>convert_axis_pixel_format</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>axis_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>calculate_gamma</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>g</name> <operator>==</operator> <literal type="number">1.0f</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>v</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>g</name> <operator>==</operator> <literal type="number">2.0f</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>sqrtf</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>g</name> <operator>==</operator> <literal type="number">3.0f</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>cbrtf</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>g</name> <operator>==</operator> <literal type="number">4.0f</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>sqrtf</name><argument_list>(<argument><expr><call><name>sqrtf</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>expf</name><argument_list>(<argument><expr><call><name>logf</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>g</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb_from_cqt</name><parameter_list>(<parameter><decl><type><name>ColorFloat</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FFTComplex</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name><name>cscheme</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name><name>rgb</name><operator>.</operator><name>r</name></name> <operator>=</operator> <literal type="number">255.0f</literal> <operator>*</operator> <call><name>calculate_gamma</name><argument_list>(<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><name><name>cscheme</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>v</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <name><name>cscheme</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>v</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name><name>rgb</name><operator>.</operator><name>g</name></name> <operator>=</operator> <literal type="number">255.0f</literal> <operator>*</operator> <call><name>calculate_gamma</name><argument_list>(<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><name><name>cscheme</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>v</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <name><name>cscheme</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <name><name>v</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name><name>rgb</name><operator>.</operator><name>b</name></name> <operator>=</operator> <literal type="number">255.0f</literal> <operator>*</operator> <call><name>calculate_gamma</name><argument_list>(<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><name><name>cscheme</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>v</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <name><name>cscheme</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>*</operator> <name><name>v</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>yuv_from_cqt</name><parameter_list>(<parameter><decl><type><name>ColorFloat</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FFTComplex</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>gamma</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name><name>cm</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name><name>cscheme</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>calculate_gamma</name><argument_list>(<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><name><name>cscheme</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>v</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <name><name>cscheme</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>v</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>gamma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>calculate_gamma</name><argument_list>(<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><name><name>cscheme</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>v</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <name><name>cscheme</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <name><name>v</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>gamma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>calculate_gamma</name><argument_list>(<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><name><name>cscheme</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>v</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <name><name>cscheme</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>*</operator> <name><name>v</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>gamma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name><name>yuv</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>cm</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>r</name> <operator>+</operator> <name><name>cm</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>g</name> <operator>+</operator> <name><name>cm</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name><name>yuv</name><operator>.</operator><name>u</name></name> <operator>=</operator> <name><name>cm</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>r</name> <operator>+</operator> <name><name>cm</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>g</name> <operator>+</operator> <name><name>cm</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name><name>yuv</name><operator>.</operator><name>v</name></name> <operator>=</operator> <name><name>cm</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>r</name> <operator>+</operator> <name><name>cm</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>g</name> <operator>+</operator> <name><name>cm</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>b</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_bar_rgb</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>rcp_h</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ColorFloat</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bar_h</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>bar_t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>w</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>mul</name></decl>, <decl><type ref="prev"/><name>ht</name></decl>, <decl><type ref="prev"/><name>rcp_bar_h</name> <init>= <expr><literal type="number">1.0f</literal> <operator>/</operator> <name>bar_h</name></expr></init></decl>, <decl><type ref="prev"/><name>rcp_bar_t</name> <init>= <expr><literal type="number">1.0f</literal> <operator>/</operator> <name>bar_t</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ls</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>bar_h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ht</name> <operator>=</operator> <operator>(</operator><name>bar_h</name> <operator>-</operator> <name>y</name><operator>)</operator> <operator>*</operator> <name>rcp_bar_h</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lp</name> <operator>=</operator> <name>v</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>ls</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>h</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;=</operator> <name>ht</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mul</name> <operator>=</operator> <operator>(</operator><name><name>h</name><index>[<expr><name>x</name></expr>]</index></name> <operator>-</operator> <name>ht</name><operator>)</operator> <operator>*</operator> <name><name>rcp_h</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mul</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>mul</name> <operator>&lt;</operator> <name>bar_t</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>mul</name> <operator>*</operator> <name>rcp_bar_t</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">1.0f</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><name>mul</name> <operator>*</operator> <name><name>c</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name><name>rgb</name><operator>.</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><name>mul</name> <operator>*</operator> <name><name>c</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name><name>rgb</name><operator>.</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><name>mul</name> <operator>*</operator> <name><name>c</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name><name>rgb</name><operator>.</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRAW_BAR_WITH_CHROMA</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (h[x] &lt;= ht) { *lpy++ = 16; *lpu++ = 128; *lpv++ = 128; } else { mul = (h[x] - ht) * rcp_h[x]; mul = (mul &lt; bar_t) ? (mul * rcp_bar_t) : 1.0f; *lpy++ = lrintf(mul * c[x].yuv.y + 16.0f); *lpu++ = lrintf(mul * c[x].yuv.u + 128.0f); *lpv++ = lrintf(mul * c[x].yuv.v + 128.0f); } } while (0)</cpp:value></cpp:define>














<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRAW_BAR_WITHOUT_CHROMA</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (h[x] &lt;= ht) { *lpy++ = 16; } else { mul = (h[x] - ht) * rcp_h[x]; mul = (mul &lt; bar_t) ? (mul * rcp_bar_t) : 1.0f; *lpy++ = lrintf(mul * c[x].yuv.y + 16.0f); } } while (0)</cpp:value></cpp:define>










<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_bar_yuv</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>rcp_h</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ColorFloat</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bar_h</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>bar_t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>yh</name></decl>, <decl><type ref="prev"/><name>w</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>mul</name></decl>, <decl><type ref="prev"/><name>ht</name></decl>, <decl><type ref="prev"/><name>rcp_bar_h</name> <init>= <expr><literal type="number">1.0f</literal> <operator>/</operator> <name>bar_h</name></expr></init></decl>, <decl><type ref="prev"/><name>rcp_bar_t</name> <init>= <expr><literal type="number">1.0f</literal> <operator>/</operator> <name>bar_t</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>vy</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vu</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vv</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>lpy</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lpu</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lpv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lsy</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>lsu</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>lsv</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fmt</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>format</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>bar_h</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>yh</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>fmt</name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name><operator>)</operator></expr> ?</condition><then> <expr><name>y</name> <operator>/</operator> <literal type="number">2</literal></expr> </then><else>: <expr><name>y</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>ht</name> <operator>=</operator> <operator>(</operator><name>bar_h</name> <operator>-</operator> <name>y</name><operator>)</operator> <operator>*</operator> <name>rcp_bar_h</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lpy</name> <operator>=</operator> <name>vy</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>lsy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lpu</name> <operator>=</operator> <name>vu</name> <operator>+</operator> <name>yh</name> <operator>*</operator> <name>lsu</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lpv</name> <operator>=</operator> <name>vv</name> <operator>+</operator> <name>yh</name> <operator>*</operator> <name>lsv</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>==</operator> <name>AV_PIX_FMT_YUV444P</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>DRAW_BAR_WITH_CHROMA</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DRAW_BAR_WITH_CHROMA</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>DRAW_BAR_WITH_CHROMA</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DRAW_BAR_WITHOUT_CHROMA</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ht</name> <operator>=</operator> <operator>(</operator><name>bar_h</name> <operator>-</operator> <operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <name>rcp_bar_h</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lpy</name> <operator>=</operator> <name>vy</name> <operator>+</operator> <operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>lsy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lpu</name> <operator>=</operator> <name>vu</name> <operator>+</operator> <operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>lsu</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lpv</name> <operator>=</operator> <name>vv</name> <operator>+</operator> <operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>lsv</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>==</operator> <name>AV_PIX_FMT_YUV444P</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>DRAW_BAR_WITH_CHROMA</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DRAW_BAR_WITH_CHROMA</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>fmt</name> <operator>==</operator> <name>AV_PIX_FMT_YUV422P</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>DRAW_BAR_WITH_CHROMA</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DRAW_BAR_WITHOUT_CHROMA</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>DRAW_BAR_WITHOUT_CHROMA</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DRAW_BAR_WITHOUT_CHROMA</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_axis_rgb</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>axis</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ColorFloat</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>w</name> <init>= <expr><name><name>axis</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>, <decl><type ref="prev"/><name>h</name> <init>= <expr><name><name>axis</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>rcp_255</name> <init>= <expr><literal type="number">1.0f</literal> <operator>/</operator> <literal type="number">255.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>lp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lpa</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>lp</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>off</name> <operator>+</operator> <name>y</name><operator>)</operator> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>lpa</name> <operator>=</operator> <name><name>axis</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>axis</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lpa</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name><name>rgb</name><operator>.</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name><name>rgb</name><operator>.</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name><name>rgb</name><operator>.</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>lpa</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <name><name>lpa</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <name><name>lpa</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <name><name>lpa</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>rcp_255</name> <operator>*</operator> <name><name>lpa</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><name>a</name> <operator>*</operator> <name><name>lpa</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name>a</name><operator>)</operator> <operator>*</operator> <name><name>c</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name><name>rgb</name><operator>.</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><name>a</name> <operator>*</operator> <name><name>lpa</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name>a</name><operator>)</operator> <operator>*</operator> <name><name>c</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name><name>rgb</name><operator>.</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><name>a</name> <operator>*</operator> <name><name>lpa</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name>a</name><operator>)</operator> <operator>*</operator> <name><name>c</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name><name>rgb</name><operator>.</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>lpa</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLEND_WITH_CHROMA</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (!*lpaa) { *lpy = lrintf(c.yuv.y + 16.0f); *lpu = lrintf(c.yuv.u + 128.0f); *lpv = lrintf(c.yuv.v + 128.0f); } else if (255 == *lpaa) { *lpy = *lpay; *lpu = *lpau; *lpv = *lpav; } else { float a = (1.0f/255.0f) * (*lpaa); *lpy = lrintf(a * (*lpay) + (1.0f - a) * (c.yuv.y + 16.0f)); *lpu = lrintf(a * (*lpau) + (1.0f - a) * (c.yuv.u + 128.0f)); *lpv = lrintf(a * (*lpav) + (1.0f - a) * (c.yuv.v + 128.0f)); } lpy++; lpu++; lpv++; lpay++; lpau++; lpav++; lpaa++; } while (0)</cpp:value></cpp:define>



















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLEND_WITHOUT_CHROMA</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>alpha_inc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (!*lpaa) { *lpy = lrintf(c.yuv.y + 16.0f); } else if (255 == *lpaa) { *lpy = *lpay; } else { float a = (1.0f/255.0f) * (*lpaa); *lpy = lrintf(a * (*lpay) + (1.0f - a) * (c.yuv.y + 16.0f)); } lpy++; lpay++; lpaa += alpha_inc; } while (0)</cpp:value></cpp:define>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLEND_CHROMA2</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (!lpaa[0] &amp;&amp; !lpaa[1]) { *lpu = lrintf(c.yuv.u + 128.0f); *lpv = lrintf(c.yuv.v + 128.0f); } else if (255 == lpaa[0] &amp;&amp; 255 == lpaa[1]) { *lpu = *lpau; *lpv = *lpav; } else { float a0 = (0.5f/255.0f) * lpaa[0]; float a1 = (0.5f/255.0f) * lpaa[1]; float b = 1.0f - a0 - a1; *lpu = lrintf(a0 * lpau[0] + a1 * lpau[1] + b * (c.yuv.u + 128.0f)); *lpv = lrintf(a0 * lpav[0] + a1 * lpav[1] + b * (c.yuv.v + 128.0f)); } lpau += 2; lpav += 2; lpaa++; lpu++; lpv++; } while (0)</cpp:value></cpp:define>
















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLEND_CHROMA2x2</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (!lpaa[0] &amp;&amp; !lpaa[1] &amp;&amp; !lpaa[lsaa] &amp;&amp; !lpaa[lsaa+1]) { *lpu = lrintf(c.yuv.u + 128.0f); *lpv = lrintf(c.yuv.v + 128.0f); } else if (255 == lpaa[0] &amp;&amp; 255 == lpaa[1] &amp;&amp; 255 == lpaa[lsaa] &amp;&amp; 255 == lpaa[lsaa+1]) { *lpu = *lpau; *lpv = *lpav; } else { float a0 = (0.25f/255.0f) * lpaa[0]; float a1 = (0.25f/255.0f) * lpaa[1]; float a2 = (0.25f/255.0f) * lpaa[lsaa]; float a3 = (0.25f/255.0f) * lpaa[lsaa+1]; float b = 1.0f - a0 - a1 - a2 - a3; *lpu = lrintf(a0 * lpau[0] + a1 * lpau[1] + a2 * lpau[lsau] + a3 * lpau[lsau+1] + b * (c.yuv.u + 128.0f)); *lpv = lrintf(a0 * lpav[0] + a1 * lpav[1] + a2 * lpav[lsav] + a3 * lpav[lsav+1] + b * (c.yuv.v + 128.0f)); } lpau += 2; lpav += 2; lpaa++; lpu++; lpv++; } while (0)</cpp:value></cpp:define>





















<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_axis_yuv</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>axis</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ColorFloat</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fmt</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>format</name></name></expr></init></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>yh</name></decl>, <decl><type ref="prev"/><name>w</name> <init>= <expr><name><name>axis</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>, <decl><type ref="prev"/><name>h</name> <init>= <expr><name><name>axis</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offh</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>fmt</name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name><operator>)</operator></expr> ?</condition><then> <expr><name>off</name> <operator>/</operator> <literal type="number">2</literal></expr> </then><else>: <expr><name>off</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>vy</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vu</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vv</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>vay</name> <init>= <expr><name><name>axis</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vau</name> <init>= <expr><name><name>axis</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vav</name> <init>= <expr><name><name>axis</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vaa</name> <init>= <expr><name><name>axis</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lsy</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>lsu</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>lsv</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lsay</name> <init>= <expr><name><name>axis</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>lsau</name> <init>= <expr><name><name>axis</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>lsav</name> <init>= <expr><name><name>axis</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>lsaa</name> <init>= <expr><name><name>axis</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>lpy</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lpu</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lpv</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lpay</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lpau</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lpav</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lpaa</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>yh</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>fmt</name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name><operator>)</operator></expr> ?</condition><then> <expr><name>y</name> <operator>/</operator> <literal type="number">2</literal></expr> </then><else>: <expr><name>y</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>lpy</name> <operator>=</operator> <name>vy</name> <operator>+</operator> <operator>(</operator><name>off</name> <operator>+</operator> <name>y</name><operator>)</operator> <operator>*</operator> <name>lsy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lpu</name> <operator>=</operator> <name>vu</name> <operator>+</operator> <operator>(</operator><name>offh</name> <operator>+</operator> <name>yh</name><operator>)</operator> <operator>*</operator> <name>lsu</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lpv</name> <operator>=</operator> <name>vv</name> <operator>+</operator> <operator>(</operator><name>offh</name> <operator>+</operator> <name>yh</name><operator>)</operator> <operator>*</operator> <name>lsv</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lpay</name> <operator>=</operator> <name>vay</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>lsay</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lpau</name> <operator>=</operator> <name>vau</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>lsau</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lpav</name> <operator>=</operator> <name>vav</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>lsav</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lpaa</name> <operator>=</operator> <name>vaa</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>lsaa</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>==</operator> <name>AV_PIX_FMT_YUV444P</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>BLEND_WITH_CHROMA</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BLEND_WITH_CHROMA</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>fmt</name> <operator>==</operator> <name>AV_PIX_FMT_YUV422P</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>BLEND_WITHOUT_CHROMA</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BLEND_CHROMA2</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BLEND_WITHOUT_CHROMA</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>BLEND_WITHOUT_CHROMA</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BLEND_CHROMA2x2</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BLEND_WITHOUT_CHROMA</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>lpy</name> <operator>=</operator> <name>vy</name> <operator>+</operator> <operator>(</operator><name>off</name> <operator>+</operator> <name>y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>lsy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lpu</name> <operator>=</operator> <name>vu</name> <operator>+</operator> <operator>(</operator><name>off</name> <operator>+</operator> <name>y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>lsu</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lpv</name> <operator>=</operator> <name>vv</name> <operator>+</operator> <operator>(</operator><name>off</name> <operator>+</operator> <name>y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>lsv</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lpay</name> <operator>=</operator> <name>vay</name> <operator>+</operator> <operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>lsay</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lpau</name> <operator>=</operator> <name>vau</name> <operator>+</operator> <operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>lsau</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lpav</name> <operator>=</operator> <name>vav</name> <operator>+</operator> <operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>lsav</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lpaa</name> <operator>=</operator> <name>vaa</name> <operator>+</operator> <operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>lsaa</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>==</operator> <name>AV_PIX_FMT_YUV444P</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>BLEND_WITH_CHROMA</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BLEND_WITH_CHROMA</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>fmt</name> <operator>==</operator> <name>AV_PIX_FMT_YUV422P</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>BLEND_WITHOUT_CHROMA</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BLEND_CHROMA2</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BLEND_WITHOUT_CHROMA</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>BLEND_WITHOUT_CHROMA</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BLEND_WITHOUT_CHROMA</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_sono</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>sono</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fmt</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>format</name></name></expr></init></decl>, <decl><type ref="prev"/><name>h</name> <init>= <expr><name><name>sono</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_planes</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>fmt</name> <operator>==</operator> <name>AV_PIX_FMT_RGB24</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offh</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>fmt</name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name><operator>)</operator></expr> ?</condition><then> <expr><name>off</name> <operator>/</operator> <literal type="number">2</literal></expr> </then><else>: <expr><name>off</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>inc</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>fmt</name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ls</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>yh</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ls</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>sono</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>off</name> <operator>+</operator> <name>y</name><operator>)</operator> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>sono</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>idx</name> <operator>+</operator> <name>y</name><operator>)</operator> <operator>%</operator> <name>h</name> <operator>*</operator> <name><name>sono</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_planes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ls</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sono</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <name>inc</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>yh</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>fmt</name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name><operator>)</operator></expr> ?</condition><then> <expr><name>y</name> <operator>/</operator> <literal type="number">2</literal></expr> </then><else>: <expr><name>y</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>offh</name> <operator>+</operator> <name>yh</name><operator>)</operator> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>sono</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>idx</name> <operator>+</operator> <name>y</name><operator>)</operator> <operator>%</operator> <name>h</name> <operator>*</operator> <name><name>sono</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_sono_rgb</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>sono</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ColorFloat</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>w</name> <init>= <expr><name><name>sono</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>lp</name> <init>= <expr><name><name>sono</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>idx</name> <operator>*</operator> <name><name>sono</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name><name>rgb</name><operator>.</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name><name>rgb</name><operator>.</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name><name>rgb</name><operator>.</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_sono_yuv</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>sono</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ColorFloat</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>fmt</name> <init>= <expr><name><name>sono</name><operator>-&gt;</operator><name>format</name></name></expr></init></decl>, <decl><type ref="prev"/><name>w</name> <init>= <expr><name><name>sono</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>lpy</name> <init>= <expr><name><name>sono</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>idx</name> <operator>*</operator> <name><name>sono</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>lpu</name> <init>= <expr><name><name>sono</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>idx</name> <operator>*</operator> <name><name>sono</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>lpv</name> <init>= <expr><name><name>sono</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>idx</name> <operator>*</operator> <name><name>sono</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>lpy</name><operator>++</operator> <operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name><name>yuv</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">16.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lpu</name><operator>++</operator> <operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name><name>yuv</name><operator>.</operator><name>u</name></name> <operator>+</operator> <literal type="number">128.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lpv</name><operator>++</operator> <operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name><name>yuv</name><operator>.</operator><name>v</name></name> <operator>+</operator> <literal type="number">128.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lpy</name><operator>++</operator> <operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>yuv</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">16.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>==</operator> <name>AV_PIX_FMT_YUV444P</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>lpu</name><operator>++</operator> <operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>yuv</name><operator>.</operator><name>u</name></name> <operator>+</operator> <literal type="number">128.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lpv</name><operator>++</operator> <operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>yuv</name><operator>.</operator><name>v</name></name> <operator>+</operator> <literal type="number">128.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_cqt</name><parameter_list>(<parameter><decl><type><name>ShowCQTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>sono_count</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cqt_len</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h_buf</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bar_v_buf</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <literal type="number">0.5f</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>cqt_result</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>cqt_result</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>im</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fcount</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>rcp_fcount</name> <init>= <expr><literal type="number">1.0f</literal> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>fcount</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>h</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>fcount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>h</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>h_buf</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fcount</name></name> <operator>*</operator> <name>x</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h_buf</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>rcp_fcount</name> <operator>*</operator> <name>h</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h_buf</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>calculate_gamma</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>h_buf</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bar_g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rcp_h_buf</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>h_buf</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <literal type="number">0.0001f</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cqt_len</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cqt_result</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>*=</operator> <name><name>s</name><operator>-&gt;</operator><name>sono_v_buf</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cqt_result</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>*=</operator> <name><name>s</name><operator>-&gt;</operator><name>sono_v_buf</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fcount</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>rcp_fcount</name> <init>= <expr><literal type="number">1.0f</literal> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>fcount</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>FFTComplex</name></type> <name>result</name> <init>= <expr><block>{<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>fcount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>re</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>cqt_result</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fcount</name></name> <operator>*</operator> <name>x</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>im</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>cqt_result</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fcount</name></name> <operator>*</operator> <name>x</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cqt_result</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name>rcp_fcount</name> <operator>*</operator> <name><name>result</name><operator>.</operator><name>re</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cqt_result</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name>rcp_fcount</name> <operator>*</operator> <name><name>result</name><operator>.</operator><name>im</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB24</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rgb_from_cqt</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>c_buf</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cqt_result</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sono_g</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cscheme_v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>yuv_from_cqt</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>c_buf</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cqt_result</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sono_g</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cmatrix</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cscheme_v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>plot_cqt</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier><modifier>*</modifier></type><name>frameout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ShowCQTContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>last_time</name></decl>, <decl><type ref="prev"/><name>cur_time</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPDATE_TIME</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cur_time = av_gettime(); t += cur_time - last_time; last_time = cur_time</cpp:value></cpp:define>




<expr_stmt><expr><name>last_time</name> <operator>=</operator> <call><name>av_gettime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_result</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_data</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_len</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>fft_data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>attack_data</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>remaining_fill_max</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_result</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fft_len</name></name><operator>/</operator><literal type="number">2</literal><operator>+</operator><name>k</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>*=</operator> <name><name>s</name><operator>-&gt;</operator><name>attack_data</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_result</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fft_len</name></name><operator>/</operator><literal type="number">2</literal><operator>+</operator><name>k</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>*=</operator> <name><name>s</name><operator>-&gt;</operator><name>attack_data</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_fft_permute</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_ctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_fft_calc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_ctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_result</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fft_len</name></name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UPDATE_TIME</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>cqt_calc</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cqt_result</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_result</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>coeffs</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cqt_len</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UPDATE_TIME</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cqt_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>process_cqt</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UPDATE_TIME</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>process_cqt_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sono_h</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>update_sono</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sono_frame</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>c_buf</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sono_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UPDATE_TIME</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>update_sono_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>sono_count</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><operator>*</operator><name>frameout</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <call><name>av_make_q</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <name>AVCOL_RANGE_MPEG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>csp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UPDATE_TIME</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>alloc_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bar_h</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>draw_bar</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>h_buf</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rcp_h_buf</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>c_buf</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bar_h</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bar_t</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UPDATE_TIME</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bar_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>axis_h</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>draw_axis</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>axis_frame</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>c_buf</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bar_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UPDATE_TIME</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>axis_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sono_h</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>draw_sono</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sono_frame</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bar_h</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>axis_h</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sono_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UPDATE_TIME</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sono_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next_pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_pts</name></name> <operator>+=</operator> <name>PTS_STEP</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sono_count</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>sono_count</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sono_h</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sono_idx</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>sono_idx</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>sono_h</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>sono_h</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_colormatrix</name><parameter_list>(<parameter><decl><type><name>ShowCQTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>kr</name></decl>, <decl><type ref="prev"/><name>kg</name></decl>, <decl><type ref="prev"/><name>kb</name></decl>;</decl_stmt>


<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>csp</name></name></expr>)</condition> <block>{<block_content>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"unsupported colorspace, setting it to unspecified.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>csp</name></name> <operator>=</operator> <name>AVCOL_SPC_UNSPECIFIED</name></expr>;</expr_stmt>
<case>case <expr><name>AVCOL_SPC_UNSPECIFIED</name></expr>:</case>
<case>case <expr><name>AVCOL_SPC_BT470BG</name></expr>:</case>
<case>case <expr><name>AVCOL_SPC_SMPTE170M</name></expr>:</case>
<expr_stmt><expr><name>kr</name> <operator>=</operator> <literal type="number">0.299</literal></expr>;</expr_stmt> <expr_stmt><expr><name>kb</name> <operator>=</operator> <literal type="number">0.114</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AVCOL_SPC_BT709</name></expr>:</case>
<expr_stmt><expr><name>kr</name> <operator>=</operator> <literal type="number">0.2126</literal></expr>;</expr_stmt> <expr_stmt><expr><name>kb</name> <operator>=</operator> <literal type="number">0.0722</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AVCOL_SPC_FCC</name></expr>:</case>
<expr_stmt><expr><name>kr</name> <operator>=</operator> <literal type="number">0.30</literal></expr>;</expr_stmt> <expr_stmt><expr><name>kb</name> <operator>=</operator> <literal type="number">0.11</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AVCOL_SPC_SMPTE240M</name></expr>:</case>
<expr_stmt><expr><name>kr</name> <operator>=</operator> <literal type="number">0.212</literal></expr>;</expr_stmt> <expr_stmt><expr><name>kb</name> <operator>=</operator> <literal type="number">0.087</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AVCOL_SPC_BT2020_NCL</name></expr>:</case>
<expr_stmt><expr><name>kr</name> <operator>=</operator> <literal type="number">0.2627</literal></expr>;</expr_stmt> <expr_stmt><expr><name>kb</name> <operator>=</operator> <literal type="number">0.0593</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name>kg</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>-</operator> <name>kr</name> <operator>-</operator> <name>kb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cmatrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">219.0</literal> <operator>*</operator> <name>kr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cmatrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">219.0</literal> <operator>*</operator> <name>kg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cmatrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">219.0</literal> <operator>*</operator> <name>kb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cmatrix</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">112.0</literal> <operator>*</operator> <name>kr</name> <operator>/</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <name>kb</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cmatrix</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">112.0</literal> <operator>*</operator> <name>kg</name> <operator>/</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <name>kb</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cmatrix</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">112.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cmatrix</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">112.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cmatrix</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">112.0</literal> <operator>*</operator> <name>kg</name> <operator>/</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <name>kr</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cmatrix</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">112.0</literal> <operator>*</operator> <name>kb</name> <operator>/</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <name>kr</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_cscheme</name><parameter_list>(<parameter><decl><type><name>ShowCQTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>tail</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cscheme</name></name></expr></argument>, <argument><expr><literal type="string">" %f | %f | %f | %f | %f | %f %1s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cscheme_v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cscheme_v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cscheme_v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cscheme_v</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cscheme_v</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cscheme_v</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>tail</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cscheme_v</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>cscheme_v</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0.0f</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>cscheme_v</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">1.0f</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid cscheme.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ShowCQTContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>fullhd</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"fullhd option is deprecated, use size/s option instead.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>!=</operator> <literal type="number">1920</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <literal type="number">1080</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"fullhd set to 0 but with custom dimension.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fullhd</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>axis_h</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>axis_h</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>axis_h</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>axis_h</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bar_h</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>sono_h</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>axis_h</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>bar_h</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>sono_h</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bar_h</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>sono_h</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>axis_h</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>axis_h</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>bar_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bar_h</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>sono_h</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>axis_h</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>axis_h</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>sono_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bar_h</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bar_h</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>axis_h</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bar_h</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bar_h</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sono_h</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bar_h</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>sono_h</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>axis_h</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sono_h</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sono_h</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>axis_h</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>bar_h</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>bar_h</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>axis_h</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>sono_h</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>bar_h</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>axis_h</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>sono_h</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>bar_h</name></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>axis_h</name></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>sono_h</name></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>bar_h</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>axis_h</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>sono_h</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid dimension.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>fcount</name></name></expr>)</condition> <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fcount</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block> while<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fcount</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>&lt;</operator> <literal type="number">1920</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>fcount</name></name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition>;</do>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>init_colormatrix</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>init_cscheme</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>common_uninit</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>formats</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>layouts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name><name>sample_fmts</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>AV_SAMPLE_FMT_FLT</name></expr>, <expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_YUV422P</name></expr>,
<expr><name>AV_PIX_FMT_YUV444P</name></expr>, <expr><name>AV_PIX_FMT_RGB24</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name><name>channel_layouts</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>AV_CH_LAYOUT_STEREO</name></expr>, <expr><name>AV_CH_LAYOUT_STEREO_DOWNMIX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>


<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>sample_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><name>formats</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inlink</name><operator>-&gt;</operator><name>out_formats</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>layouts</name> <operator>=</operator> <call><name>avfilter_make_format64_list</name><argument_list>(<argument><expr><name>channel_layouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_channel_layouts_ref</name><argument_list>(<argument><expr><name>layouts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inlink</name><operator>-&gt;</operator><name>out_channel_layouts</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_all_samplerates</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><name>formats</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inlink</name><operator>-&gt;</operator><name>out_samplerates</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><name>formats</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>outlink</name><operator>-&gt;</operator><name>in_formats</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_output</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ShowCQTContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>common_uninit</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>outlink</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <call><name>av_make_q</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>frame_rate</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <call><name>av_mul_q</name><argument_list>(<argument><expr><call><name>av_inv_q</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rate</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>av_make_q</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>PTS_STEP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"video: %dx%d %s %d/%d fps, bar_h = %d, axis_h = %d, sono_h = %d.\n"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rate</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rate</name><operator>.</operator><name>den</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bar_h</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>axis_h</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sono_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cqt_len</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>fcount</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>freq</name></name> <operator>=</operator> <call><name>create_freq_table</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>basefreq</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>endfreq</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cqt_len</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_volume</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_bits</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><call><name>ceil</name><argument_list>(<argument><expr><call><name>log2</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>timeclamp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_len</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_bits</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"fft_len = %d, cqt_len = %d.\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_len</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cqt_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_ctx</name></name> <operator>=</operator> <call><name>av_fft_init</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_bits</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_data</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_len</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>fft_data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_result</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_len</name></name> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>fft_result</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cqt_result</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cqt_len</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>cqt_result</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>fft_ctx</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>fft_data</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>fft_result</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>cqt_result</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>remaining_fill_max</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_len</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>attack</name></name> <operator>&gt;</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>remaining_fill_max</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>remaining_fill_max</name></name></expr></argument>, <argument><expr><call><name>ceil</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>attack</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>attack_data</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>remaining_fill_max</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>attack_data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>attack_data</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>remaining_fill_max</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>y</name> <init>= <expr><name>M_PI</name> <operator>*</operator> <name>k</name> <operator>/</operator> <operator>(</operator><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>attack</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>attack_data</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.355768</literal> <operator>+</operator> <literal type="number">0.487396</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">0.144232</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>y</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">0.012604</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>*</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cqt_align</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cqt_calc</name></name> <operator>=</operator> <name>cqt_calc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>permute_coeffs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>draw_sono</name></name> <operator>=</operator> <name>draw_sono</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB24</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>draw_bar</name></name> <operator>=</operator> <name>draw_bar_rgb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>draw_axis</name></name> <operator>=</operator> <name>draw_axis_rgb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>update_sono</name></name> <operator>=</operator> <name>update_sono_rgb</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>draw_bar</name></name> <operator>=</operator> <name>draw_bar_yuv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>draw_axis</name></name> <operator>=</operator> <name>draw_axis_yuv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>update_sono</name></name> <operator>=</operator> <name>update_sono_yuv</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_showcqt_init_x86</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_cqt</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>axis_h</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>axis</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_axis_empty</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>axisfile</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>init_axis_from_file</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"loading axis image failed, fallback to font rendering.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>init_axis_from_font</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"loading axis font failed, disable text drawing.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_axis_empty</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>init_axis_from_font</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"loading axis font failed, disable text drawing.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_axis_empty</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sono_h</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sono_frame</name></name> <operator>=</operator> <call><name>alloc_frame_empty</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name><name>outlink</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name><operator>)</operator></expr> ?</condition><then>
<expr><name>AV_PIX_FMT_YUV422P</name></expr> </then><else>: <expr><name><name>outlink</name><operator>-&gt;</operator><name>format</name></name></expr></else></ternary></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sono_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>sono_frame</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h_buf</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cqt_len</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>h_buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rcp_h_buf</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>rcp_h_buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c_buf</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>c_buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>h_buf</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>rcp_h_buf</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>c_buf</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sono_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_pts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sono_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>remaining_fill</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>remaining_fill_max</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>remaining_frac</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>step_frac</name></name> <operator>=</operator> <call><name>av_div_q</name><argument_list>(<argument><expr><call><name>av_make_q</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr></argument> , <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>step_frac</name><operator>.</operator><name>num</name></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>step_frac</name><operator>.</operator><name>den</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>step_frac</name><operator>.</operator><name>num</name></name> <operator>%=</operator> <name><name>s</name><operator>-&gt;</operator><name>step_frac</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>step_frac</name><operator>.</operator><name>num</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"audio: %d Hz, step = %d + %d/%d.\n"</literal></expr></argument>,
<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>step</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>step_frac</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>step_frac</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"fractional step.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"audio: %d Hz, step = %d.\n"</literal></expr></argument>,
<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>step</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>insamples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ShowCQTContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>remaining</name></decl>, <decl><type ref="prev"/><name>step</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>audio_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>insamples</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>remaining_fill</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>remaining_fill_max</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fft_len</name></name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>remaining_fill_max</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>remaining_fill</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>fft_data</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>remaining_fill</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>plot_cqt</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>step</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>step</name></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>step_frac</name><operator>.</operator><name>num</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>remaining_frac</name></name><operator>)</operator> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>step_frac</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>remaining_frac</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>step_frac</name><operator>.</operator><name>num</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>remaining_frac</name></name><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>step_frac</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>fft_len</name></name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>remaining_fill_max</name></name> <operator>-</operator> <name>step</name><operator>)</operator></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>x</name><operator>+</operator><name>step</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>remaining_fill</name></name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>remaining</name> <operator>=</operator> <name><name>insamples</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>audio_data</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>*</operator><operator>)</operator> <name><name>insamples</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>remaining</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>insamples</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>-</operator> <name>remaining</name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_len</name></name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>remaining_fill_max</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>remaining_fill</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>remaining</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>remaining_fill</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>remaining_fill</name></name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>j</name><operator>+</operator><name>m</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>audio_data</name><index>[<expr><literal type="number">2</literal><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><name>m</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>j</name><operator>+</operator><name>m</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>audio_data</name><index>[<expr><literal type="number">2</literal><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><name>m</name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>plot_cqt</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>insamples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>remaining</name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>remaining_fill</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name> <init>= <expr><call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>insamples</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><call><name>av_make_q</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>pts</name> <operator>+=</operator> <name><name>insamples</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>-</operator> <name>remaining</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>remaining_fill_max</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pts</name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name>pts</name></expr></argument>, <argument><expr><call><name>av_make_q</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name>pts</name> <operator>-</operator> <name><name>out</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>PTS_TOLERANCE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"changing pts from %"</literal><name>PRId64</name><literal type="string">" (%.3f) to %"</literal><name>PRId64</name><literal type="string">" (%.3f).\n"</literal></expr></argument>,
<argument><expr><name><name>out</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>pts</name></name> <operator>*</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pts</name></expr></argument>, <argument><expr><name>pts</name> <operator>*</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>pts</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_pts</name></name> <operator>=</operator> <name>pts</name> <operator>+</operator> <name>PTS_STEP</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>insamples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>step</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>step</name></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>step_frac</name><operator>.</operator><name>num</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>remaining_frac</name></name><operator>)</operator> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>step_frac</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>remaining_frac</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>step_frac</name><operator>.</operator><name>num</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>remaining_frac</name></name><operator>)</operator> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>step_frac</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_len</name></name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>remaining_fill_max</name></name> <operator>-</operator> <name>step</name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>m</name><operator>+</operator><name>step</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>remaining_fill</name></name> <operator>=</operator> <name>step</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name>remaining</name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>j</name><operator>+</operator><name>m</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>audio_data</name><index>[<expr><literal type="number">2</literal><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><name>m</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>j</name><operator>+</operator><name>m</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>audio_data</name><index>[<expr><literal type="number">2</literal><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><name>m</name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>remaining_fill</name></name> <operator>-=</operator> <name>remaining</name></expr>;</expr_stmt>
<expr_stmt><expr><name>remaining</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>insamples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>request_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_request_frame</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AVERROR_EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>filter_frame</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>showcqt_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>showcqt_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_output</name></expr>,
<expr><operator>.</operator><name>request_frame</name> <operator>=</operator> <name>request_frame</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_avf_showcqt</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"showcqt"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Convert input audio to a CQT (Constant/Clamped Q Transform) spectrum video output."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ShowCQTContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>showcqt_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>showcqt_outputs</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>showcqt_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
