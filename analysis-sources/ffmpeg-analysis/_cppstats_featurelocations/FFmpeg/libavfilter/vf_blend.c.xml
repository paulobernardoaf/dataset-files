<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vf_blend.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/eval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixfmt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"framesync.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"blend.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOTTOM</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>BlendContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFFrameSync</name></type> <name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hsub</name></decl>, <name>vsub</name>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>nb_planes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>all_expr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>BlendMode</name></name></type> <name>all_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>all_opacity</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FilterParams</name></type> <name><name>params</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tblend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>prev_frame</name></decl>;</decl_stmt> 
}</block></struct></type> <name>BlendContext</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>var_names</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"X"</literal></expr>, <expr><literal type="string">"Y"</literal></expr>, <expr><literal type="string">"W"</literal></expr>, <expr><literal type="string">"H"</literal></expr>, <expr><literal type="string">"SW"</literal></expr>, <expr><literal type="string">"SH"</literal></expr>, <expr><literal type="string">"T"</literal></expr>, <expr><literal type="string">"N"</literal></expr>, <expr><literal type="string">"A"</literal></expr>, <expr><literal type="string">"B"</literal></expr>, <expr><literal type="string">"TOP"</literal></expr>, <expr><literal type="string">"BOTTOM"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<enum>enum <block>{ <decl><name>VAR_X</name></decl>, <decl><name>VAR_Y</name></decl>, <decl><name>VAR_W</name></decl>, <decl><name>VAR_H</name></decl>, <decl><name>VAR_SW</name></decl>, <decl><name>VAR_SH</name></decl>, <decl><name>VAR_T</name></decl>, <decl><name>VAR_N</name></decl>, <decl><name>VAR_A</name></decl>, <decl><name>VAR_B</name></decl>, <decl><name>VAR_TOP</name></decl>, <decl><name>VAR_BOTTOM</name></decl>, <decl><name>VAR_VARS_NB</name></decl> }</block>;</enum>

<typedef>typedef <type><struct>struct <name>ThreadData</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>top</name></decl>, <modifier>*</modifier><name>bottom</name>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>plane</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <name>h</name>;</decl_stmt>
<decl_stmt><decl><type><name>FilterParams</name> <modifier>*</modifier></type><name>param</name></decl>;</decl_stmt>
}</block></struct></type> <name>ThreadData</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMON_OPTIONS</name></cpp:macro> <cpp:value>{ "c0_mode", "set component #0 blend mode", OFFSET(params[0].mode), AV_OPT_TYPE_INT, {.i64=0}, 0, BLEND_NB-1, FLAGS, "mode"},{ "c1_mode", "set component #1 blend mode", OFFSET(params[1].mode), AV_OPT_TYPE_INT, {.i64=0}, 0, BLEND_NB-1, FLAGS, "mode"},{ "c2_mode", "set component #2 blend mode", OFFSET(params[2].mode), AV_OPT_TYPE_INT, {.i64=0}, 0, BLEND_NB-1, FLAGS, "mode"},{ "c3_mode", "set component #3 blend mode", OFFSET(params[3].mode), AV_OPT_TYPE_INT, {.i64=0}, 0, BLEND_NB-1, FLAGS, "mode"},{ "all_mode", "set blend mode for all components", OFFSET(all_mode), AV_OPT_TYPE_INT, {.i64=-1},-1, BLEND_NB-1, FLAGS, "mode"},{ "addition", "", 0, AV_OPT_TYPE_CONST, {.i64=BLEND_ADDITION}, 0, 0, FLAGS, "mode" },{ "addition128","", 0, AV_OPT_TYPE_CONST, {.i64=BLEND_GRAINMERGE}, 0, 0, FLAGS, "mode" },{ "grainmerge", "", 0, AV_OPT_TYPE_CONST, {.i64=BLEND_GRAINMERGE}, 0, 0, FLAGS, "mode" },{ "and", "", 0, AV_OPT_TYPE_CONST, {.i64=BLEND_AND}, 0, 0, FLAGS, "mode" },{ "average", "", 0, AV_OPT_TYPE_CONST, {.i64=BLEND_AVERAGE}, 0, 0, FLAGS, "mode" },{ "burn", "", 0, AV_OPT_TYPE_CONST, {.i64=BLEND_BURN}, 0, 0, FLAGS, "mode" },{ "darken", "", 0, AV_OPT_TYPE_CONST, {.i64=BLEND_DARKEN}, 0, 0, FLAGS, "mode" },{ "difference", "", 0, AV_OPT_TYPE_CONST, {.i64=BLEND_DIFFERENCE}, 0, 0, FLAGS, "mode" },{ "difference128", "", 0, AV_OPT_TYPE_CONST, {.i64=BLEND_GRAINEXTRACT}, 0, 0, FLAGS, "mode" },{ "grainextract", "", 0, AV_OPT_TYPE_CONST, {.i64=BLEND_GRAINEXTRACT}, 0, 0, FLAGS, "mode" },{ "divide", "", 0, AV_OPT_TYPE_CONST, {.i64=BLEND_DIVIDE}, 0, 0, FLAGS, "mode" },{ "dodge", "", 0, AV_OPT_TYPE_CONST, {.i64=BLEND_DODGE}, 0, 0, FLAGS, "mode" },{ "exclusion", "", 0, AV_OPT_TYPE_CONST, {.i64=BLEND_EXCLUSION}, 0, 0, FLAGS, "mode" },{ "extremity", "", 0, AV_OPT_TYPE_CONST, {.i64=BLEND_EXTREMITY}, 0, 0, FLAGS, "mode" },{ "freeze", "", 0, AV_OPT_TYPE_CONST, {.i64=BLEND_FREEZE}, 0, 0, FLAGS, "mode" },{ "glow", "", 0, AV_OPT_TYPE_CONST, {.i64=BLEND_GLOW}, 0, 0, FLAGS, "mode" },{ "hardlight", "", 0, AV_OPT_TYPE_CONST, {.i64=BLEND_HARDLIGHT}, 0, 0, FLAGS, "mode" },{ "hardmix", "", 0, AV_OPT_TYPE_CONST, {.i64=BLEND_HARDMIX}, 0, 0, FLAGS, "mode" },{ "heat", "", 0, AV_OPT_TYPE_CONST, {.i64=BLEND_HEAT}, 0, 0, FLAGS, "mode" },{ "lighten", "", 0, AV_OPT_TYPE_CONST, {.i64=BLEND_LIGHTEN}, 0, 0, FLAGS, "mode" },{ "linearlight","", 0, AV_OPT_TYPE_CONST, {.i64=BLEND_LINEARLIGHT},0, 0, FLAGS, "mode" },{ "multiply", "", 0, AV_OPT_TYPE_CONST, {.i64=BLEND_MULTIPLY}, 0, 0, FLAGS, "mode" },{ "multiply128","", 0, AV_OPT_TYPE_CONST, {.i64=BLEND_MULTIPLY128},0, 0, FLAGS, "mode" },{ "negation", "", 0, AV_OPT_TYPE_CONST, {.i64=BLEND_NEGATION}, 0, 0, FLAGS, "mode" },{ "normal", "", 0, AV_OPT_TYPE_CONST, {.i64=BLEND_NORMAL}, 0, 0, FLAGS, "mode" },{ "or", "", 0, AV_OPT_TYPE_CONST, {.i64=BLEND_OR}, 0, 0, FLAGS, "mode" },{ "overlay", "", 0, AV_OPT_TYPE_CONST, {.i64=BLEND_OVERLAY}, 0, 0, FLAGS, "mode" },{ "phoenix", "", 0, AV_OPT_TYPE_CONST, {.i64=BLEND_PHOENIX}, 0, 0, FLAGS, "mode" },{ "pinlight", "", 0, AV_OPT_TYPE_CONST, {.i64=BLEND_PINLIGHT}, 0, 0, FLAGS, "mode" },{ "reflect", "", 0, AV_OPT_TYPE_CONST, {.i64=BLEND_REFLECT}, 0, 0, FLAGS, "mode" },{ "screen", "", 0, AV_OPT_TYPE_CONST, {.i64=BLEND_SCREEN}, 0, 0, FLAGS, "mode" },{ "softlight", "", 0, AV_OPT_TYPE_CONST, {.i64=BLEND_SOFTLIGHT}, 0, 0, FLAGS, "mode" },{ "subtract", "", 0, AV_OPT_TYPE_CONST, {.i64=BLEND_SUBTRACT}, 0, 0, FLAGS, "mode" },{ "vividlight", "", 0, AV_OPT_TYPE_CONST, {.i64=BLEND_VIVIDLIGHT}, 0, 0, FLAGS, "mode" },{ "xor", "", 0, AV_OPT_TYPE_CONST, {.i64=BLEND_XOR}, 0, 0, FLAGS, "mode" },{ "c0_expr", "set color component #0 expression", OFFSET(params[0].expr_str), AV_OPT_TYPE_STRING, {.str=NULL}, 0, 0, FLAGS },{ "c1_expr", "set color component #1 expression", OFFSET(params[1].expr_str), AV_OPT_TYPE_STRING, {.str=NULL}, 0, 0, FLAGS },{ "c2_expr", "set color component #2 expression", OFFSET(params[2].expr_str), AV_OPT_TYPE_STRING, {.str=NULL}, 0, 0, FLAGS },{ "c3_expr", "set color component #3 expression", OFFSET(params[3].expr_str), AV_OPT_TYPE_STRING, {.str=NULL}, 0, 0, FLAGS },{ "all_expr", "set expression for all color components", OFFSET(all_expr), AV_OPT_TYPE_STRING, {.str=NULL}, 0, 0, FLAGS },{ "c0_opacity", "set color component #0 opacity", OFFSET(params[0].opacity), AV_OPT_TYPE_DOUBLE, {.dbl=1}, 0, 1, FLAGS },{ "c1_opacity", "set color component #1 opacity", OFFSET(params[1].opacity), AV_OPT_TYPE_DOUBLE, {.dbl=1}, 0, 1, FLAGS },{ "c2_opacity", "set color component #2 opacity", OFFSET(params[2].opacity), AV_OPT_TYPE_DOUBLE, {.dbl=1}, 0, 1, FLAGS },{ "c3_opacity", "set color component #3 opacity", OFFSET(params[3].opacity), AV_OPT_TYPE_DOUBLE, {.dbl=1}, 0, 1, FLAGS },{ "all_opacity", "set opacity for all color components", OFFSET(all_opacity), AV_OPT_TYPE_DOUBLE, {.dbl=1}, 0, 1, FLAGS}</cpp:value></cpp:define>



















































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(BlendContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_VIDEO_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>blend_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>COMMON_OPTIONS</name></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FRAMESYNC_DEFINE_CLASS</name><argument_list>(<argument><expr><name>blend</name></expr></argument>, <argument><expr><name>BlendContext</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>depth</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void blend_copy ##src##_##depth(const uint8_t *top, ptrdiff_t top_linesize, const uint8_t *bottom, ptrdiff_t bottom_linesize,uint8_t *dst, ptrdiff_t dst_linesize, ptrdiff_t width, ptrdiff_t height, FilterParams *param, double *values, int starty) { av_image_copy_plane(dst, dst_linesize, src, src ##_linesize, width * depth / 8, height); }</cpp:value></cpp:define>










<macro><name>COPY</name><argument_list>(<argument>top</argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>COPY</name><argument_list>(<argument>bottom</argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>

<macro><name>COPY</name><argument_list>(<argument>top</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>COPY</name><argument_list>(<argument>bottom</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COPY</name></cpp:undef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blend_normal_8bit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>top_linesize</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>bottom</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>bottom_linesize</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dst_linesize</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>FilterParams</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>starty</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>opacity</name> <init>= <expr><name><name>param</name><operator>-&gt;</operator><name>opacity</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>top</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name>opacity</name> <operator>+</operator> <name><name>bottom</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1.</literal> <operator>-</operator> <name>opacity</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>top</name> <operator>+=</operator> <name>top_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bottom</name> <operator>+=</operator> <name>bottom_linesize</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blend_normal_16bit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_top</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>top_linesize</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_bottom</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>bottom_linesize</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dst_linesize</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>FilterParams</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>starty</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name>_top</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>bottom</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name>_bottom</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>opacity</name> <init>= <expr><name><name>param</name><operator>-&gt;</operator><name>opacity</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<expr_stmt><expr><name>dst_linesize</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>top_linesize</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bottom_linesize</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>top</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name>opacity</name> <operator>+</operator> <name><name>bottom</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1.</literal> <operator>-</operator> <name>opacity</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>top</name> <operator>+=</operator> <name>top_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bottom</name> <operator>+=</operator> <name>bottom_linesize</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_BLEND8</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void blend_##name##_8bit(const uint8_t *top, ptrdiff_t top_linesize, const uint8_t *bottom, ptrdiff_t bottom_linesize, uint8_t *dst, ptrdiff_t dst_linesize, ptrdiff_t width, ptrdiff_t height, FilterParams *param, double *values, int starty) { double opacity = param-&gt;opacity; int i, j; for (i = 0; i &lt; height; i++) { for (j = 0; j &lt; width; j++) { dst[j] = top[j] + ((expr) - top[j]) * opacity; } dst += dst_linesize; top += top_linesize; bottom += bottom_linesize; } }</cpp:value></cpp:define>



















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_BLEND16</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>expr</name></type></parameter>, <parameter><type><name>depth</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void blend_##name##_##depth##bit(const uint8_t *_top, ptrdiff_t top_linesize,const uint8_t *_bottom, ptrdiff_t bottom_linesize, uint8_t *_dst, ptrdiff_t dst_linesize, ptrdiff_t width, ptrdiff_t height, FilterParams *param, double *values, int starty) { const uint16_t *top = (const uint16_t*)_top; const uint16_t *bottom = (const uint16_t*)_bottom; uint16_t *dst = (uint16_t*)_dst; double opacity = param-&gt;opacity; int i, j; dst_linesize /= 2; top_linesize /= 2; bottom_linesize /= 2; for (i = 0; i &lt; height; i++) { for (j = 0; j &lt; width; j++) { dst[j] = top[j] + ((expr) - top[j]) * opacity; } dst += dst_linesize; top += top_linesize; bottom += bottom_linesize; } }</cpp:value></cpp:define>

























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A</name></cpp:macro> <cpp:value>top[j]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B</name></cpp:macro> <cpp:value>bottom[j]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULTIPLY</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) * (((a) * (b)) / 255))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCREEN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(255 - (x) * ((255 - (a)) * (255 - (b)) / 255))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BURN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) == 0) ? (a) : FFMAX(0, 255 - ((255 - (b)) &lt;&lt; 8) / (a)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DODGE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) == 255) ? (a) : FFMIN(255, (((b) &lt;&lt; 8) / (255 - (a)))))</cpp:value></cpp:define>

<macro><name>DEFINE_BLEND8</name><argument_list>(<argument>addition</argument>, <argument>FFMIN(<literal type="number">255</literal>, A + B)</argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND8</name><argument_list>(<argument>grainmerge</argument>, <argument>av_clip_uint8(A + B - <literal type="number">128</literal>)</argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND8</name><argument_list>(<argument>average</argument>, <argument>(A + B) / <literal type="number">2</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND8</name><argument_list>(<argument>subtract</argument>, <argument>FFMAX(<literal type="number">0</literal>, A - B)</argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND8</name><argument_list>(<argument>multiply</argument>, <argument>MULTIPLY(<literal type="number">1</literal>, A, B)</argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND8</name><argument_list>(<argument>multiply128</argument>,<argument>av_clip_uint8((A - <literal type="number">128</literal>) * B / <literal type="number">32.</literal> + <literal type="number">128</literal>)</argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND8</name><argument_list>(<argument>negation</argument>, <argument><literal type="number">255</literal> - FFABS(<literal type="number">255</literal> - A - B)</argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND8</name><argument_list>(<argument>extremity</argument>, <argument>FFABS(<literal type="number">255</literal> - A - B)</argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND8</name><argument_list>(<argument>difference</argument>, <argument>FFABS(A - B)</argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND8</name><argument_list>(<argument>grainextract</argument>, <argument>av_clip_uint8(<literal type="number">128</literal> + A - B)</argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND8</name><argument_list>(<argument>screen</argument>, <argument>SCREEN(<literal type="number">1</literal>, A, B)</argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND8</name><argument_list>(<argument>overlay</argument>, <argument>(A &lt; <literal type="number">128</literal>) ? MULTIPLY(<literal type="number">2</literal>, A, B) : SCREEN(<literal type="number">2</literal>, A, B)</argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND8</name><argument_list>(<argument>hardlight</argument>, <argument>(B &lt; <literal type="number">128</literal>) ? MULTIPLY(<literal type="number">2</literal>, B, A) : SCREEN(<literal type="number">2</literal>, B, A)</argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND8</name><argument_list>(<argument>hardmix</argument>, <argument>(A &lt; (<literal type="number">255</literal> - B)) ? <literal type="number">0</literal>: <literal type="number">255</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND8</name><argument_list>(<argument>heat</argument>, <argument>(A == <literal type="number">0</literal>) ? <literal type="number">0</literal> : <literal type="number">255</literal> - FFMIN(((<literal type="number">255</literal> - B) * (<literal type="number">255</literal> - B)) / A, <literal type="number">255</literal>)</argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND8</name><argument_list>(<argument>freeze</argument>, <argument>(B == <literal type="number">0</literal>) ? <literal type="number">0</literal> : <literal type="number">255</literal> - FFMIN(((<literal type="number">255</literal> - A) * (<literal type="number">255</literal> - A)) / B, <literal type="number">255</literal>)</argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND8</name><argument_list>(<argument>darken</argument>, <argument>FFMIN(A, B)</argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND8</name><argument_list>(<argument>lighten</argument>, <argument>FFMAX(A, B)</argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND8</name><argument_list>(<argument>divide</argument>, <argument>av_clip_uint8(B == <literal type="number">0</literal> ? <literal type="number">255</literal> : <literal type="number">255</literal> * A / B)</argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND8</name><argument_list>(<argument>dodge</argument>, <argument>DODGE(A, B)</argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND8</name><argument_list>(<argument>burn</argument>, <argument>BURN(A, B)</argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND8</name><argument_list>(<argument>softlight</argument>, <argument>(A &gt; <literal type="number">127</literal>) ? B + (<literal type="number">255</literal> - B) * (A - <literal type="number">127.5</literal>) / <literal type="number">127.5</literal> * (<literal type="number">0.5</literal> - fabs(B - <literal type="number">127.5</literal>) / <literal type="number">255</literal>): B - B * ((<literal type="number">127.5</literal> - A) / <literal type="number">127.5</literal>) * (<literal type="number">0.5</literal> - fabs(B - <literal type="number">127.5</literal>)/<literal type="number">255</literal>)</argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND8</name><argument_list>(<argument>exclusion</argument>, <argument>A + B - <literal type="number">2</literal> * A * B / <literal type="number">255</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND8</name><argument_list>(<argument>pinlight</argument>, <argument>(B &lt; <literal type="number">128</literal>) ? FFMIN(A, <literal type="number">2</literal> * B) : FFMAX(A, <literal type="number">2</literal> * (B - <literal type="number">128</literal>))</argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND8</name><argument_list>(<argument>phoenix</argument>, <argument>FFMIN(A, B) - FFMAX(A, B) + <literal type="number">255</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND8</name><argument_list>(<argument>reflect</argument>, <argument>(B == <literal type="number">255</literal>) ? B : FFMIN(<literal type="number">255</literal>, (A * A / (<literal type="number">255</literal> - B)))</argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND8</name><argument_list>(<argument>glow</argument>, <argument>(A == <literal type="number">255</literal>) ? A : FFMIN(<literal type="number">255</literal>, (B * B / (<literal type="number">255</literal> - A)))</argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND8</name><argument_list>(<argument>and</argument>, <argument>A &amp; B</argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND8</name><argument_list>(<argument>or</argument>, <argument>A | B</argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND8</name><argument_list>(<argument>xor</argument>, <argument>A ^ B</argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND8</name><argument_list>(<argument>vividlight</argument>, <argument>(A &lt; <literal type="number">128</literal>) ? BURN(<literal type="number">2</literal> * A, B) : DODGE(<literal type="number">2</literal> * (A - <literal type="number">128</literal>), B)</argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND8</name><argument_list>(<argument>linearlight</argument>,<argument>av_clip_uint8((B &lt; <literal type="number">128</literal>) ? B + <literal type="number">2</literal> * A - <literal type="number">255</literal> : B + <literal type="number">2</literal> * (A - <literal type="number">128</literal>))</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MULTIPLY</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SCREEN</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BURN</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DODGE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULTIPLY</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) * (((a) * (b)) / 65535))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCREEN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(65535 - (x) * ((65535 - (a)) * (65535 - (b)) / 65535))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BURN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) == 0) ? (a) : FFMAX(0, 65535 - ((65535 - (b)) &lt;&lt; 16) / (a)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DODGE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) == 65535) ? (a) : FFMIN(65535, (((b) &lt;&lt; 16) / (65535 - (a)))))</cpp:value></cpp:define>

<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>addition</argument>, <argument>FFMIN(<literal type="number">65535</literal>, A + B)</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>grainmerge</argument>, <argument>av_clip_uint16(A + B - <literal type="number">32768</literal>)</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>average</argument>, <argument>(A + B) / <literal type="number">2</literal></argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>subtract</argument>, <argument>FFMAX(<literal type="number">0</literal>, A - B)</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>multiply</argument>, <argument>MULTIPLY(<literal type="number">1</literal>, A, B)</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>multiply128</argument>, <argument>av_clip_uint16((A - <literal type="number">32768</literal>) * B / <literal type="number">8192.</literal> + <literal type="number">32768</literal>)</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>negation</argument>, <argument><literal type="number">65535</literal> - FFABS(<literal type="number">65535</literal> - A - B)</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>extremity</argument>, <argument>FFABS(<literal type="number">65535</literal> - A - B)</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>difference</argument>, <argument>FFABS(A - B)</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>grainextract</argument>, <argument>av_clip_uint16(<literal type="number">32768</literal> + A - B)</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>screen</argument>, <argument>SCREEN(<literal type="number">1</literal>, A, B)</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>overlay</argument>, <argument>(A &lt; <literal type="number">32768</literal>) ? MULTIPLY(<literal type="number">2</literal>, A, B) : SCREEN(<literal type="number">2</literal>, A, B)</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>hardlight</argument>, <argument>(B &lt; <literal type="number">32768</literal>) ? MULTIPLY(<literal type="number">2</literal>, B, A) : SCREEN(<literal type="number">2</literal>, B, A)</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>hardmix</argument>, <argument>(A &lt; (<literal type="number">65535</literal> - B)) ? <literal type="number">0</literal>: <literal type="number">65535</literal></argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>heat</argument>, <argument>(A == <literal type="number">0</literal>) ? <literal type="number">0</literal> : <literal type="number">65535</literal> - FFMIN(((<literal type="number">65535</literal> - B) * (<literal type="number">65535</literal> - B)) / A, <literal type="number">65535</literal>)</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>freeze</argument>, <argument>(B == <literal type="number">0</literal>) ? <literal type="number">0</literal> : <literal type="number">65535</literal> - FFMIN(((<literal type="number">65535</literal> - A) * (<literal type="number">65535</literal> - A)) / B, <literal type="number">65535</literal>)</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>darken</argument>, <argument>FFMIN(A, B)</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>lighten</argument>, <argument>FFMAX(A, B)</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>divide</argument>, <argument>av_clip_uint16(B == <literal type="number">0</literal> ? <literal type="number">65535</literal> : <literal type="number">65535</literal> * A / B)</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>dodge</argument>, <argument>DODGE(A, B)</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>burn</argument>, <argument>BURN(A, B)</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>softlight</argument>, <argument>(A &gt; <literal type="number">32767</literal>) ? B + (<literal type="number">65535</literal> - B) * (A - <literal type="number">32767.5</literal>) / <literal type="number">32767.5</literal> * (<literal type="number">0.5</literal> - fabs(B - <literal type="number">32767.5</literal>) / <literal type="number">65535</literal>): B - B * ((<literal type="number">32767.5</literal> - A) / <literal type="number">32767.5</literal>) * (<literal type="number">0.5</literal> - fabs(B - <literal type="number">32767.5</literal>)/<literal type="number">65535</literal>)</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>exclusion</argument>, <argument>A + B - <literal type="number">2</literal> * A * B / <literal type="number">65535</literal></argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>pinlight</argument>, <argument>(B &lt; <literal type="number">32768</literal>) ? FFMIN(A, <literal type="number">2</literal> * B) : FFMAX(A, <literal type="number">2</literal> * (B - <literal type="number">32768</literal>))</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>phoenix</argument>, <argument>FFMIN(A, B) - FFMAX(A, B) + <literal type="number">65535</literal></argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>reflect</argument>, <argument>(B == <literal type="number">65535</literal>) ? B : FFMIN(<literal type="number">65535</literal>, (A * A / (<literal type="number">65535</literal> - B)))</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>glow</argument>, <argument>(A == <literal type="number">65535</literal>) ? A : FFMIN(<literal type="number">65535</literal>, (B * B / (<literal type="number">65535</literal> - A)))</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>and</argument>, <argument>A &amp; B</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>or</argument>, <argument>A | B</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>xor</argument>, <argument>A ^ B</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>vividlight</argument>, <argument>(A &lt; <literal type="number">32768</literal>) ? BURN(<literal type="number">2</literal> * A, B) : DODGE(<literal type="number">2</literal> * (A - <literal type="number">32768</literal>), B)</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>linearlight</argument>,<argument>av_clip_uint16((B &lt; <literal type="number">32768</literal>) ? B + <literal type="number">2</literal> * A - <literal type="number">65535</literal> : B + <literal type="number">2</literal> * (A - <literal type="number">32768</literal>))</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MULTIPLY</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SCREEN</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BURN</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DODGE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULTIPLY</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) * (((a) * (b)) / 1023))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCREEN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(1023 - (x) * ((1023 - (a)) * (1023 - (b)) / 1023))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BURN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) == 0) ? (a) : FFMAX(0, 1023 - ((1023 - (b)) &lt;&lt; 10) / (a)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DODGE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) == 1023) ? (a) : FFMIN(1023, (((b) &lt;&lt; 10) / (1023 - (a)))))</cpp:value></cpp:define>

<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>addition</argument>, <argument>FFMIN(<literal type="number">1023</literal>, A + B)</argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>grainmerge</argument>, <argument>(int)av_clip_uintp2(A + B - <literal type="number">512</literal>, <literal type="number">10</literal>)</argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>average</argument>, <argument>(A + B) / <literal type="number">2</literal></argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>subtract</argument>, <argument>FFMAX(<literal type="number">0</literal>, A - B)</argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>multiply</argument>, <argument>MULTIPLY(<literal type="number">1</literal>, A, B)</argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>multiply128</argument>, <argument>(int)av_clip_uintp2((A - <literal type="number">512</literal>) * B / <literal type="number">128.</literal> + <literal type="number">512</literal>, <literal type="number">10</literal>)</argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>negation</argument>, <argument><literal type="number">1023</literal> - FFABS(<literal type="number">1023</literal> - A - B)</argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>extremity</argument>, <argument>FFABS(<literal type="number">1023</literal> - A - B)</argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>difference</argument>, <argument>FFABS(A - B)</argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>grainextract</argument>, <argument>(int)av_clip_uintp2(<literal type="number">512</literal> + A - B, <literal type="number">10</literal>)</argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>screen</argument>, <argument>SCREEN(<literal type="number">1</literal>, A, B)</argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>overlay</argument>, <argument>(A &lt; <literal type="number">512</literal>) ? MULTIPLY(<literal type="number">2</literal>, A, B) : SCREEN(<literal type="number">2</literal>, A, B)</argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>hardlight</argument>, <argument>(B &lt; <literal type="number">512</literal>) ? MULTIPLY(<literal type="number">2</literal>, B, A) : SCREEN(<literal type="number">2</literal>, B, A)</argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>hardmix</argument>, <argument>(A &lt; (<literal type="number">1023</literal> - B)) ? <literal type="number">0</literal>: <literal type="number">1023</literal></argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>heat</argument>, <argument>(A == <literal type="number">0</literal>) ? <literal type="number">0</literal> : <literal type="number">1023</literal> - FFMIN(((<literal type="number">1023</literal> - B) * (<literal type="number">1023</literal> - B)) / A, <literal type="number">1023</literal>)</argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>freeze</argument>, <argument>(B == <literal type="number">0</literal>) ? <literal type="number">0</literal> : <literal type="number">1023</literal> - FFMIN(((<literal type="number">1023</literal> - A) * (<literal type="number">1023</literal> - A)) / B, <literal type="number">1023</literal>)</argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>darken</argument>, <argument>FFMIN(A, B)</argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>lighten</argument>, <argument>FFMAX(A, B)</argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>divide</argument>, <argument>(int)av_clip_uintp2(B == <literal type="number">0</literal> ? <literal type="number">1023</literal> : <literal type="number">1023</literal> * A / B, <literal type="number">10</literal>)</argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>dodge</argument>, <argument>DODGE(A, B)</argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>burn</argument>, <argument>BURN(A, B)</argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>softlight</argument>, <argument>(A &gt; <literal type="number">511</literal>) ? B + (<literal type="number">1023</literal> - B) * (A - <literal type="number">511.5</literal>) / <literal type="number">511.5</literal> * (<literal type="number">0.5</literal> - fabs(B - <literal type="number">511.5</literal>) / <literal type="number">1023</literal>): B - B * ((<literal type="number">511.5</literal> - A) / <literal type="number">511.5</literal>) * (<literal type="number">0.5</literal> - fabs(B - <literal type="number">511.5</literal>)/<literal type="number">1023</literal>)</argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>exclusion</argument>, <argument>A + B - <literal type="number">2</literal> * A * B / <literal type="number">1023</literal></argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>pinlight</argument>, <argument>(B &lt; <literal type="number">512</literal>) ? FFMIN(A, <literal type="number">2</literal> * B) : FFMAX(A, <literal type="number">2</literal> * (B - <literal type="number">512</literal>))</argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>phoenix</argument>, <argument>FFMIN(A, B) - FFMAX(A, B) + <literal type="number">1023</literal></argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>reflect</argument>, <argument>(B == <literal type="number">1023</literal>) ? B : FFMIN(<literal type="number">1023</literal>, (A * A / (<literal type="number">1023</literal> - B)))</argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>glow</argument>, <argument>(A == <literal type="number">1023</literal>) ? A : FFMIN(<literal type="number">1023</literal>, (B * B / (<literal type="number">1023</literal> - A)))</argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>and</argument>, <argument>A &amp; B</argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>or</argument>, <argument>A | B</argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>xor</argument>, <argument>A ^ B</argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>vividlight</argument>, <argument>(A &lt; <literal type="number">512</literal>) ? BURN(<literal type="number">2</literal> * A, B) : DODGE(<literal type="number">2</literal> * (A - <literal type="number">512</literal>), B)</argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>linearlight</argument>,<argument>(int)av_clip_uintp2((B &lt; <literal type="number">512</literal>) ? B + <literal type="number">2</literal> * A - <literal type="number">1023</literal> : B + <literal type="number">2</literal> * (A - <literal type="number">512</literal>), <literal type="number">10</literal>)</argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MULTIPLY</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SCREEN</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BURN</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DODGE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULTIPLY</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) * (((a) * (b)) / 4095))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCREEN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(4095 - (x) * ((4095 - (a)) * (4095 - (b)) / 4095))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BURN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) == 0) ? (a) : FFMAX(0, 4095 - ((4095 - (b)) &lt;&lt; 12) / (a)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DODGE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) == 4095) ? (a) : FFMIN(4095, (((b) &lt;&lt; 12) / (4095 - (a)))))</cpp:value></cpp:define>

<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>addition</argument>, <argument>FFMIN(<literal type="number">4095</literal>, A + B)</argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>grainmerge</argument>, <argument>(int)av_clip_uintp2(A + B - <literal type="number">2048</literal>, <literal type="number">12</literal>)</argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>average</argument>, <argument>(A + B) / <literal type="number">2</literal></argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>subtract</argument>, <argument>FFMAX(<literal type="number">0</literal>, A - B)</argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>multiply</argument>, <argument>MULTIPLY(<literal type="number">1</literal>, A, B)</argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>multiply128</argument>, <argument>(int)av_clip_uintp2((A - <literal type="number">2048</literal>) * B / <literal type="number">512.</literal> + <literal type="number">2048</literal>, <literal type="number">12</literal>)</argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>negation</argument>, <argument><literal type="number">4095</literal> - FFABS(<literal type="number">4095</literal> - A - B)</argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>extremity</argument>, <argument>FFABS(<literal type="number">4095</literal> - A - B)</argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>difference</argument>, <argument>FFABS(A - B)</argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>grainextract</argument>, <argument>(int)av_clip_uintp2(<literal type="number">2048</literal> + A - B, <literal type="number">12</literal>)</argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>screen</argument>, <argument>SCREEN(<literal type="number">1</literal>, A, B)</argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>overlay</argument>, <argument>(A &lt; <literal type="number">2048</literal>) ? MULTIPLY(<literal type="number">2</literal>, A, B) : SCREEN(<literal type="number">2</literal>, A, B)</argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>hardlight</argument>, <argument>(B &lt; <literal type="number">2048</literal>) ? MULTIPLY(<literal type="number">2</literal>, B, A) : SCREEN(<literal type="number">2</literal>, B, A)</argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>hardmix</argument>, <argument>(A &lt; (<literal type="number">4095</literal> - B)) ? <literal type="number">0</literal>: <literal type="number">4095</literal></argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>heat</argument>, <argument>(A == <literal type="number">0</literal>) ? <literal type="number">0</literal> : <literal type="number">4095</literal> - FFMIN(((<literal type="number">4095</literal> - B) * (<literal type="number">4095</literal> - B)) / A, <literal type="number">4095</literal>)</argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>freeze</argument>, <argument>(B == <literal type="number">0</literal>) ? <literal type="number">0</literal> : <literal type="number">4095</literal> - FFMIN(((<literal type="number">4095</literal> - A) * (<literal type="number">4095</literal> - A)) / B, <literal type="number">4095</literal>)</argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>darken</argument>, <argument>FFMIN(A, B)</argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>lighten</argument>, <argument>FFMAX(A, B)</argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>divide</argument>, <argument>(int)av_clip_uintp2(B == <literal type="number">0</literal> ? <literal type="number">4095</literal> : <literal type="number">4095</literal> * A / B, <literal type="number">12</literal>)</argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>dodge</argument>, <argument>DODGE(A, B)</argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>burn</argument>, <argument>BURN(A, B)</argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>softlight</argument>, <argument>(A &gt; <literal type="number">2047</literal>) ? B + (<literal type="number">4095</literal> - B) * (A - <literal type="number">2047.5</literal>) / <literal type="number">2047.5</literal> * (<literal type="number">0.5</literal> - fabs(B - <literal type="number">2047.5</literal>) / <literal type="number">4095</literal>): B - B * ((<literal type="number">2047.5</literal> - A) / <literal type="number">2047.5</literal>) * (<literal type="number">0.5</literal> - fabs(B - <literal type="number">2047.5</literal>)/<literal type="number">4095</literal>)</argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>exclusion</argument>, <argument>A + B - <literal type="number">2</literal> * A * B / <literal type="number">4095</literal></argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>pinlight</argument>, <argument>(B &lt; <literal type="number">2048</literal>) ? FFMIN(A, <literal type="number">2</literal> * B) : FFMAX(A, <literal type="number">2</literal> * (B - <literal type="number">2048</literal>))</argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>phoenix</argument>, <argument>FFMIN(A, B) - FFMAX(A, B) + <literal type="number">4095</literal></argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>reflect</argument>, <argument>(B == <literal type="number">4095</literal>) ? B : FFMIN(<literal type="number">4095</literal>, (A * A / (<literal type="number">4095</literal> - B)))</argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>glow</argument>, <argument>(A == <literal type="number">4095</literal>) ? A : FFMIN(<literal type="number">4095</literal>, (B * B / (<literal type="number">4095</literal> - A)))</argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>and</argument>, <argument>A &amp; B</argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>or</argument>, <argument>A | B</argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>xor</argument>, <argument>A ^ B</argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>vividlight</argument>, <argument>(A &lt; <literal type="number">2048</literal>) ? BURN(<literal type="number">2</literal> * A, B) : DODGE(<literal type="number">2</literal> * (A - <literal type="number">2048</literal>), B)</argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>linearlight</argument>,<argument>(int)av_clip_uintp2((B &lt; <literal type="number">2048</literal>) ? B + <literal type="number">2</literal> * A - <literal type="number">4095</literal> : B + <literal type="number">2</literal> * (A - <literal type="number">2048</literal>), <literal type="number">12</literal>)</argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MULTIPLY</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SCREEN</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BURN</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DODGE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULTIPLY</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) * (((a) * (b)) / 511))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCREEN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(511 - (x) * ((511 - (a)) * (511 - (b)) / 511))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BURN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) == 0) ? (a) : FFMAX(0, 511 - ((511 - (b)) &lt;&lt; 9) / (a)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DODGE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) == 511) ? (a) : FFMIN(511, (((b) &lt;&lt; 9) / (511 - (a)))))</cpp:value></cpp:define>

<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>addition</argument>, <argument>FFMIN(<literal type="number">511</literal>, A + B)</argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>grainmerge</argument>, <argument>(int)av_clip_uintp2(A + B - <literal type="number">256</literal>, <literal type="number">9</literal>)</argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>average</argument>, <argument>(A + B) / <literal type="number">2</literal></argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>subtract</argument>, <argument>FFMAX(<literal type="number">0</literal>, A - B)</argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>multiply</argument>, <argument>MULTIPLY(<literal type="number">1</literal>, A, B)</argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>multiply128</argument>, <argument>(int)av_clip_uintp2((A - <literal type="number">256</literal>) * B / <literal type="number">64.</literal> + <literal type="number">256</literal>, <literal type="number">9</literal>)</argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>negation</argument>, <argument><literal type="number">511</literal> - FFABS(<literal type="number">511</literal> - A - B)</argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>extremity</argument>, <argument>FFABS(<literal type="number">511</literal> - A - B)</argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>difference</argument>, <argument>FFABS(A - B)</argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>grainextract</argument>, <argument>(int)av_clip_uintp2(<literal type="number">256</literal> + A - B, <literal type="number">9</literal>)</argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>screen</argument>, <argument>SCREEN(<literal type="number">1</literal>, A, B)</argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>overlay</argument>, <argument>(A &lt; <literal type="number">256</literal>) ? MULTIPLY(<literal type="number">2</literal>, A, B) : SCREEN(<literal type="number">2</literal>, A, B)</argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>hardlight</argument>, <argument>(B &lt; <literal type="number">256</literal>) ? MULTIPLY(<literal type="number">2</literal>, B, A) : SCREEN(<literal type="number">2</literal>, B, A)</argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>hardmix</argument>, <argument>(A &lt; (<literal type="number">511</literal> - B)) ? <literal type="number">0</literal>: <literal type="number">511</literal></argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>heat</argument>, <argument>(A == <literal type="number">0</literal>) ? <literal type="number">0</literal> : <literal type="number">511</literal> - FFMIN(((<literal type="number">511</literal> - B) * (<literal type="number">511</literal> - B)) / A, <literal type="number">511</literal>)</argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>freeze</argument>, <argument>(B == <literal type="number">0</literal>) ? <literal type="number">0</literal> : <literal type="number">511</literal> - FFMIN(((<literal type="number">511</literal> - A) * (<literal type="number">511</literal> - A)) / B, <literal type="number">511</literal>)</argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>darken</argument>, <argument>FFMIN(A, B)</argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>lighten</argument>, <argument>FFMAX(A, B)</argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>divide</argument>, <argument>(int)av_clip_uintp2(B == <literal type="number">0</literal> ? <literal type="number">511</literal> : <literal type="number">511</literal> * A / B, <literal type="number">9</literal>)</argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>dodge</argument>, <argument>DODGE(A, B)</argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>burn</argument>, <argument>BURN(A, B)</argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>softlight</argument>, <argument>(A &gt; <literal type="number">511</literal>) ? B + (<literal type="number">511</literal> - B) * (A - <literal type="number">511.5</literal>) / <literal type="number">511.5</literal> * (<literal type="number">0.5</literal> - fabs(B - <literal type="number">511.5</literal>) / <literal type="number">511</literal>): B - B * ((<literal type="number">511.5</literal> - A) / <literal type="number">511.5</literal>) * (<literal type="number">0.5</literal> - fabs(B - <literal type="number">511.5</literal>)/<literal type="number">511</literal>)</argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>exclusion</argument>, <argument>A + B - <literal type="number">2</literal> * A * B / <literal type="number">511</literal></argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>pinlight</argument>, <argument>(B &lt; <literal type="number">256</literal>) ? FFMIN(A, <literal type="number">2</literal> * B) : FFMAX(A, <literal type="number">2</literal> * (B - <literal type="number">256</literal>))</argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>phoenix</argument>, <argument>FFMIN(A, B) - FFMAX(A, B) + <literal type="number">511</literal></argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>reflect</argument>, <argument>(B == <literal type="number">511</literal>) ? B : FFMIN(<literal type="number">511</literal>, (A * A / (<literal type="number">511</literal> - B)))</argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>glow</argument>, <argument>(A == <literal type="number">511</literal>) ? A : FFMIN(<literal type="number">511</literal>, (B * B / (<literal type="number">511</literal> - A)))</argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>and</argument>, <argument>A &amp; B</argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>or</argument>, <argument>A | B</argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>xor</argument>, <argument>A ^ B</argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>vividlight</argument>, <argument>(A &lt; <literal type="number">256</literal>) ? BURN(<literal type="number">2</literal> * A, B) : DODGE(<literal type="number">2</literal> * (A - <literal type="number">256</literal>), B)</argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND16</name><argument_list>(<argument>linearlight</argument>,<argument>(int)av_clip_uintp2((B &lt; <literal type="number">256</literal>) ? B + <literal type="number">2</literal> * A - <literal type="number">511</literal> : B + <literal type="number">2</literal> * (A - <literal type="number">256</literal>), <literal type="number">9</literal>)</argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_BLEND_EXPR</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>div</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void blend_expr_##name(const uint8_t *_top, ptrdiff_t top_linesize, const uint8_t *_bottom, ptrdiff_t bottom_linesize, uint8_t *_dst, ptrdiff_t dst_linesize, ptrdiff_t width, ptrdiff_t height, FilterParams *param, double *values, int starty) { const type *top = (type*)_top; const type *bottom = (type*)_bottom; type *dst = (type*)_dst; AVExpr *e = param-&gt;e; int y, x; dst_linesize /= div; top_linesize /= div; bottom_linesize /= div; for (y = 0; y &lt; height; y++) { values[VAR_Y] = y + starty; for (x = 0; x &lt; width; x++) { values[VAR_X] = x; values[VAR_TOP] = values[VAR_A] = top[x]; values[VAR_BOTTOM] = values[VAR_B] = bottom[x]; dst[x] = av_expr_eval(e, values, NULL); } dst += dst_linesize; top += top_linesize; bottom += bottom_linesize; } }</cpp:value></cpp:define>





























<macro><name>DEFINE_BLEND_EXPR</name><argument_list>(<argument>uint8_t</argument>, <argument><literal type="number">8bit</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_BLEND_EXPR</name><argument_list>(<argument>uint16_t</argument>, <argument><literal type="number">16bit</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_slice</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ThreadData</name> <modifier>*</modifier></type><name>td</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slice_start</name> <init>= <expr><operator>(</operator><name><name>td</name><operator>-&gt;</operator><name>h</name></name> <operator>*</operator> <name>jobnr</name> <operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slice_end</name> <init>= <expr><operator>(</operator><name><name>td</name><operator>-&gt;</operator><name>h</name></name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name>slice_end</name> <operator>-</operator> <name>slice_start</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>top</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>td</name><operator>-&gt;</operator><name>plane</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>bottom</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>bottom</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>td</name><operator>-&gt;</operator><name>plane</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>td</name><operator>-&gt;</operator><name>plane</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>values</name><index>[<expr><name>VAR_VARS_NB</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>values</name><index>[<expr><name>VAR_N</name></expr>]</index></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>inlink</name><operator>-&gt;</operator><name>frame_count_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>values</name><index>[<expr><name>VAR_T</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>td</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>pts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr> ?</condition><then> <expr><name>NAN</name></expr> </then><else>: <expr><name><name>td</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>pts</name></name> <operator>*</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>values</name><index>[<expr><name>VAR_W</name></expr>]</index></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>values</name><index>[<expr><name>VAR_H</name></expr>]</index></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>values</name><index>[<expr><name>VAR_SW</name></expr>]</index></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>w</name></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>td</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>values</name><index>[<expr><name>VAR_SH</name></expr>]</index></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>h</name></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>td</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>td</name><operator>-&gt;</operator><name>param</name><operator>-&gt;</operator><name>blend</name></name><argument_list>(<argument><expr><name>top</name> <operator>+</operator> <name>slice_start</name> <operator>*</operator> <name><name>td</name><operator>-&gt;</operator><name>top</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name><name>td</name><operator>-&gt;</operator><name>plane</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>td</name><operator>-&gt;</operator><name>top</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name><name>td</name><operator>-&gt;</operator><name>plane</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name>bottom</name> <operator>+</operator> <name>slice_start</name> <operator>*</operator> <name><name>td</name><operator>-&gt;</operator><name>bottom</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name><name>td</name><operator>-&gt;</operator><name>plane</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>td</name><operator>-&gt;</operator><name>bottom</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name><name>td</name><operator>-&gt;</operator><name>plane</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name>dst</name> <operator>+</operator> <name>slice_start</name> <operator>*</operator> <name><name>td</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name><name>td</name><operator>-&gt;</operator><name>plane</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>td</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name><name>td</name><operator>-&gt;</operator><name>plane</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>td</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>param</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>slice_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>blend_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>top_buf</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>bottom_buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BlendContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>plane</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dst_buf</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst_buf</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>top_buf</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>dst_buf</name></expr></argument>, <argument><expr><name>top_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>hsub</name> <init>= <expr><ternary><condition><expr><name>plane</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>plane</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>hsub</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vsub</name> <init>= <expr><ternary><condition><expr><name>plane</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>plane</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>vsub</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>outw</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>dst_buf</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name>hsub</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>outh</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>dst_buf</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>vsub</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FilterParams</name> <modifier>*</modifier></type><name>param</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>params</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ThreadData</name></type> <name>td</name> <init>= <expr><block>{ <expr><operator>.</operator><name>top</name> <operator>=</operator> <name>top_buf</name></expr>, <expr><operator>.</operator><name>bottom</name> <operator>=</operator> <name>bottom_buf</name></expr>, <expr><operator>.</operator><name>dst</name> <operator>=</operator> <name>dst_buf</name></expr>,
<expr><operator>.</operator><name>w</name> <operator>=</operator> <name>outw</name></expr>, <expr><operator>.</operator><name>h</name> <operator>=</operator> <name>outh</name></expr>, <expr><operator>.</operator><name>param</name> <operator>=</operator> <name>param</name></expr>, <expr><operator>.</operator><name>plane</name> <operator>=</operator> <name>plane</name></expr>,
<expr><operator>.</operator><name>inlink</name> <operator>=</operator> <name>inlink</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>filter_slice</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>td</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>outh</name></expr></argument>, <argument><expr><call><name>ff_filter_get_nb_threads</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>tblend</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>top_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>dst_buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>blend_frame_for_dualinput</name><parameter_list>(<parameter><decl><type><name>FFFrameSync</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>fs</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>top_buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bottom_buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_framesync_dualinput_get</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>top_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bottom_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bottom_buf</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>top_buf</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dst_buf</name> <operator>=</operator> <call><name>blend_frame</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>top_buf</name></expr></argument>, <argument><expr><name>bottom_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dst_buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BlendContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tblend</name></name> <operator>=</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"tblend"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>on_event</name></name> <operator>=</operator> <name>blend_frame_for_dualinput</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_YUVA444P</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P</name></expr>, <expr><name>AV_PIX_FMT_YUVA420P</name></expr>,
<expr><name>AV_PIX_FMT_YUVJ444P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ440P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ422P</name></expr>,<expr><name>AV_PIX_FMT_YUVJ420P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ411P</name></expr>,
<expr><name>AV_PIX_FMT_YUV444P</name></expr>, <expr><name>AV_PIX_FMT_YUV440P</name></expr>, <expr><name>AV_PIX_FMT_YUV422P</name></expr>, <expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_YUV411P</name></expr>, <expr><name>AV_PIX_FMT_YUV410P</name></expr>,
<expr><name>AV_PIX_FMT_GBRP</name></expr>, <expr><name>AV_PIX_FMT_GBRAP</name></expr>, <expr><name>AV_PIX_FMT_GRAY8</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P9</name></expr>, <expr><name>AV_PIX_FMT_YUV422P9</name></expr>, <expr><name>AV_PIX_FMT_YUV444P9</name></expr>,
<expr><name>AV_PIX_FMT_YUVA420P9</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P9</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P9</name></expr>, <expr><name>AV_PIX_FMT_GBRP9</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P10</name></expr>, <expr><name>AV_PIX_FMT_YUV422P10</name></expr>, <expr><name>AV_PIX_FMT_YUV444P10</name></expr>, <expr><name>AV_PIX_FMT_YUV440P10</name></expr>,
<expr><name>AV_PIX_FMT_YUVA420P10</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P10</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P10</name></expr>,
<expr><name>AV_PIX_FMT_GBRP10</name></expr>, <expr><name>AV_PIX_FMT_GBRAP10</name></expr>, <expr><name>AV_PIX_FMT_GRAY10</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P12</name></expr>, <expr><name>AV_PIX_FMT_YUV422P12</name></expr>, <expr><name>AV_PIX_FMT_YUV444P12</name></expr>, <expr><name>AV_PIX_FMT_YUV440P12</name></expr>,
<expr><name>AV_PIX_FMT_YUVA422P12</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P12</name></expr>,
<expr><name>AV_PIX_FMT_GBRP12</name></expr>, <expr><name>AV_PIX_FMT_GBRAP12</name></expr>, <expr><name>AV_PIX_FMT_GRAY12</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P16</name></expr>, <expr><name>AV_PIX_FMT_YUV422P16</name></expr>, <expr><name>AV_PIX_FMT_YUV444P16</name></expr>,
<expr><name>AV_PIX_FMT_YUVA420P16</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P16</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P16</name></expr>,
<expr><name>AV_PIX_FMT_GBRP16</name></expr>, <expr><name>AV_PIX_FMT_GBRAP16</name></expr>, <expr><name>AV_PIX_FMT_GRAY16</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BlendContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_framesync_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>prev_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>params</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>params</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_INIT_BLEND_FUNC</name><parameter_list>(<parameter><type><name>depth</name></type></parameter>, <parameter><type><name>nbits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static av_cold void init_blend_func_##depth##_##nbits##bit(FilterParams *param) { switch (param-&gt;mode) { case BLEND_ADDITION: param-&gt;blend = blend_addition_##depth##bit; break; case BLEND_GRAINMERGE: param-&gt;blend = blend_grainmerge_##depth##bit; break; case BLEND_AND: param-&gt;blend = blend_and_##depth##bit; break; case BLEND_AVERAGE: param-&gt;blend = blend_average_##depth##bit; break; case BLEND_BURN: param-&gt;blend = blend_burn_##depth##bit; break; case BLEND_DARKEN: param-&gt;blend = blend_darken_##depth##bit; break; case BLEND_DIFFERENCE: param-&gt;blend = blend_difference_##depth##bit; break; case BLEND_GRAINEXTRACT: param-&gt;blend = blend_grainextract_##depth##bit; break; case BLEND_DIVIDE: param-&gt;blend = blend_divide_##depth##bit; break; case BLEND_DODGE: param-&gt;blend = blend_dodge_##depth##bit; break; case BLEND_EXCLUSION: param-&gt;blend = blend_exclusion_##depth##bit; break; case BLEND_EXTREMITY: param-&gt;blend = blend_extremity_##depth##bit; break; case BLEND_FREEZE: param-&gt;blend = blend_freeze_##depth##bit; break; case BLEND_GLOW: param-&gt;blend = blend_glow_##depth##bit; break; case BLEND_HARDLIGHT: param-&gt;blend = blend_hardlight_##depth##bit; break; case BLEND_HARDMIX: param-&gt;blend = blend_hardmix_##depth##bit; break; case BLEND_HEAT: param-&gt;blend = blend_heat_##depth##bit; break; case BLEND_LIGHTEN: param-&gt;blend = blend_lighten_##depth##bit; break; case BLEND_LINEARLIGHT: param-&gt;blend = blend_linearlight_##depth##bit; break; case BLEND_MULTIPLY: param-&gt;blend = blend_multiply_##depth##bit; break; case BLEND_MULTIPLY128: param-&gt;blend = blend_multiply128_##depth##bit; break; case BLEND_NEGATION: param-&gt;blend = blend_negation_##depth##bit; break; case BLEND_NORMAL: param-&gt;blend = blend_normal_##nbits##bit; break; case BLEND_OR: param-&gt;blend = blend_or_##depth##bit; break; case BLEND_OVERLAY: param-&gt;blend = blend_overlay_##depth##bit; break; case BLEND_PHOENIX: param-&gt;blend = blend_phoenix_##depth##bit; break; case BLEND_PINLIGHT: param-&gt;blend = blend_pinlight_##depth##bit; break; case BLEND_REFLECT: param-&gt;blend = blend_reflect_##depth##bit; break; case BLEND_SCREEN: param-&gt;blend = blend_screen_##depth##bit; break; case BLEND_SOFTLIGHT: param-&gt;blend = blend_softlight_##depth##bit; break; case BLEND_SUBTRACT: param-&gt;blend = blend_subtract_##depth##bit; break; case BLEND_VIVIDLIGHT: param-&gt;blend = blend_vividlight_##depth##bit; break; case BLEND_XOR: param-&gt;blend = blend_xor_##depth##bit; break; } }</cpp:value></cpp:define>






































<macro><name>DEFINE_INIT_BLEND_FUNC</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_INIT_BLEND_FUNC</name><argument_list>(<argument><literal type="number">9</literal></argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_INIT_BLEND_FUNC</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_INIT_BLEND_FUNC</name><argument_list>(<argument><literal type="number">12</literal></argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>DEFINE_INIT_BLEND_FUNC</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>

<function><type><name>void</name></type> <name>ff_blend_init</name><parameter_list>(<parameter><decl><type><name>FilterParams</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>depth</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<expr_stmt><expr><call><name>init_blend_func_8_8bit</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">9</literal></expr>:</case>
<expr_stmt><expr><call><name>init_blend_func_9_16bit</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case>
<expr_stmt><expr><call><name>init_blend_func_10_16bit</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">12</literal></expr>:</case>
<expr_stmt><expr><call><name>init_blend_func_12_16bit</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">16</literal></expr>:</case>
<expr_stmt><expr><call><name>init_blend_func_16_16bit</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>opacity</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>param</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>BLEND_NORMAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>blend</name></name> <operator>=</operator> <ternary><condition><expr><name>depth</name> <operator>&gt;</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>blend_copytop_16</name></expr> </then><else>: <expr><name>blend_copytop_8</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>BLEND_NORMAL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>opacity</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>blend</name></name> <operator>=</operator> <ternary><condition><expr><name>depth</name> <operator>&gt;</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>blend_copytop_16</name></expr> </then><else>: <expr><name>blend_copytop_8</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>opacity</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>blend</name></name> <operator>=</operator> <ternary><condition><expr><name>depth</name> <operator>&gt;</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>blend_copybottom_16</name></expr> </then><else>: <expr><name>blend_copybottom_8</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_blend_init_x86</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_output</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>toplink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name>TOP</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BlendContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>pix_desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>toplink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>plane</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>tblend</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>bottomlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name>BOTTOM</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>toplink</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name><name>bottomlink</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"inputs must be of same pixel format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>toplink</name><operator>-&gt;</operator><name>w</name></name> <operator>!=</operator> <name><name>bottomlink</name><operator>-&gt;</operator><name>w</name></name> <operator>||</operator> <name><name>toplink</name><operator>-&gt;</operator><name>h</name></name> <operator>!=</operator> <name><name>bottomlink</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"First input link %s parameters "</literal>
<literal type="string">"(size %dx%d) do not match the corresponding "</literal>
<literal type="string">"second input link %s parameters (size %dx%d)\n"</literal></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>input_pads</name><index>[<expr><name>TOP</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>toplink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>toplink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>input_pads</name><index>[<expr><name>BOTTOM</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>bottomlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>bottomlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>toplink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>toplink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <name><name>toplink</name><operator>-&gt;</operator><name>time_base</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <name><name>toplink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>frame_rate</name></name> <operator>=</operator> <name><name>toplink</name><operator>-&gt;</operator><name>frame_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hsub</name></name> <operator>=</operator> <name><name>pix_desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vsub</name></name> <operator>=</operator> <name><name>pix_desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <name><name>pix_desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>=</operator> <call><name>av_pix_fmt_count_planes</name><argument_list>(<argument><expr><name><name>toplink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>tblend</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_framesync_init_dualinput</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>params</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>FilterParams</name> <modifier>*</modifier></type><name>param</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>params</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>all_mode</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>all_mode</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>all_opacity</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>opacity</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>all_opacity</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_blend_init</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>all_expr</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>param</name><operator>-&gt;</operator><name>expr_str</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>expr_str</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>all_expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>param</name><operator>-&gt;</operator><name>expr_str</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>expr_str</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_expr_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>param</name><operator>-&gt;</operator><name>e</name></name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>expr_str</name></name></expr></argument>, <argument><expr><name>var_names</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>blend</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>blend_expr_16bit</name></expr> </then><else>: <expr><name>blend_expr_8bit</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>tblend</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_framesync_configure</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>time_base</name></name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_BLEND_FILTER</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>activate</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BlendContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>ff_framesync_activate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>blend_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"top"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
}</block></expr>,<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"bottom"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>blend_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_output</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_blend</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"blend"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Blend two video frames into each other."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>preinit</name> <operator>=</operator> <name>blend_framesync_preinit</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BlendContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>activate</name> <operator>=</operator> <name>activate</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>blend_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>blend_outputs</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>blend_class</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_INTERNAL</name> <operator>|</operator> <name>AVFILTER_FLAG_SLICE_THREADS</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_TBLEND_FILTER</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tblend_filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BlendContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>prev_frame</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>is_disabled</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>av_frame_clone</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>blend_frame</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prev_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>prev_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_frame</name></name> <operator>=</operator> <name>frame</name></expr>;</expr_stmt>
<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_frame</name></name> <operator>=</operator> <name>frame</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>tblend_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>COMMON_OPTIONS</name></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>tblend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>tblend_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>tblend_filter_frame</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>tblend_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_output</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_tblend</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"tblend"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Blend successive frames."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BlendContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>tblend_class</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>tblend_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>tblend_outputs</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_INTERNAL</name> <operator>|</operator> <name>AVFILTER_FLAG_SLICE_THREADS</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
