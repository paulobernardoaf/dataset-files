<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vf_vaguedenoiser.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>VagueDenoiserContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>threshold</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>percent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>method</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nsteps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>planes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bpc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>peak</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_planes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>planeheight</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>planewidth</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>hlowsize</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>hhighsize</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>vlowsize</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>vhighsize</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>thresholding</name>)<parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>threshold</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>percent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>nsteps</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>VagueDenoiserContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(VagueDenoiserContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>vaguedenoiser_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"threshold"</literal></expr>, <expr><literal type="string">"set filtering strength"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>threshold</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">2.</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>,<expr><name>DBL_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"method"</literal></expr>, <expr><literal type="string">"set filtering method"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">2</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"method"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"hard"</literal></expr>, <expr><literal type="string">"hard thresholding"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"method"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"soft"</literal></expr>, <expr><literal type="string">"soft thresholding"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"method"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"garrote"</literal></expr>, <expr><literal type="string">"garotte thresholding"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">2</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"method"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"nsteps"</literal></expr>, <expr><literal type="string">"set number of steps"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>nsteps</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">6</literal></expr> }</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"percent"</literal></expr>, <expr><literal type="string">"set percent of full denoising"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>percent</name></expr></argument>)</argument_list></call></expr>,<expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">85</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>,<expr><literal type="number">100</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"planes"</literal></expr>, <expr><literal type="string">"set planes to filter"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>planes</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">15</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>vaguedenoiser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NPAD</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>analysis_low</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0.037828455506995f</literal></expr>, <expr><operator>-</operator><literal type="number">0.023849465019380f</literal></expr>, <expr><operator>-</operator><literal type="number">0.110624404418423f</literal></expr>, <expr><literal type="number">0.377402855612654f</literal></expr>,
<expr><literal type="number">0.852698679009403f</literal></expr>, <expr><literal type="number">0.377402855612654f</literal></expr>, <expr><operator>-</operator><literal type="number">0.110624404418423f</literal></expr>, <expr><operator>-</operator><literal type="number">0.023849465019380f</literal></expr>, <expr><literal type="number">0.037828455506995f</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>analysis_high</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{
<expr><operator>-</operator><literal type="number">0.064538882628938f</literal></expr>, <expr><literal type="number">0.040689417609558f</literal></expr>, <expr><literal type="number">0.418092273222212f</literal></expr>, <expr><operator>-</operator><literal type="number">0.788485616405664f</literal></expr>,
<expr><literal type="number">0.418092273222212f</literal></expr>, <expr><literal type="number">0.040689417609558f</literal></expr>, <expr><operator>-</operator><literal type="number">0.064538882628938f</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>synthesis_low</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{
<expr><operator>-</operator><literal type="number">0.064538882628938f</literal></expr>, <expr><operator>-</operator><literal type="number">0.040689417609558f</literal></expr>, <expr><literal type="number">0.418092273222212f</literal></expr>, <expr><literal type="number">0.788485616405664f</literal></expr>,
<expr><literal type="number">0.418092273222212f</literal></expr>, <expr><operator>-</operator><literal type="number">0.040689417609558f</literal></expr>, <expr><operator>-</operator><literal type="number">0.064538882628938f</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>synthesis_high</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>= <expr><block>{
<expr><operator>-</operator><literal type="number">0.037828455506995f</literal></expr>, <expr><operator>-</operator><literal type="number">0.023849465019380f</literal></expr>, <expr><literal type="number">0.110624404418423f</literal></expr>, <expr><literal type="number">0.377402855612654f</literal></expr>,
<expr><operator>-</operator><literal type="number">0.852698679009403f</literal></expr>, <expr><literal type="number">0.377402855612654f</literal></expr>, <expr><literal type="number">0.110624404418423f</literal></expr>, <expr><operator>-</operator><literal type="number">0.023849465019380f</literal></expr>, <expr><operator>-</operator><literal type="number">0.037828455506995f</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_GRAY8</name></expr>, <expr><name>AV_PIX_FMT_GRAY9</name></expr>, <expr><name>AV_PIX_FMT_GRAY10</name></expr>,
<expr><name>AV_PIX_FMT_GRAY12</name></expr>, <expr><name>AV_PIX_FMT_GRAY14</name></expr>, <expr><name>AV_PIX_FMT_GRAY16</name></expr>,
<expr><name>AV_PIX_FMT_YUV410P</name></expr>, <expr><name>AV_PIX_FMT_YUV411P</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_YUV422P</name></expr>,
<expr><name>AV_PIX_FMT_YUV440P</name></expr>, <expr><name>AV_PIX_FMT_YUV444P</name></expr>,
<expr><name>AV_PIX_FMT_YUVJ420P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ422P</name></expr>,
<expr><name>AV_PIX_FMT_YUVJ440P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ444P</name></expr>,
<expr><name>AV_PIX_FMT_YUVJ411P</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P9</name></expr>, <expr><name>AV_PIX_FMT_YUV422P9</name></expr>, <expr><name>AV_PIX_FMT_YUV444P9</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P10</name></expr>, <expr><name>AV_PIX_FMT_YUV422P10</name></expr>, <expr><name>AV_PIX_FMT_YUV444P10</name></expr>,
<expr><name>AV_PIX_FMT_YUV440P10</name></expr>,
<expr><name>AV_PIX_FMT_YUV444P12</name></expr>, <expr><name>AV_PIX_FMT_YUV422P12</name></expr>, <expr><name>AV_PIX_FMT_YUV420P12</name></expr>,
<expr><name>AV_PIX_FMT_YUV440P12</name></expr>,
<expr><name>AV_PIX_FMT_YUV444P14</name></expr>, <expr><name>AV_PIX_FMT_YUV422P14</name></expr>, <expr><name>AV_PIX_FMT_YUV420P14</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P16</name></expr>, <expr><name>AV_PIX_FMT_YUV422P16</name></expr>, <expr><name>AV_PIX_FMT_YUV444P16</name></expr>,
<expr><name>AV_PIX_FMT_GBRP</name></expr>, <expr><name>AV_PIX_FMT_GBRP9</name></expr>, <expr><name>AV_PIX_FMT_GBRP10</name></expr>,
<expr><name>AV_PIX_FMT_GBRP12</name></expr>, <expr><name>AV_PIX_FMT_GBRP14</name></expr>, <expr><name>AV_PIX_FMT_GBRP16</name></expr>,
<expr><name>AV_PIX_FMT_YUVA420P</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P</name></expr>,
<expr><name>AV_PIX_FMT_YUVA444P9</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P10</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P12</name></expr>, <expr><name>AV_PIX_FMT_YUVA444P16</name></expr>,
<expr><name>AV_PIX_FMT_YUVA422P9</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P10</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P12</name></expr>, <expr><name>AV_PIX_FMT_YUVA422P16</name></expr>,
<expr><name>AV_PIX_FMT_YUVA420P9</name></expr>, <expr><name>AV_PIX_FMT_YUVA420P10</name></expr>, <expr><name>AV_PIX_FMT_YUVA420P16</name></expr>,
<expr><name>AV_PIX_FMT_GBRAP</name></expr>, <expr><name>AV_PIX_FMT_GBRAP10</name></expr>, <expr><name>AV_PIX_FMT_GBRAP12</name></expr>, <expr><name>AV_PIX_FMT_GBRAP16</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VagueDenoiserContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>nsteps_width</name></decl>, <decl><type ref="prev"/><name>nsteps_height</name></decl>, <decl><type ref="prev"/><name>nsteps_max</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bpc</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><literal type="number">32</literal> <operator>+</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>in</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><literal type="number">32</literal> <operator>+</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tmp</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><literal type="number">32</literal> <operator>+</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>tmp</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>block</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>in</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>out</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>tmp</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>threshold</name></name> <operator>*=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>peak</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>depth</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nsteps_width</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>planes</name></name> <operator>&amp;</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>planes</name></name> <operator>&amp;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>nsteps_height</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>planes</name></name> <operator>&amp;</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>planes</name></name> <operator>&amp;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>nsteps_max</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>nsteps_max</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>nsteps_max</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>pow</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>nsteps_max</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>nsteps_width</name> <operator>||</operator> <call><name>pow</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>nsteps_max</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>nsteps_height</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nsteps</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>nsteps</name></name></expr></argument>, <argument><expr><name>nsteps_max</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hlowsize</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>p</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hhighsize</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>p</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vlowsize</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><name>p</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vhighsize</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><name>p</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nsteps</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hlowsize</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>hlowsize</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hhighsize</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>hlowsize</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vlowsize</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>vlowsize</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vhighsize</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>vlowsize</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>copy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>length</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>copyv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>stride1</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>p2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>p1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p1</name> <operator>+=</operator> <name>stride1</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>copyh</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>stride2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p2</name> <operator>=</operator> <name><name>p1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name> <operator>+=</operator> <name>stride2</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>symmetric_extension</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>left_ext</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>right_ext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>first</name> <init>= <expr><name>NPAD</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last</name> <init>= <expr><name>NPAD</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>originalLast</name> <init>= <expr><name>last</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nextend</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>left_ext</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><index>[<expr><operator>--</operator><name>first</name></expr>]</index></name> <operator>=</operator> <name><name>output</name><index>[<expr><name>NPAD</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>right_ext</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><index>[<expr><operator>++</operator><name>last</name></expr>]</index></name> <operator>=</operator> <name><name>output</name><index>[<expr><name>originalLast</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>nextend</name> <operator>=</operator> <name>first</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nextend</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><index>[<expr><operator>--</operator><name>first</name></expr>]</index></name> <operator>=</operator> <name><name>output</name><index>[<expr><name>NPAD</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>NPAD</name> <operator>+</operator> <name>NPAD</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>size</name></expr>;</expr_stmt>


<expr_stmt><expr><name>nextend</name> <operator>=</operator> <name>idx</name> <operator>-</operator> <name>last</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nextend</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><index>[<expr><operator>++</operator><name>last</name></expr>]</index></name> <operator>=</operator> <name><name>output</name><index>[<expr><name>originalLast</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>transform_step</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>low_size</name></decl></parameter>, <parameter><decl><type><name>VagueDenoiserContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>symmetric_extension</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>NPAD</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NPAD</name> <operator>+</operator> <name>low_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>a</name> <init>= <expr><name><name>input</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">14</literal></expr>]</index></name> <operator>*</operator> <name><name>analysis_low</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>b</name> <init>= <expr><name><name>input</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">13</literal></expr>]</index></name> <operator>*</operator> <name><name>analysis_low</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>c</name> <init>= <expr><name><name>input</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">12</literal></expr>]</index></name> <operator>*</operator> <name><name>analysis_low</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>d</name> <init>= <expr><name><name>input</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">11</literal></expr>]</index></name> <operator>*</operator> <name><name>analysis_low</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>e</name> <init>= <expr><name><name>input</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">10</literal></expr>]</index></name> <operator>*</operator> <name><name>analysis_low</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>f</name> <init>= <expr><name><name>input</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">9</literal></expr>]</index></name> <operator>*</operator> <name><name>analysis_low</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>g</name> <init>= <expr><name><name>input</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">8</literal></expr>]</index></name> <operator>*</operator> <name><name>analysis_low</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>h</name> <init>= <expr><name><name>input</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">7</literal></expr>]</index></name> <operator>*</operator> <name><name>analysis_low</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>k</name> <init>= <expr><name><name>input</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">6</literal></expr>]</index></name> <operator>*</operator> <name><name>analysis_low</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>a</name> <operator>+</operator> <name>b</name> <operator>+</operator> <name>c</name> <operator>+</operator> <name>d</name> <operator>+</operator> <name>e</name> <operator>+</operator> <name>f</name> <operator>+</operator> <name>g</name> <operator>+</operator> <name>h</name> <operator>+</operator> <name>k</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>NPAD</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NPAD</name> <operator>+</operator> <name>low_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>a</name> <init>= <expr><name><name>input</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">12</literal></expr>]</index></name> <operator>*</operator> <name><name>analysis_high</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>b</name> <init>= <expr><name><name>input</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">11</literal></expr>]</index></name> <operator>*</operator> <name><name>analysis_high</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>c</name> <init>= <expr><name><name>input</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">10</literal></expr>]</index></name> <operator>*</operator> <name><name>analysis_high</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>d</name> <init>= <expr><name><name>input</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">9</literal></expr>]</index></name> <operator>*</operator> <name><name>analysis_high</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>e</name> <init>= <expr><name><name>input</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">8</literal></expr>]</index></name> <operator>*</operator> <name><name>analysis_high</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>f</name> <init>= <expr><name><name>input</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">7</literal></expr>]</index></name> <operator>*</operator> <name><name>analysis_high</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>g</name> <init>= <expr><name><name>input</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">6</literal></expr>]</index></name> <operator>*</operator> <name><name>analysis_high</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name> <operator>+</operator> <name>low_size</name></expr>]</index></name> <operator>=</operator> <name>a</name> <operator>+</operator> <name>b</name> <operator>+</operator> <name>c</name> <operator>+</operator> <name>d</name> <operator>+</operator> <name>e</name> <operator>+</operator> <name>f</name> <operator>+</operator> <name>g</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>invert_step</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>temp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>VagueDenoiserContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>low_size</name> <init>= <expr><operator>(</operator><name>size</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>high_size</name> <init>= <expr><name>size</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>left_ext</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>right_ext</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>findex</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>temp</name> <operator>+</operator> <name>NPAD</name></expr></argument>, <argument><expr><name>input</name> <operator>+</operator> <name>NPAD</name></expr></argument>, <argument><expr><name>low_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>right_ext</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>size</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>symmetric_extension</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>low_size</name></expr></argument>, <argument><expr><name>left_ext</name></expr></argument>, <argument><expr><name>right_ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>NPAD</name> <operator>+</operator> <name>NPAD</name> <operator>+</operator> <name>size</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>findex</name> <operator>=</operator> <operator>(</operator><name>size</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">9</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>findex</name> <operator>+</operator> <literal type="number">11</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>a</name> <init>= <expr><name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>synthesis_low</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>b</name> <init>= <expr><name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>synthesis_low</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>c</name> <init>= <expr><name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>synthesis_low</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>d</name> <init>= <expr><name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>synthesis_low</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">13</literal></expr>]</index></name> <operator>+=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">12</literal></expr>]</index></name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">11</literal></expr>]</index></name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">10</literal></expr>]</index></name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">9</literal></expr>]</index></name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">8</literal></expr>]</index></name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">7</literal></expr>]</index></name> <operator>+=</operator> <name>a</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>temp</name> <operator>+</operator> <name>NPAD</name></expr></argument>, <argument><expr><name>input</name> <operator>+</operator> <name>NPAD</name> <operator>+</operator> <name>low_size</name></expr></argument>, <argument><expr><name>high_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>left_ext</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>right_ext</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>size</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>symmetric_extension</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>high_size</name></expr></argument>, <argument><expr><name>left_ext</name></expr></argument>, <argument><expr><name>right_ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>findex</name> <operator>+</operator> <literal type="number">11</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>a</name> <init>= <expr><name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>synthesis_high</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>b</name> <init>= <expr><name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>synthesis_high</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>c</name> <init>= <expr><name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>synthesis_high</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>d</name> <init>= <expr><name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>synthesis_high</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>e</name> <init>= <expr><name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>synthesis_high</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">13</literal></expr>]</index></name> <operator>+=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">12</literal></expr>]</index></name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">11</literal></expr>]</index></name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">10</literal></expr>]</index></name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">9</literal></expr>]</index></name> <operator>+=</operator> <name>e</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">8</literal></expr>]</index></name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">7</literal></expr>]</index></name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">6</literal></expr>]</index></name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">5</literal></expr>]</index></name> <operator>+=</operator> <name>a</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hard_thresholding</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>threshold</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>percent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>frac</name> <init>= <expr><literal type="number">1.f</literal> <operator>-</operator> <name>percent</name> <operator>*</operator> <literal type="number">0.01f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>block</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>threshold</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>block</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*=</operator> <name>frac</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>block</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>soft_thresholding</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>threshold</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>percent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>nsteps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>frac</name> <init>= <expr><literal type="number">1.f</literal> <operator>-</operator> <name>percent</name> <operator>*</operator> <literal type="number">0.01f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>shift</name> <init>= <expr><name>threshold</name> <operator>*</operator> <literal type="number">0.01f</literal> <operator>*</operator> <name>percent</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name>height</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>nsteps</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><name>w</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>x0</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>y</name> <operator>&lt;</operator> <name>h</name><operator>)</operator></expr> ?</condition><then> <expr><name>w</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>x0</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>temp</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>block</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>temp</name> <operator>&lt;=</operator> <name>threshold</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>block</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*=</operator> <name>frac</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>block</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>block</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0.f</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1.f</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name><name>block</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0.f</literal></expr> ?</condition><then> <expr><literal type="number">1.f</literal></expr> </then><else>: <expr><literal type="number">0.f</literal></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator> <operator>*</operator> <operator>(</operator><name>temp</name> <operator>-</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>block</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>qian_thresholding</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>threshold</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>percent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>percent01</name> <init>= <expr><name>percent</name> <operator>*</operator> <literal type="number">0.01f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>tr2</name> <init>= <expr><name>threshold</name> <operator>*</operator> <name>threshold</name> <operator>*</operator> <name>percent01</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>frac</name> <init>= <expr><literal type="number">1.f</literal> <operator>-</operator> <name>percent01</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>temp</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>block</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>temp</name> <operator>&lt;=</operator> <name>threshold</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>block</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*=</operator> <name>frac</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>tp2</name> <init>= <expr><name>temp</name> <operator>*</operator> <name>temp</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>block</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*=</operator> <operator>(</operator><name>tp2</name> <operator>-</operator> <name>tr2</name><operator>)</operator> <operator>/</operator> <name>tp2</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>block</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter</name><parameter_list>(<parameter><decl><type><name>VagueDenoiserContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>height</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>width</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcp8</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>srcp16</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstp8</name> <init>= <expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dstp16</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>output</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>block</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h_low_size0</name> <init>= <expr><name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v_low_size0</name> <init>= <expr><name>height</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nsteps_transform</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>nsteps</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nsteps_invert</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>nsteps</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>input</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>block</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>p</name><operator>)</operator> <operator>&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>planes</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_image_copy_plane</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>planewidth</name><index>[<expr><name>p</name></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>bpc</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>planeheight</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>srcp8</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>srcp8</name> <operator>+=</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>output</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>srcp16</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>srcp16</name> <operator>+=</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>p</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>output</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><name>nsteps_transform</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>low_size</name> <init>= <expr><operator>(</operator><name>h_low_size0</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>input</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>block</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>v_low_size0</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>copy</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>in</name></name> <operator>+</operator> <name>NPAD</name></expr></argument>, <argument><expr><name>h_low_size0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>transform_step</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>h_low_size0</name></expr></argument>, <argument><expr><name>low_size</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name></name> <operator>+</operator> <name>NPAD</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>h_low_size0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>input</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>low_size</name> <operator>=</operator> <operator>(</operator><name>v_low_size0</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>input</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>block</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>h_low_size0</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>copyv</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>in</name></name> <operator>+</operator> <name>NPAD</name></expr></argument>, <argument><expr><name>v_low_size0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>transform_step</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>v_low_size0</name></expr></argument>, <argument><expr><name>low_size</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copyh</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name></name> <operator>+</operator> <name>NPAD</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>v_low_size0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>input</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>h_low_size0</name> <operator>=</operator> <operator>(</operator><name>h_low_size0</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v_low_size0</name> <operator>=</operator> <operator>(</operator><name>v_low_size0</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>thresholding</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>threshold</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>percent</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nsteps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>nsteps_invert</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>idx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>vlowsize</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>nsteps_invert</name></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>vhighsize</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>nsteps_invert</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>idx2</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>hlowsize</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>nsteps_invert</name></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>hhighsize</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>nsteps_invert</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type> <name>idx3</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>block</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>idx2</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>copyv</name><argument_list>(<argument><expr><name>idx3</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>in</name></name> <operator>+</operator> <name>NPAD</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invert_step</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>tmp</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copyh</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name></name> <operator>+</operator> <name>NPAD</name></expr></argument>, <argument><expr><name>idx3</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>idx3</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>idx3</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>block</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>idx</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>copy</name><argument_list>(<argument><expr><name>idx3</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>in</name></name> <operator>+</operator> <name>NPAD</name></expr></argument>, <argument><expr><name>idx2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invert_step</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>tmp</name></name></expr></argument>, <argument><expr><name>idx2</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name></name> <operator>+</operator> <name>NPAD</name></expr></argument>, <argument><expr><name>idx3</name></expr></argument>, <argument><expr><name>idx2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>idx3</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dstp8</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>input</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>input</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dstp8</name> <operator>+=</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dstp16</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>input</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <literal type="number">0.5f</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>peak</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>input</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dstp16</name> <operator>+=</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>p</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VagueDenoiserContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>direct</name> <init>= <expr><call><name>av_frame_is_writable</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>direct</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>out</name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>filter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>direct</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VagueDenoiserContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>method</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>thresholding</name></name> <operator>=</operator> <name>hard_thresholding</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>thresholding</name></name> <operator>=</operator> <name>soft_thresholding</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>thresholding</name></name> <operator>=</operator> <name>qian_thresholding</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VagueDenoiserContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>tmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>vaguedenoiser_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>vaguedenoiser_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_vaguedenoiser</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"vaguedenoiser"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Apply a Wavelet based Denoiser."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VagueDenoiserContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>vaguedenoiser_class</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>vaguedenoiser_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>vaguedenoiser_outputs</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
