<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\framequeue.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"framequeue.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>FFFrameBucket</name> <modifier>*</modifier></type><name>bucket</name><parameter_list>(<parameter><decl><type><name>FFFrameQueue</name> <modifier>*</modifier></type><name>fq</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name><name>fq</name><operator>-&gt;</operator><name>queue</name><index>[<expr><operator>(</operator><name><name>fq</name><operator>-&gt;</operator><name>tail</name></name> <operator>+</operator> <name>idx</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name><name>fq</name><operator>-&gt;</operator><name>allocated</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_framequeue_global_init</name><parameter_list>(<parameter><decl><type><name>FFFrameQueueGlobal</name> <modifier>*</modifier></type><name>fqg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_consistency</name><parameter_list>(<parameter><decl><type><name>FFFrameQueue</name> <modifier>*</modifier></type><name>fq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ASSERT_LEVEL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>ASSERT_LEVEL</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr></cpp:if>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>nb_samples</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>fq</name><operator>-&gt;</operator><name>queued</name></name> <operator>==</operator> <name><name>fq</name><operator>-&gt;</operator><name>total_frames_head</name></name> <operator>-</operator> <name><name>fq</name><operator>-&gt;</operator><name>total_frames_tail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fq</name><operator>-&gt;</operator><name>queued</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>nb_samples</name> <operator>+=</operator> <call><name>bucket</name><argument_list>(<argument><expr><name>fq</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>nb_samples</name> <operator>==</operator> <name><name>fq</name><operator>-&gt;</operator><name>total_samples_head</name></name> <operator>-</operator> <name><name>fq</name><operator>-&gt;</operator><name>total_samples_tail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_framequeue_init</name><parameter_list>(<parameter><decl><type><name>FFFrameQueue</name> <modifier>*</modifier></type><name>fq</name></decl></parameter>, <parameter><decl><type><name>FFFrameQueueGlobal</name> <modifier>*</modifier></type><name>fqg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>fq</name><operator>-&gt;</operator><name>queue</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>fq</name><operator>-&gt;</operator><name>first_bucket</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fq</name><operator>-&gt;</operator><name>allocated</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_framequeue_free</name><parameter_list>(<parameter><decl><type><name>FFFrameQueue</name> <modifier>*</modifier></type><name>fq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name><name>fq</name><operator>-&gt;</operator><name>queued</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><call><name>ff_framequeue_take</name><argument_list>(<argument><expr><name>fq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name><name>fq</name><operator>-&gt;</operator><name>queue</name></name> <operator>!=</operator> <operator>&amp;</operator><name><name>fq</name><operator>-&gt;</operator><name>first_bucket</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fq</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_framequeue_add</name><parameter_list>(<parameter><decl><type><name>FFFrameQueue</name> <modifier>*</modifier></type><name>fq</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FFFrameBucket</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>check_consistency</name><argument_list>(<argument><expr><name>fq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fq</name><operator>-&gt;</operator><name>queued</name></name> <operator>==</operator> <name><name>fq</name><operator>-&gt;</operator><name>allocated</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fq</name><operator>-&gt;</operator><name>allocated</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>na</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFFrameBucket</name> <modifier>*</modifier></type><name>nq</name> <init>= <expr><call><name>av_realloc_array</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>na</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>nq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nq</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>nq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>fq</name><operator>-&gt;</operator><name>queue</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fq</name><operator>-&gt;</operator><name>queue</name></name> <operator>=</operator> <name>nq</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fq</name><operator>-&gt;</operator><name>allocated</name></name> <operator>=</operator> <name>na</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>na</name> <init>= <expr><name><name>fq</name><operator>-&gt;</operator><name>allocated</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFFrameBucket</name> <modifier>*</modifier></type><name>nq</name> <init>= <expr><call><name>av_realloc_array</name><argument_list>(<argument><expr><name><name>fq</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>, <argument><expr><name>na</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>nq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nq</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fq</name><operator>-&gt;</operator><name>tail</name></name> <operator>+</operator> <name><name>fq</name><operator>-&gt;</operator><name>queued</name></name> <operator>&gt;</operator> <name><name>fq</name><operator>-&gt;</operator><name>allocated</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>nq</name> <operator>+</operator> <name><name>fq</name><operator>-&gt;</operator><name>allocated</name></name></expr></argument>, <argument><expr><name>nq</name></expr></argument>,
<argument><expr><operator>(</operator><name><name>fq</name><operator>-&gt;</operator><name>tail</name></name> <operator>+</operator> <name><name>fq</name><operator>-&gt;</operator><name>queued</name></name> <operator>-</operator> <name><name>fq</name><operator>-&gt;</operator><name>allocated</name></name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>nq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>fq</name><operator>-&gt;</operator><name>queue</name></name> <operator>=</operator> <name>nq</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fq</name><operator>-&gt;</operator><name>allocated</name></name> <operator>=</operator> <name>na</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>bucket</name><argument_list>(<argument><expr><name>fq</name></expr></argument>, <argument><expr><name><name>fq</name><operator>-&gt;</operator><name>queued</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <name>frame</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fq</name><operator>-&gt;</operator><name>queued</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fq</name><operator>-&gt;</operator><name>total_frames_head</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fq</name><operator>-&gt;</operator><name>total_samples_head</name></name> <operator>+=</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_consistency</name><argument_list>(<argument><expr><name>fq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>AVFrame</name> <modifier>*</modifier></type><name>ff_framequeue_take</name><parameter_list>(<parameter><decl><type><name>FFFrameQueue</name> <modifier>*</modifier></type><name>fq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FFFrameBucket</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>check_consistency</name><argument_list>(<argument><expr><name>fq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name><name>fq</name><operator>-&gt;</operator><name>queued</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>bucket</name><argument_list>(<argument><expr><name>fq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fq</name><operator>-&gt;</operator><name>queued</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fq</name><operator>-&gt;</operator><name>tail</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fq</name><operator>-&gt;</operator><name>tail</name></name> <operator>&amp;=</operator> <name><name>fq</name><operator>-&gt;</operator><name>allocated</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fq</name><operator>-&gt;</operator><name>total_frames_tail</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fq</name><operator>-&gt;</operator><name>total_samples_tail</name></name> <operator>+=</operator> <name><name>b</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fq</name><operator>-&gt;</operator><name>samples_skipped</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_consistency</name><argument_list>(<argument><expr><name>fq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>b</name><operator>-&gt;</operator><name>frame</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>AVFrame</name> <modifier>*</modifier></type><name>ff_framequeue_peek</name><parameter_list>(<parameter><decl><type><name>FFFrameQueue</name> <modifier>*</modifier></type><name>fq</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FFFrameBucket</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>check_consistency</name><argument_list>(<argument><expr><name>fq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>idx</name> <operator>&lt;</operator> <name><name>fq</name><operator>-&gt;</operator><name>queued</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>bucket</name><argument_list>(<argument><expr><name>fq</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_consistency</name><argument_list>(<argument><expr><name>fq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>b</name><operator>-&gt;</operator><name>frame</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_framequeue_skip_samples</name><parameter_list>(<parameter><decl><type><name>FFFrameQueue</name> <modifier>*</modifier></type><name>fq</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>samples</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>time_base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FFFrameBucket</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>planar</name></decl>, <decl><type ref="prev"/><name>planes</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>check_consistency</name><argument_list>(<argument><expr><name>fq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name><name>fq</name><operator>-&gt;</operator><name>queued</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>bucket</name><argument_list>(<argument><expr><name>fq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>samples</name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>planar</name> <operator>=</operator> <call><name>av_sample_fmt_is_planar</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>planes</name> <operator>=</operator> <ternary><condition><expr><name>planar</name></expr> ?</condition><then> <expr><name><name>b</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>channels</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes</name> <operator>=</operator> <name>samples</name> <operator>*</operator> <call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>planar</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bytes</name> <operator>*=</operator> <name><name>b</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>+=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name>samples</name></expr></argument>, <argument><expr><call><name>av_make_q</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>time_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>-=</operator> <name>samples</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-=</operator> <name>bytes</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>planes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>bytes</name></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>planes</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>AV_NUM_DATA_POINTERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>fq</name><operator>-&gt;</operator><name>total_samples_tail</name></name> <operator>+=</operator> <name>samples</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fq</name><operator>-&gt;</operator><name>samples_skipped</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_framequeue_update_peeked</name><argument_list>(<argument><expr><name>fq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
