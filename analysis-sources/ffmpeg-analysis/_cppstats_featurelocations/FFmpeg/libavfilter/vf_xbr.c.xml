<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vf_xbr.c">





























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LB_MASK</name></cpp:macro> <cpp:value>0x00FEFEFE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RED_BLUE_MASK</name></cpp:macro> <cpp:value>0x00FF00FF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GREEN_MASK</name></cpp:macro> <cpp:value>0x0000FF00</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PI</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>xbrfunc_t</name>)<parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>XBRContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xbrfunc_t</name></type> <name>func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>rgbtoyuv</name><index>[<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">24</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>XBRContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ThreadData</name> <block>{
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl>, <modifier>*</modifier><name>out</name>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>rgbtoyuv</name></decl>;</decl_stmt>
}</block></struct></type> <name>ThreadData</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(XBRContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_VIDEO_PARAM</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>xbr_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"n"</literal></expr>, <expr><literal type="string">"set scale factor"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">3</literal></expr>}</block></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>xbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>pixel_diff</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>r2y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YMASK</name></cpp:macro> <cpp:value>0xff0000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UMASK</name></cpp:macro> <cpp:value>0x00ff00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VMASK</name></cpp:macro> <cpp:value>0x0000ff</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ABSDIFF</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(abs((int)(a)-(int)(b)))</cpp:value></cpp:define>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>yuv1</name> <init>= <expr><name><name>r2y</name><index>[<expr><name>x</name> <operator>&amp;</operator> <literal type="number">0xffffff</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>yuv2</name> <init>= <expr><name><name>r2y</name><index>[<expr><name>y</name> <operator>&amp;</operator> <literal type="number">0xffffff</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><call><name>ABSDIFF</name><argument_list>(<argument><expr><name>yuv1</name> <operator>&amp;</operator> <name>YMASK</name></expr></argument>, <argument><expr><name>yuv2</name> <operator>&amp;</operator> <name>YMASK</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator>
<operator>(</operator><call><name>ABSDIFF</name><argument_list>(<argument><expr><name>yuv1</name> <operator>&amp;</operator> <name>UMASK</name></expr></argument>, <argument><expr><name>yuv2</name> <operator>&amp;</operator> <name>UMASK</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator>
<call><name>ABSDIFF</name><argument_list>(<argument><expr><name>yuv1</name> <operator>&amp;</operator> <name>VMASK</name></expr></argument>, <argument><expr><name>yuv2</name> <operator>&amp;</operator> <name>VMASK</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALPHA_BLEND_128_W</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((a) &amp; LB_MASK) &gt;&gt; 1) + (((b) &amp; LB_MASK) &gt;&gt; 1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALPHA_BLEND_BASE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( (RED_BLUE_MASK &amp; (((a) &amp; RED_BLUE_MASK) + (((((b) &amp; RED_BLUE_MASK) - ((a) &amp; RED_BLUE_MASK)) * (m)) &gt;&gt; (s)))) | (GREEN_MASK &amp; (((a) &amp; GREEN_MASK) + (((((b) &amp; GREEN_MASK) - ((a) &amp; GREEN_MASK)) * (m)) &gt;&gt; (s)))))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALPHA_BLEND_32_W</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ALPHA_BLEND_BASE(a, b, 1, 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALPHA_BLEND_64_W</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ALPHA_BLEND_BASE(a, b, 1, 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALPHA_BLEND_192_W</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ALPHA_BLEND_BASE(a, b, 3, 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALPHA_BLEND_224_W</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ALPHA_BLEND_BASE(a, b, 7, 3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>df</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>pixel_diff(A, B, r2y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eq</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(df(A, B) &lt; 155)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILT2</name><parameter_list>(<parameter><type><name>PE</name></type></parameter>, <parameter><type><name>PI</name></type></parameter>, <parameter><type><name>PH</name></type></parameter>, <parameter><type><name>PF</name></type></parameter>, <parameter><type><name>PG</name></type></parameter>, <parameter><type><name>PC</name></type></parameter>, <parameter><type><name>PD</name></type></parameter>, <parameter><type><name>PB</name></type></parameter>, <parameter><type><name>PA</name></type></parameter>, <parameter><type><name>G5</name></type></parameter>, <parameter><type><name>C4</name></type></parameter>, <parameter><type><name>G0</name></type></parameter>, <parameter><type><name>D0</name></type></parameter>, <parameter><type><name>C1</name></type></parameter>, <parameter><type><name>B1</name></type></parameter>, <parameter><type><name>F4</name></type></parameter>, <parameter><type><name>I4</name></type></parameter>, <parameter><type><name>H5</name></type></parameter>, <parameter><type><name>I5</name></type></parameter>, <parameter><type><name>A0</name></type></parameter>, <parameter><type><name>A1</name></type></parameter>, <parameter><type><name>N0</name></type></parameter>, <parameter><type><name>N1</name></type></parameter>, <parameter><type><name>N2</name></type></parameter>, <parameter><type><name>N3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (PE != PH &amp;&amp; PE != PF) { const unsigned e = df(PE,PC) + df(PE,PG) + df(PI,H5) + df(PI,F4) + (df(PH,PF)&lt;&lt;2); const unsigned i = df(PH,PD) + df(PH,I5) + df(PF,I4) + df(PF,PB) + (df(PE,PI)&lt;&lt;2); if (e &lt;= i) { const unsigned px = df(PE,PF) &lt;= df(PE,PH) ? PF : PH; if (e &lt; i &amp;&amp; (!eq(PF,PB) &amp;&amp; !eq(PH,PD) || eq(PE,PI) &amp;&amp; (!eq(PF,I4) &amp;&amp; !eq(PH,I5)) || eq(PE,PG) || eq(PE,PC))) { const unsigned ke = df(PF,PG); const unsigned ki = df(PH,PC); const int left = ke&lt;&lt;1 &lt;= ki &amp;&amp; PE != PG &amp;&amp; PD != PG; const int up = ke &gt;= ki&lt;&lt;1 &amp;&amp; PE != PC &amp;&amp; PB != PC; if (left &amp;&amp; up) { E[N3] = ALPHA_BLEND_224_W(E[N3], px); E[N2] = ALPHA_BLEND_64_W( E[N2], px); E[N1] = E[N2]; } else if (left) { E[N3] = ALPHA_BLEND_192_W(E[N3], px); E[N2] = ALPHA_BLEND_64_W( E[N2], px); } else if (up) { E[N3] = ALPHA_BLEND_192_W(E[N3], px); E[N1] = ALPHA_BLEND_64_W( E[N1], px); } else { E[N3] = ALPHA_BLEND_128_W(E[N3], px); } } else { E[N3] = ALPHA_BLEND_128_W(E[N3], px); } } } } while (0)</cpp:value></cpp:define>

































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILT3</name><parameter_list>(<parameter><type><name>PE</name></type></parameter>, <parameter><type><name>PI</name></type></parameter>, <parameter><type><name>PH</name></type></parameter>, <parameter><type><name>PF</name></type></parameter>, <parameter><type><name>PG</name></type></parameter>, <parameter><type><name>PC</name></type></parameter>, <parameter><type><name>PD</name></type></parameter>, <parameter><type><name>PB</name></type></parameter>, <parameter><type><name>PA</name></type></parameter>, <parameter><type><name>G5</name></type></parameter>, <parameter><type><name>C4</name></type></parameter>, <parameter><type><name>G0</name></type></parameter>, <parameter><type><name>D0</name></type></parameter>, <parameter><type><name>C1</name></type></parameter>, <parameter><type><name>B1</name></type></parameter>, <parameter><type><name>F4</name></type></parameter>, <parameter><type><name>I4</name></type></parameter>, <parameter><type><name>H5</name></type></parameter>, <parameter><type><name>I5</name></type></parameter>, <parameter><type><name>A0</name></type></parameter>, <parameter><type><name>A1</name></type></parameter>, <parameter><type><name>N0</name></type></parameter>, <parameter><type><name>N1</name></type></parameter>, <parameter><type><name>N2</name></type></parameter>, <parameter><type><name>N3</name></type></parameter>, <parameter><type><name>N4</name></type></parameter>, <parameter><type><name>N5</name></type></parameter>, <parameter><type><name>N6</name></type></parameter>, <parameter><type><name>N7</name></type></parameter>, <parameter><type><name>N8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (PE != PH &amp;&amp; PE != PF) { const unsigned e = df(PE,PC) + df(PE,PG) + df(PI,H5) + df(PI,F4) + (df(PH,PF)&lt;&lt;2); const unsigned i = df(PH,PD) + df(PH,I5) + df(PF,I4) + df(PF,PB) + (df(PE,PI)&lt;&lt;2); if (e &lt;= i) { const unsigned px = df(PE,PF) &lt;= df(PE,PH) ? PF : PH; if (e &lt; i &amp;&amp; (!eq(PF,PB) &amp;&amp; !eq(PF,PC) || !eq(PH,PD) &amp;&amp; !eq(PH,PG) || eq(PE,PI) &amp;&amp; (!eq(PF,F4) &amp;&amp; !eq(PF,I4) || !eq(PH,H5) &amp;&amp; !eq(PH,I5)) || eq(PE,PG) || eq(PE,PC))) { const unsigned ke = df(PF,PG); const unsigned ki = df(PH,PC); const int left = ke&lt;&lt;1 &lt;= ki &amp;&amp; PE != PG &amp;&amp; PD != PG; const int up = ke &gt;= ki&lt;&lt;1 &amp;&amp; PE != PC &amp;&amp; PB != PC; if (left &amp;&amp; up) { E[N7] = ALPHA_BLEND_192_W(E[N7], px); E[N6] = ALPHA_BLEND_64_W( E[N6], px); E[N5] = E[N7]; E[N2] = E[N6]; E[N8] = px; } else if (left) { E[N7] = ALPHA_BLEND_192_W(E[N7], px); E[N5] = ALPHA_BLEND_64_W( E[N5], px); E[N6] = ALPHA_BLEND_64_W( E[N6], px); E[N8] = px; } else if (up) { E[N5] = ALPHA_BLEND_192_W(E[N5], px); E[N7] = ALPHA_BLEND_64_W( E[N7], px); E[N2] = ALPHA_BLEND_64_W( E[N2], px); E[N8] = px; } else { E[N8] = ALPHA_BLEND_224_W(E[N8], px); E[N5] = ALPHA_BLEND_32_W( E[N5], px); E[N7] = ALPHA_BLEND_32_W( E[N7], px); } } else { E[N8] = ALPHA_BLEND_128_W(E[N8], px); } } } } while (0)</cpp:value></cpp:define>









































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILT4</name><parameter_list>(<parameter><type><name>PE</name></type></parameter>, <parameter><type><name>PI</name></type></parameter>, <parameter><type><name>PH</name></type></parameter>, <parameter><type><name>PF</name></type></parameter>, <parameter><type><name>PG</name></type></parameter>, <parameter><type><name>PC</name></type></parameter>, <parameter><type><name>PD</name></type></parameter>, <parameter><type><name>PB</name></type></parameter>, <parameter><type><name>PA</name></type></parameter>, <parameter><type><name>G5</name></type></parameter>, <parameter><type><name>C4</name></type></parameter>, <parameter><type><name>G0</name></type></parameter>, <parameter><type><name>D0</name></type></parameter>, <parameter><type><name>C1</name></type></parameter>, <parameter><type><name>B1</name></type></parameter>, <parameter><type><name>F4</name></type></parameter>, <parameter><type><name>I4</name></type></parameter>, <parameter><type><name>H5</name></type></parameter>, <parameter><type><name>I5</name></type></parameter>, <parameter><type><name>A0</name></type></parameter>, <parameter><type><name>A1</name></type></parameter>, <parameter><type><name>N15</name></type></parameter>, <parameter><type><name>N14</name></type></parameter>, <parameter><type><name>N11</name></type></parameter>, <parameter><type><name>N3</name></type></parameter>, <parameter><type><name>N7</name></type></parameter>, <parameter><type><name>N10</name></type></parameter>, <parameter><type><name>N13</name></type></parameter>, <parameter><type><name>N12</name></type></parameter>, <parameter><type><name>N9</name></type></parameter>, <parameter><type><name>N6</name></type></parameter>, <parameter><type><name>N2</name></type></parameter>, <parameter><type><name>N1</name></type></parameter>, <parameter><type><name>N5</name></type></parameter>, <parameter><type><name>N8</name></type></parameter>, <parameter><type><name>N4</name></type></parameter>, <parameter><type><name>N0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (PE != PH &amp;&amp; PE != PF) { const unsigned e = df(PE,PC) + df(PE,PG) + df(PI,H5) + df(PI,F4) + (df(PH,PF)&lt;&lt;2); const unsigned i = df(PH,PD) + df(PH,I5) + df(PF,I4) + df(PF,PB) + (df(PE,PI)&lt;&lt;2); if (e &lt;= i) { const unsigned px = df(PE,PF) &lt;= df(PE,PH) ? PF : PH; if (e &lt; i &amp;&amp; (!eq(PF,PB) &amp;&amp; !eq(PH,PD) || eq(PE,PI) &amp;&amp; (!eq(PF,I4) &amp;&amp; !eq(PH,I5)) || eq(PE,PG) || eq(PE,PC))) { const unsigned ke = df(PF,PG); const unsigned ki = df(PH,PC); const int left = ke&lt;&lt;1 &lt;= ki &amp;&amp; PE != PG &amp;&amp; PD != PG; const int up = ke &gt;= ki&lt;&lt;1 &amp;&amp; PE != PC &amp;&amp; PB != PC; if (left &amp;&amp; up) { E[N13] = ALPHA_BLEND_192_W(E[N13], px); E[N12] = ALPHA_BLEND_64_W( E[N12], px); E[N15] = E[N14] = E[N11] = px; E[N10] = E[N3] = E[N12]; E[N7] = E[N13]; } else if (left) { E[N11] = ALPHA_BLEND_192_W(E[N11], px); E[N13] = ALPHA_BLEND_192_W(E[N13], px); E[N10] = ALPHA_BLEND_64_W( E[N10], px); E[N12] = ALPHA_BLEND_64_W( E[N12], px); E[N14] = px; E[N15] = px; } else if (up) { E[N14] = ALPHA_BLEND_192_W(E[N14], px); E[N7 ] = ALPHA_BLEND_192_W(E[N7 ], px); E[N10] = ALPHA_BLEND_64_W( E[N10], px); E[N3 ] = ALPHA_BLEND_64_W( E[N3 ], px); E[N11] = px; E[N15] = px; } else { E[N11] = ALPHA_BLEND_128_W(E[N11], px); E[N14] = ALPHA_BLEND_128_W(E[N14], px); E[N15] = px; } } else { E[N15] = ALPHA_BLEND_128_W(E[N15], px); } } } } while (0)</cpp:value></cpp:define>













































<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>xbr_filter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ThreadData</name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>input</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>in</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>output</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>out</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>r2y</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>rgbtoyuv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slice_start</name> <init>= <expr><operator>(</operator><name><name>input</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <name>jobnr</name> <operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slice_end</name> <init>= <expr><operator>(</operator><name><name>input</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nl</name> <init>= <expr><name><name>output</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nl1</name> <init>= <expr><name>nl</name> <operator>+</operator> <name>nl</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nl2</name> <init>= <expr><name>nl1</name> <operator>+</operator> <name>nl</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>slice_start</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>slice_end</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>E</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>output</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>output</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>n</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>sa2</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>input</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>input</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>sa1</name> <init>= <expr><name>sa2</name> <operator>-</operator> <operator>(</operator><name><name>input</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>sa0</name> <init>= <expr><name>sa1</name> <operator>-</operator> <operator>(</operator><name><name>input</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>sa3</name> <init>= <expr><name>sa2</name> <operator>+</operator> <operator>(</operator><name><name>input</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>sa4</name> <init>= <expr><name>sa3</name> <operator>+</operator> <operator>(</operator><name><name>input</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sa0</name> <operator>=</operator> <name>sa1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sa0</name> <operator>=</operator> <name>sa1</name> <operator>=</operator> <name>sa2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;=</operator> <name><name>input</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sa4</name> <operator>=</operator> <name>sa3</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>==</operator> <name><name>input</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sa4</name> <operator>=</operator> <name>sa3</name> <operator>=</operator> <name>sa2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>input</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>B1</name> <init>= <expr><name><name>sa0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>PB</name> <init>= <expr><name><name>sa1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>PE</name> <init>= <expr><name><name>sa2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>PH</name> <init>= <expr><name><name>sa3</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>H5</name> <init>= <expr><name><name>sa4</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pprev</name> <init>= <expr><literal type="number">2</literal> <operator>-</operator> <operator>(</operator><name>x</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>A1</name> <init>= <expr><name><name>sa0</name><index>[<expr><name>pprev</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>PA</name> <init>= <expr><name><name>sa1</name><index>[<expr><name>pprev</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>PD</name> <init>= <expr><name><name>sa2</name><index>[<expr><name>pprev</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>PG</name> <init>= <expr><name><name>sa3</name><index>[<expr><name>pprev</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>G5</name> <init>= <expr><name><name>sa4</name><index>[<expr><name>pprev</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pprev2</name> <init>= <expr><name>pprev</name> <operator>-</operator> <operator>(</operator><name>x</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>A0</name> <init>= <expr><name><name>sa1</name><index>[<expr><name>pprev2</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>D0</name> <init>= <expr><name><name>sa2</name><index>[<expr><name>pprev2</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>G0</name> <init>= <expr><name><name>sa3</name><index>[<expr><name>pprev2</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pnext</name> <init>= <expr><literal type="number">3</literal> <operator>-</operator> <operator>(</operator><name>x</name> <operator>==</operator> <name><name>input</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>C1</name> <init>= <expr><name><name>sa0</name><index>[<expr><name>pnext</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>PC</name> <init>= <expr><name><name>sa1</name><index>[<expr><name>pnext</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>PF</name> <init>= <expr><name><name>sa2</name><index>[<expr><name>pnext</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>PI</name> <init>= <expr><name><name>sa3</name><index>[<expr><name>pnext</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>I5</name> <init>= <expr><name><name>sa4</name><index>[<expr><name>pnext</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pnext2</name> <init>= <expr><name>pnext</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <operator>(</operator><name>x</name> <operator>&gt;=</operator> <name><name>input</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>C4</name> <init>= <expr><name><name>sa1</name><index>[<expr><name>pnext2</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>F4</name> <init>= <expr><name><name>sa2</name><index>[<expr><name>pnext2</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>I4</name> <init>= <expr><name><name>sa3</name><index>[<expr><name>pnext2</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>E</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>E</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> 
<name><name>E</name><index>[<expr><name>nl</name></expr>]</index></name> <operator>=</operator> <name><name>E</name><index>[<expr><name>nl</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>PE</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>FILT2</name><argument_list>(<argument><expr><name>PE</name></expr></argument>, <argument><expr><name>PI</name></expr></argument>, <argument><expr><name>PH</name></expr></argument>, <argument><expr><name>PF</name></expr></argument>, <argument><expr><name>PG</name></expr></argument>, <argument><expr><name>PC</name></expr></argument>, <argument><expr><name>PD</name></expr></argument>, <argument><expr><name>PB</name></expr></argument>, <argument><expr><name>PA</name></expr></argument>, <argument><expr><name>G5</name></expr></argument>, <argument><expr><name>C4</name></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>D0</name></expr></argument>, <argument><expr><name>C1</name></expr></argument>, <argument><expr><name>B1</name></expr></argument>, <argument><expr><name>F4</name></expr></argument>, <argument><expr><name>I4</name></expr></argument>, <argument><expr><name>H5</name></expr></argument>, <argument><expr><name>I5</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>nl</name></expr></argument>, <argument><expr><name>nl</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FILT2</name><argument_list>(<argument><expr><name>PE</name></expr></argument>, <argument><expr><name>PC</name></expr></argument>, <argument><expr><name>PF</name></expr></argument>, <argument><expr><name>PB</name></expr></argument>, <argument><expr><name>PI</name></expr></argument>, <argument><expr><name>PA</name></expr></argument>, <argument><expr><name>PH</name></expr></argument>, <argument><expr><name>PD</name></expr></argument>, <argument><expr><name>PG</name></expr></argument>, <argument><expr><name>I4</name></expr></argument>, <argument><expr><name>A1</name></expr></argument>, <argument><expr><name>I5</name></expr></argument>, <argument><expr><name>H5</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>D0</name></expr></argument>, <argument><expr><name>B1</name></expr></argument>, <argument><expr><name>C1</name></expr></argument>, <argument><expr><name>F4</name></expr></argument>, <argument><expr><name>C4</name></expr></argument>, <argument><expr><name>G5</name></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>nl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nl</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FILT2</name><argument_list>(<argument><expr><name>PE</name></expr></argument>, <argument><expr><name>PA</name></expr></argument>, <argument><expr><name>PB</name></expr></argument>, <argument><expr><name>PD</name></expr></argument>, <argument><expr><name>PC</name></expr></argument>, <argument><expr><name>PG</name></expr></argument>, <argument><expr><name>PF</name></expr></argument>, <argument><expr><name>PH</name></expr></argument>, <argument><expr><name>PI</name></expr></argument>, <argument><expr><name>C1</name></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>C4</name></expr></argument>, <argument><expr><name>F4</name></expr></argument>, <argument><expr><name>G5</name></expr></argument>, <argument><expr><name>H5</name></expr></argument>, <argument><expr><name>D0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>B1</name></expr></argument>, <argument><expr><name>A1</name></expr></argument>, <argument><expr><name>I4</name></expr></argument>, <argument><expr><name>I5</name></expr></argument>, <argument><expr><name>nl</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>nl</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FILT2</name><argument_list>(<argument><expr><name>PE</name></expr></argument>, <argument><expr><name>PG</name></expr></argument>, <argument><expr><name>PD</name></expr></argument>, <argument><expr><name>PH</name></expr></argument>, <argument><expr><name>PA</name></expr></argument>, <argument><expr><name>PI</name></expr></argument>, <argument><expr><name>PB</name></expr></argument>, <argument><expr><name>PF</name></expr></argument>, <argument><expr><name>PC</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>I5</name></expr></argument>, <argument><expr><name>A1</name></expr></argument>, <argument><expr><name>B1</name></expr></argument>, <argument><expr><name>I4</name></expr></argument>, <argument><expr><name>F4</name></expr></argument>, <argument><expr><name>H5</name></expr></argument>, <argument><expr><name>G5</name></expr></argument>, <argument><expr><name>D0</name></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>C1</name></expr></argument>, <argument><expr><name>C4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>nl</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>E</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>E</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>E</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> 
<name><name>E</name><index>[<expr><name>nl</name></expr>]</index></name> <operator>=</operator> <name><name>E</name><index>[<expr><name>nl</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>E</name><index>[<expr><name>nl</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> 
<name><name>E</name><index>[<expr><name>nl1</name></expr>]</index></name> <operator>=</operator> <name><name>E</name><index>[<expr><name>nl1</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>E</name><index>[<expr><name>nl1</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>PE</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>FILT3</name><argument_list>(<argument><expr><name>PE</name></expr></argument>, <argument><expr><name>PI</name></expr></argument>, <argument><expr><name>PH</name></expr></argument>, <argument><expr><name>PF</name></expr></argument>, <argument><expr><name>PG</name></expr></argument>, <argument><expr><name>PC</name></expr></argument>, <argument><expr><name>PD</name></expr></argument>, <argument><expr><name>PB</name></expr></argument>, <argument><expr><name>PA</name></expr></argument>, <argument><expr><name>G5</name></expr></argument>, <argument><expr><name>C4</name></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>D0</name></expr></argument>, <argument><expr><name>C1</name></expr></argument>, <argument><expr><name>B1</name></expr></argument>, <argument><expr><name>F4</name></expr></argument>, <argument><expr><name>I4</name></expr></argument>, <argument><expr><name>H5</name></expr></argument>, <argument><expr><name>I5</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>nl</name></expr></argument>, <argument><expr><name>nl</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>nl</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>nl1</name></expr></argument>, <argument><expr><name>nl1</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>nl1</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FILT3</name><argument_list>(<argument><expr><name>PE</name></expr></argument>, <argument><expr><name>PC</name></expr></argument>, <argument><expr><name>PF</name></expr></argument>, <argument><expr><name>PB</name></expr></argument>, <argument><expr><name>PI</name></expr></argument>, <argument><expr><name>PA</name></expr></argument>, <argument><expr><name>PH</name></expr></argument>, <argument><expr><name>PD</name></expr></argument>, <argument><expr><name>PG</name></expr></argument>, <argument><expr><name>I4</name></expr></argument>, <argument><expr><name>A1</name></expr></argument>, <argument><expr><name>I5</name></expr></argument>, <argument><expr><name>H5</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>D0</name></expr></argument>, <argument><expr><name>B1</name></expr></argument>, <argument><expr><name>C1</name></expr></argument>, <argument><expr><name>F4</name></expr></argument>, <argument><expr><name>C4</name></expr></argument>, <argument><expr><name>G5</name></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>nl1</name></expr></argument>, <argument><expr><name>nl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nl1</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>nl</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>nl1</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>nl</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FILT3</name><argument_list>(<argument><expr><name>PE</name></expr></argument>, <argument><expr><name>PA</name></expr></argument>, <argument><expr><name>PB</name></expr></argument>, <argument><expr><name>PD</name></expr></argument>, <argument><expr><name>PC</name></expr></argument>, <argument><expr><name>PG</name></expr></argument>, <argument><expr><name>PF</name></expr></argument>, <argument><expr><name>PH</name></expr></argument>, <argument><expr><name>PI</name></expr></argument>, <argument><expr><name>C1</name></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>C4</name></expr></argument>, <argument><expr><name>F4</name></expr></argument>, <argument><expr><name>G5</name></expr></argument>, <argument><expr><name>H5</name></expr></argument>, <argument><expr><name>D0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>B1</name></expr></argument>, <argument><expr><name>A1</name></expr></argument>, <argument><expr><name>I4</name></expr></argument>, <argument><expr><name>I5</name></expr></argument>, <argument><expr><name>nl1</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>nl1</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>nl1</name></expr></argument>, <argument><expr><name>nl</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>nl</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>nl</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FILT3</name><argument_list>(<argument><expr><name>PE</name></expr></argument>, <argument><expr><name>PG</name></expr></argument>, <argument><expr><name>PD</name></expr></argument>, <argument><expr><name>PH</name></expr></argument>, <argument><expr><name>PA</name></expr></argument>, <argument><expr><name>PI</name></expr></argument>, <argument><expr><name>PB</name></expr></argument>, <argument><expr><name>PF</name></expr></argument>, <argument><expr><name>PC</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>I5</name></expr></argument>, <argument><expr><name>A1</name></expr></argument>, <argument><expr><name>B1</name></expr></argument>, <argument><expr><name>I4</name></expr></argument>, <argument><expr><name>F4</name></expr></argument>, <argument><expr><name>H5</name></expr></argument>, <argument><expr><name>G5</name></expr></argument>, <argument><expr><name>D0</name></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>C1</name></expr></argument>, <argument><expr><name>C4</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>nl</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>nl1</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>nl</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>nl1</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nl</name></expr></argument>, <argument><expr><name>nl1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>E</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>E</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>E</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>E</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> 
<name><name>E</name><index>[<expr><name>nl</name></expr>]</index></name> <operator>=</operator> <name><name>E</name><index>[<expr><name>nl</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>E</name><index>[<expr><name>nl</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>E</name><index>[<expr><name>nl</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> 
<name><name>E</name><index>[<expr><name>nl1</name></expr>]</index></name> <operator>=</operator> <name><name>E</name><index>[<expr><name>nl1</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>E</name><index>[<expr><name>nl1</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>E</name><index>[<expr><name>nl1</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> 
<name><name>E</name><index>[<expr><name>nl2</name></expr>]</index></name> <operator>=</operator> <name><name>E</name><index>[<expr><name>nl2</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>E</name><index>[<expr><name>nl2</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>E</name><index>[<expr><name>nl2</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>PE</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>FILT4</name><argument_list>(<argument><expr><name>PE</name></expr></argument>, <argument><expr><name>PI</name></expr></argument>, <argument><expr><name>PH</name></expr></argument>, <argument><expr><name>PF</name></expr></argument>, <argument><expr><name>PG</name></expr></argument>, <argument><expr><name>PC</name></expr></argument>, <argument><expr><name>PD</name></expr></argument>, <argument><expr><name>PB</name></expr></argument>, <argument><expr><name>PA</name></expr></argument>, <argument><expr><name>G5</name></expr></argument>, <argument><expr><name>C4</name></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>D0</name></expr></argument>, <argument><expr><name>C1</name></expr></argument>, <argument><expr><name>B1</name></expr></argument>, <argument><expr><name>F4</name></expr></argument>, <argument><expr><name>I4</name></expr></argument>, <argument><expr><name>H5</name></expr></argument>, <argument><expr><name>I5</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A1</name></expr></argument>, <argument><expr><name>nl2</name><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>nl2</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>nl1</name><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>nl</name><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>nl1</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>nl2</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>nl2</name></expr></argument>, <argument><expr><name>nl1</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>nl</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>nl</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>nl1</name></expr></argument>, <argument><expr><name>nl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FILT4</name><argument_list>(<argument><expr><name>PE</name></expr></argument>, <argument><expr><name>PC</name></expr></argument>, <argument><expr><name>PF</name></expr></argument>, <argument><expr><name>PB</name></expr></argument>, <argument><expr><name>PI</name></expr></argument>, <argument><expr><name>PA</name></expr></argument>, <argument><expr><name>PH</name></expr></argument>, <argument><expr><name>PD</name></expr></argument>, <argument><expr><name>PG</name></expr></argument>, <argument><expr><name>I4</name></expr></argument>, <argument><expr><name>A1</name></expr></argument>, <argument><expr><name>I5</name></expr></argument>, <argument><expr><name>H5</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>D0</name></expr></argument>, <argument><expr><name>B1</name></expr></argument>, <argument><expr><name>C1</name></expr></argument>, <argument><expr><name>F4</name></expr></argument>, <argument><expr><name>C4</name></expr></argument>, <argument><expr><name>G5</name></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>nl</name><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>nl</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>nl1</name><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>nl2</name><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>nl1</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>nl</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>nl</name></expr></argument>, <argument><expr><name>nl1</name></expr></argument>, <argument><expr><name>nl1</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>nl2</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>nl2</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>nl2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FILT4</name><argument_list>(<argument><expr><name>PE</name></expr></argument>, <argument><expr><name>PA</name></expr></argument>, <argument><expr><name>PB</name></expr></argument>, <argument><expr><name>PD</name></expr></argument>, <argument><expr><name>PC</name></expr></argument>, <argument><expr><name>PG</name></expr></argument>, <argument><expr><name>PF</name></expr></argument>, <argument><expr><name>PH</name></expr></argument>, <argument><expr><name>PI</name></expr></argument>, <argument><expr><name>C1</name></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>C4</name></expr></argument>, <argument><expr><name>F4</name></expr></argument>, <argument><expr><name>G5</name></expr></argument>, <argument><expr><name>H5</name></expr></argument>, <argument><expr><name>D0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>B1</name></expr></argument>, <argument><expr><name>A1</name></expr></argument>, <argument><expr><name>I4</name></expr></argument>, <argument><expr><name>I5</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>nl</name></expr></argument>, <argument><expr><name>nl2</name></expr></argument>, <argument><expr><name>nl1</name></expr></argument>, <argument><expr><name>nl</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>nl</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>nl1</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>nl2</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>nl2</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>nl1</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>nl</name><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>nl1</name><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>nl2</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FILT4</name><argument_list>(<argument><expr><name>PE</name></expr></argument>, <argument><expr><name>PG</name></expr></argument>, <argument><expr><name>PD</name></expr></argument>, <argument><expr><name>PH</name></expr></argument>, <argument><expr><name>PA</name></expr></argument>, <argument><expr><name>PI</name></expr></argument>, <argument><expr><name>PB</name></expr></argument>, <argument><expr><name>PF</name></expr></argument>, <argument><expr><name>PC</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>I5</name></expr></argument>, <argument><expr><name>A1</name></expr></argument>, <argument><expr><name>B1</name></expr></argument>, <argument><expr><name>I4</name></expr></argument>, <argument><expr><name>F4</name></expr></argument>, <argument><expr><name>H5</name></expr></argument>, <argument><expr><name>G5</name></expr></argument>, <argument><expr><name>D0</name></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>C1</name></expr></argument>, <argument><expr><name>C4</name></expr></argument>, <argument><expr><name>nl2</name></expr></argument>, <argument><expr><name>nl1</name></expr></argument>, <argument><expr><name>nl2</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>nl2</name><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>nl2</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>nl1</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>nl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nl</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>nl1</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>nl1</name><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>nl</name><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>nl</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sa0</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sa1</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sa2</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sa3</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sa4</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>E</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XBR_FUNC</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static int xbr##size##x(AVFilterContext *ctx, void *arg, int jobnr, int nb_jobs) { xbr_filter(arg, jobnr, nb_jobs, size); return 0; }</cpp:value></cpp:define>






<macro><name>XBR_FUNC</name><argument_list>(<argument><literal type="number">2</literal></argument>)</argument_list></macro>
<macro><name>XBR_FUNC</name><argument_list>(<argument><literal type="number">3</literal></argument>)</argument_list></macro>
<macro><name>XBR_FUNC</name><argument_list>(<argument><literal type="number">4</literal></argument>)</argument_list></macro>


<function><type><specifier>static</specifier> <name>int</name></type> <name>config_output</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XBRContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>n</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>n</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_0RGB32</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XBRContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ThreadData</name></type> <name>td</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>.</operator><name>in</name></name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td</name><operator>.</operator><name>out</name></name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>td</name><operator>.</operator><name>rgbtoyuv</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>rgbtoyuv</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>func</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>td</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><call><name>ff_filter_get_nb_threads</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>XBRContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>xbrfunc_t</name></type> <name><name>xbrfuncs</name><index>[]</index></name> <init>= <expr><block>{<expr><name>xbr2x</name></expr>, <expr><name>xbr3x</name></expr>, <expr><name>xbr4x</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bg</name></decl>, <decl><type ref="prev"/><name>rg</name></decl>, <decl><type ref="prev"/><name>g</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>bg</name> <operator>=</operator> <operator>-</operator><literal type="number">255</literal></expr>;</init> <condition><expr><name>bg</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>bg</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>rg</name> <operator>=</operator> <operator>-</operator><literal type="number">255</literal></expr>;</init> <condition><expr><name>rg</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>rg</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>u</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>-</operator><literal type="number">169</literal><operator>*</operator><name>rg</name> <operator>+</operator> <literal type="number">500</literal><operator>*</operator><name>bg</name><operator>)</operator><operator>/</operator><literal type="number">1000</literal><operator>)</operator> <operator>+</operator> <literal type="number">128</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>v</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator> <literal type="number">500</literal><operator>*</operator><name>rg</name> <operator>-</operator> <literal type="number">81</literal><operator>*</operator><name>bg</name><operator>)</operator><operator>/</operator><literal type="number">1000</literal><operator>)</operator> <operator>+</operator> <literal type="number">128</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>startg</name> <init>= <expr><call><name>FFMAX3</name><argument_list>(<argument><expr><operator>-</operator><name>bg</name></expr></argument>, <argument><expr><operator>-</operator><name>rg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>endg</name> <init>= <expr><call><name>FFMIN3</name><argument_list>(<argument><expr><literal type="number">255</literal><operator>-</operator><name>bg</name></expr></argument>, <argument><expr><literal type="number">255</literal><operator>-</operator><name>rg</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>y</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator> <literal type="number">299</literal><operator>*</operator><name>rg</name> <operator>+</operator> <literal type="number">1000</literal><operator>*</operator><name>startg</name> <operator>+</operator> <literal type="number">114</literal><operator>*</operator><name>bg</name><operator>)</operator><operator>/</operator><literal type="number">1000</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>bg</name> <operator>+</operator> <name>rg</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <literal type="number">0x010101</literal> <operator>*</operator> <name>startg</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <name>startg</name></expr>;</init> <condition><expr><name>g</name> <operator>&lt;=</operator> <name>endg</name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rgbtoyuv</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>y</name><operator>++</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>u</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name><operator>+=</operator> <literal type="number">0x010101</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name><name>xbrfuncs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>n</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>xbr_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>xbr_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_output</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_xbr</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"xbr"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Scale the input using xBR algorithm."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>xbr_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>xbr_outputs</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>XBRContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>xbr_class</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SLICE_THREADS</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
