<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vf_vpp_qsv.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/eval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qsvvpp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transpose.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(VPPContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>(AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_FILTERING_PARAM)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENH_FILTERS_COUNT</name></cpp:macro> <cpp:value>(7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QSV_HAVE_ROTATION</name></cpp:macro> <cpp:value>QSV_VERSION_ATLEAST(1, 17)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QSV_HAVE_MIRRORING</name></cpp:macro> <cpp:value>QSV_VERSION_ATLEAST(1, 19)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>VPPContext</name><block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>QSVVPPContext</name> <modifier>*</modifier></type><name>qsv</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>mfxExtVPPDeinterlacing</name></type> <name>deinterlace_conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxExtVPPFrameRateConversion</name></type> <name>frc_conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxExtVPPDenoise</name></type> <name>denoise_conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxExtVPPDetail</name></type> <name>detail_conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxExtVPPProcAmp</name></type> <name>procamp_conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxExtVPPRotation</name></type> <name>rotation_conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxExtVPPMirroring</name></type> <name>mirroring_conf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>out_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>out_height</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>out_format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>framerate</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>use_frc</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>deinterlace</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>denoise</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>detail</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>use_crop</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>crop_w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>crop_h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>crop_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>crop_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>transpose</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rotate</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>hflip</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>int</name></type> <name>procamp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>hue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>saturation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>contrast</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>brightness</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cx</name></decl>, <modifier>*</modifier><name>cy</name>, <modifier>*</modifier><name>cw</name>, <modifier>*</modifier><name>ch</name>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ow</name></decl>, <modifier>*</modifier><name>oh</name>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>output_format_str</name></decl>;</decl_stmt>
}</block></struct></type> <name>VPPContext</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"deinterlace"</literal></expr>, <expr><literal type="string">"deinterlace mode: 0=off, 1=bob, 2=advanced"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>deinterlace</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MFX_DEINTERLACING_ADVANCED</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><literal type="string">"deinterlace"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bob"</literal></expr>, <expr><literal type="string">"Bob deinterlace mode."</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>MFX_DEINTERLACING_BOB</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><literal type="string">"deinterlace"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"advanced"</literal></expr>, <expr><literal type="string">"Advanced deinterlace mode. "</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>MFX_DEINTERLACING_ADVANCED</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><literal type="string">"deinterlace"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"denoise"</literal></expr>, <expr><literal type="string">"denoise level [0, 100]"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>denoise</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"detail"</literal></expr>, <expr><literal type="string">"enhancement level [0, 100]"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>detail</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"framerate"</literal></expr>, <expr><literal type="string">"output framerate"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>framerate</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_RATIONAL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">0.0</literal></expr> }</block></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>DBL_MAX</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"procamp"</literal></expr>, <expr><literal type="string">"Enable ProcAmp"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>procamp</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"hue"</literal></expr>, <expr><literal type="string">"ProcAmp hue"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>hue</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">0.0</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">180.0</literal></expr>, <expr><literal type="number">180.0</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"saturation"</literal></expr>, <expr><literal type="string">"ProcAmp saturation"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>saturation</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">1.0</literal></expr> }</block></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">10.0</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"contrast"</literal></expr>, <expr><literal type="string">"ProcAmp contrast"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>contrast</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">1.0</literal></expr> }</block></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">10.0</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"brightness"</literal></expr>, <expr><literal type="string">"ProcAmp brightness"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>brightness</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">0.0</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">100.0</literal></expr>, <expr><literal type="number">100.0</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"transpose"</literal></expr>, <expr><literal type="string">"set transpose direction"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>transpose</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"transpose"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"cclock_hflip"</literal></expr>, <expr><literal type="string">"rotate counter-clockwise with horizontal flip"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TRANSPOSE_CCLOCK_FLIP</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"transpose"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"clock"</literal></expr>, <expr><literal type="string">"rotate clockwise"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TRANSPOSE_CLOCK</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"transpose"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cclock"</literal></expr>, <expr><literal type="string">"rotate counter-clockwise"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TRANSPOSE_CCLOCK</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"transpose"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"clock_hflip"</literal></expr>, <expr><literal type="string">"rotate clockwise with horizontal flip"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TRANSPOSE_CLOCK_FLIP</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"transpose"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"reversal"</literal></expr>, <expr><literal type="string">"rotate by half-turn"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TRANSPOSE_REVERSAL</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"transpose"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"hflip"</literal></expr>, <expr><literal type="string">"flip horizontally"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TRANSPOSE_HFLIP</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"transpose"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"vflip"</literal></expr>, <expr><literal type="string">"flip vertically"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TRANSPOSE_VFLIP</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"transpose"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"cw"</literal></expr>, <expr><literal type="string">"set the width crop area expression"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>cw</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"iw"</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ch"</literal></expr>, <expr><literal type="string">"set the height crop area expression"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"ih"</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cx"</literal></expr>, <expr><literal type="string">"set the x crop area expression"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"(in_w-out_w)/2"</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cy"</literal></expr>, <expr><literal type="string">"set the y crop area expression"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>cy</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"(in_h-out_h)/2"</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"w"</literal></expr>, <expr><literal type="string">"Output video width"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>ow</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"cw"</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"width"</literal></expr>, <expr><literal type="string">"Output video width"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>ow</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"cw"</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"h"</literal></expr>, <expr><literal type="string">"Output video height"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>oh</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"w*ch/cw"</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"height"</literal></expr>, <expr><literal type="string">"Output video height"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>oh</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"w*ch/cw"</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"format"</literal></expr>, <expr><literal type="string">"Output pixel format"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>output_format_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"same"</literal></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>var_names</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"iw"</literal></expr>, <expr><literal type="string">"in_w"</literal></expr>,
<expr><literal type="string">"ih"</literal></expr>, <expr><literal type="string">"in_h"</literal></expr>,
<expr><literal type="string">"ow"</literal></expr>, <expr><literal type="string">"out_w"</literal></expr>, <expr><literal type="string">"w"</literal></expr>,
<expr><literal type="string">"oh"</literal></expr>, <expr><literal type="string">"out_h"</literal></expr>, <expr><literal type="string">"h"</literal></expr>,
<expr><literal type="string">"cw"</literal></expr>,
<expr><literal type="string">"ch"</literal></expr>,
<expr><literal type="string">"cx"</literal></expr>,
<expr><literal type="string">"cy"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<enum>enum <name>var_name</name> <block>{
<decl><name>VAR_iW</name></decl>, <decl><name>VAR_IN_W</name></decl>,
<decl><name>VAR_iH</name></decl>, <decl><name>VAR_IN_H</name></decl>,
<decl><name>VAR_oW</name></decl>, <decl><name>VAR_OUT_W</name></decl>, <decl><name>VAR_W</name></decl>,
<decl><name>VAR_oH</name></decl>, <decl><name>VAR_OUT_H</name></decl>, <decl><name>VAR_H</name></decl>,
<decl><name>CW</name></decl>,
<decl><name>CH</name></decl>,
<decl><name>CX</name></decl>,
<decl><name>CY</name></decl>,
<decl><name>VAR_VARS_NB</name></decl>
}</block>;</enum>

<function><type><specifier>static</specifier> <name>int</name></type> <name>eval_expr</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PASS_EXPR</name><parameter_list>(<parameter><type><name>e</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ret = av_expr_parse(&amp;e, s, var_names, NULL, NULL, NULL, NULL, 0, ctx); if (ret &lt; 0) {av_log(ctx, AV_LOG_ERROR, "Error when passing '%s'.\n", s);goto release;}}</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALC_EXPR</name><parameter_list>(<parameter><type><name>e</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{i = v = av_expr_eval(e, var_values, NULL); }</cpp:value></cpp:define>


<decl_stmt><decl><type><name>VPPContext</name> <modifier>*</modifier></type><name>vpp</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>var_values</name><index>[<expr><name>VAR_VARS_NB</name></expr>]</index></name> <init>= <expr><block>{ <expr><name>NAN</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name>w_expr</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>h_expr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name>cw_expr</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ch_expr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name>cx_expr</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cy_expr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PASS_EXPR</name><argument_list>(<argument><expr><name>cw_expr</name></expr></argument>, <argument><expr><name><name>vpp</name><operator>-&gt;</operator><name>cw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PASS_EXPR</name><argument_list>(<argument><expr><name>ch_expr</name></expr></argument>, <argument><expr><name><name>vpp</name><operator>-&gt;</operator><name>ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PASS_EXPR</name><argument_list>(<argument><expr><name>w_expr</name></expr></argument>, <argument><expr><name><name>vpp</name><operator>-&gt;</operator><name>ow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PASS_EXPR</name><argument_list>(<argument><expr><name>h_expr</name></expr></argument>, <argument><expr><name><name>vpp</name><operator>-&gt;</operator><name>oh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PASS_EXPR</name><argument_list>(<argument><expr><name>cx_expr</name></expr></argument>, <argument><expr><name><name>vpp</name><operator>-&gt;</operator><name>cx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PASS_EXPR</name><argument_list>(<argument><expr><name>cy_expr</name></expr></argument>, <argument><expr><name><name>vpp</name><operator>-&gt;</operator><name>cy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_iW</name></expr>]</index></name> <operator>=</operator>
<name><name>var_values</name><index>[<expr><name>VAR_IN_W</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_iH</name></expr>]</index></name> <operator>=</operator>
<name><name>var_values</name><index>[<expr><name>VAR_IN_H</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>h</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CALC_EXPR</name><argument_list>(<argument><expr><name>cw_expr</name></expr></argument>, <argument><expr><name><name>var_values</name><index>[<expr><name>CW</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>vpp</name><operator>-&gt;</operator><name>crop_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CALC_EXPR</name><argument_list>(<argument><expr><name>ch_expr</name></expr></argument>, <argument><expr><name><name>var_values</name><index>[<expr><name>CH</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>vpp</name><operator>-&gt;</operator><name>crop_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CALC_EXPR</name><argument_list>(<argument><expr><name>cw_expr</name></expr></argument>, <argument><expr><name><name>var_values</name><index>[<expr><name>CW</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>vpp</name><operator>-&gt;</operator><name>crop_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CALC_EXPR</name><argument_list>(<argument><expr><name>w_expr</name></expr></argument>,
<argument><expr><name><name>var_values</name><index>[<expr><name>VAR_OUT_W</name></expr>]</index></name> <operator>=</operator> <name><name>var_values</name><index>[<expr><name>VAR_oW</name></expr>]</index></name> <operator>=</operator> <name><name>var_values</name><index>[<expr><name>VAR_W</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>vpp</name><operator>-&gt;</operator><name>out_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CALC_EXPR</name><argument_list>(<argument><expr><name>h_expr</name></expr></argument>,
<argument><expr><name><name>var_values</name><index>[<expr><name>VAR_OUT_H</name></expr>]</index></name> <operator>=</operator> <name><name>var_values</name><index>[<expr><name>VAR_oH</name></expr>]</index></name> <operator>=</operator> <name><name>var_values</name><index>[<expr><name>VAR_H</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>vpp</name><operator>-&gt;</operator><name>out_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CALC_EXPR</name><argument_list>(<argument><expr><name>w_expr</name></expr></argument>,
<argument><expr><name><name>var_values</name><index>[<expr><name>VAR_OUT_W</name></expr>]</index></name> <operator>=</operator> <name><name>var_values</name><index>[<expr><name>VAR_oW</name></expr>]</index></name> <operator>=</operator> <name><name>var_values</name><index>[<expr><name>VAR_W</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>vpp</name><operator>-&gt;</operator><name>out_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CALC_EXPR</name><argument_list>(<argument><expr><name>cx_expr</name></expr></argument>, <argument><expr><name><name>var_values</name><index>[<expr><name>CX</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>vpp</name><operator>-&gt;</operator><name>crop_x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CALC_EXPR</name><argument_list>(<argument><expr><name>cy_expr</name></expr></argument>, <argument><expr><name><name>var_values</name><index>[<expr><name>CY</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>vpp</name><operator>-&gt;</operator><name>crop_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CALC_EXPR</name><argument_list>(<argument><expr><name>cx_expr</name></expr></argument>, <argument><expr><name><name>var_values</name><index>[<expr><name>CX</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>vpp</name><operator>-&gt;</operator><name>crop_x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>vpp</name><operator>-&gt;</operator><name>crop_w</name></name> <operator>!=</operator> <name><name>var_values</name><index>[<expr><name>VAR_iW</name></expr>]</index></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>vpp</name><operator>-&gt;</operator><name>crop_h</name></name> <operator>!=</operator> <name><name>var_values</name><index>[<expr><name>VAR_iH</name></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>use_crop</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>release</name>:</label>
<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name>w_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name>h_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name>cw_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name>ch_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name>cx_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name>cy_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PASS_EXPR</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CALC_EXPR</name></cpp:undef>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>vpp_init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VPPContext</name> <modifier>*</modifier></type><name>vpp</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>vpp</name><operator>-&gt;</operator><name>output_format_str</name></name></expr></argument>, <argument><expr><literal type="string">"same"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>out_format</name></name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>out_format</name></name> <operator>=</operator> <call><name>av_get_pix_fmt</name><argument_list>(<argument><expr><name><name>vpp</name><operator>-&gt;</operator><name>output_format_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vpp</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unrecognized output pixel format: %s\n"</literal></expr></argument>, <argument><expr><name><name>vpp</name><operator>-&gt;</operator><name>output_format_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VPPContext</name> <modifier>*</modifier></type><name>vpp</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vpp</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>den</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>vpp</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>num</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>framerate</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>frame_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_cmp_q</name><argument_list>(<argument><expr><name><name>vpp</name><operator>-&gt;</operator><name>framerate</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>frame_rate</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>use_frc</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>eval_expr</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Fail to eval expr.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vpp</name><operator>-&gt;</operator><name>out_height</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>vpp</name><operator>-&gt;</operator><name>out_width</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>out_width</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>out_height</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vpp</name><operator>-&gt;</operator><name>use_crop</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>crop_x</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>vpp</name><operator>-&gt;</operator><name>crop_x</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>crop_y</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>vpp</name><operator>-&gt;</operator><name>crop_y</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>vpp</name><operator>-&gt;</operator><name>crop_w</name></name> <operator>+</operator> <name><name>vpp</name><operator>-&gt;</operator><name>crop_x</name></name> <operator>&gt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>crop_x</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <name><name>vpp</name><operator>-&gt;</operator><name>crop_w</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>vpp</name><operator>-&gt;</operator><name>crop_h</name></name> <operator>+</operator> <name><name>vpp</name><operator>-&gt;</operator><name>crop_y</name></name> <operator>&gt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>crop_y</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <name><name>vpp</name><operator>-&gt;</operator><name>crop_h</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_output</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VPPContext</name> <modifier>*</modifier></type><name>vpp</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QSVVPPParam</name></type> <name>param</name> <init>= <expr><block>{ <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QSVVPPCrop</name></type> <name>crop</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxExtBuffer</name> <modifier>*</modifier></type><name><name>ext_buf</name><index>[<expr><name>ENH_FILTERS_COUNT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>in_format</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>vpp</name><operator>-&gt;</operator><name>out_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>vpp</name><operator>-&gt;</operator><name>out_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>frame_rate</name></name> <operator>=</operator> <name><name>vpp</name><operator>-&gt;</operator><name>framerate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <call><name>av_inv_q</name><argument_list>(<argument><expr><name><name>vpp</name><operator>-&gt;</operator><name>framerate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>filter_frame</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>num_ext_buf</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>ext_buf</name></name> <operator>=</operator> <name>ext_buf</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_QSV</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>inlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name> <operator>||</operator> <operator>!</operator><name><name>inlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>in_format</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>inlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><operator>-&gt;</operator><name>sw_format</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>in_format</name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vpp</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>out_format</name></name> <operator>=</operator> <name>in_format</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>out_sw_format</name></name> <operator>=</operator> <name><name>vpp</name><operator>-&gt;</operator><name>out_format</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vpp</name><operator>-&gt;</operator><name>use_crop</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>crop</name><operator>.</operator><name>in_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>crop</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>vpp</name><operator>-&gt;</operator><name>crop_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>crop</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>vpp</name><operator>-&gt;</operator><name>crop_y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>crop</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name><name>vpp</name><operator>-&gt;</operator><name>crop_w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>crop</name><operator>.</operator><name>h</name></name> <operator>=</operator> <name><name>vpp</name><operator>-&gt;</operator><name>crop_h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>num_crop</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>param</name><operator>.</operator><name>crop</name></name> <operator>=</operator> <operator>&amp;</operator><name>crop</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vpp</name><operator>-&gt;</operator><name>deinterlace</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vpp</name><operator>-&gt;</operator><name>deinterlace_conf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mfxExtVPPDeinterlacing</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>deinterlace_conf</name><operator>.</operator><name>Header</name><operator>.</operator><name>BufferId</name></name> <operator>=</operator> <name>MFX_EXTBUFF_VPP_DEINTERLACING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>deinterlace_conf</name><operator>.</operator><name>Header</name><operator>.</operator><name>BufferSz</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mfxExtVPPDeinterlacing</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>deinterlace_conf</name><operator>.</operator><name>Mode</name></name> <operator>=</operator> <ternary><condition><expr><name><name>vpp</name><operator>-&gt;</operator><name>deinterlace</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then>
<expr><name>MFX_DEINTERLACING_BOB</name></expr> </then><else>: <expr><name>MFX_DEINTERLACING_ADVANCED</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>ext_buf</name><index>[<expr><name><name>param</name><operator>.</operator><name>num_ext_buf</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mfxExtBuffer</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>vpp</name><operator>-&gt;</operator><name>deinterlace_conf</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vpp</name><operator>-&gt;</operator><name>use_frc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vpp</name><operator>-&gt;</operator><name>frc_conf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mfxExtVPPFrameRateConversion</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>frc_conf</name><operator>.</operator><name>Header</name><operator>.</operator><name>BufferId</name></name> <operator>=</operator> <name>MFX_EXTBUFF_VPP_FRAME_RATE_CONVERSION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>frc_conf</name><operator>.</operator><name>Header</name><operator>.</operator><name>BufferSz</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mfxExtVPPFrameRateConversion</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>frc_conf</name><operator>.</operator><name>Algorithm</name></name> <operator>=</operator> <name>MFX_FRCALGM_DISTRIBUTED_TIMESTAMP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>ext_buf</name><index>[<expr><name><name>param</name><operator>.</operator><name>num_ext_buf</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mfxExtBuffer</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>vpp</name><operator>-&gt;</operator><name>frc_conf</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vpp</name><operator>-&gt;</operator><name>denoise</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vpp</name><operator>-&gt;</operator><name>denoise_conf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mfxExtVPPDenoise</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>denoise_conf</name><operator>.</operator><name>Header</name><operator>.</operator><name>BufferId</name></name> <operator>=</operator> <name>MFX_EXTBUFF_VPP_DENOISE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>denoise_conf</name><operator>.</operator><name>Header</name><operator>.</operator><name>BufferSz</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mfxExtVPPDenoise</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>denoise_conf</name><operator>.</operator><name>DenoiseFactor</name></name> <operator>=</operator> <name><name>vpp</name><operator>-&gt;</operator><name>denoise</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>ext_buf</name><index>[<expr><name><name>param</name><operator>.</operator><name>num_ext_buf</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mfxExtBuffer</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>vpp</name><operator>-&gt;</operator><name>denoise_conf</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vpp</name><operator>-&gt;</operator><name>detail</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vpp</name><operator>-&gt;</operator><name>detail_conf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mfxExtVPPDetail</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>detail_conf</name><operator>.</operator><name>Header</name><operator>.</operator><name>BufferId</name></name> <operator>=</operator> <name>MFX_EXTBUFF_VPP_DETAIL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>detail_conf</name><operator>.</operator><name>Header</name><operator>.</operator><name>BufferSz</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mfxExtVPPDetail</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>detail_conf</name><operator>.</operator><name>DetailFactor</name></name> <operator>=</operator> <name><name>vpp</name><operator>-&gt;</operator><name>detail</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>ext_buf</name><index>[<expr><name><name>param</name><operator>.</operator><name>num_ext_buf</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mfxExtBuffer</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>vpp</name><operator>-&gt;</operator><name>detail_conf</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vpp</name><operator>-&gt;</operator><name>procamp</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vpp</name><operator>-&gt;</operator><name>procamp_conf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mfxExtVPPProcAmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>procamp_conf</name><operator>.</operator><name>Header</name><operator>.</operator><name>BufferId</name></name> <operator>=</operator> <name>MFX_EXTBUFF_VPP_PROCAMP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>procamp_conf</name><operator>.</operator><name>Header</name><operator>.</operator><name>BufferSz</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mfxExtVPPProcAmp</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>procamp_conf</name><operator>.</operator><name>Hue</name></name> <operator>=</operator> <name><name>vpp</name><operator>-&gt;</operator><name>hue</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>procamp_conf</name><operator>.</operator><name>Saturation</name></name> <operator>=</operator> <name><name>vpp</name><operator>-&gt;</operator><name>saturation</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>procamp_conf</name><operator>.</operator><name>Contrast</name></name> <operator>=</operator> <name><name>vpp</name><operator>-&gt;</operator><name>contrast</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>procamp_conf</name><operator>.</operator><name>Brightness</name></name> <operator>=</operator> <name><name>vpp</name><operator>-&gt;</operator><name>brightness</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>ext_buf</name><index>[<expr><name><name>param</name><operator>.</operator><name>num_ext_buf</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mfxExtBuffer</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>vpp</name><operator>-&gt;</operator><name>procamp_conf</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vpp</name><operator>-&gt;</operator><name>transpose</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>QSV_HAVE_ROTATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<switch>switch <condition>(<expr><name><name>vpp</name><operator>-&gt;</operator><name>transpose</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TRANSPOSE_CCLOCK_FLIP</name></expr>:</case>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>rotate</name></name> <operator>=</operator> <name>MFX_ANGLE_270</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>hflip</name></name> <operator>=</operator> <name>MFX_MIRRORING_HORIZONTAL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TRANSPOSE_CLOCK</name></expr>:</case>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>rotate</name></name> <operator>=</operator> <name>MFX_ANGLE_90</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>hflip</name></name> <operator>=</operator> <name>MFX_MIRRORING_DISABLED</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TRANSPOSE_CCLOCK</name></expr>:</case>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>rotate</name></name> <operator>=</operator> <name>MFX_ANGLE_270</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>hflip</name></name> <operator>=</operator> <name>MFX_MIRRORING_DISABLED</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TRANSPOSE_CLOCK_FLIP</name></expr>:</case>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>rotate</name></name> <operator>=</operator> <name>MFX_ANGLE_90</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>hflip</name></name> <operator>=</operator> <name>MFX_MIRRORING_HORIZONTAL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TRANSPOSE_REVERSAL</name></expr>:</case>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>rotate</name></name> <operator>=</operator> <name>MFX_ANGLE_180</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>hflip</name></name> <operator>=</operator> <name>MFX_MIRRORING_DISABLED</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TRANSPOSE_HFLIP</name></expr>:</case>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>rotate</name></name> <operator>=</operator> <name>MFX_ANGLE_0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>hflip</name></name> <operator>=</operator> <name>MFX_MIRRORING_HORIZONTAL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TRANSPOSE_VFLIP</name></expr>:</case>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>rotate</name></name> <operator>=</operator> <name>MFX_ANGLE_180</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>hflip</name></name> <operator>=</operator> <name>MFX_MIRRORING_HORIZONTAL</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to set transpose mode to %d.\n"</literal></expr></argument>, <argument><expr><name><name>vpp</name><operator>-&gt;</operator><name>transpose</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"The QSV VPP transpose option is "</literal>
<literal type="string">"not supported with this MSDK version.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>transpose</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vpp</name><operator>-&gt;</operator><name>rotate</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>QSV_HAVE_ROTATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vpp</name><operator>-&gt;</operator><name>rotation_conf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mfxExtVPPRotation</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>rotation_conf</name><operator>.</operator><name>Header</name><operator>.</operator><name>BufferId</name></name> <operator>=</operator> <name>MFX_EXTBUFF_VPP_ROTATION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>rotation_conf</name><operator>.</operator><name>Header</name><operator>.</operator><name>BufferSz</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mfxExtVPPRotation</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>rotation_conf</name><operator>.</operator><name>Angle</name></name> <operator>=</operator> <name><name>vpp</name><operator>-&gt;</operator><name>rotate</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>MFX_ANGLE_90</name> <operator>==</operator> <name><name>vpp</name><operator>-&gt;</operator><name>rotate</name></name> <operator>||</operator> <name>MFX_ANGLE_270</name> <operator>==</operator> <name><name>vpp</name><operator>-&gt;</operator><name>rotate</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>vpp</name><operator>-&gt;</operator><name>out_width</name></name></expr></argument>, <argument><expr><name><name>vpp</name><operator>-&gt;</operator><name>out_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Swap width and height for clock/cclock rotation.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>ext_buf</name><index>[<expr><name><name>param</name><operator>.</operator><name>num_ext_buf</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mfxExtBuffer</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>vpp</name><operator>-&gt;</operator><name>rotation_conf</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"The QSV VPP rotate option is "</literal>
<literal type="string">"not supported with this MSDK version.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>rotate</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vpp</name><operator>-&gt;</operator><name>hflip</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>QSV_HAVE_MIRRORING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vpp</name><operator>-&gt;</operator><name>mirroring_conf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mfxExtVPPMirroring</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>mirroring_conf</name><operator>.</operator><name>Header</name><operator>.</operator><name>BufferId</name></name> <operator>=</operator> <name>MFX_EXTBUFF_VPP_MIRRORING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>mirroring_conf</name><operator>.</operator><name>Header</name><operator>.</operator><name>BufferSz</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mfxExtVPPMirroring</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>mirroring_conf</name><operator>.</operator><name>Type</name></name> <operator>=</operator> <name><name>vpp</name><operator>-&gt;</operator><name>hflip</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>ext_buf</name><index>[<expr><name><name>param</name><operator>.</operator><name>num_ext_buf</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mfxExtBuffer</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>vpp</name><operator>-&gt;</operator><name>mirroring_conf</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"The QSV VPP hflip option is "</literal>
<literal type="string">"not supported with this MSDK version.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpp</name><operator>-&gt;</operator><name>hflip</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vpp</name><operator>-&gt;</operator><name>use_frc</name></name> <operator>||</operator> <name><name>vpp</name><operator>-&gt;</operator><name>use_crop</name></name> <operator>||</operator> <name><name>vpp</name><operator>-&gt;</operator><name>deinterlace</name></name> <operator>||</operator> <name><name>vpp</name><operator>-&gt;</operator><name>denoise</name></name> <operator>||</operator>
<name><name>vpp</name><operator>-&gt;</operator><name>detail</name></name> <operator>||</operator> <name><name>vpp</name><operator>-&gt;</operator><name>procamp</name></name> <operator>||</operator> <name><name>vpp</name><operator>-&gt;</operator><name>rotate</name></name> <operator>||</operator> <name><name>vpp</name><operator>-&gt;</operator><name>hflip</name></name> <operator>||</operator>
<name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>!=</operator> <name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>||</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>!=</operator> <name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>||</operator> <name>in_format</name> <operator>!=</operator> <name><name>vpp</name><operator>-&gt;</operator><name>out_format</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ff_qsvvpp_create</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vpp</name><operator>-&gt;</operator><name>qsv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"qsv vpp pass through mode.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>inlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>picref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VPPContext</name> <modifier>*</modifier></type><name>vpp</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vpp</name><operator>-&gt;</operator><name>qsv</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_qsvvpp_filter_frame</name><argument_list>(<argument><expr><name><name>vpp</name><operator>-&gt;</operator><name>qsv</name></name></expr></argument>, <argument><expr><name>inlink</name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>picref</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>picref</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>picref</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>in_fmts</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>out_fmts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>in_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_YUV420P</name></expr>,
<expr><name>AV_PIX_FMT_NV12</name></expr>,
<expr><name>AV_PIX_FMT_YUYV422</name></expr>,
<expr><name>AV_PIX_FMT_RGB32</name></expr>,
<expr><name>AV_PIX_FMT_QSV</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>out_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_NV12</name></expr>,
<expr><name>AV_PIX_FMT_P010</name></expr>,
<expr><name>AV_PIX_FMT_QSV</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>in_fmts</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>in_pix_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out_fmts</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>out_pix_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><name>in_fmts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>out_formats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><name>out_fmts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>in_formats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>vpp_uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VPPContext</name> <modifier>*</modifier></type><name>vpp</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_qsvvpp_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vpp</name><operator>-&gt;</operator><name>qsv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>vpp_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"vpp_qsv"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>vpp_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>vpp_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_output</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_vpp_qsv</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"vpp_qsv"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Quick Sync Video VPP."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VPPContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>vpp_init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>vpp_uninit</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>vpp_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>vpp_outputs</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>vpp_class</name></expr>,
<expr><operator>.</operator><name>flags_internal</name> <operator>=</operator> <name>FF_FILTER_FLAG_HWFRAME_AWARE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
