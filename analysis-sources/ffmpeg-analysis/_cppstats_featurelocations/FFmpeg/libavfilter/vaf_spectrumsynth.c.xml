<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vaf_spectrumsynth.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/avfft.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ffmath.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/parseutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"window_func.h"</cpp:file></cpp:include>

<enum>enum <name>MagnitudeScale</name> <block>{ <decl><name>LINEAR</name></decl>, <decl><name>LOG</name></decl>, <decl><name>NB_SCALES</name></decl> }</block>;</enum>
<enum>enum <name>SlideMode</name> <block>{ <decl><name>REPLACE</name></decl>, <decl><name>SCROLL</name></decl>, <decl><name>FULLFRAME</name></decl>, <decl><name>RSCROLL</name></decl>, <decl><name>NB_SLIDES</name></decl> }</block>;</enum>
<enum>enum <name>Orientation</name> <block>{ <decl><name>VERTICAL</name></decl>, <decl><name>HORIZONTAL</name></decl>, <decl><name>NB_ORIENTATIONS</name></decl> }</block>;</enum>

<typedef>typedef <type><struct>struct <name>SpectrumSynthContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sample_rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>channels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sliding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>win_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>overlap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>orientation</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>magnitude</name></decl>, <modifier>*</modifier><name>phase</name>;</decl_stmt>
<decl_stmt><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>fft</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>fft_bits</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>FFTComplex</name> <modifier>*</modifier><modifier>*</modifier></type><name>fft_data</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>win_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_freq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hop_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>, <name>end</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>factor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>window_func_lut</name></decl>;</decl_stmt> 
}</block></struct></type> <name>SpectrumSynthContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(SpectrumSynthContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_AUDIO_PARAM</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_VIDEO_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>spectrumsynth_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"sample_rate"</literal></expr>, <expr><literal type="string">"set sample rate"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sample_rate</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">44100</literal></expr>}</block></expr>, <expr><literal type="number">15</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>A</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"channels"</literal></expr>, <expr><literal type="string">"set channels"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><name>A</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"scale"</literal></expr>, <expr><literal type="string">"set input amplitude scale"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>LOG</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_SCALES</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>V</name></expr>, <expr><literal type="string">"scale"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"lin"</literal></expr>, <expr><literal type="string">"linear"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>LINEAR</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>V</name></expr>, <expr><literal type="string">"scale"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"log"</literal></expr>, <expr><literal type="string">"logarithmic"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>LOG</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>V</name></expr>, <expr><literal type="string">"scale"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"slide"</literal></expr>, <expr><literal type="string">"set input sliding mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sliding</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FULLFRAME</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_SLIDES</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>V</name></expr>, <expr><literal type="string">"slide"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"replace"</literal></expr>, <expr><literal type="string">"consume old columns with new"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>REPLACE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>V</name></expr>, <expr><literal type="string">"slide"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"scroll"</literal></expr>, <expr><literal type="string">"consume only most right column"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SCROLL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>V</name></expr>, <expr><literal type="string">"slide"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fullframe"</literal></expr>, <expr><literal type="string">"consume full frames"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>FULLFRAME</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>V</name></expr>, <expr><literal type="string">"slide"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rscroll"</literal></expr>, <expr><literal type="string">"consume only most left column"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>RSCROLL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>V</name></expr>, <expr><literal type="string">"slide"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"win_func"</literal></expr>, <expr><literal type="string">"set window function"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>win_func</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_WFUNC</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>A</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rect"</literal></expr>, <expr><literal type="string">"Rectangular"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_RECT</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bartlett"</literal></expr>, <expr><literal type="string">"Bartlett"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_BARTLETT</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"hann"</literal></expr>, <expr><literal type="string">"Hann"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_HANNING</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"hanning"</literal></expr>, <expr><literal type="string">"Hanning"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_HANNING</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"hamming"</literal></expr>, <expr><literal type="string">"Hamming"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_HAMMING</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sine"</literal></expr>, <expr><literal type="string">"Sine"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>WFUNC_SINE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A</name></expr>, <expr><literal type="string">"win_func"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"overlap"</literal></expr>, <expr><literal type="string">"set window overlap"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>overlap</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>A</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"orientation"</literal></expr>, <expr><literal type="string">"set orientation"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>orientation</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>VERTICAL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_ORIENTATIONS</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>V</name></expr>, <expr><literal type="string">"orientation"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"vertical"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>VERTICAL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>V</name></expr>, <expr><literal type="string">"orientation"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"horizontal"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>HORIZONTAL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>V</name></expr>, <expr><literal type="string">"orientation"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>spectrumsynth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SpectrumSynthContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>formats</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>layout</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>magnitude</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>phase</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVSampleFormat</name></name></type> <name><name>sample_fmts</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>AV_SAMPLE_FMT_FLTP</name></expr>, <expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>AV_PIX_FMT_GRAY8</name></expr>, <expr><name>AV_PIX_FMT_GRAY16</name></expr>,
<expr><name>AV_PIX_FMT_YUV444P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ444P</name></expr>,
<expr><name>AV_PIX_FMT_YUV444P16</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name><name>sample_rates</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">48000</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>sample_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name> <argument_list>(<argument><expr><name>formats</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>outlink</name><operator>-&gt;</operator><name>in_formats</name></name></expr></argument> )</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_add_channel_layout</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>layout</name></expr></argument>, <argument><expr><call><name>FF_COUNT2LAYOUT</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_channel_layouts_ref</name> <argument_list>(<argument><expr><name>layout</name></expr></argument> , <argument><expr><operator>&amp;</operator><name><name>outlink</name><operator>-&gt;</operator><name>in_channel_layouts</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sample_rates</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>sample_rates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>formats</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><name>formats</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>outlink</name><operator>-&gt;</operator><name>in_samplerates</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>formats</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><name>formats</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>magnitude</name><operator>-&gt;</operator><name>out_formats</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>formats</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><name>formats</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>phase</name><operator>-&gt;</operator><name>out_formats</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_output</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SpectrumSynthContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>w</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>h</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVRational</name></type> <name>time_base</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>time_base</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVRational</name></type> <name>frame_rate</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>frame_rate</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>fft_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>factor</name></decl>, <decl><type ref="prev"/><name>overlap</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{<expr><literal type="number">1</literal></expr>, <expr><name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>}</block></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>w</name> <operator>||</operator>
<name>height</name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>h</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Magnitude and Phase sizes differ (%dx%d vs %dx%d).\n"</literal></expr></argument>,
<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>w</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_cmp_q</name><argument_list>(<argument><expr><name>time_base</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>time_base</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Magnitude and Phase time bases differ (%d/%d vs %d/%d).\n"</literal></expr></argument>,
<argument><expr><name><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_cmp_q</name><argument_list>(<argument><expr><name>frame_rate</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>frame_rate</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Magnitude and Phase framerates differ (%d/%d vs %d/%d).\n"</literal></expr></argument>,
<argument><expr><name><name>frame_rate</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>frame_rate</name><operator>.</operator><name>den</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>frame_rate</name><operator>.</operator><name>num</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>frame_rate</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>orientation</name></name> <operator>==</operator> <name>VERTICAL</name></expr> ?</condition><then> <expr><name>height</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr> </then><else>: <expr><name>width</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>xend</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>orientation</name></name> <operator>==</operator> <name>VERTICAL</name></expr> ?</condition><then> <expr><name>width</name></expr> </then><else>: <expr><name>height</name></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>fft_bits</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>fft_bits</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>fft_bits</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>win_size</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>fft_bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_freq</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>fft_bits</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft</name></name> <operator>=</operator> <call><name>av_fft_init</name><argument_list>(<argument><expr><name>fft_bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>fft</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to create FFT context. "</literal>
<literal type="string">"The window size might be too high.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_data</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>fft_data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>fft_data</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>win_size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>fft_data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>ff_get_audio_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>win_size</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>window_func_lut</name></name> <operator>=</operator> <call><name>av_realloc_f</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>window_func_lut</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>win_size</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>window_func_lut</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>window_func_lut</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>generate_window_func</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>window_func_lut</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>win_size</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>win_func</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>overlap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>overlap</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>overlap</name></name> <operator>=</operator> <name>overlap</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hop_size</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>overlap</name></name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>win_size</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>factor</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>win_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>factor</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>window_func_lut</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>window_func_lut</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>factor</name></name> <operator>=</operator> <operator>(</operator><name>factor</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>win_size</name></name><operator>)</operator> <operator>/</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>overlap</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>request_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SpectrumSynthContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>magnitude</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_request_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>phase</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_request_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read16_fft_bin</name><parameter_list>(<parameter><decl><type><name>SpectrumSynthContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>m_linesize</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>magnitude</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>p_linesize</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>phase</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>magnitude</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>m_linesize</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>phase</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>p_linesize</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>magnitude</name></decl>, <decl><type ref="prev"/><name>phase</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>scale</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LINEAR</name></expr>:</case>
<expr_stmt><expr><name>magnitude</name> <operator>=</operator> <name><name>m</name><index>[<expr><name>x</name></expr>]</index></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>UINT16_MAX</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LOG</name></expr>:</case>
<expr_stmt><expr><name>magnitude</name> <operator>=</operator> <call><name>ff_exp10</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name><name>m</name><index>[<expr><name>x</name></expr>]</index></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>UINT16_MAX</name><operator>)</operator> <operator>-</operator> <literal type="number">1.</literal><operator>)</operator> <operator>*</operator> <literal type="number">6.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><name>phase</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><name>x</name></expr>]</index></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>UINT16_MAX</name><operator>)</operator> <operator>*</operator> <literal type="number">2.</literal> <operator>-</operator> <literal type="number">1.</literal><operator>)</operator> <operator>*</operator> <name>M_PI</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name>magnitude</name> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name>magnitude</name> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><name>phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read8_fft_bin</name><parameter_list>(<parameter><decl><type><name>SpectrumSynthContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>m_linesize</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>magnitude</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>p_linesize</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>phase</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>magnitude</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>m_linesize</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>phase</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>p_linesize</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>magnitude</name></decl>, <decl><type ref="prev"/><name>phase</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>scale</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LINEAR</name></expr>:</case>
<expr_stmt><expr><name>magnitude</name> <operator>=</operator> <name><name>m</name><index>[<expr><name>x</name></expr>]</index></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>UINT8_MAX</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LOG</name></expr>:</case>
<expr_stmt><expr><name>magnitude</name> <operator>=</operator> <call><name>ff_exp10</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name><name>m</name><index>[<expr><name>x</name></expr>]</index></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>UINT8_MAX</name><operator>)</operator> <operator>-</operator> <literal type="number">1.</literal><operator>)</operator> <operator>*</operator> <literal type="number">6.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><name>phase</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><name>x</name></expr>]</index></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>UINT8_MAX</name><operator>)</operator> <operator>*</operator> <literal type="number">2.</literal> <operator>-</operator> <literal type="number">1.</literal><operator>)</operator> <operator>*</operator> <name>M_PI</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name>magnitude</name> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name>magnitude</name> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><name>phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read_fft_data</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SpectrumSynthContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><name>h</name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>-</operator> <name>ch</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><name>h</name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>-</operator> <name>ch</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>f</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>orientation</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VERTICAL</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_YUV444P16</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GRAY16</name></expr>:</case>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>start</name></expr><operator>,</operator> <expr><name>f</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&gt;=</operator> <name>end</name></expr>;</condition> <incr><expr><name>y</name><operator>--</operator></expr><operator>,</operator> <expr><name>f</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>read16_fft_bin</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_YUVJ444P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GRAY8</name></expr>:</case>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>start</name></expr><operator>,</operator> <expr><name>f</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&gt;=</operator> <name>end</name></expr>;</condition> <incr><expr><name>y</name><operator>--</operator></expr><operator>,</operator> <expr><name>f</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>read8_fft_bin</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><name>HORIZONTAL</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_YUV444P16</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GRAY16</name></expr>:</case>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>end</name></expr><operator>,</operator> <expr><name>f</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;=</operator> <name>start</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr><operator>,</operator> <expr><name>f</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>read16_fft_bin</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_YUVJ444P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GRAY8</name></expr>:</case>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>end</name></expr><operator>,</operator> <expr><name>f</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;=</operator> <name>start</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr><operator>,</operator> <expr><name>f</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>read8_fft_bin</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>synth_window</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SpectrumSynthContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>win_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>f</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>read_fft_data</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>h</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_freq</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_freq</name></name> <operator>+</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>f</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_freq</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>nb</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr><operator>,</operator> <expr><name>f</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_fft_permute</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_fft_calc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>try_push_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SpectrumSynthContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>factor</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>factor</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>synth_window</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>k</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>win_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>win_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>start</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>hop_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>win_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>start</name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>win_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>win_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_audio_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>win_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>magnitude</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>phase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pts</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>win_size</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>win_size</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>win_size</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>win_size</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>try_push_frames</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SpectrumSynthContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>phase</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sliding</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>REPLACE</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>try_push_frame</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>xpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>xpos</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>xpos</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>xend</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>xpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>SCROLL</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>xpos</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>xend</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>try_push_frame</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>xpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>RSCROLL</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>xpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>try_push_frame</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>xpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FULLFRAME</name></expr>:</case>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>xend</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>try_push_frame</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>magnitude</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>phase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame_magnitude</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>magnitude</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SpectrumSynthContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>=</operator> <name>magnitude</name></expr>;</expr_stmt>
<return>return <expr><call><name>try_push_frames</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame_phase</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>phase</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SpectrumSynthContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>phase</name></name> <operator>=</operator> <name>phase</name></expr>;</expr_stmt>
<return>return <expr><call><name>try_push_frames</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SpectrumSynthContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>magnitude</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>phase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_fft_end</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fft_data</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fft_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fft_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>window_func_lut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>spectrumsynth_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"magnitude"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame_magnitude</name></expr>,
<expr><operator>.</operator><name>needs_fifo</name> <operator>=</operator> <literal type="number">1</literal></expr>,
}</block></expr>,
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"phase"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame_phase</name></expr>,
<expr><operator>.</operator><name>needs_fifo</name> <operator>=</operator> <literal type="number">1</literal></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>spectrumsynth_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_output</name></expr>,
<expr><operator>.</operator><name>request_frame</name> <operator>=</operator> <name>request_frame</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vaf_spectrumsynth</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"spectrumsynth"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Convert input spectrum videos to audio output."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SpectrumSynthContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>spectrumsynth_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>spectrumsynth_outputs</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>spectrumsynth_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
