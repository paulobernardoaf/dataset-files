<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\audio.h">




















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVFILTER_AUDIO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVFILTER_AUDIO_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVSampleFormat</name></name></type> <name><name>ff_packed_sample_fmts_array</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_SAMPLE_FMT_U8</name></expr>,
<expr><name>AV_SAMPLE_FMT_S16</name></expr>,
<expr><name>AV_SAMPLE_FMT_S32</name></expr>,
<expr><name>AV_SAMPLE_FMT_FLT</name></expr>,
<expr><name>AV_SAMPLE_FMT_DBL</name></expr>,
<expr><name>AV_SAMPLE_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVSampleFormat</name></name></type> <name><name>ff_planar_sample_fmts_array</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_SAMPLE_FMT_U8P</name></expr>,
<expr><name>AV_SAMPLE_FMT_S16P</name></expr>,
<expr><name>AV_SAMPLE_FMT_S32P</name></expr>,
<expr><name>AV_SAMPLE_FMT_FLTP</name></expr>,
<expr><name>AV_SAMPLE_FMT_DBLP</name></expr>,
<expr><name>AV_SAMPLE_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<function_decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>ff_default_get_audio_buffer</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>ff_null_get_audio_buffer</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>ff_get_audio_buffer</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
