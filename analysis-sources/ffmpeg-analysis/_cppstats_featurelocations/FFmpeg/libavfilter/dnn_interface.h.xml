<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\dnn_interface.h">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVFILTER_DNN_INTERFACE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVFILTER_DNN_INTERFACE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><enum>enum <block>{<decl><name>DNN_SUCCESS</name></decl>, <decl><name>DNN_ERROR</name></decl>}</block></enum></type> <name>DNNReturnType</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{<decl><name>DNN_NATIVE</name></decl>, <decl><name>DNN_TF</name></decl>}</block></enum></type> <name>DNNBackendType</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{<decl><name>DNN_FLOAT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><name>DNN_UINT8</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>}</block></enum></type> <name>DNNDataType</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DNNData</name><block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DNNDataType</name></type> <name>dt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <name>height</name>, <name>channels</name>;</decl_stmt>
}</block></struct></type> <name>DNNData</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DNNModel</name><block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>model</name></decl>;</decl_stmt>


<function_decl><type><name>DNNReturnType</name></type> (<modifier>*</modifier><name>get_input</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>model</name></decl></parameter>, <parameter><decl><type><name>DNNData</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input_name</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>DNNReturnType</name></type> (<modifier>*</modifier><name>set_input_output</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>model</name></decl></parameter>, <parameter><decl><type><name>DNNData</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>output_names</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>nb_output</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>DNNModel</name>;</typedef>


<typedef>typedef <type><struct>struct <name>DNNModule</name><block>{

<function_decl><type><name>DNNModel</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>load_model</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>model_filename</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>DNNReturnType</name></type> (<modifier>*</modifier><name>execute_model</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DNNModel</name> <modifier>*</modifier></type><name>model</name></decl></parameter>, <parameter><decl><type><name>DNNData</name> <modifier>*</modifier></type><name>outputs</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>nb_output</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_model</name>)<parameter_list>(<parameter><decl><type><name>DNNModel</name> <modifier>*</modifier><modifier>*</modifier></type><name>model</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>DNNModule</name>;</typedef>


<function_decl><type><name>DNNModule</name> <modifier>*</modifier></type><name>ff_get_dnn_module</name><parameter_list>(<parameter><decl><type><name>DNNBackendType</name></type> <name>backend_type</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
