<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vf_blackdetect.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/timestamp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>BlackDetectContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>black_min_duration_time</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int64_t</name></type> <name>black_min_duration</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int64_t</name></type> <name>black_start</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int64_t</name></type> <name>black_end</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int64_t</name></type> <name>last_picref_pts</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>black_started</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>picture_black_ratio_th</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>pixel_black_th</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pixel_black_th_i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nb_black_pixels</name></decl>;</decl_stmt> 
}</block></struct></type> <name>BlackDetectContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(BlackDetectContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM|AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>blackdetect_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"d"</literal></expr>, <expr><literal type="string">"set minimum detected black duration in seconds"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>black_min_duration_time</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">2</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DBL_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"black_min_duration"</literal></expr>, <expr><literal type="string">"set minimum detected black duration in seconds"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>black_min_duration_time</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">2</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DBL_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"picture_black_ratio_th"</literal></expr>, <expr><literal type="string">"set the picture black ratio threshold"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>picture_black_ratio_th</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">.98</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pic_th"</literal></expr>, <expr><literal type="string">"set the picture black ratio threshold"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>picture_black_ratio_th</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">.98</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pixel_black_th"</literal></expr>, <expr><literal type="string">"set the pixel black threshold"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>pixel_black_th</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">.10</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pix_th"</literal></expr>, <expr><literal type="string">"set the pixel black threshold"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>pixel_black_th</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">.10</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>blackdetect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUVJ_FORMATS</name></cpp:macro> <cpp:value>AV_PIX_FMT_YUVJ411P, AV_PIX_FMT_YUVJ420P, AV_PIX_FMT_YUVJ422P, AV_PIX_FMT_YUVJ444P, AV_PIX_FMT_YUVJ440P</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>yuvj_formats</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>YUVJ_FORMATS</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_GRAY8</name></expr>,
<expr><name>AV_PIX_FMT_YUV410P</name></expr>, <expr><name>AV_PIX_FMT_YUV411P</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_YUV422P</name></expr>,
<expr><name>AV_PIX_FMT_YUV440P</name></expr>, <expr><name>AV_PIX_FMT_YUV444P</name></expr>,
<expr><name>AV_PIX_FMT_NV12</name></expr>, <expr><name>AV_PIX_FMT_NV21</name></expr>,
<expr><name>YUVJ_FORMATS</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BlackDetectContext</name> <modifier>*</modifier></type><name>blackdetect</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>blackdetect</name><operator>-&gt;</operator><name>black_min_duration</name></name> <operator>=</operator>
<name><name>blackdetect</name><operator>-&gt;</operator><name>black_min_duration_time</name></name> <operator>/</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>blackdetect</name><operator>-&gt;</operator><name>pixel_black_th_i</name></name> <operator>=</operator> <ternary><condition><expr><call><name>ff_fmt_is_in</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>yuvj_formats</name></expr></argument>)</argument_list></call></expr> ?</condition><then>

<expr><name><name>blackdetect</name><operator>-&gt;</operator><name>pixel_black_th</name></name> <operator>*</operator> <literal type="number">255</literal></expr> </then><else>:
<expr><literal type="number">16</literal> <operator>+</operator> <name><name>blackdetect</name><operator>-&gt;</operator><name>pixel_black_th</name></name> <operator>*</operator> <operator>(</operator><literal type="number">235</literal> <operator>-</operator> <literal type="number">16</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>blackdetect</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,
<argument><expr><literal type="string">"black_min_duration:%s pixel_black_th:%f pixel_black_th_i:%d picture_black_ratio_th:%f\n"</literal></expr></argument>,
<argument><expr><call><name>av_ts2timestr</name><argument_list>(<argument><expr><name><name>blackdetect</name><operator>-&gt;</operator><name>black_min_duration</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>blackdetect</name><operator>-&gt;</operator><name>pixel_black_th</name></name></expr></argument>, <argument><expr><name><name>blackdetect</name><operator>-&gt;</operator><name>pixel_black_th_i</name></name></expr></argument>,
<argument><expr><name><name>blackdetect</name><operator>-&gt;</operator><name>picture_black_ratio_th</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_black_end</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BlackDetectContext</name> <modifier>*</modifier></type><name>blackdetect</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>blackdetect</name><operator>-&gt;</operator><name>black_end</name></name> <operator>-</operator> <name><name>blackdetect</name><operator>-&gt;</operator><name>black_start</name></name><operator>)</operator> <operator>&gt;=</operator> <name><name>blackdetect</name><operator>-&gt;</operator><name>black_min_duration</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>blackdetect</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>,
<argument><expr><literal type="string">"black_start:%s black_end:%s black_duration:%s\n"</literal></expr></argument>,
<argument><expr><call><name>av_ts2timestr</name><argument_list>(<argument><expr><name><name>blackdetect</name><operator>-&gt;</operator><name>black_start</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>av_ts2timestr</name><argument_list>(<argument><expr><name><name>blackdetect</name><operator>-&gt;</operator><name>black_end</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>av_ts2timestr</name><argument_list>(<argument><expr><name><name>blackdetect</name><operator>-&gt;</operator><name>black_end</name></name> <operator>-</operator> <name><name>blackdetect</name><operator>-&gt;</operator><name>black_start</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>request_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BlackDetectContext</name> <modifier>*</modifier></type><name>blackdetect</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ff_request_frame</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AVERROR_EOF</name> <operator>&amp;&amp;</operator> <name><name>blackdetect</name><operator>-&gt;</operator><name>black_started</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>blackdetect</name><operator>-&gt;</operator><name>black_end</name></name> <operator>=</operator> <name><name>blackdetect</name><operator>-&gt;</operator><name>last_picref_pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_black_end</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>picref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BlackDetectContext</name> <modifier>*</modifier></type><name>blackdetect</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>picture_black_ratio</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>picref</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>blackdetect</name><operator>-&gt;</operator><name>nb_black_pixels</name></name> <operator>+=</operator> <name><name>p</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>blackdetect</name><operator>-&gt;</operator><name>pixel_black_th_i</name></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>picref</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>picture_black_ratio</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>blackdetect</name><operator>-&gt;</operator><name>nb_black_pixels</name></name> <operator>/</operator> <operator>(</operator><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"frame:%"</literal><name>PRId64</name><literal type="string">" picture_black_ratio:%f pts:%s t:%s type:%c\n"</literal></expr></argument>,
<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>frame_count_out</name></name></expr></argument>, <argument><expr><name>picture_black_ratio</name></expr></argument>,
<argument><expr><call><name>av_ts2str</name><argument_list>(<argument><expr><name><name>picref</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>av_ts2timestr</name><argument_list>(<argument><expr><name><name>picref</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>av_get_picture_type_char</name><argument_list>(<argument><expr><name><name>picref</name><operator>-&gt;</operator><name>pict_type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>picture_black_ratio</name> <operator>&gt;=</operator> <name><name>blackdetect</name><operator>-&gt;</operator><name>picture_black_ratio_th</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>blackdetect</name><operator>-&gt;</operator><name>black_started</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>blackdetect</name><operator>-&gt;</operator><name>black_started</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>blackdetect</name><operator>-&gt;</operator><name>black_start</name></name> <operator>=</operator> <name><name>picref</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>picref</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"lavfi.black_start"</literal></expr></argument>,
<argument><expr><call><name>av_ts2timestr</name><argument_list>(<argument><expr><name><name>blackdetect</name><operator>-&gt;</operator><name>black_start</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>blackdetect</name><operator>-&gt;</operator><name>black_started</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>blackdetect</name><operator>-&gt;</operator><name>black_started</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>blackdetect</name><operator>-&gt;</operator><name>black_end</name></name> <operator>=</operator> <name><name>picref</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_black_end</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>picref</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"lavfi.black_end"</literal></expr></argument>,
<argument><expr><call><name>av_ts2timestr</name><argument_list>(<argument><expr><name><name>blackdetect</name><operator>-&gt;</operator><name>black_end</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>blackdetect</name><operator>-&gt;</operator><name>last_picref_pts</name></name> <operator>=</operator> <name><name>picref</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>blackdetect</name><operator>-&gt;</operator><name>nb_black_pixels</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>picref</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>blackdetect_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>blackdetect_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>request_frame</name> <operator>=</operator> <name>request_frame</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_blackdetect</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"blackdetect"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Detect video intervals that are (almost) black."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BlackDetectContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>blackdetect_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>blackdetect_outputs</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>blackdetect_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
