<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vf_ciescope.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/parseutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<enum>enum <name>CieSystem</name> <block>{
<decl><name>XYY</name></decl>,
<decl><name>UCS</name></decl>,
<decl><name>LUV</name></decl>,
<decl><name>NB_CIE</name></decl>
}</block>;</enum>

<enum>enum <name>ColorsSystems</name> <block>{
<decl><name>NTSCsystem</name></decl>,
<decl><name>EBUsystem</name></decl>,
<decl><name>SMPTEsystem</name></decl>,
<decl><name>SMPTE240Msystem</name></decl>,
<decl><name>APPLEsystem</name></decl>,
<decl><name>wRGBsystem</name></decl>,
<decl><name>CIE1931system</name></decl>,
<decl><name>Rec709system</name></decl>,
<decl><name>Rec2020system</name></decl>,
<decl><name>DCIP3</name></decl>,
<decl><name>NB_CS</name></decl>
}</block>;</enum>

<typedef>typedef <type><struct>struct <name>CiescopeContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>color_system</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>gamuts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>show_white</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>correct_gamma</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cie</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>intensity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>contrast</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>background</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>log2lin</name><index>[<expr><literal type="number">65536</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>igamma</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>i</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>filter</name>)<parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>cx</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>cy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>CiescopeContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(CiescopeContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_VIDEO_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>ciescope_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"system"</literal></expr>, <expr><literal type="string">"set color system"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>color_system</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>Rec709system</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_CS</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"system"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ntsc"</literal></expr>, <expr><literal type="string">"NTSC 1953 Y'I'O' (ITU-R BT.470 System M)"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>NTSCsystem</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"system"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"470m"</literal></expr>, <expr><literal type="string">"NTSC 1953 Y'I'O' (ITU-R BT.470 System M)"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>NTSCsystem</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"system"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ebu"</literal></expr>, <expr><literal type="string">"EBU Y'U'V' (PAL/SECAM) (ITU-R BT.470 System B, G)"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>EBUsystem</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"system"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"470bg"</literal></expr>, <expr><literal type="string">"EBU Y'U'V' (PAL/SECAM) (ITU-R BT.470 System B, G)"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>EBUsystem</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"system"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"smpte"</literal></expr>, <expr><literal type="string">"SMPTE-C RGB"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SMPTEsystem</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"system"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"240m"</literal></expr>, <expr><literal type="string">"SMPTE-240M Y'PbPr"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>SMPTE240Msystem</name></expr>}</block></expr>,<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"system"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"apple"</literal></expr>, <expr><literal type="string">"Apple RGB"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>APPLEsystem</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"system"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"widergb"</literal></expr>, <expr><literal type="string">"Adobe Wide Gamut RGB"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>wRGBsystem</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"system"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cie1931"</literal></expr>, <expr><literal type="string">"CIE 1931 RGB"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>CIE1931system</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"system"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"hdtv"</literal></expr>, <expr><literal type="string">"ITU.BT-709 Y'CbCr"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>Rec709system</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"system"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rec709"</literal></expr>, <expr><literal type="string">"ITU.BT-709 Y'CbCr"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>Rec709system</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"system"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"uhdtv"</literal></expr>, <expr><literal type="string">"ITU-R.BT-2020"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>Rec2020system</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"system"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rec2020"</literal></expr>, <expr><literal type="string">"ITU-R.BT-2020"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>Rec2020system</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"system"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dcip3"</literal></expr>, <expr><literal type="string">"DCI-P3"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>DCIP3</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"system"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cie"</literal></expr>, <expr><literal type="string">"set cie system"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>cie</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>XYY</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_CIE</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"cie"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"xyy"</literal></expr>, <expr><literal type="string">"CIE 1931 xyY"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>XYY</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"cie"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ucs"</literal></expr>, <expr><literal type="string">"CIE 1960 UCS"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>UCS</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"cie"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"luv"</literal></expr>, <expr><literal type="string">"CIE 1976 Luv"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>LUV</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"cie"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"gamuts"</literal></expr>, <expr><literal type="string">"set what gamuts to draw"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>gamuts</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLAGS</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0xFFF</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"gamuts"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ntsc"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>NTSCsystem</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"gamuts"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"470m"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>NTSCsystem</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"gamuts"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ebu"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>EBUsystem</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"gamuts"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"470bg"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>EBUsystem</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"gamuts"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"smpte"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>SMPTEsystem</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"gamuts"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"240m"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>SMPTE240Msystem</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"gamuts"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"apple"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>APPLEsystem</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"gamuts"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"widergb"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>wRGBsystem</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"gamuts"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cie1931"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>CIE1931system</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"gamuts"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"hdtv"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>Rec709system</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"gamuts"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rec709"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>Rec709system</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"gamuts"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"uhdtv"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>Rec2020system</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"gamuts"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rec2020"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>Rec2020system</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"gamuts"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dcip3"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>DCIP3</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"gamuts"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"size"</literal></expr>, <expr><literal type="string">"set ciescope size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">512</literal></expr>}</block></expr>, <expr><literal type="number">256</literal></expr>, <expr><literal type="number">8192</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"set ciescope size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">512</literal></expr>}</block></expr>, <expr><literal type="number">256</literal></expr>, <expr><literal type="number">8192</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"intensity"</literal></expr>, <expr><literal type="string">"set ciescope intensity"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>intensity</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.001</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"i"</literal></expr>, <expr><literal type="string">"set ciescope intensity"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>intensity</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.001</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"contrast"</literal></expr>, <expr><name>NULL</name></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>contrast</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">0.75</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"corrgamma"</literal></expr>, <expr><name>NULL</name></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>correct_gamma</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"showwhite"</literal></expr>, <expr><name>NULL</name></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>show_white</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"gamma"</literal></expr>, <expr><name>NULL</name></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>igamma</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">2.6</literal></expr>}</block></expr>, <expr><literal type="number">0.1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>ciescope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>in_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_RGB24</name></expr>,
<expr><name>AV_PIX_FMT_RGBA</name></expr>,
<expr><name>AV_PIX_FMT_RGB48</name></expr>,
<expr><name>AV_PIX_FMT_RGBA64</name></expr>,
<expr><name>AV_PIX_FMT_XYZ12</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>out_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_RGBA64</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>in_pix_fmts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>out_formats</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>out_pix_fmts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>in_formats</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_output</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CiescopeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<struct>struct <name>ColorSystem</name> <block>{
<decl_stmt><decl><type><name>double</name></type> <name>xRed</name></decl>, <decl><type ref="prev"/><name>yRed</name></decl>, 
<decl><type ref="prev"/><name>xGreen</name></decl>, <decl><type ref="prev"/><name>yGreen</name></decl>, 
<decl><type ref="prev"/><name>xBlue</name></decl>, <decl><type ref="prev"/><name>yBlue</name></decl>, 
<decl><type ref="prev"/><name>xWhite</name></decl>, <decl><type ref="prev"/><name>yWhite</name></decl>, 
<decl><type ref="prev"/><name>gamma</name></decl>;</decl_stmt> 
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>float</name> <specifier>const</specifier></type> <name><name>spectral_chromaticity</name><index>[]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0.175560</literal></expr>, <expr><literal type="number">0.005294</literal></expr>, <expr><literal type="number">0.819146</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.175483</literal></expr>, <expr><literal type="number">0.005286</literal></expr>, <expr><literal type="number">0.819231</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.175400</literal></expr>, <expr><literal type="number">0.005279</literal></expr>, <expr><literal type="number">0.819321</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.175317</literal></expr>, <expr><literal type="number">0.005271</literal></expr>, <expr><literal type="number">0.819412</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.175237</literal></expr>, <expr><literal type="number">0.005263</literal></expr>, <expr><literal type="number">0.819500</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.175161</literal></expr>, <expr><literal type="number">0.005256</literal></expr>, <expr><literal type="number">0.819582</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.175088</literal></expr>, <expr><literal type="number">0.005247</literal></expr>, <expr><literal type="number">0.819665</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.175015</literal></expr>, <expr><literal type="number">0.005236</literal></expr>, <expr><literal type="number">0.819749</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.174945</literal></expr>, <expr><literal type="number">0.005226</literal></expr>, <expr><literal type="number">0.819829</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.174880</literal></expr>, <expr><literal type="number">0.005221</literal></expr>, <expr><literal type="number">0.819899</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.174821</literal></expr>, <expr><literal type="number">0.005221</literal></expr>, <expr><literal type="number">0.819959</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.174770</literal></expr>, <expr><literal type="number">0.005229</literal></expr>, <expr><literal type="number">0.820001</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.174722</literal></expr>, <expr><literal type="number">0.005238</literal></expr>, <expr><literal type="number">0.820040</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.174665</literal></expr>, <expr><literal type="number">0.005236</literal></expr>, <expr><literal type="number">0.820098</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.174595</literal></expr>, <expr><literal type="number">0.005218</literal></expr>, <expr><literal type="number">0.820187</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.174510</literal></expr>, <expr><literal type="number">0.005182</literal></expr>, <expr><literal type="number">0.820309</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.174409</literal></expr>, <expr><literal type="number">0.005127</literal></expr>, <expr><literal type="number">0.820464</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.174308</literal></expr>, <expr><literal type="number">0.005068</literal></expr>, <expr><literal type="number">0.820624</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.174222</literal></expr>, <expr><literal type="number">0.005017</literal></expr>, <expr><literal type="number">0.820761</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.174156</literal></expr>, <expr><literal type="number">0.004981</literal></expr>, <expr><literal type="number">0.820863</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.174112</literal></expr>, <expr><literal type="number">0.004964</literal></expr>, <expr><literal type="number">0.820924</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.174088</literal></expr>, <expr><literal type="number">0.004964</literal></expr>, <expr><literal type="number">0.820948</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.174073</literal></expr>, <expr><literal type="number">0.004973</literal></expr>, <expr><literal type="number">0.820955</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.174057</literal></expr>, <expr><literal type="number">0.004982</literal></expr>, <expr><literal type="number">0.820961</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.174036</literal></expr>, <expr><literal type="number">0.004986</literal></expr>, <expr><literal type="number">0.820978</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.174008</literal></expr>, <expr><literal type="number">0.004981</literal></expr>, <expr><literal type="number">0.821012</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.173972</literal></expr>, <expr><literal type="number">0.004964</literal></expr>, <expr><literal type="number">0.821064</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.173932</literal></expr>, <expr><literal type="number">0.004943</literal></expr>, <expr><literal type="number">0.821125</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.173889</literal></expr>, <expr><literal type="number">0.004926</literal></expr>, <expr><literal type="number">0.821185</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.173845</literal></expr>, <expr><literal type="number">0.004916</literal></expr>, <expr><literal type="number">0.821239</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.173801</literal></expr>, <expr><literal type="number">0.004915</literal></expr>, <expr><literal type="number">0.821284</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.173754</literal></expr>, <expr><literal type="number">0.004925</literal></expr>, <expr><literal type="number">0.821321</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.173705</literal></expr>, <expr><literal type="number">0.004937</literal></expr>, <expr><literal type="number">0.821358</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.173655</literal></expr>, <expr><literal type="number">0.004944</literal></expr>, <expr><literal type="number">0.821401</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.173606</literal></expr>, <expr><literal type="number">0.004940</literal></expr>, <expr><literal type="number">0.821454</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.173560</literal></expr>, <expr><literal type="number">0.004923</literal></expr>, <expr><literal type="number">0.821517</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.173514</literal></expr>, <expr><literal type="number">0.004895</literal></expr>, <expr><literal type="number">0.821590</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.173468</literal></expr>, <expr><literal type="number">0.004865</literal></expr>, <expr><literal type="number">0.821667</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.173424</literal></expr>, <expr><literal type="number">0.004836</literal></expr>, <expr><literal type="number">0.821740</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.173380</literal></expr>, <expr><literal type="number">0.004813</literal></expr>, <expr><literal type="number">0.821807</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.173337</literal></expr>, <expr><literal type="number">0.004797</literal></expr>, <expr><literal type="number">0.821866</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.173291</literal></expr>, <expr><literal type="number">0.004786</literal></expr>, <expr><literal type="number">0.821923</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.173238</literal></expr>, <expr><literal type="number">0.004779</literal></expr>, <expr><literal type="number">0.821983</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.173174</literal></expr>, <expr><literal type="number">0.004775</literal></expr>, <expr><literal type="number">0.822051</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.173101</literal></expr>, <expr><literal type="number">0.004774</literal></expr>, <expr><literal type="number">0.822125</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.173021</literal></expr>, <expr><literal type="number">0.004775</literal></expr>, <expr><literal type="number">0.822204</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.172934</literal></expr>, <expr><literal type="number">0.004781</literal></expr>, <expr><literal type="number">0.822285</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.172843</literal></expr>, <expr><literal type="number">0.004791</literal></expr>, <expr><literal type="number">0.822366</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.172751</literal></expr>, <expr><literal type="number">0.004799</literal></expr>, <expr><literal type="number">0.822450</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.172662</literal></expr>, <expr><literal type="number">0.004802</literal></expr>, <expr><literal type="number">0.822536</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.172577</literal></expr>, <expr><literal type="number">0.004799</literal></expr>, <expr><literal type="number">0.822624</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.172489</literal></expr>, <expr><literal type="number">0.004795</literal></expr>, <expr><literal type="number">0.822715</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.172396</literal></expr>, <expr><literal type="number">0.004796</literal></expr>, <expr><literal type="number">0.822808</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.172296</literal></expr>, <expr><literal type="number">0.004803</literal></expr>, <expr><literal type="number">0.822901</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.172192</literal></expr>, <expr><literal type="number">0.004815</literal></expr>, <expr><literal type="number">0.822993</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.172087</literal></expr>, <expr><literal type="number">0.004833</literal></expr>, <expr><literal type="number">0.823081</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.171982</literal></expr>, <expr><literal type="number">0.004855</literal></expr>, <expr><literal type="number">0.823163</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.171871</literal></expr>, <expr><literal type="number">0.004889</literal></expr>, <expr><literal type="number">0.823240</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.171741</literal></expr>, <expr><literal type="number">0.004939</literal></expr>, <expr><literal type="number">0.823319</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.171587</literal></expr>, <expr><literal type="number">0.005010</literal></expr>, <expr><literal type="number">0.823402</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.171407</literal></expr>, <expr><literal type="number">0.005102</literal></expr>, <expr><literal type="number">0.823490</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.171206</literal></expr>, <expr><literal type="number">0.005211</literal></expr>, <expr><literal type="number">0.823583</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.170993</literal></expr>, <expr><literal type="number">0.005334</literal></expr>, <expr><literal type="number">0.823674</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.170771</literal></expr>, <expr><literal type="number">0.005470</literal></expr>, <expr><literal type="number">0.823759</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.170541</literal></expr>, <expr><literal type="number">0.005621</literal></expr>, <expr><literal type="number">0.823838</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.170301</literal></expr>, <expr><literal type="number">0.005789</literal></expr>, <expr><literal type="number">0.823911</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.170050</literal></expr>, <expr><literal type="number">0.005974</literal></expr>, <expr><literal type="number">0.823976</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.169786</literal></expr>, <expr><literal type="number">0.006177</literal></expr>, <expr><literal type="number">0.824037</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.169505</literal></expr>, <expr><literal type="number">0.006398</literal></expr>, <expr><literal type="number">0.824097</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.169203</literal></expr>, <expr><literal type="number">0.006639</literal></expr>, <expr><literal type="number">0.824158</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.168878</literal></expr>, <expr><literal type="number">0.006900</literal></expr>, <expr><literal type="number">0.824222</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.168525</literal></expr>, <expr><literal type="number">0.007184</literal></expr>, <expr><literal type="number">0.824291</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.168146</literal></expr>, <expr><literal type="number">0.007491</literal></expr>, <expr><literal type="number">0.824363</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.167746</literal></expr>, <expr><literal type="number">0.007821</literal></expr>, <expr><literal type="number">0.824433</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.167328</literal></expr>, <expr><literal type="number">0.008175</literal></expr>, <expr><literal type="number">0.824496</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.166895</literal></expr>, <expr><literal type="number">0.008556</literal></expr>, <expr><literal type="number">0.824549</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.166446</literal></expr>, <expr><literal type="number">0.008964</literal></expr>, <expr><literal type="number">0.824589</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.165977</literal></expr>, <expr><literal type="number">0.009402</literal></expr>, <expr><literal type="number">0.824622</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.165483</literal></expr>, <expr><literal type="number">0.009865</literal></expr>, <expr><literal type="number">0.824652</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.164963</literal></expr>, <expr><literal type="number">0.010351</literal></expr>, <expr><literal type="number">0.824687</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.164412</literal></expr>, <expr><literal type="number">0.010858</literal></expr>, <expr><literal type="number">0.824731</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.163828</literal></expr>, <expr><literal type="number">0.011385</literal></expr>, <expr><literal type="number">0.824787</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.163210</literal></expr>, <expr><literal type="number">0.011937</literal></expr>, <expr><literal type="number">0.824853</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.162552</literal></expr>, <expr><literal type="number">0.012520</literal></expr>, <expr><literal type="number">0.824928</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.161851</literal></expr>, <expr><literal type="number">0.013137</literal></expr>, <expr><literal type="number">0.825011</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.161105</literal></expr>, <expr><literal type="number">0.013793</literal></expr>, <expr><literal type="number">0.825102</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.160310</literal></expr>, <expr><literal type="number">0.014491</literal></expr>, <expr><literal type="number">0.825199</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.159466</literal></expr>, <expr><literal type="number">0.015232</literal></expr>, <expr><literal type="number">0.825302</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.158573</literal></expr>, <expr><literal type="number">0.016015</literal></expr>, <expr><literal type="number">0.825412</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.157631</literal></expr>, <expr><literal type="number">0.016840</literal></expr>, <expr><literal type="number">0.825529</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.156641</literal></expr>, <expr><literal type="number">0.017705</literal></expr>, <expr><literal type="number">0.825654</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.155605</literal></expr>, <expr><literal type="number">0.018609</literal></expr>, <expr><literal type="number">0.825786</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.154525</literal></expr>, <expr><literal type="number">0.019556</literal></expr>, <expr><literal type="number">0.825920</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.153397</literal></expr>, <expr><literal type="number">0.020554</literal></expr>, <expr><literal type="number">0.826049</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.152219</literal></expr>, <expr><literal type="number">0.021612</literal></expr>, <expr><literal type="number">0.826169</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.150985</literal></expr>, <expr><literal type="number">0.022740</literal></expr>, <expr><literal type="number">0.826274</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.149691</literal></expr>, <expr><literal type="number">0.023950</literal></expr>, <expr><literal type="number">0.826359</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.148337</literal></expr>, <expr><literal type="number">0.025247</literal></expr>, <expr><literal type="number">0.826416</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.146928</literal></expr>, <expr><literal type="number">0.026635</literal></expr>, <expr><literal type="number">0.826437</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.145468</literal></expr>, <expr><literal type="number">0.028118</literal></expr>, <expr><literal type="number">0.826413</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.143960</literal></expr>, <expr><literal type="number">0.029703</literal></expr>, <expr><literal type="number">0.826337</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.142405</literal></expr>, <expr><literal type="number">0.031394</literal></expr>, <expr><literal type="number">0.826201</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.140796</literal></expr>, <expr><literal type="number">0.033213</literal></expr>, <expr><literal type="number">0.825991</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.139121</literal></expr>, <expr><literal type="number">0.035201</literal></expr>, <expr><literal type="number">0.825679</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.137364</literal></expr>, <expr><literal type="number">0.037403</literal></expr>, <expr><literal type="number">0.825233</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.135503</literal></expr>, <expr><literal type="number">0.039879</literal></expr>, <expr><literal type="number">0.824618</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.133509</literal></expr>, <expr><literal type="number">0.042692</literal></expr>, <expr><literal type="number">0.823798</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.131371</literal></expr>, <expr><literal type="number">0.045876</literal></expr>, <expr><literal type="number">0.822753</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.129086</literal></expr>, <expr><literal type="number">0.049450</literal></expr>, <expr><literal type="number">0.821464</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.126662</literal></expr>, <expr><literal type="number">0.053426</literal></expr>, <expr><literal type="number">0.819912</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.124118</literal></expr>, <expr><literal type="number">0.057803</literal></expr>, <expr><literal type="number">0.818079</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.121469</literal></expr>, <expr><literal type="number">0.062588</literal></expr>, <expr><literal type="number">0.815944</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.118701</literal></expr>, <expr><literal type="number">0.067830</literal></expr>, <expr><literal type="number">0.813468</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.115807</literal></expr>, <expr><literal type="number">0.073581</literal></expr>, <expr><literal type="number">0.810612</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.112776</literal></expr>, <expr><literal type="number">0.079896</literal></expr>, <expr><literal type="number">0.807328</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.109594</literal></expr>, <expr><literal type="number">0.086843</literal></expr>, <expr><literal type="number">0.803563</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.106261</literal></expr>, <expr><literal type="number">0.094486</literal></expr>, <expr><literal type="number">0.799253</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.102776</literal></expr>, <expr><literal type="number">0.102864</literal></expr>, <expr><literal type="number">0.794360</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.099128</literal></expr>, <expr><literal type="number">0.112007</literal></expr>, <expr><literal type="number">0.788865</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.095304</literal></expr>, <expr><literal type="number">0.121945</literal></expr>, <expr><literal type="number">0.782751</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.091294</literal></expr>, <expr><literal type="number">0.132702</literal></expr>, <expr><literal type="number">0.776004</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.087082</literal></expr>, <expr><literal type="number">0.144317</literal></expr>, <expr><literal type="number">0.768601</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.082680</literal></expr>, <expr><literal type="number">0.156866</literal></expr>, <expr><literal type="number">0.760455</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.078116</literal></expr>, <expr><literal type="number">0.170420</literal></expr>, <expr><literal type="number">0.751464</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.073437</literal></expr>, <expr><literal type="number">0.185032</literal></expr>, <expr><literal type="number">0.741531</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.068706</literal></expr>, <expr><literal type="number">0.200723</literal></expr>, <expr><literal type="number">0.730571</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.063993</literal></expr>, <expr><literal type="number">0.217468</literal></expr>, <expr><literal type="number">0.718539</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.059316</literal></expr>, <expr><literal type="number">0.235254</literal></expr>, <expr><literal type="number">0.705430</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.054667</literal></expr>, <expr><literal type="number">0.254096</literal></expr>, <expr><literal type="number">0.691238</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.050031</literal></expr>, <expr><literal type="number">0.274002</literal></expr>, <expr><literal type="number">0.675967</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.045391</literal></expr>, <expr><literal type="number">0.294976</literal></expr>, <expr><literal type="number">0.659633</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.040757</literal></expr>, <expr><literal type="number">0.316981</literal></expr>, <expr><literal type="number">0.642262</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.036195</literal></expr>, <expr><literal type="number">0.339900</literal></expr>, <expr><literal type="number">0.623905</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.031756</literal></expr>, <expr><literal type="number">0.363598</literal></expr>, <expr><literal type="number">0.604646</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.027494</literal></expr>, <expr><literal type="number">0.387921</literal></expr>, <expr><literal type="number">0.584584</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.023460</literal></expr>, <expr><literal type="number">0.412703</literal></expr>, <expr><literal type="number">0.563837</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.019705</literal></expr>, <expr><literal type="number">0.437756</literal></expr>, <expr><literal type="number">0.542539</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.016268</literal></expr>, <expr><literal type="number">0.462955</literal></expr>, <expr><literal type="number">0.520777</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.013183</literal></expr>, <expr><literal type="number">0.488207</literal></expr>, <expr><literal type="number">0.498610</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.010476</literal></expr>, <expr><literal type="number">0.513404</literal></expr>, <expr><literal type="number">0.476120</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.008168</literal></expr>, <expr><literal type="number">0.538423</literal></expr>, <expr><literal type="number">0.453409</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.006285</literal></expr>, <expr><literal type="number">0.563068</literal></expr>, <expr><literal type="number">0.430647</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.004875</literal></expr>, <expr><literal type="number">0.587116</literal></expr>, <expr><literal type="number">0.408008</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.003982</literal></expr>, <expr><literal type="number">0.610447</literal></expr>, <expr><literal type="number">0.385570</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.003636</literal></expr>, <expr><literal type="number">0.633011</literal></expr>, <expr><literal type="number">0.363352</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.003859</literal></expr>, <expr><literal type="number">0.654823</literal></expr>, <expr><literal type="number">0.341318</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.004646</literal></expr>, <expr><literal type="number">0.675898</literal></expr>, <expr><literal type="number">0.319456</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.006011</literal></expr>, <expr><literal type="number">0.696120</literal></expr>, <expr><literal type="number">0.297869</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.007988</literal></expr>, <expr><literal type="number">0.715342</literal></expr>, <expr><literal type="number">0.276670</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.010603</literal></expr>, <expr><literal type="number">0.733413</literal></expr>, <expr><literal type="number">0.255984</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.013870</literal></expr>, <expr><literal type="number">0.750186</literal></expr>, <expr><literal type="number">0.235943</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.017766</literal></expr>, <expr><literal type="number">0.765612</literal></expr>, <expr><literal type="number">0.216622</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.022244</literal></expr>, <expr><literal type="number">0.779630</literal></expr>, <expr><literal type="number">0.198126</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.027273</literal></expr>, <expr><literal type="number">0.792104</literal></expr>, <expr><literal type="number">0.180623</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.032820</literal></expr>, <expr><literal type="number">0.802926</literal></expr>, <expr><literal type="number">0.164254</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.038852</literal></expr>, <expr><literal type="number">0.812016</literal></expr>, <expr><literal type="number">0.149132</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.045328</literal></expr>, <expr><literal type="number">0.819391</literal></expr>, <expr><literal type="number">0.135281</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.052177</literal></expr>, <expr><literal type="number">0.825164</literal></expr>, <expr><literal type="number">0.122660</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.059326</literal></expr>, <expr><literal type="number">0.829426</literal></expr>, <expr><literal type="number">0.111249</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.066716</literal></expr>, <expr><literal type="number">0.832274</literal></expr>, <expr><literal type="number">0.101010</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.074302</literal></expr>, <expr><literal type="number">0.833803</literal></expr>, <expr><literal type="number">0.091894</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.082053</literal></expr>, <expr><literal type="number">0.834090</literal></expr>, <expr><literal type="number">0.083856</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.089942</literal></expr>, <expr><literal type="number">0.833289</literal></expr>, <expr><literal type="number">0.076769</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.097940</literal></expr>, <expr><literal type="number">0.831593</literal></expr>, <expr><literal type="number">0.070468</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.106021</literal></expr>, <expr><literal type="number">0.829178</literal></expr>, <expr><literal type="number">0.064801</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.114161</literal></expr>, <expr><literal type="number">0.826207</literal></expr>, <expr><literal type="number">0.059632</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.122347</literal></expr>, <expr><literal type="number">0.822770</literal></expr>, <expr><literal type="number">0.054882</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.130546</literal></expr>, <expr><literal type="number">0.818928</literal></expr>, <expr><literal type="number">0.050526</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.138702</literal></expr>, <expr><literal type="number">0.814774</literal></expr>, <expr><literal type="number">0.046523</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.146773</literal></expr>, <expr><literal type="number">0.810395</literal></expr>, <expr><literal type="number">0.042832</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.154722</literal></expr>, <expr><literal type="number">0.805864</literal></expr>, <expr><literal type="number">0.039414</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.162535</literal></expr>, <expr><literal type="number">0.801238</literal></expr>, <expr><literal type="number">0.036226</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.170237</literal></expr>, <expr><literal type="number">0.796519</literal></expr>, <expr><literal type="number">0.033244</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.177850</literal></expr>, <expr><literal type="number">0.791687</literal></expr>, <expr><literal type="number">0.030464</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.185391</literal></expr>, <expr><literal type="number">0.786728</literal></expr>, <expr><literal type="number">0.027881</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.192876</literal></expr>, <expr><literal type="number">0.781629</literal></expr>, <expr><literal type="number">0.025495</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.200309</literal></expr>, <expr><literal type="number">0.776399</literal></expr>, <expr><literal type="number">0.023292</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.207690</literal></expr>, <expr><literal type="number">0.771055</literal></expr>, <expr><literal type="number">0.021255</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.215030</literal></expr>, <expr><literal type="number">0.765595</literal></expr>, <expr><literal type="number">0.019375</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.222337</literal></expr>, <expr><literal type="number">0.760020</literal></expr>, <expr><literal type="number">0.017643</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.229620</literal></expr>, <expr><literal type="number">0.754329</literal></expr>, <expr><literal type="number">0.016051</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.236885</literal></expr>, <expr><literal type="number">0.748524</literal></expr>, <expr><literal type="number">0.014591</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.244133</literal></expr>, <expr><literal type="number">0.742614</literal></expr>, <expr><literal type="number">0.013253</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.251363</literal></expr>, <expr><literal type="number">0.736606</literal></expr>, <expr><literal type="number">0.012031</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.258578</literal></expr>, <expr><literal type="number">0.730507</literal></expr>, <expr><literal type="number">0.010916</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.265775</literal></expr>, <expr><literal type="number">0.724324</literal></expr>, <expr><literal type="number">0.009901</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.272958</literal></expr>, <expr><literal type="number">0.718062</literal></expr>, <expr><literal type="number">0.008980</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.280129</literal></expr>, <expr><literal type="number">0.711725</literal></expr>, <expr><literal type="number">0.008146</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.287292</literal></expr>, <expr><literal type="number">0.705316</literal></expr>, <expr><literal type="number">0.007391</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.294450</literal></expr>, <expr><literal type="number">0.698842</literal></expr>, <expr><literal type="number">0.006708</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.301604</literal></expr>, <expr><literal type="number">0.692308</literal></expr>, <expr><literal type="number">0.006088</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.308760</literal></expr>, <expr><literal type="number">0.685712</literal></expr>, <expr><literal type="number">0.005528</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.315914</literal></expr>, <expr><literal type="number">0.679063</literal></expr>, <expr><literal type="number">0.005022</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.323066</literal></expr>, <expr><literal type="number">0.672367</literal></expr>, <expr><literal type="number">0.004566</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.330216</literal></expr>, <expr><literal type="number">0.665628</literal></expr>, <expr><literal type="number">0.004156</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.337363</literal></expr>, <expr><literal type="number">0.658848</literal></expr>, <expr><literal type="number">0.003788</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.344513</literal></expr>, <expr><literal type="number">0.652028</literal></expr>, <expr><literal type="number">0.003459</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.351664</literal></expr>, <expr><literal type="number">0.645172</literal></expr>, <expr><literal type="number">0.003163</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.358814</literal></expr>, <expr><literal type="number">0.638287</literal></expr>, <expr><literal type="number">0.002899</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.365959</literal></expr>, <expr><literal type="number">0.631379</literal></expr>, <expr><literal type="number">0.002662</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.373102</literal></expr>, <expr><literal type="number">0.624451</literal></expr>, <expr><literal type="number">0.002448</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.380244</literal></expr>, <expr><literal type="number">0.617502</literal></expr>, <expr><literal type="number">0.002254</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.387379</literal></expr>, <expr><literal type="number">0.610542</literal></expr>, <expr><literal type="number">0.002079</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.394507</literal></expr>, <expr><literal type="number">0.603571</literal></expr>, <expr><literal type="number">0.001922</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.401626</literal></expr>, <expr><literal type="number">0.596592</literal></expr>, <expr><literal type="number">0.001782</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.408736</literal></expr>, <expr><literal type="number">0.589607</literal></expr>, <expr><literal type="number">0.001657</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.415836</literal></expr>, <expr><literal type="number">0.582618</literal></expr>, <expr><literal type="number">0.001546</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.422921</literal></expr>, <expr><literal type="number">0.575631</literal></expr>, <expr><literal type="number">0.001448</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.429989</literal></expr>, <expr><literal type="number">0.568649</literal></expr>, <expr><literal type="number">0.001362</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.437036</literal></expr>, <expr><literal type="number">0.561676</literal></expr>, <expr><literal type="number">0.001288</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.444062</literal></expr>, <expr><literal type="number">0.554714</literal></expr>, <expr><literal type="number">0.001224</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.451065</literal></expr>, <expr><literal type="number">0.547766</literal></expr>, <expr><literal type="number">0.001169</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.458041</literal></expr>, <expr><literal type="number">0.540837</literal></expr>, <expr><literal type="number">0.001123</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.464986</literal></expr>, <expr><literal type="number">0.533930</literal></expr>, <expr><literal type="number">0.001084</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.471899</literal></expr>, <expr><literal type="number">0.527051</literal></expr>, <expr><literal type="number">0.001051</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.478775</literal></expr>, <expr><literal type="number">0.520202</literal></expr>, <expr><literal type="number">0.001023</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.485612</literal></expr>, <expr><literal type="number">0.513389</literal></expr>, <expr><literal type="number">0.001000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.492405</literal></expr>, <expr><literal type="number">0.506615</literal></expr>, <expr><literal type="number">0.000980</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.499151</literal></expr>, <expr><literal type="number">0.499887</literal></expr>, <expr><literal type="number">0.000962</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.505845</literal></expr>, <expr><literal type="number">0.493211</literal></expr>, <expr><literal type="number">0.000944</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.512486</literal></expr>, <expr><literal type="number">0.486591</literal></expr>, <expr><literal type="number">0.000923</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.519073</literal></expr>, <expr><literal type="number">0.480029</literal></expr>, <expr><literal type="number">0.000899</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.525600</literal></expr>, <expr><literal type="number">0.473527</literal></expr>, <expr><literal type="number">0.000872</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.532066</literal></expr>, <expr><literal type="number">0.467091</literal></expr>, <expr><literal type="number">0.000843</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.538463</literal></expr>, <expr><literal type="number">0.460725</literal></expr>, <expr><literal type="number">0.000812</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.544787</literal></expr>, <expr><literal type="number">0.454434</literal></expr>, <expr><literal type="number">0.000779</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.551031</literal></expr>, <expr><literal type="number">0.448225</literal></expr>, <expr><literal type="number">0.000744</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.557193</literal></expr>, <expr><literal type="number">0.442099</literal></expr>, <expr><literal type="number">0.000708</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.563269</literal></expr>, <expr><literal type="number">0.436058</literal></expr>, <expr><literal type="number">0.000673</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.569257</literal></expr>, <expr><literal type="number">0.430102</literal></expr>, <expr><literal type="number">0.000641</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.575151</literal></expr>, <expr><literal type="number">0.424232</literal></expr>, <expr><literal type="number">0.000616</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.580953</literal></expr>, <expr><literal type="number">0.418447</literal></expr>, <expr><literal type="number">0.000601</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.586650</literal></expr>, <expr><literal type="number">0.412758</literal></expr>, <expr><literal type="number">0.000591</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.592225</literal></expr>, <expr><literal type="number">0.407190</literal></expr>, <expr><literal type="number">0.000586</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.597658</literal></expr>, <expr><literal type="number">0.401762</literal></expr>, <expr><literal type="number">0.000580</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.602933</literal></expr>, <expr><literal type="number">0.396497</literal></expr>, <expr><literal type="number">0.000571</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.608035</literal></expr>, <expr><literal type="number">0.391409</literal></expr>, <expr><literal type="number">0.000556</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.612977</literal></expr>, <expr><literal type="number">0.386486</literal></expr>, <expr><literal type="number">0.000537</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.617779</literal></expr>, <expr><literal type="number">0.381706</literal></expr>, <expr><literal type="number">0.000516</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.622459</literal></expr>, <expr><literal type="number">0.377047</literal></expr>, <expr><literal type="number">0.000493</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.627037</literal></expr>, <expr><literal type="number">0.372491</literal></expr>, <expr><literal type="number">0.000472</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.631521</literal></expr>, <expr><literal type="number">0.368026</literal></expr>, <expr><literal type="number">0.000453</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.635900</literal></expr>, <expr><literal type="number">0.363665</literal></expr>, <expr><literal type="number">0.000435</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.640156</literal></expr>, <expr><literal type="number">0.359428</literal></expr>, <expr><literal type="number">0.000416</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.644273</literal></expr>, <expr><literal type="number">0.355331</literal></expr>, <expr><literal type="number">0.000396</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.648233</literal></expr>, <expr><literal type="number">0.351395</literal></expr>, <expr><literal type="number">0.000372</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.652028</literal></expr>, <expr><literal type="number">0.347628</literal></expr>, <expr><literal type="number">0.000344</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.655669</literal></expr>, <expr><literal type="number">0.344018</literal></expr>, <expr><literal type="number">0.000313</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.659166</literal></expr>, <expr><literal type="number">0.340553</literal></expr>, <expr><literal type="number">0.000281</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.662528</literal></expr>, <expr><literal type="number">0.337221</literal></expr>, <expr><literal type="number">0.000251</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.665764</literal></expr>, <expr><literal type="number">0.334011</literal></expr>, <expr><literal type="number">0.000226</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.668874</literal></expr>, <expr><literal type="number">0.330919</literal></expr>, <expr><literal type="number">0.000207</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.671859</literal></expr>, <expr><literal type="number">0.327947</literal></expr>, <expr><literal type="number">0.000194</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.674720</literal></expr>, <expr><literal type="number">0.325095</literal></expr>, <expr><literal type="number">0.000185</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.677459</literal></expr>, <expr><literal type="number">0.322362</literal></expr>, <expr><literal type="number">0.000179</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.680079</literal></expr>, <expr><literal type="number">0.319747</literal></expr>, <expr><literal type="number">0.000174</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.682582</literal></expr>, <expr><literal type="number">0.317249</literal></expr>, <expr><literal type="number">0.000170</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.684971</literal></expr>, <expr><literal type="number">0.314863</literal></expr>, <expr><literal type="number">0.000167</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.687250</literal></expr>, <expr><literal type="number">0.312586</literal></expr>, <expr><literal type="number">0.000164</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.689426</literal></expr>, <expr><literal type="number">0.310414</literal></expr>, <expr><literal type="number">0.000160</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.691504</literal></expr>, <expr><literal type="number">0.308342</literal></expr>, <expr><literal type="number">0.000154</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.693490</literal></expr>, <expr><literal type="number">0.306366</literal></expr>, <expr><literal type="number">0.000145</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.695389</literal></expr>, <expr><literal type="number">0.304479</literal></expr>, <expr><literal type="number">0.000133</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.697206</literal></expr>, <expr><literal type="number">0.302675</literal></expr>, <expr><literal type="number">0.000119</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.698944</literal></expr>, <expr><literal type="number">0.300950</literal></expr>, <expr><literal type="number">0.000106</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.700606</literal></expr>, <expr><literal type="number">0.299301</literal></expr>, <expr><literal type="number">0.000093</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.702193</literal></expr>, <expr><literal type="number">0.297725</literal></expr>, <expr><literal type="number">0.000083</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.703709</literal></expr>, <expr><literal type="number">0.296217</literal></expr>, <expr><literal type="number">0.000074</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.705163</literal></expr>, <expr><literal type="number">0.294770</literal></expr>, <expr><literal type="number">0.000067</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.706563</literal></expr>, <expr><literal type="number">0.293376</literal></expr>, <expr><literal type="number">0.000061</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.707918</literal></expr>, <expr><literal type="number">0.292027</literal></expr>, <expr><literal type="number">0.000055</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.709231</literal></expr>, <expr><literal type="number">0.290719</literal></expr>, <expr><literal type="number">0.000050</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.710500</literal></expr>, <expr><literal type="number">0.289453</literal></expr>, <expr><literal type="number">0.000047</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.711724</literal></expr>, <expr><literal type="number">0.288232</literal></expr>, <expr><literal type="number">0.000044</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.712901</literal></expr>, <expr><literal type="number">0.287057</literal></expr>, <expr><literal type="number">0.000041</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.714032</literal></expr>, <expr><literal type="number">0.285929</literal></expr>, <expr><literal type="number">0.000040</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.715117</literal></expr>, <expr><literal type="number">0.284845</literal></expr>, <expr><literal type="number">0.000038</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.716159</literal></expr>, <expr><literal type="number">0.283804</literal></expr>, <expr><literal type="number">0.000036</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.717159</literal></expr>, <expr><literal type="number">0.282806</literal></expr>, <expr><literal type="number">0.000035</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.718116</literal></expr>, <expr><literal type="number">0.281850</literal></expr>, <expr><literal type="number">0.000034</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.719033</literal></expr>, <expr><literal type="number">0.280935</literal></expr>, <expr><literal type="number">0.000032</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.719912</literal></expr>, <expr><literal type="number">0.280058</literal></expr>, <expr><literal type="number">0.000030</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.720753</literal></expr>, <expr><literal type="number">0.279219</literal></expr>, <expr><literal type="number">0.000028</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.721555</literal></expr>, <expr><literal type="number">0.278420</literal></expr>, <expr><literal type="number">0.000026</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.722315</literal></expr>, <expr><literal type="number">0.277662</literal></expr>, <expr><literal type="number">0.000023</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.723032</literal></expr>, <expr><literal type="number">0.276948</literal></expr>, <expr><literal type="number">0.000020</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.723702</literal></expr>, <expr><literal type="number">0.276282</literal></expr>, <expr><literal type="number">0.000016</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.724328</literal></expr>, <expr><literal type="number">0.275660</literal></expr>, <expr><literal type="number">0.000012</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.724914</literal></expr>, <expr><literal type="number">0.275078</literal></expr>, <expr><literal type="number">0.000007</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.725467</literal></expr>, <expr><literal type="number">0.274530</literal></expr>, <expr><literal type="number">0.000003</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.725992</literal></expr>, <expr><literal type="number">0.274008</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.726495</literal></expr>, <expr><literal type="number">0.273505</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.726975</literal></expr>, <expr><literal type="number">0.273025</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.727432</literal></expr>, <expr><literal type="number">0.272568</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.727864</literal></expr>, <expr><literal type="number">0.272136</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.728272</literal></expr>, <expr><literal type="number">0.271728</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.728656</literal></expr>, <expr><literal type="number">0.271344</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.729020</literal></expr>, <expr><literal type="number">0.270980</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.729361</literal></expr>, <expr><literal type="number">0.270639</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.729678</literal></expr>, <expr><literal type="number">0.270322</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.729969</literal></expr>, <expr><literal type="number">0.270031</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.730234</literal></expr>, <expr><literal type="number">0.269766</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.730474</literal></expr>, <expr><literal type="number">0.269526</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.730693</literal></expr>, <expr><literal type="number">0.269307</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.730896</literal></expr>, <expr><literal type="number">0.269104</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.731089</literal></expr>, <expr><literal type="number">0.268911</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.731280</literal></expr>, <expr><literal type="number">0.268720</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.731467</literal></expr>, <expr><literal type="number">0.268533</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.731650</literal></expr>, <expr><literal type="number">0.268350</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.731826</literal></expr>, <expr><literal type="number">0.268174</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.731993</literal></expr>, <expr><literal type="number">0.268007</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.732150</literal></expr>, <expr><literal type="number">0.267850</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.732300</literal></expr>, <expr><literal type="number">0.267700</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.732443</literal></expr>, <expr><literal type="number">0.267557</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.732581</literal></expr>, <expr><literal type="number">0.267419</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.732719</literal></expr>, <expr><literal type="number">0.267281</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.732859</literal></expr>, <expr><literal type="number">0.267141</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.733000</literal></expr>, <expr><literal type="number">0.267000</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.733142</literal></expr>, <expr><literal type="number">0.266858</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.733281</literal></expr>, <expr><literal type="number">0.266719</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.733417</literal></expr>, <expr><literal type="number">0.266583</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.733551</literal></expr>, <expr><literal type="number">0.266449</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.733683</literal></expr>, <expr><literal type="number">0.266317</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.733813</literal></expr>, <expr><literal type="number">0.266187</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.733936</literal></expr>, <expr><literal type="number">0.266064</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734047</literal></expr>, <expr><literal type="number">0.265953</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734143</literal></expr>, <expr><literal type="number">0.265857</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734221</literal></expr>, <expr><literal type="number">0.265779</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734286</literal></expr>, <expr><literal type="number">0.265714</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734341</literal></expr>, <expr><literal type="number">0.265659</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734390</literal></expr>, <expr><literal type="number">0.265610</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734438</literal></expr>, <expr><literal type="number">0.265562</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734482</literal></expr>, <expr><literal type="number">0.265518</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734523</literal></expr>, <expr><literal type="number">0.265477</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734560</literal></expr>, <expr><literal type="number">0.265440</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734592</literal></expr>, <expr><literal type="number">0.265408</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734621</literal></expr>, <expr><literal type="number">0.265379</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734649</literal></expr>, <expr><literal type="number">0.265351</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734673</literal></expr>, <expr><literal type="number">0.265327</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0.734690</literal></expr>, <expr><literal type="number">0.265310</literal></expr>, <expr><literal type="number">0.000000</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C</name></cpp:macro> <cpp:value>0.310063, 0.316158</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E</name></cpp:macro> <cpp:value>1.0/3.0, 1.0/3.0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D50</name></cpp:macro> <cpp:value>0.34570, 0.3585</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D65</name></cpp:macro> <cpp:value>0.312713, 0.329016</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GAMMA_REC709</name></cpp:macro> <cpp:value>0.</cpp:value></cpp:define> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ColorSystem</name></name></type> <name><name>color_systems</name><index>[]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>NTSCsystem</name></expr>]</index> <operator>=</operator> <block>{
<expr><literal type="number">0.67</literal></expr>, <expr><literal type="number">0.33</literal></expr>, <expr><literal type="number">0.21</literal></expr>, <expr><literal type="number">0.71</literal></expr>, <expr><literal type="number">0.14</literal></expr>, <expr><literal type="number">0.08</literal></expr>,
<expr><name>C</name></expr>, <expr><name>GAMMA_REC709</name></expr>
}</block></expr>,
<expr><index>[<expr><name>EBUsystem</name></expr>]</index> <operator>=</operator> <block>{
<expr><literal type="number">0.64</literal></expr>, <expr><literal type="number">0.33</literal></expr>, <expr><literal type="number">0.29</literal></expr>, <expr><literal type="number">0.60</literal></expr>, <expr><literal type="number">0.15</literal></expr>, <expr><literal type="number">0.06</literal></expr>,
<expr><name>D65</name></expr>, <expr><name>GAMMA_REC709</name></expr>
}</block></expr>,
<expr><index>[<expr><name>SMPTEsystem</name></expr>]</index> <operator>=</operator> <block>{
<expr><literal type="number">0.630</literal></expr>, <expr><literal type="number">0.340</literal></expr>, <expr><literal type="number">0.310</literal></expr>, <expr><literal type="number">0.595</literal></expr>, <expr><literal type="number">0.155</literal></expr>, <expr><literal type="number">0.070</literal></expr>,
<expr><name>D65</name></expr>, <expr><name>GAMMA_REC709</name></expr>
}</block></expr>,
<expr><index>[<expr><name>SMPTE240Msystem</name></expr>]</index> <operator>=</operator> <block>{
<expr><literal type="number">0.670</literal></expr>, <expr><literal type="number">0.330</literal></expr>, <expr><literal type="number">0.210</literal></expr>, <expr><literal type="number">0.710</literal></expr>, <expr><literal type="number">0.150</literal></expr>, <expr><literal type="number">0.060</literal></expr>,
<expr><name>D65</name></expr>, <expr><name>GAMMA_REC709</name></expr>
}</block></expr>,
<expr><index>[<expr><name>APPLEsystem</name></expr>]</index> <operator>=</operator> <block>{
<expr><literal type="number">0.625</literal></expr>, <expr><literal type="number">0.340</literal></expr>, <expr><literal type="number">0.280</literal></expr>, <expr><literal type="number">0.595</literal></expr>, <expr><literal type="number">0.115</literal></expr>, <expr><literal type="number">0.070</literal></expr>,
<expr><name>D65</name></expr>, <expr><name>GAMMA_REC709</name></expr>
}</block></expr>,
<expr><index>[<expr><name>wRGBsystem</name></expr>]</index> <operator>=</operator> <block>{
<expr><literal type="number">0.7347</literal></expr>, <expr><literal type="number">0.2653</literal></expr>, <expr><literal type="number">0.1152</literal></expr>, <expr><literal type="number">0.8264</literal></expr>, <expr><literal type="number">0.1566</literal></expr>, <expr><literal type="number">0.0177</literal></expr>,
<expr><name>D50</name></expr>, <expr><name>GAMMA_REC709</name></expr>
}</block></expr>,
<expr><index>[<expr><name>CIE1931system</name></expr>]</index> <operator>=</operator> <block>{
<expr><literal type="number">0.7347</literal></expr>, <expr><literal type="number">0.2653</literal></expr>, <expr><literal type="number">0.2738</literal></expr>, <expr><literal type="number">0.7174</literal></expr>, <expr><literal type="number">0.1666</literal></expr>, <expr><literal type="number">0.0089</literal></expr>,
<expr><name>E</name></expr>, <expr><name>GAMMA_REC709</name></expr>
}</block></expr>,
<expr><index>[<expr><name>Rec709system</name></expr>]</index> <operator>=</operator> <block>{
<expr><literal type="number">0.64</literal></expr>, <expr><literal type="number">0.33</literal></expr>, <expr><literal type="number">0.30</literal></expr>, <expr><literal type="number">0.60</literal></expr>, <expr><literal type="number">0.15</literal></expr>, <expr><literal type="number">0.06</literal></expr>,
<expr><name>D65</name></expr>, <expr><name>GAMMA_REC709</name></expr>
}</block></expr>,
<expr><index>[<expr><name>Rec2020system</name></expr>]</index> <operator>=</operator> <block>{
<expr><literal type="number">0.708</literal></expr>, <expr><literal type="number">0.292</literal></expr>, <expr><literal type="number">0.170</literal></expr>, <expr><literal type="number">0.797</literal></expr>, <expr><literal type="number">0.131</literal></expr>, <expr><literal type="number">0.046</literal></expr>,
<expr><name>D65</name></expr>, <expr><name>GAMMA_REC709</name></expr>
}</block></expr>,
<expr><index>[<expr><name>DCIP3</name></expr>]</index> <operator>=</operator> <block>{
<expr><literal type="number">0.680</literal></expr>, <expr><literal type="number">0.320</literal></expr>, <expr><literal type="number">0.265</literal></expr>, <expr><literal type="number">0.690</literal></expr>, <expr><literal type="number">0.150</literal></expr>, <expr><literal type="number">0.060</literal></expr>,
<expr><literal type="number">0.314</literal></expr>, <expr><literal type="number">0.351</literal></expr>, <expr><name>GAMMA_REC709</name></expr>
}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>









<function><type><specifier>static</specifier> <name>void</name></type>
<name>uv_to_xy</name><parameter_list>(<parameter><decl><type><name>double</name> <specifier>const</specifier></type> <name>u</name></decl></parameter>,
<parameter><decl><type><name>double</name> <specifier>const</specifier></type> <name>v</name></decl></parameter>,
<parameter><decl><type><name>double</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>xc</name></decl></parameter>,
<parameter><decl><type><name>double</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>yc</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<expr_stmt><expr><operator>*</operator><name>xc</name> <operator>=</operator> <literal type="number">3</literal><operator>*</operator><name>u</name> <operator>/</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name>u</name> <operator>-</operator> <literal type="number">8</literal><operator>*</operator><name>v</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>yc</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>v</name> <operator>/</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name>u</name> <operator>-</operator> <literal type="number">8</literal><operator>*</operator><name>v</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>upvp_to_xy</name><parameter_list>(<parameter><decl><type><name>double</name> <specifier>const</specifier></type> <name>up</name></decl></parameter>,
<parameter><decl><type><name>double</name> <specifier>const</specifier></type> <name>vp</name></decl></parameter>,
<parameter><decl><type><name>double</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>xc</name></decl></parameter>,
<parameter><decl><type><name>double</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>yc</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<expr_stmt><expr><operator>*</operator><name>xc</name> <operator>=</operator> <literal type="number">9</literal><operator>*</operator><name>up</name> <operator>/</operator> <operator>(</operator><literal type="number">6</literal><operator>*</operator><name>up</name> <operator>-</operator> <literal type="number">16</literal><operator>*</operator><name>vp</name> <operator>+</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>yc</name> <operator>=</operator> <literal type="number">4</literal><operator>*</operator><name>vp</name> <operator>/</operator> <operator>(</operator><literal type="number">6</literal><operator>*</operator><name>up</name> <operator>-</operator> <literal type="number">16</literal><operator>*</operator><name>vp</name> <operator>+</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xy_to_upvp</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>xc</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>yc</name></decl></parameter>,
<parameter><decl><type><name>double</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>up</name></decl></parameter>,
<parameter><decl><type><name>double</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>vp</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<expr_stmt><expr><operator>*</operator><name>up</name> <operator>=</operator> <literal type="number">4</literal><operator>*</operator><name>xc</name> <operator>/</operator> <operator>(</operator><operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>xc</name> <operator>+</operator> <literal type="number">12</literal><operator>*</operator><name>yc</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>vp</name> <operator>=</operator> <literal type="number">9</literal><operator>*</operator><name>yc</name> <operator>/</operator> <operator>(</operator><operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>xc</name> <operator>+</operator> <literal type="number">12</literal><operator>*</operator><name>yc</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xy_to_uv</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>xc</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>yc</name></decl></parameter>,
<parameter><decl><type><name>double</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>u</name></decl></parameter>,
<parameter><decl><type><name>double</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<expr_stmt><expr><operator>*</operator><name>u</name> <operator>=</operator> <literal type="number">4</literal><operator>*</operator><name>xc</name> <operator>/</operator> <operator>(</operator><operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>xc</name> <operator>+</operator> <literal type="number">12</literal><operator>*</operator><name>yc</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <literal type="number">6</literal><operator>*</operator><name>yc</name> <operator>/</operator> <operator>(</operator><operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>xc</name> <operator>+</operator> <literal type="number">12</literal><operator>*</operator><name>yc</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xyz_to_rgb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>double</name></type> <name><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>xc</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>yc</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>zc</name></decl></parameter>,
<parameter><decl><type><name>double</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name>xc</name> <operator>+</operator> <name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>yc</name> <operator>+</operator> <name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>*</operator><name>zc</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>g</name> <operator>=</operator> <name><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name>xc</name> <operator>+</operator> <name><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>yc</name> <operator>+</operator> <name><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>*</operator><name>zc</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <name><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name>xc</name> <operator>+</operator> <name><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>yc</name> <operator>+</operator> <name><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>*</operator><name>zc</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>invert_matrix3x3</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>m00</name> <init>= <expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>m01</name> <init>= <expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>m02</name> <init>= <expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>,
<decl><type ref="prev"/><name>m10</name> <init>= <expr><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>m11</name> <init>= <expr><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>m12</name> <init>= <expr><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>,
<decl><type ref="prev"/><name>m20</name> <init>= <expr><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>m21</name> <init>= <expr><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>m22</name> <init>= <expr><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>det</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>m11</name> <operator>*</operator> <name>m22</name> <operator>-</operator> <name>m21</name> <operator>*</operator> <name>m12</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>m01</name> <operator>*</operator> <name>m22</name> <operator>-</operator> <name>m21</name> <operator>*</operator> <name>m02</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>m01</name> <operator>*</operator> <name>m12</name> <operator>-</operator> <name>m11</name> <operator>*</operator> <name>m02</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>m10</name> <operator>*</operator> <name>m22</name> <operator>-</operator> <name>m20</name> <operator>*</operator> <name>m12</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>m00</name> <operator>*</operator> <name>m22</name> <operator>-</operator> <name>m20</name> <operator>*</operator> <name>m02</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>m00</name> <operator>*</operator> <name>m12</name> <operator>-</operator> <name>m10</name> <operator>*</operator> <name>m02</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>m10</name> <operator>*</operator> <name>m21</name> <operator>-</operator> <name>m20</name> <operator>*</operator> <name>m11</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>m00</name> <operator>*</operator> <name>m21</name> <operator>-</operator> <name>m20</name> <operator>*</operator> <name>m01</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>m00</name> <operator>*</operator> <name>m11</name> <operator>-</operator> <name>m10</name> <operator>*</operator> <name>m01</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>det</name> <operator>=</operator> <name>m00</name> <operator>*</operator> <name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>m10</name> <operator>*</operator> <name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>m20</name> <operator>*</operator> <name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>det</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>/</operator> <name>det</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>*=</operator> <name>det</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_rgb2xyz_matrix</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ColorSystem</name></name></type> <name>system</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name><name>S</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>X</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>Z</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>X</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>system</name><operator>.</operator><name>xRed</name></name> <operator>/</operator> <name><name>system</name><operator>.</operator><name>yRed</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>X</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>system</name><operator>.</operator><name>xGreen</name></name> <operator>/</operator> <name><name>system</name><operator>.</operator><name>yGreen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>X</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>system</name><operator>.</operator><name>xBlue</name></name> <operator>/</operator> <name><name>system</name><operator>.</operator><name>yBlue</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>X</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>system</name><operator>.</operator><name>xWhite</name></name> <operator>/</operator> <name><name>system</name><operator>.</operator><name>yWhite</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name><name>system</name><operator>.</operator><name>xRed</name></name> <operator>-</operator> <name><name>system</name><operator>.</operator><name>yRed</name></name><operator>)</operator> <operator>/</operator> <name><name>system</name><operator>.</operator><name>yRed</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name><name>system</name><operator>.</operator><name>xGreen</name></name> <operator>-</operator> <name><name>system</name><operator>.</operator><name>yGreen</name></name><operator>)</operator> <operator>/</operator> <name><name>system</name><operator>.</operator><name>yGreen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Z</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name><name>system</name><operator>.</operator><name>xBlue</name></name> <operator>-</operator> <name><name>system</name><operator>.</operator><name>yBlue</name></name><operator>)</operator> <operator>/</operator> <name><name>system</name><operator>.</operator><name>yBlue</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Z</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name><name>system</name><operator>.</operator><name>xWhite</name></name> <operator>-</operator> <name><name>system</name><operator>.</operator><name>yWhite</name></name><operator>)</operator> <operator>/</operator> <name><name>system</name><operator>.</operator><name>yWhite</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>X</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>Z</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>invert_matrix3x3</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>m</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>X</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>m</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>m</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>Z</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>S</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>X</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>S</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>S</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>Z</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>rgb_to_xy</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>rc</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>gc</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>bc</name></decl></parameter>,
<parameter><decl><type><name>double</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>x</name></decl></parameter>,
<parameter><decl><type><name>double</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>y</name></decl></parameter>,
<parameter><decl><type><name>double</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>z</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>double</name></type> <name><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>sum</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>rc</name> <operator>+</operator> <name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>gc</name> <operator>+</operator> <name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>bc</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>rc</name> <operator>+</operator> <name><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>gc</name> <operator>+</operator> <name><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>bc</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>z</name> <operator>=</operator> <name><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>rc</name> <operator>+</operator> <name><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>gc</name> <operator>+</operator> <name><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>bc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>*</operator><name>x</name> <operator>+</operator> <operator>*</operator><name>y</name> <operator>+</operator> <operator>*</operator><name>z</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <operator>*</operator><name>x</name> <operator>/</operator> <name>sum</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <operator>*</operator><name>y</name> <operator>/</operator> <name>sum</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>constrain_rgb</name><parameter_list>(<parameter><decl><type><name>double</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>r</name></decl></parameter>,
<parameter><decl><type><name>double</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>g</name></decl></parameter>,
<parameter><decl><type><name>double</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>






<decl_stmt><decl><type><name>double</name></type> <name>w</name></decl>;</decl_stmt>


<expr_stmt><expr><name>w</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>&lt;</operator> <operator>*</operator><name>r</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>*</operator><name>r</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>w</name> <operator>&lt;</operator> <operator>*</operator><name>g</name><operator>)</operator></expr> ?</condition><then> <expr><name>w</name></expr> </then><else>: <expr><operator>*</operator><name>g</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>w</name> <operator>&lt;</operator> <operator>*</operator><name>b</name><operator>)</operator></expr> ?</condition><then> <expr><name>w</name></expr> </then><else>: <expr><operator>*</operator><name>b</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>-</operator> <name>w</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>r</name> <operator>+=</operator> <name>w</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>g</name> <operator>+=</operator> <name>w</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>b</name> <operator>+=</operator> <name>w</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>gamma_correct</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ColorSystem</name></name> <modifier>*</modifier> <specifier>const</specifier></type> <name>cs</name></decl></parameter>,
<parameter><decl><type><name>double</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>











<decl_stmt><decl><type><name>double</name></type> <name>gamma</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>cc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>gamma</name> <operator>=</operator> <name><name>cs</name><operator>-&gt;</operator><name>gamma</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gamma</name> <operator>==</operator> <literal type="number">0.</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cc</name> <operator>=</operator> <literal type="number">0.018</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>c</name> <operator>&lt;</operator> <name>cc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>c</name> <operator>*=</operator> <operator>(</operator><literal type="number">1.099</literal> <operator>*</operator> <call><name>pow</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><literal type="number">0.45</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">0.099</literal><operator>)</operator> <operator>/</operator> <name>cc</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <literal type="number">1.099</literal> <operator>*</operator> <call><name>pow</name><argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">0.45</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">0.099</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">1.</literal><operator>/</operator><name>gamma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>gamma_correct_rgb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ColorSystem</name></name> <modifier>*</modifier> <specifier>const</specifier></type> <name>cs</name></decl></parameter>,
<parameter><decl><type><name>double</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>r</name></decl></parameter>,
<parameter><decl><type><name>double</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>g</name></decl></parameter>,
<parameter><decl><type><name>double</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>gamma_correct</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gamma_correct</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gamma_correct</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) * (int)FFMIN(w, h)) / 512)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>monochrome_color_location</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>waveLength</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cie</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>xP</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>yP</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ix</name> <init>= <expr><name>waveLength</name> <operator>-</operator> <literal type="number">360</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>pX</name> <init>= <expr><name><name>spectral_chromaticity</name><index>[<expr><name>ix</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>pY</name> <init>= <expr><name><name>spectral_chromaticity</name><index>[<expr><name>ix</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>pZ</name> <init>= <expr><name><name>spectral_chromaticity</name><index>[<expr><name>ix</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>px</name> <init>= <expr><name>pX</name> <operator>/</operator> <operator>(</operator><name>pX</name> <operator>+</operator> <name>pY</name> <operator>+</operator> <name>pZ</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>py</name> <init>= <expr><name>pY</name> <operator>/</operator> <operator>(</operator><name>pX</name> <operator>+</operator> <name>pY</name> <operator>+</operator> <name>pZ</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cie</name> <operator>==</operator> <name>LUV</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>up</name></decl>, <decl><type ref="prev"/><name>vp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xy_to_upvp</name><argument_list>(<argument><expr><name>px</name></expr></argument>, <argument><expr><name>py</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>up</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>xP</name> <operator>=</operator> <name>up</name> <operator>*</operator> <operator>(</operator><name>w</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>yP</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>vp</name> <operator>*</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cie</name> <operator>==</operator> <name>UCS</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xy_to_uv</name><argument_list>(<argument><expr><name>px</name></expr></argument>, <argument><expr><name>py</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>xP</name> <operator>=</operator> <name>u</name> <operator>*</operator> <operator>(</operator><name>w</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>yP</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>v</name> <operator>*</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cie</name> <operator>==</operator> <name>XYY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>xP</name> <operator>=</operator> <name>px</name> <operator>*</operator> <operator>(</operator><name>w</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>yP</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>py</name> <operator>*</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>find_tongue</name><parameter_list>(<parameter><decl><type><name>uint16_t</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pixels</name></decl></parameter>,
<parameter><decl><type><name>int</name> <specifier>const</specifier></type> <name>w</name></decl></parameter>,
<parameter><decl><type><name>int</name> <specifier>const</specifier></type> <name>linesize</name></decl></parameter>,
<parameter><decl><type><name>int</name> <specifier>const</specifier></type> <name>row</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>presentP</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>leftEdgeP</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>rightEdgeP</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>w</name> <operator>&amp;&amp;</operator> <name><name>pixels</name><index>[<expr><name>row</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>w</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>presentP</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <specifier>const</specifier></type> <name>leftEdge</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>presentP</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>w</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <name>leftEdge</name> <operator>&amp;&amp;</operator> <name><name>pixels</name><index>[<expr><name>row</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>j</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><operator>*</operator><name>rightEdgeP</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>leftEdgeP</name> <operator>=</operator> <name>leftEdge</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_line</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>pixels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linesize</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y1</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>rgbcolor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dx</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>x1</name> <operator>-</operator> <name>x0</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>sx</name> <init>= <expr><ternary><condition><expr><name>x0</name> <operator>&lt;</operator> <name>x1</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dy</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>y1</name> <operator>-</operator> <name>y0</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>sy</name> <init>= <expr><ternary><condition><expr><name>y0</name> <operator>&lt;</operator> <name>y1</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>dx</name> <operator>&gt;</operator> <name>dy</name></expr> ?</condition><then> <expr><name>dx</name></expr> </then><else>: <expr><operator>-</operator><name>dy</name></expr></else></ternary><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>e2</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>y0</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>x0</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>rgbcolor</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>y0</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>x0</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>rgbcolor</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>y0</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>x0</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>rgbcolor</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>y0</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>x0</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>rgbcolor</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x0</name> <operator>==</operator> <name>x1</name> <operator>&amp;&amp;</operator> <name>y0</name> <operator>==</operator> <name>y1</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>e2</name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e2</name> <operator>&gt;</operator><operator>-</operator><name>dx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>-=</operator> <name>dy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x0</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>e2</name> <operator>&lt;</operator> <name>dy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y0</name> <operator>+=</operator> <name>sy</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_rline</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>pixels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linesize</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y1</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dx</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>x1</name> <operator>-</operator> <name>x0</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>sx</name> <init>= <expr><ternary><condition><expr><name>x0</name> <operator>&lt;</operator> <name>x1</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dy</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>y1</name> <operator>-</operator> <name>y0</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>sy</name> <init>= <expr><ternary><condition><expr><name>y0</name> <operator>&lt;</operator> <name>y1</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>dx</name> <operator>&gt;</operator> <name>dy</name></expr> ?</condition><then> <expr><name>dx</name></expr> </then><else>: <expr><operator>-</operator><name>dy</name></expr></else></ternary><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>e2</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>y0</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>x0</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">65535</literal> <operator>-</operator> <name><name>pixels</name><index>[<expr><name>y0</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>x0</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>y0</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>x0</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">65535</literal> <operator>-</operator> <name><name>pixels</name><index>[<expr><name>y0</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>x0</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>y0</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>x0</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">65535</literal> <operator>-</operator> <name><name>pixels</name><index>[<expr><name>y0</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>x0</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>y0</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>x0</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">65535</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x0</name> <operator>==</operator> <name>x1</name> <operator>&amp;&amp;</operator> <name>y0</name> <operator>==</operator> <name>y1</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>e2</name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e2</name> <operator>&gt;</operator><operator>-</operator><name>dx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>-=</operator> <name>dy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x0</name> <operator>+=</operator> <name>sx</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>e2</name> <operator>&lt;</operator> <name>dy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y0</name> <operator>+=</operator> <name>sy</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>tongue_outline</name><parameter_list>(<parameter><decl><type><name>uint16_t</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pixels</name></decl></parameter>,
<parameter><decl><type><name>int</name> <specifier>const</specifier></type> <name>linesize</name></decl></parameter>,
<parameter><decl><type><name>int</name> <specifier>const</specifier></type> <name>w</name></decl></parameter>,
<parameter><decl><type><name>int</name> <specifier>const</specifier></type> <name>h</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name> <specifier>const</specifier></type> <name>maxval</name></decl></parameter>,
<parameter><decl><type><name>int</name> <specifier>const</specifier></type> <name>cie</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name><name>rgbcolor</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>maxval</name></expr>, <expr><name>maxval</name></expr>, <expr><name>maxval</name></expr>, <expr><name>maxval</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wavelength</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lx</name></decl>, <decl><type ref="prev"/><name>ly</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fx</name></decl>, <decl><type ref="prev"/><name>fy</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>wavelength</name> <operator>=</operator> <literal type="number">360</literal></expr>;</init> <condition><expr><name>wavelength</name> <operator>&lt;=</operator> <literal type="number">830</literal></expr>;</condition> <incr><expr><name>wavelength</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>icx</name></decl>, <decl><type ref="prev"/><name>icy</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>monochrome_color_location</name><argument_list>(<argument><expr><name>wavelength</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>cie</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>icx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>icy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wavelength</name> <operator>&gt;</operator> <literal type="number">360</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>draw_line</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>lx</name></expr></argument>, <argument><expr><name>ly</name></expr></argument>, <argument><expr><name>icx</name></expr></argument>, <argument><expr><name>icy</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>rgbcolor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>fx</name> <operator>=</operator> <name>icx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fy</name> <operator>=</operator> <name>icy</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>lx</name> <operator>=</operator> <name>icx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ly</name> <operator>=</operator> <name>icy</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>draw_line</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>lx</name></expr></argument>, <argument><expr><name>ly</name></expr></argument>, <argument><expr><name>fx</name></expr></argument>, <argument><expr><name>fy</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>rgbcolor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>fill_in_tongue</name><parameter_list>(<parameter><decl><type><name>uint16_t</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pixels</name></decl></parameter>,
<parameter><decl><type><name>int</name> <specifier>const</specifier></type> <name>linesize</name></decl></parameter>,
<parameter><decl><type><name>int</name> <specifier>const</specifier></type> <name>w</name></decl></parameter>,
<parameter><decl><type><name>int</name> <specifier>const</specifier></type> <name>h</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name> <specifier>const</specifier></type> <name>maxval</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ColorSystem</name></name> <modifier>*</modifier> <specifier>const</specifier></type> <name>cs</name></decl></parameter>,
<parameter><decl><type><name>double</name> <specifier>const</specifier></type> <name><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name> <specifier>const</specifier></type> <name>cie</name></decl></parameter>,
<parameter><decl><type><name>int</name> <specifier>const</specifier></type> <name>correct_gamma</name></decl></parameter>,
<parameter><decl><type><name>float</name> <specifier>const</specifier></type> <name>contrast</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>






<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><operator>++</operator><name>y</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>present</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>leftEdge</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>rightEdge</name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>find_tongue</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>present</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>leftEdge</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rightEdge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>present</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>leftEdge</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;=</operator> <name>rightEdge</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>cx</name></decl>, <decl><type ref="prev"/><name>cy</name></decl>, <decl><type ref="prev"/><name>cz</name></decl>, <decl><type ref="prev"/><name>jr</name></decl>, <decl><type ref="prev"/><name>jg</name></decl>, <decl><type ref="prev"/><name>jb</name></decl>, <decl><type ref="prev"/><name>jmax</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>mx</name> <init>= <expr><name>maxval</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cie</name> <operator>==</operator> <name>LUV</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>up</name></decl>, <decl><type ref="prev"/><name>vp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>up</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>x</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>w</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>vp</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>y</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>upvp_to_xy</name><argument_list>(<argument><expr><name>up</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cz</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>-</operator> <operator>(</operator><name>cx</name> <operator>+</operator> <name>cy</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cie</name> <operator>==</operator> <name>UCS</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
<expr_stmt><expr><name>u</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>x</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>w</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>y</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>uv_to_xy</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cz</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>-</operator> <operator>(</operator><name>cx</name> <operator>+</operator> <name>cy</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cie</name> <operator>==</operator> <name>XYY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cx</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>x</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>w</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>cy</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>y</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>cz</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>-</operator> <operator>(</operator><name>cx</name> <operator>+</operator> <name>cy</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>xyz_to_rgb</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>, <argument><expr><name>cz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><call><name>constrain_rgb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mx</name> <operator>*=</operator> <name>contrast</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>jmax</name> <operator>=</operator> <call><name>FFMAX3</name><argument_list>(<argument><expr><name>jr</name></expr></argument>, <argument><expr><name>jg</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>jmax</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>jr</name> <operator>=</operator> <name>jr</name> <operator>/</operator> <name>jmax</name></expr>;</expr_stmt>
<expr_stmt><expr><name>jg</name> <operator>=</operator> <name>jg</name> <operator>/</operator> <name>jmax</name></expr>;</expr_stmt>
<expr_stmt><expr><name>jb</name> <operator>=</operator> <name>jb</name> <operator>/</operator> <name>jmax</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>correct_gamma</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gamma_correct_rgb</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>mx</name> <operator>*</operator> <name>jr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <name>mx</name> <operator>*</operator> <name>jg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>mx</name> <operator>*</operator> <name>jb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>y</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>y</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>y</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>y</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">65535</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>plot_white_point</name><parameter_list>(<parameter><decl><type><name>uint16_t</name><modifier>*</modifier></type> <name>pixels</name></decl></parameter>,
<parameter><decl><type><name>int</name> <specifier>const</specifier></type> <name>linesize</name></decl></parameter>,
<parameter><decl><type><name>int</name> <specifier>const</specifier></type> <name>w</name></decl></parameter>,
<parameter><decl><type><name>int</name> <specifier>const</specifier></type> <name>h</name></decl></parameter>,
<parameter><decl><type><name>int</name> <specifier>const</specifier></type> <name>maxval</name></decl></parameter>,
<parameter><decl><type><name>int</name> <specifier>const</specifier></type> <name>color_system</name></decl></parameter>,
<parameter><decl><type><name>int</name> <specifier>const</specifier></type> <name>cie</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ColorSystem</name></name> <modifier>*</modifier></type><name>cs</name> <init>= <expr><operator>&amp;</operator><name><name>color_systems</name><index>[<expr><name>color_system</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wx</name></decl>, <decl><type ref="prev"/><name>wy</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cie</name> <operator>==</operator> <name>LUV</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>wup</name></decl>, <decl><type ref="prev"/><name>wvp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>xy_to_upvp</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>xWhite</name></name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>yWhite</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wvp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wx</name> <operator>=</operator> <operator>(</operator><name>w</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>wup</name></expr>;</expr_stmt>
<expr_stmt><expr><name>wy</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>wvp</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cie</name> <operator>==</operator> <name>UCS</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>wu</name></decl>, <decl><type ref="prev"/><name>wv</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>xy_to_uv</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>xWhite</name></name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>yWhite</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wx</name> <operator>=</operator> <operator>(</operator><name>w</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>wu</name></expr>;</expr_stmt>
<expr_stmt><expr><name>wy</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>wv</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cie</name> <operator>==</operator> <name>XYY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>wx</name> <operator>=</operator> <operator>(</operator><name>w</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>cs</name><operator>-&gt;</operator><name>xWhite</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>wy</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>cs</name><operator>-&gt;</operator><name>yWhite</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>draw_rline</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>,
<argument><expr><name>wx</name> <operator>+</operator> <call><name>Sz</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>wy</name></expr></argument>, <argument><expr><name>wx</name> <operator>+</operator> <call><name>Sz</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>wy</name></expr></argument>,
<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_rline</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>,
<argument><expr><name>wx</name> <operator>-</operator> <call><name>Sz</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>wy</name></expr></argument>, <argument><expr><name>wx</name> <operator>-</operator> <call><name>Sz</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>wy</name></expr></argument>,
<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_rline</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>,
<argument><expr><name>wx</name></expr></argument>, <argument><expr><name>wy</name> <operator>+</operator> <call><name>Sz</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>wx</name></expr></argument>, <argument><expr><name>wy</name> <operator>+</operator> <call><name>Sz</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_rline</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>,
<argument><expr><name>wx</name></expr></argument>, <argument><expr><name>wy</name> <operator>-</operator> <call><name>Sz</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>wx</name></expr></argument>, <argument><expr><name>wy</name> <operator>-</operator> <call><name>Sz</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>draw_background</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CiescopeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ColorSystem</name></name> <modifier>*</modifier></type><name>cs</name> <init>= <expr><operator>&amp;</operator><name><name>color_systems</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>color_system</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>pixels</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>f</name></name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pixels</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tongue_outline</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">65535</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cie</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_in_tongue</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">65535</literal></expr></argument>, <argument><expr><name>cs</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <call><name>double</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><index>[<expr><literal type="number">3</literal></expr>]</index><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>i</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cie</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>correct_gamma</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>contrast</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_rgb48</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>cx</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>cy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CiescopeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name><modifier>*</modifier></type> <name>src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>y</name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">6</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>r</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">65535.</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>g</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">65535.</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>b</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>/</operator> <literal type="number">65535.</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>cz</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rgb_to_xy</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cz</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <call><name>double</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><index>[<expr><literal type="number">3</literal></expr>]</index><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>m</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_rgba64</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>cx</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>cy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CiescopeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name><modifier>*</modifier></type> <name>src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>y</name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>r</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">65535.</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>g</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">65535.</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>b</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>/</operator> <literal type="number">65535.</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>cz</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rgb_to_xy</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cz</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <call><name>double</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><index>[<expr><literal type="number">3</literal></expr>]</index><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>m</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_rgb24</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>cx</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>cy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CiescopeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>src</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>y</name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>r</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">255.</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>g</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">255.</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>b</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>/</operator> <literal type="number">255.</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>cz</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rgb_to_xy</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cz</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <call><name>double</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><index>[<expr><literal type="number">3</literal></expr>]</index><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>m</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_rgba</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>cx</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>cy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CiescopeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>src</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>y</name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>r</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">255.</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>g</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">255.</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>b</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>/</operator> <literal type="number">255.</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>cz</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rgb_to_xy</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cz</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <call><name>double</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><index>[<expr><literal type="number">3</literal></expr>]</index><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>m</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_xyz</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>cx</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>cy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CiescopeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name><modifier>*</modifier></type> <name>src</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>y</name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">6</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>lx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>log2lin</name><index>[<expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>ly</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>log2lin</name><index>[<expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>lz</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>log2lin</name><index>[<expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>sum</name> <init>= <expr><name>lx</name> <operator>+</operator> <name>ly</name> <operator>+</operator> <name>lz</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sum</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>cx</name> <operator>=</operator> <name>lx</name> <operator>/</operator> <name>sum</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cy</name> <operator>=</operator> <name>ly</name> <operator>/</operator> <name>sum</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>plot_gamuts</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cie</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gamuts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NB_CS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ColorSystem</name></name> <modifier>*</modifier></type><name>cs</name> <init>= <expr><operator>&amp;</operator><name><name>color_systems</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rx</name></decl>, <decl><type ref="prev"/><name>ry</name></decl>, <decl><type ref="prev"/><name>gx</name></decl>, <decl><type ref="prev"/><name>gy</name></decl>, <decl><type ref="prev"/><name>bx</name></decl>, <decl><type ref="prev"/><name>by</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <name>gamuts</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cie</name> <operator>==</operator> <name>LUV</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>wup</name></decl>, <decl><type ref="prev"/><name>wvp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>xy_to_upvp</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>xRed</name></name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>yRed</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wvp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rx</name> <operator>=</operator> <operator>(</operator><name>w</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>wup</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ry</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>wvp</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xy_to_upvp</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>xGreen</name></name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>yGreen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wvp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gx</name> <operator>=</operator> <operator>(</operator><name>w</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>wup</name></expr>;</expr_stmt>
<expr_stmt><expr><name>gy</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>wvp</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xy_to_upvp</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>xBlue</name></name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>yBlue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wvp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bx</name> <operator>=</operator> <operator>(</operator><name>w</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>wup</name></expr>;</expr_stmt>
<expr_stmt><expr><name>by</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>wvp</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cie</name> <operator>==</operator> <name>UCS</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>wu</name></decl>, <decl><type ref="prev"/><name>wv</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>xy_to_uv</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>xRed</name></name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>yRed</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rx</name> <operator>=</operator> <operator>(</operator><name>w</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>wu</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ry</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>wv</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xy_to_uv</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>xGreen</name></name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>yGreen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gx</name> <operator>=</operator> <operator>(</operator><name>w</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>wu</name></expr>;</expr_stmt>
<expr_stmt><expr><name>gy</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>wv</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xy_to_uv</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>xBlue</name></name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>yBlue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bx</name> <operator>=</operator> <operator>(</operator><name>w</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>wu</name></expr>;</expr_stmt>
<expr_stmt><expr><name>by</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>wv</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cie</name> <operator>==</operator> <name>XYY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rx</name> <operator>=</operator> <operator>(</operator><name>w</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>cs</name><operator>-&gt;</operator><name>xRed</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ry</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>cs</name><operator>-&gt;</operator><name>yRed</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>gx</name> <operator>=</operator> <operator>(</operator><name>w</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>cs</name><operator>-&gt;</operator><name>xGreen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>gy</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>cs</name><operator>-&gt;</operator><name>yGreen</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>bx</name> <operator>=</operator> <operator>(</operator><name>w</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>cs</name><operator>-&gt;</operator><name>xBlue</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>by</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>cs</name><operator>-&gt;</operator><name>yBlue</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>draw_rline</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>rx</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>, <argument><expr><name>gx</name></expr></argument>, <argument><expr><name>gy</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_rline</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>gx</name></expr></argument>, <argument><expr><name>gy</name></expr></argument>, <argument><expr><name>bx</name></expr></argument>, <argument><expr><name>by</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>draw_rline</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bx</name></expr></argument>, <argument><expr><name>by</name></expr></argument>, <argument><expr><name>rx</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CiescopeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>intensity</name></name> <operator>*</operator> <literal type="number">65535</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>background</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>draw_background</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>background</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>cx</name></decl>, <decl><type ref="prev"/><name>cy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wx</name></decl>, <decl><type ref="prev"/><name>wy</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>filter</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cy</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>cie</name></name> <operator>==</operator> <name>LUV</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>up</name></decl>, <decl><type ref="prev"/><name>vp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>xy_to_upvp</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>up</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cx</name> <operator>=</operator> <name>up</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cy</name> <operator>=</operator> <name>vp</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>cie</name></name> <operator>==</operator> <name>UCS</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>xy_to_uv</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cx</name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cy</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>wx</name> <operator>=</operator> <operator>(</operator><name>w</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>cx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>wy</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>cy</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>wx</name> <operator>&gt;=</operator> <name>w</name> <operator>||</operator>
<name>wy</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>wy</name> <operator>&gt;=</operator> <name>h</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>wy</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>wx</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">65535</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">65535</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">65535</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">65535</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>xx</name> <init>= <expr><name>x</name> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dst</name><index>[<expr><name>xx</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>xx</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>xx</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>xx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>xx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>xx</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>xx</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>xx</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>xx</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>show_white</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>plot_white_point</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><literal type="number">65535</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>color_system</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cie</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>plot_gamuts</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cie</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>gamuts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>av_cold</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CiescopeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CiescopeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_rgb2xyz_matrix</name><argument_list>(<argument><expr><name><name>color_systems</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>color_system</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>m</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invert_matrix3x3</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_RGB24</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name>filter_rgb24</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGBA</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name>filter_rgba</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB48</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name>filter_rgb48</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGBA64</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name>filter_rgba64</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_XYZ12</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name>filter_xyz</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">65536</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>log2lin</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><name>i</name> <operator>/</operator> <literal type="number">65535.</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>igamma</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">65535.</literal></expr>;</expr_stmt></block_content></block></for>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_output</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_ciescope</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"ciescope"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Video CIE scope."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CiescopeContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>ciescope_class</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>outputs</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
