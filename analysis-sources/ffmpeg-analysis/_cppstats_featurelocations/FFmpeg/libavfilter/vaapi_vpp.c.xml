<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vaapi_vpp.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vaapi_vpp.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>ff_vaapi_vpp_query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_VAAPI</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>out_formats</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>in_formats</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vaapi_vpp_pipeline_uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAAPIVPPContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_filter_buffers</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>filter_buffers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>VA_INVALID_ID</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vaDestroyBuffer</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>filter_buffers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>filter_buffers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>VA_INVALID_ID</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_filter_buffers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>va_context</name></name> <operator>!=</operator> <name>VA_INVALID_ID</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vaDestroyContext</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_context</name></name> <operator>=</operator> <name>VA_INVALID_ID</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>va_config</name></name> <operator>!=</operator> <name>VA_INVALID_ID</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vaDestroyConfig</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_config</name></name> <operator>=</operator> <name>VA_INVALID_ID</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>device_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_vaapi_vpp_config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAAPIVPPContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>pipeline_uninit</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>pipeline_uninit</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>inlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"A hardware frames reference is "</literal>
<literal type="string">"required to associate the processing device.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>input_frames_ref</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>input_frames_ref</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"A input frames reference create "</literal>
<literal type="string">"failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>input_frames</name></name> <operator>=</operator> <operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>input_frames_ref</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_vaapi_vpp_config_output</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAAPIVPPContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVVAAPIHWConfig</name> <modifier>*</modifier></type><name>hwconfig</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVHWFramesConstraints</name> <modifier>*</modifier></type><name>constraints</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>output_frames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVVAAPIFramesContext</name> <modifier>*</modifier></type><name>va_frames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAStatus</name></type> <name>vas</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>pipeline_uninit</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>pipeline_uninit</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>output_width</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>output_width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>w</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>output_height</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>output_height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>h</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>input_frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>device_ref</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>input_frames</name><operator>-&gt;</operator><name>device_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>device_ref</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"A device reference create "</literal>
<literal type="string">"failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>AVHWDeviceContext</name><operator>*</operator><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>device_ref</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><operator>-&gt;</operator><name>hwctx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_config</name></name> <operator>==</operator> <name>VA_INVALID_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaCreateConfig</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name>VAProfileNone</name></expr></argument>,
<argument><expr><name>VAEntrypointVideoProc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>va_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create processing pipeline "</literal>
<literal type="string">"config: %d (%s).\n"</literal></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hwconfig</name> <operator>=</operator> <call><name>av_hwdevice_hwconfig_alloc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>device_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hwconfig</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>hwconfig</name><operator>-&gt;</operator><name>config_id</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>va_config</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>constraints</name> <operator>=</operator> <call><name>av_hwdevice_get_hwframe_constraints</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>device_ref</name></name></expr></argument>,
<argument><expr><name>hwconfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>constraints</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>output_format</name></name> <operator>==</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>output_format</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>input_frames</name><operator>-&gt;</operator><name>sw_format</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>constraints</name><operator>-&gt;</operator><name>valid_sw_formats</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>constraints</name><operator>-&gt;</operator><name>valid_sw_formats</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>output_format</name></name> <operator>==</operator> <name><name>constraints</name><operator>-&gt;</operator><name>valid_sw_formats</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>constraints</name><operator>-&gt;</operator><name>valid_sw_formats</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Hardware does not support output "</literal>
<literal type="string">"format %s.\n"</literal></expr></argument>, <argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>output_format</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>output_width</name></name> <operator>&lt;</operator> <name><name>constraints</name><operator>-&gt;</operator><name>min_width</name></name> <operator>||</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>output_height</name></name> <operator>&lt;</operator> <name><name>constraints</name><operator>-&gt;</operator><name>min_height</name></name> <operator>||</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>output_width</name></name> <operator>&gt;</operator> <name><name>constraints</name><operator>-&gt;</operator><name>max_width</name></name> <operator>||</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>output_height</name></name> <operator>&gt;</operator> <name><name>constraints</name><operator>-&gt;</operator><name>max_height</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Hardware does not support scaling to "</literal>
<literal type="string">"size %dx%d (constraints: width %d-%d height %d-%d).\n"</literal></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>output_width</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>output_height</name></name></expr></argument>,
<argument><expr><name><name>constraints</name><operator>-&gt;</operator><name>min_width</name></name></expr></argument>, <argument><expr><name><name>constraints</name><operator>-&gt;</operator><name>max_width</name></name></expr></argument>,
<argument><expr><name><name>constraints</name><operator>-&gt;</operator><name>min_height</name></name></expr></argument>, <argument><expr><name><name>constraints</name><operator>-&gt;</operator><name>max_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name> <operator>=</operator> <call><name>av_hwframe_ctx_alloc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>device_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>outlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create HW frame context "</literal>
<literal type="string">"for output.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>output_frames</name> <operator>=</operator> <operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>outlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output_frames</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_VAAPI</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output_frames</name><operator>-&gt;</operator><name>sw_format</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>output_format</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output_frames</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>output_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output_frames</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>output_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output_frames</name><operator>-&gt;</operator><name>initial_pool_size</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_filter_init_hw_frames</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>outlink</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>av_hwframe_ctx_init</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to initialise VAAPI frame "</literal>
<literal type="string">"context for output: %d\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>va_frames</name> <operator>=</operator> <name><name>output_frames</name><operator>-&gt;</operator><name>hwctx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_context</name></name> <operator>==</operator> <name>VA_INVALID_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaCreateContext</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_config</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>output_width</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>output_height</name></name></expr></argument>,
<argument><expr><name>VA_PROGRESSIVE</name></expr></argument>,
<argument><expr><name><name>va_frames</name><operator>-&gt;</operator><name>surface_ids</name></name></expr></argument>, <argument><expr><name><name>va_frames</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>va_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create processing pipeline "</literal>
<literal type="string">"context: %d (%s).\n"</literal></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>output_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>output_height</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>build_filter_params</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>build_filter_params</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hwconfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_hwframe_constraints_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>constraints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>outlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hwconfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_hwframe_constraints_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>constraints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>VAAPIColourProperties</name> <block>{
<decl_stmt><decl><type><name>VAProcColorStandardType</name></type> <name>va_color_standard</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVColorPrimaries</name></name></type> <name>color_primaries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVColorTransferCharacteristic</name></name></type> <name>color_trc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVColorSpace</name></name></type> <name>colorspace</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>va_chroma_sample_location</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>va_color_range</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVColorRange</name></name></type> <name>color_range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVChromaLocation</name></name></type> <name>chroma_sample_location</name></decl>;</decl_stmt>
}</block></struct></type> <name>VAAPIColourProperties</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>VAAPIColourProperties</name></type> <name><name>vaapi_colour_standard_map</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>VAProcColorStandardBT601</name></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VAProcColorStandardBT601</name></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VAProcColorStandardBT709</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VAProcColorStandardBT470M</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VAProcColorStandardBT470BG</name></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VAProcColorStandardSMPTE170M</name></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VAProcColorStandardSMPTE240M</name></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VAProcColorStandardGenericFilm</name></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VA_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><name>VAProcColorStandardSRGB</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VAProcColorStandardXVYCC601</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VAProcColorStandardXVYCC709</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>VAProcColorStandardBT2020</name></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">9</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vaapi_vpp_fill_colour_standard</name><parameter_list>(<parameter><decl><type><name>VAAPIColourProperties</name> <modifier>*</modifier></type><name>props</name></decl></parameter>,
<parameter><decl><type><name>VAProcColorStandardType</name> <modifier>*</modifier></type><name>vacs</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>nb_vacs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>VAAPIColourProperties</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>score</name></decl>, <decl><type ref="prev"/><name>best_score</name></decl>, <decl><type ref="prev"/><name>worst_score</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAProcColorStandardType</name></type> <name>best_standard</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VA_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">3</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_vacs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>vacs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>VAProcColorStandardExplicit</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>props</name><operator>-&gt;</operator><name>va_color_standard</name></name> <operator>=</operator> <name>VAProcColorStandardExplicit</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<expr_stmt><expr><name>best_standard</name> <operator>=</operator> <name>VAProcColorStandardNone</name></expr>;</expr_stmt>
<expr_stmt><expr><name>best_score</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>worst_score</name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name><name>props</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>!=</operator> <name>AVCOL_SPC_UNSPECIFIED</name> <operator>&amp;&amp;</operator>
<name><name>props</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>!=</operator> <name>AVCOL_SPC_RGB</name><operator>)</operator> <operator>+</operator>
<literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>props</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>!=</operator> <name>AVCOL_TRC_UNSPECIFIED</name><operator>)</operator> <operator>+</operator>
<operator>(</operator><name><name>props</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>!=</operator> <name>AVCOL_PRI_UNSPECIFIED</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>worst_score</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>props</name><operator>-&gt;</operator><name>va_color_standard</name></name> <operator>=</operator> <name>VAProcColorStandardNone</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_vacs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>vaapi_colour_standard_map</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>&amp;</operator><name><name>vaapi_colour_standard_map</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>va_color_standard</name></name> <operator>!=</operator> <name><name>vacs</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>score</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>props</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>!=</operator> <name>AVCOL_SPC_UNSPECIFIED</name> <operator>&amp;&amp;</operator>
<name><name>props</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>!=</operator> <name>AVCOL_SPC_RGB</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>score</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name><name>props</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>!=</operator> <name><name>t</name><operator>-&gt;</operator><name>colorspace</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>props</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>!=</operator> <name>AVCOL_TRC_UNSPECIFIED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>score</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>props</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>!=</operator> <name><name>t</name><operator>-&gt;</operator><name>color_trc</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>props</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>!=</operator> <name>AVCOL_PRI_UNSPECIFIED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>score</name> <operator>+=</operator> <operator>(</operator><name><name>props</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>!=</operator> <name><name>t</name><operator>-&gt;</operator><name>color_primaries</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>score</name> <operator>&lt;</operator> <name>worst_score</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>best_score</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>score</name> <operator>&lt;</operator> <name>best_score</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>best_score</name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>
<expr_stmt><expr><name>best_standard</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>va_color_standard</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><name><name>props</name><operator>-&gt;</operator><name>va_color_standard</name></name> <operator>=</operator> <name>best_standard</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vaapi_vpp_fill_chroma_sample_location</name><parameter_list>(<parameter><decl><type><name>VAAPIColourProperties</name> <modifier>*</modifier></type><name>props</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VA_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>AVChromaLocation</name></name></type> <name>av</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>va</name></decl>;</decl_stmt>
}</block> <decl><name><name>csl_map</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>AVCHROMA_LOC_UNSPECIFIED</name></expr>, <expr><name>VA_CHROMA_SITING_UNKNOWN</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AVCHROMA_LOC_LEFT</name></expr>, <expr><name>VA_CHROMA_SITING_VERTICAL_CENTER</name> <operator>|</operator>
<name>VA_CHROMA_SITING_HORIZONTAL_LEFT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AVCHROMA_LOC_CENTER</name></expr>, <expr><name>VA_CHROMA_SITING_VERTICAL_CENTER</name> <operator>|</operator>
<name>VA_CHROMA_SITING_HORIZONTAL_CENTER</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AVCHROMA_LOC_TOPLEFT</name></expr>, <expr><name>VA_CHROMA_SITING_VERTICAL_TOP</name> <operator>|</operator>
<name>VA_CHROMA_SITING_HORIZONTAL_LEFT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AVCHROMA_LOC_TOP</name></expr>, <expr><name>VA_CHROMA_SITING_VERTICAL_TOP</name> <operator>|</operator>
<name>VA_CHROMA_SITING_HORIZONTAL_CENTER</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AVCHROMA_LOC_BOTTOMLEFT</name></expr>, <expr><name>VA_CHROMA_SITING_VERTICAL_BOTTOM</name> <operator>|</operator>
<name>VA_CHROMA_SITING_HORIZONTAL_LEFT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>AVCHROMA_LOC_BOTTOM</name></expr>, <expr><name>VA_CHROMA_SITING_VERTICAL_BOTTOM</name> <operator>|</operator>
<name>VA_CHROMA_SITING_HORIZONTAL_CENTER</name></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>csl_map</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>props</name><operator>-&gt;</operator><name>chroma_sample_location</name></name> <operator>==</operator> <name><name>csl_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>av</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>props</name><operator>-&gt;</operator><name>va_chroma_sample_location</name></name> <operator>=</operator> <name><name>csl_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>va</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>props</name><operator>-&gt;</operator><name>va_chroma_sample_location</name></name> <operator>=</operator> <name>VA_CHROMA_SITING_UNKNOWN</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>props</name><operator>-&gt;</operator><name>va_chroma_sample_location</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vaapi_vpp_fill_colour_range</name><parameter_list>(<parameter><decl><type><name>VAAPIColourProperties</name> <modifier>*</modifier></type><name>props</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VA_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<switch>switch <condition>(<expr><name><name>props</name><operator>-&gt;</operator><name>color_range</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AVCOL_RANGE_MPEG</name></expr>:</case>
<expr_stmt><expr><name><name>props</name><operator>-&gt;</operator><name>va_color_range</name></name> <operator>=</operator> <name>VA_SOURCE_RANGE_REDUCED</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVCOL_RANGE_JPEG</name></expr>:</case>
<expr_stmt><expr><name><name>props</name><operator>-&gt;</operator><name>va_color_range</name></name> <operator>=</operator> <name>VA_SOURCE_RANGE_FULL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AVCOL_RANGE_UNSPECIFIED</name></expr>:</case>
<default>default:</default>
<expr_stmt><expr><name><name>props</name><operator>-&gt;</operator><name>va_color_range</name></name> <operator>=</operator> <name>VA_SOURCE_RANGE_UNKNOWN</name></expr>;</expr_stmt>
</block_content>}</block></switch>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>props</name><operator>-&gt;</operator><name>va_color_range</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vaapi_vpp_fill_colour_properties</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>VAAPIColourProperties</name> <modifier>*</modifier></type><name>props</name></decl></parameter>,
<parameter><decl><type><name>VAProcColorStandardType</name> <modifier>*</modifier></type><name>vacs</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>nb_vacs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vaapi_vpp_fill_colour_standard</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>vacs</name></expr></argument>, <argument><expr><name>nb_vacs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vaapi_vpp_fill_chroma_sample_location</name><argument_list>(<argument><expr><name>props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vaapi_vpp_fill_colour_range</name><argument_list>(<argument><expr><name>props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Mapped colour properties %s %s/%s/%s %s "</literal>
<literal type="string">"to VA standard %d chroma siting %#x range %#x.\n"</literal></expr></argument>,
<argument><expr><call><name>av_color_range_name</name><argument_list>(<argument><expr><name><name>props</name><operator>-&gt;</operator><name>color_range</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>av_color_space_name</name><argument_list>(<argument><expr><name><name>props</name><operator>-&gt;</operator><name>colorspace</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>av_color_primaries_name</name><argument_list>(<argument><expr><name><name>props</name><operator>-&gt;</operator><name>color_primaries</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>av_color_transfer_name</name><argument_list>(<argument><expr><name><name>props</name><operator>-&gt;</operator><name>color_trc</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>av_chroma_location_name</name><argument_list>(<argument><expr><name><name>props</name><operator>-&gt;</operator><name>chroma_sample_location</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>props</name><operator>-&gt;</operator><name>va_color_standard</name></name></expr></argument>,
<argument><expr><name><name>props</name><operator>-&gt;</operator><name>va_chroma_sample_location</name></name></expr></argument>, <argument><expr><name><name>props</name><operator>-&gt;</operator><name>va_color_range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_vpp_frame_is_rgb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_VAAPI</name> <operator>&amp;&amp;</operator>
<name><name>frame</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hwfc</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_RGB</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_vpp_colour_properties</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>VAProcPipelineParameterBuffer</name> <modifier>*</modifier></type><name>params</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>input_frame</name></decl></parameter>,
<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>output_frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAAPIVPPContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAAPIColourProperties</name></type> <name>input_props</name></decl>, <decl><type ref="prev"/><name>output_props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAProcPipelineCaps</name></type> <name>caps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAStatus</name></type> <name>vas</name></decl>;</decl_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaQueryVideoProcPipelineCaps</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_context</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>filter_buffers</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_filter_buffers</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>caps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to query capabilities for "</literal>
<literal type="string">"colour standard support: %d (%s).\n"</literal></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>input_props</name> <operator>=</operator> <operator>(</operator><name>VAAPIColourProperties</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>colorspace</name> <operator>=</operator> <call><name>vaapi_vpp_frame_is_rgb</name><argument_list>(<argument><expr><name>input_frame</name></expr></argument>)</argument_list></call>
<operator>?</operator> <name>AVCOL_SPC_RGB</name> <operator>:</operator> <name><name>input_frame</name><operator>-&gt;</operator><name>colorspace</name></name></expr>,
<expr><operator>.</operator><name>color_primaries</name> <operator>=</operator> <name><name>input_frame</name><operator>-&gt;</operator><name>color_primaries</name></name></expr>,
<expr><operator>.</operator><name>color_trc</name> <operator>=</operator> <name><name>input_frame</name><operator>-&gt;</operator><name>color_trc</name></name></expr>,
<expr><operator>.</operator><name>color_range</name> <operator>=</operator> <name><name>input_frame</name><operator>-&gt;</operator><name>color_range</name></name></expr>,
<expr><operator>.</operator><name>chroma_sample_location</name> <operator>=</operator> <name><name>input_frame</name><operator>-&gt;</operator><name>chroma_location</name></name></expr>,
}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vaapi_vpp_fill_colour_properties</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input_props</name></expr></argument>,
<argument><expr><name><name>caps</name><operator>.</operator><name>input_color_standards</name></name></expr></argument>,
<argument><expr><name><name>caps</name><operator>.</operator><name>num_input_color_standards</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>output_props</name> <operator>=</operator> <operator>(</operator><name>VAAPIColourProperties</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>colorspace</name> <operator>=</operator> <call><name>vaapi_vpp_frame_is_rgb</name><argument_list>(<argument><expr><name>output_frame</name></expr></argument>)</argument_list></call>
<operator>?</operator> <name>AVCOL_SPC_RGB</name> <operator>:</operator> <name><name>output_frame</name><operator>-&gt;</operator><name>colorspace</name></name></expr>,
<expr><operator>.</operator><name>color_primaries</name> <operator>=</operator> <name><name>output_frame</name><operator>-&gt;</operator><name>color_primaries</name></name></expr>,
<expr><operator>.</operator><name>color_trc</name> <operator>=</operator> <name><name>output_frame</name><operator>-&gt;</operator><name>color_trc</name></name></expr>,
<expr><operator>.</operator><name>color_range</name> <operator>=</operator> <name><name>output_frame</name><operator>-&gt;</operator><name>color_range</name></name></expr>,
<expr><operator>.</operator><name>chroma_sample_location</name> <operator>=</operator> <name><name>output_frame</name><operator>-&gt;</operator><name>chroma_location</name></name></expr>,
}</block></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vaapi_vpp_fill_colour_properties</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_props</name></expr></argument>,
<argument><expr><name><name>caps</name><operator>.</operator><name>output_color_standards</name></name></expr></argument>,
<argument><expr><name><name>caps</name><operator>.</operator><name>num_output_color_standards</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VA_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">3</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>output_props</name><operator>.</operator><name>va_color_standard</name></name> <operator>!=</operator> <name>VAProcColorStandardExplicit</name></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>VAAPIColourProperties</name> <modifier>*</modifier></type><name>output_standard</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>vaapi_colour_standard_map</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>output_props</name><operator>.</operator><name>va_color_standard</name></name> <operator>==</operator>
<name><name>vaapi_colour_standard_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>va_color_standard</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>output_standard</name> <operator>=</operator> <operator>&amp;</operator><name><name>vaapi_colour_standard_map</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>output_standard</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>output_frame</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <ternary><condition><expr><call><name>vaapi_vpp_frame_is_rgb</name><argument_list>(<argument><expr><name>output_frame</name></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name>AVCOL_SPC_RGB</name></expr> </then><else>: <expr><name><name>output_standard</name><operator>-&gt;</operator><name>colorspace</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output_frame</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>=</operator> <name><name>output_standard</name><operator>-&gt;</operator><name>color_primaries</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output_frame</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>=</operator> <name><name>output_standard</name><operator>-&gt;</operator><name>color_trc</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>surface_color_standard</name></name> <operator>=</operator> <name><name>input_props</name><operator>.</operator><name>va_color_standard</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>output_color_standard</name></name> <operator>=</operator> <name><name>output_props</name><operator>.</operator><name>va_color_standard</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VA_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>input_color_properties</name></name> <operator>=</operator> <operator>(</operator><name>VAProcColorProperties</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>chroma_sample_location</name> <operator>=</operator> <name><name>input_props</name><operator>.</operator><name>va_chroma_sample_location</name></name></expr>,
<expr><operator>.</operator><name>color_range</name> <operator>=</operator> <name><name>input_props</name><operator>.</operator><name>va_color_range</name></name></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VA_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">3</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>.</operator><name>colour_primaries</name> <operator>=</operator> <name><name>input_props</name><operator>.</operator><name>color_primaries</name></name></expr>,
<expr><operator>.</operator><name>transfer_characteristics</name> <operator>=</operator> <name><name>input_props</name><operator>.</operator><name>color_trc</name></name></expr>,
<expr><operator>.</operator><name>matrix_coefficients</name> <operator>=</operator> <name><name>input_props</name><operator>.</operator><name>colorspace</name></name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>output_color_properties</name></name> <operator>=</operator> <operator>(</operator><name>VAProcColorProperties</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>chroma_sample_location</name> <operator>=</operator> <name><name>output_props</name><operator>.</operator><name>va_chroma_sample_location</name></name></expr>,
<expr><operator>.</operator><name>color_range</name> <operator>=</operator> <name><name>output_props</name><operator>.</operator><name>va_color_range</name></name></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VA_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">3</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>.</operator><name>colour_primaries</name> <operator>=</operator> <name><name>output_props</name><operator>.</operator><name>color_primaries</name></name></expr>,
<expr><operator>.</operator><name>transfer_characteristics</name> <operator>=</operator> <name><name>output_props</name><operator>.</operator><name>color_trc</name></name></expr>,
<expr><operator>.</operator><name>matrix_coefficients</name> <operator>=</operator> <name><name>output_props</name><operator>.</operator><name>colorspace</name></name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_vaapi_vpp_init_params</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>VAProcPipelineParameterBuffer</name> <modifier>*</modifier></type><name>params</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>input_frame</name></decl></parameter>,
<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>output_frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAAPIVPPContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VASurfaceID</name></type> <name>input_surface</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>input_region</name></name> <operator>=</operator> <operator>(</operator><name>VARectangle</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>x</name> <operator>=</operator> <name><name>input_frame</name><operator>-&gt;</operator><name>crop_left</name></name></expr>,
<expr><operator>.</operator><name>y</name> <operator>=</operator> <name><name>input_frame</name><operator>-&gt;</operator><name>crop_top</name></name></expr>,
<expr><operator>.</operator><name>width</name> <operator>=</operator> <name><name>input_frame</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator>
<operator>(</operator><name><name>input_frame</name><operator>-&gt;</operator><name>crop_left</name></name> <operator>+</operator> <name><name>input_frame</name><operator>-&gt;</operator><name>crop_right</name></name><operator>)</operator></expr>,
<expr><operator>.</operator><name>height</name> <operator>=</operator> <name><name>input_frame</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator>
<operator>(</operator><name><name>input_frame</name><operator>-&gt;</operator><name>crop_top</name></name> <operator>+</operator> <name><name>input_frame</name><operator>-&gt;</operator><name>crop_bottom</name></name><operator>)</operator></expr>,
}</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output_frame</name><operator>-&gt;</operator><name>crop_top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output_frame</name><operator>-&gt;</operator><name>crop_bottom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output_frame</name><operator>-&gt;</operator><name>crop_left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output_frame</name><operator>-&gt;</operator><name>crop_right</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>input_surface</name> <operator>=</operator> <operator>(</operator><name>VASurfaceID</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>input_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr><operator>,</operator>

<expr><operator>*</operator><name>params</name> <operator>=</operator> <operator>(</operator><name>VAProcPipelineParameterBuffer</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>surface</name> <operator>=</operator> <name>input_surface</name></expr>,
<expr><operator>.</operator><name>surface_region</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>input_region</name></name></expr>,
<expr><operator>.</operator><name>output_region</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>output_background_color</name> <operator>=</operator> <name>VAAPI_VPP_BACKGROUND_BLACK</name></expr>,
<expr><operator>.</operator><name>pipeline_flags</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>filter_flags</name> <operator>=</operator> <name>VA_FRAME_PICTURE</name></expr>,



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VA_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>.</operator><name>rotation_state</name> <operator>=</operator> <name>VA_ROTATION_NONE</name></expr>,
<expr><operator>.</operator><name>mirror_state</name> <operator>=</operator> <name>VA_MIRROR_NONE</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_vpp_colour_properties</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>params</name></expr></argument>,
<argument><expr><name>input_frame</name></expr></argument>, <argument><expr><name>output_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_vaapi_vpp_make_param_buffers</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAStatus</name></type> <name>vas</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VABufferID</name></type> <name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAAPIVPPContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_filter_buffers</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name>VAProcFilterCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaCreateBuffer</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_context</name></name></expr></argument>,
<argument><expr><name>type</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create parameter "</literal>
<literal type="string">"buffer (type %d): %d (%s).\n"</literal></expr></argument>,
<argument><expr><name>type</name></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>filter_buffers</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_filter_buffers</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Param buffer (type %d, %zu bytes, count %d) "</literal>
<literal type="string">"is %#x.\n"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>ff_vaapi_vpp_render_picture</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>VAProcPipelineParameterBuffer</name> <modifier>*</modifier></type><name>params</name></decl></parameter>,
<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>output_frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAAPIVPPContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VASurfaceID</name></type> <name>output_surface</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VABufferID</name></type> <name>params_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAStatus</name></type> <name>vas</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>output_surface</name> <operator>=</operator> <operator>(</operator><name>VASurfaceID</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>output_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaBeginPicture</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_context</name></name></expr></argument>, <argument><expr><name>output_surface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to attach new picture: "</literal>
<literal type="string">"%d (%s).\n"</literal></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaCreateBuffer</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_context</name></name></expr></argument>,
<argument><expr><name>VAProcPipelineParameterBufferType</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>params</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>params_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create parameter buffer: "</literal>
<literal type="string">"%d (%s).\n"</literal></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail_after_begin</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Pipeline parameter buffer is %#x.\n"</literal></expr></argument>,
<argument><expr><name>params_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaRenderPicture</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_context</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>params_id</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to render parameter buffer: "</literal>
<literal type="string">"%d (%s).\n"</literal></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail_after_begin</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaEndPicture</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to start picture processing: "</literal>
<literal type="string">"%d (%s).\n"</literal></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail_after_render</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>CONFIG_VAAPI_1</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>driver_quirks</name></name> <operator>&amp;</operator>
<name>AV_VAAPI_DRIVER_QUIRK_RENDER_PARAM_BUFFERS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaDestroyBuffer</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name>params_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to free parameter buffer: "</literal>
<literal type="string">"%d (%s).\n"</literal></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>





<label><name>fail_after_begin</name>:</label>
<expr_stmt><expr><call><name>vaRenderPicture</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>params_id</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>fail_after_render</name>:</label>
<expr_stmt><expr><call><name>vaEndPicture</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vaapi_vpp_ctx_init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAAPIVPPContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_config</name></name> <operator>=</operator> <name>VA_INVALID_ID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_context</name></name> <operator>=</operator> <name>VA_INVALID_ID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>valid_ids</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VAProcFilterCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>filter_buffers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>VA_INVALID_ID</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_filter_buffers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vaapi_vpp_ctx_uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAAPIVPPContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>valid_ids</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pipeline_uninit</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>pipeline_uninit</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>input_frames_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>device_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
