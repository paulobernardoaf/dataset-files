<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vf_unsharp_opencl.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opencl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opencl_source.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_DIAMETER</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>UnsharpOpenCLContext</name> <block>{
<decl_stmt><decl><type><name>OpenCLFilterContext</name></type> <name>ocf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>initialised</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_kernel</name></type> <name>kernel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_command_queue</name></type> <name>command_queue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>luma_size_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>luma_size_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>luma_amount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>chroma_size_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>chroma_size_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>chroma_amount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>global</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_planes</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>float</name></type> <name><name>blur_x</name><index>[<expr><name>MAX_DIAMETER</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>blur_y</name><index>[<expr><name>MAX_DIAMETER</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cl_mem</name></type> <name>matrix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_mem</name></type> <name>coef_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_mem</name></type> <name>coef_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cl_int</name></type> <name>size_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>size_y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_float</name></type> <name>amount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_float</name></type> <name>threshold</name></decl>;</decl_stmt>
}</block> <decl><name><name>plane</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</struct>
}</block></struct></type> <name>UnsharpOpenCLContext</name>;</typedef>


<function><type><specifier>static</specifier> <name>int</name></type> <name>unsharp_opencl_init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UnsharpOpenCLContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_opencl_filter_load_program</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_opencl_source_unsharp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>command_queue</name></name> <operator>=</operator> <call><name>clCreateCommandQueue</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ocf</name><operator>.</operator><name>hwctx</name><operator>-&gt;</operator><name>context</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ocf</name><operator>.</operator><name>hwctx</name><operator>-&gt;</operator><name>device_id</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_FAIL_ON_ERROR</name><argument_list>(<argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Failed to create OpenCL "</literal>
<literal type="string">"command queue %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>global</name></name> <operator>=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>luma_size_x</name></name> <operator>&gt;</operator> <literal type="number">17.0f</literal> <operator>||</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>luma_size_y</name></name> <operator>&gt;</operator> <literal type="number">17.0f</literal> <operator>||</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>chroma_size_x</name></name> <operator>&gt;</operator> <literal type="number">17.0f</literal> <operator>||</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>chroma_size_y</name></name> <operator>&gt;</operator> <literal type="number">17.0f</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>kernel</name></name> <operator>=</operator> <call><name>clCreateKernel</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ocf</name><operator>.</operator><name>program</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>global</name></name></expr> ?</condition><then> <expr><literal type="string">"unsharp_global"</literal></expr>
</then><else>: <expr><literal type="string">"unsharp_local"</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_FAIL_ON_ERROR</name><argument_list>(<argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Failed to create kernel %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>initialised</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>command_queue</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clReleaseCommandQueue</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>kernel</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clReleaseKernel</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>kernel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>unsharp_opencl_make_filter_params</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UnsharpOpenCLContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>matrix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>val</name></decl>, <decl><type ref="prev"/><name>sum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_mem</name></type> <name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>matrix_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>diam_x</name></decl>, <decl><type ref="prev"/><name>diam_y</name></decl>, <decl><type ref="prev"/><name>amount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>size_x</name></decl>, <decl><type ref="prev"/><name>size_y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ocf</name><operator>.</operator><name>output_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_planes</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>plane</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_RGB</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>diam_x</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>luma_size_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>diam_y</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>luma_size_y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>amount</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>luma_amount</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>diam_x</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>chroma_size_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>diam_y</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>chroma_size_y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>amount</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>chroma_amount</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>size_x</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>ceil</name><argument_list>(<argument><expr><name>diam_x</name></expr></argument>)</argument_list></call> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>size_y</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>ceil</name><argument_list>(<argument><expr><name>diam_y</name></expr></argument>)</argument_list></call> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>matrix_bytes</name> <operator>=</operator> <name>size_x</name> <operator>*</operator> <name>size_y</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>matrix</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>matrix_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>matrix</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>size_x</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>dx</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>x</name> <operator>-</operator> <name>size_x</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name>diam_x</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name><name>blur_x</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>exp</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">16.0</literal> <operator>*</operator> <operator>(</operator><name>dx</name> <operator>*</operator> <name>dx</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>size_x</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name><name>blur_x</name><index>[<expr><name>x</name></expr>]</index></name> <operator>/=</operator> <name>sum</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>size_y</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>dy</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>y</name> <operator>-</operator> <name>size_y</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name>diam_y</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name><name>blur_y</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <call><name>exp</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">16.0</literal> <operator>*</operator> <operator>(</operator><name>dy</name> <operator>*</operator> <name>dy</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>size_y</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name><name>blur_y</name><index>[<expr><name>y</name></expr>]</index></name> <operator>/=</operator> <name>sum</name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>size_y</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>size_x</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name><name>blur_x</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name><name>blur_y</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>y</name> <operator>*</operator> <name>size_x</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>global</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>clCreateBuffer</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ocf</name><operator>.</operator><name>hwctx</name><operator>-&gt;</operator><name>context</name></name></expr></argument>,
<argument><expr><name>CL_MEM_READ_ONLY</name> <operator>|</operator>
<name>CL_MEM_COPY_HOST_PTR</name> <operator>|</operator>
<name>CL_MEM_HOST_NO_ACCESS</name></expr></argument>,
<argument><expr><name>matrix_bytes</name></expr></argument>, <argument><expr><name>matrix</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_FAIL_ON_ERROR</name><argument_list>(<argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Failed to create matrix buffer: "</literal>
<literal type="string">"%d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>matrix</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>clCreateBuffer</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ocf</name><operator>.</operator><name>hwctx</name><operator>-&gt;</operator><name>context</name></name></expr></argument>,
<argument><expr><name>CL_MEM_READ_ONLY</name> <operator>|</operator>
<name>CL_MEM_COPY_HOST_PTR</name> <operator>|</operator>
<name>CL_MEM_HOST_NO_ACCESS</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>blur_x</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>blur_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_FAIL_ON_ERROR</name><argument_list>(<argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Failed to create x-coef buffer: "</literal>
<literal type="string">"%d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>coef_x</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>clCreateBuffer</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ocf</name><operator>.</operator><name>hwctx</name><operator>-&gt;</operator><name>context</name></name></expr></argument>,
<argument><expr><name>CL_MEM_READ_ONLY</name> <operator>|</operator>
<name>CL_MEM_COPY_HOST_PTR</name> <operator>|</operator>
<name>CL_MEM_HOST_NO_ACCESS</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>blur_y</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>blur_y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_FAIL_ON_ERROR</name><argument_list>(<argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Failed to create y-coef buffer: "</literal>
<literal type="string">"%d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>coef_y</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>matrix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>size_x</name> <operator>=</operator> <name>size_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>size_y</name> <operator>=</operator> <name>size_y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>amount</name> <operator>=</operator> <name>amount</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>matrix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>unsharp_opencl_filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UnsharpOpenCLContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>output</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name><name>global_work</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name><name>local_work</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_mem</name></type> <name>src</name></decl>, <decl><type ref="prev"/><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Filter input: %s, %ux%u (%"</literal><name>PRId64</name><literal type="string">").\n"</literal></expr></argument>,
<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>input</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>input</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>input</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>initialised</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>unsharp_opencl_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>unsharp_opencl_make_filter_params</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>output</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>src</name> <operator>=</operator> <operator>(</operator><name>cl_mem</name><operator>)</operator> <name><name>input</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>cl_mem</name><operator>)</operator><name><name>output</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CL_SET_KERNEL_ARG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>kernel</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cl_mem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_SET_KERNEL_ARG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>kernel</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cl_mem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_SET_KERNEL_ARG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>kernel</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>cl_int</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>size_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_SET_KERNEL_ARG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>kernel</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>cl_int</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>size_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_SET_KERNEL_ARG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>kernel</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>cl_float</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>global</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CL_SET_KERNEL_ARG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>kernel</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>cl_mem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>matrix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>CL_SET_KERNEL_ARG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>kernel</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>cl_mem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>coef_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_SET_KERNEL_ARG</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>kernel</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>cl_mem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>coef_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_opencl_filter_work_size_from_image</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>global_work</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>p</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>global</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">16</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>local_work</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>local_work</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Run kernel on plane %d "</literal>
<literal type="string">"(%"</literal><name>SIZE_SPECIFIER</name><literal type="string">"x%"</literal><name>SIZE_SPECIFIER</name><literal type="string">").\n"</literal></expr></argument>,
<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>global_work</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>global_work</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clEnqueueNDRangeKernel</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>kernel</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>global_work</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>global</name></name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>local_work</name></expr></else></ternary></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_FAIL_ON_ERROR</name><argument_list>(<argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Failed to enqueue kernel: %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clFinish</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_FAIL_ON_ERROR</name><argument_list>(<argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Failed to finish command queue: %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Filter output: %s, %ux%u (%"</literal><name>PRId64</name><literal type="string">").\n"</literal></expr></argument>,
<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>output</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>clFinish</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>unsharp_opencl_uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UnsharpOpenCLContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>matrix</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clReleaseMemObject</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>matrix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>coef_x</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clReleaseMemObject</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>coef_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>coef_y</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clReleaseMemObject</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>coef_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>kernel</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clReleaseKernel</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>kernel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to release "</literal>
<literal type="string">"kernel: %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>command_queue</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clReleaseCommandQueue</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cle</name> <operator>!=</operator> <name>CL_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to release "</literal>
<literal type="string">"command queue: %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_opencl_filter_uninit</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(UnsharpOpenCLContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>(AV_OPT_FLAG_FILTERING_PARAM | AV_OPT_FLAG_VIDEO_PARAM)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>unsharp_opencl_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"luma_msize_x"</literal></expr>, <expr><literal type="string">"Set luma mask horizontal diameter (pixels)"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>luma_size_x</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">5.0</literal></expr> }</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>MAX_DIAMETER</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"lx"</literal></expr>, <expr><literal type="string">"Set luma mask horizontal diameter (pixels)"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>luma_size_x</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">5.0</literal></expr> }</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>MAX_DIAMETER</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"luma_msize_y"</literal></expr>, <expr><literal type="string">"Set luma mask vertical diameter (pixels)"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>luma_size_y</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">5.0</literal></expr> }</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>MAX_DIAMETER</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ly"</literal></expr>, <expr><literal type="string">"Set luma mask vertical diameter (pixels)"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>luma_size_y</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">5.0</literal></expr> }</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>MAX_DIAMETER</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"luma_amount"</literal></expr>, <expr><literal type="string">"Set luma amount (multiplier)"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>luma_amount</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">1.0</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"la"</literal></expr>, <expr><literal type="string">"Set luma amount (multiplier)"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>luma_amount</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">1.0</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"chroma_msize_x"</literal></expr>, <expr><literal type="string">"Set chroma mask horizontal diameter (pixels after subsampling)"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>chroma_size_x</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">5.0</literal></expr> }</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>MAX_DIAMETER</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cx"</literal></expr>, <expr><literal type="string">"Set chroma mask horizontal diameter (pixels after subsampling)"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>chroma_size_x</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">5.0</literal></expr> }</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>MAX_DIAMETER</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"chroma_msize_y"</literal></expr>, <expr><literal type="string">"Set chroma mask vertical diameter (pixels after subsampling)"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>chroma_size_y</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">5.0</literal></expr> }</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>MAX_DIAMETER</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cy"</literal></expr>, <expr><literal type="string">"Set chroma mask vertical diameter (pixels after subsampling)"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>chroma_size_y</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">5.0</literal></expr> }</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>MAX_DIAMETER</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"chroma_amount"</literal></expr>, <expr><literal type="string">"Set chroma amount (multiplier)"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>chroma_amount</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">0.0</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ca"</literal></expr>, <expr><literal type="string">"Set chroma amount (multiplier)"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>chroma_amount</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">0.0</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>unsharp_opencl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>unsharp_opencl_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <operator>&amp;</operator><name>unsharp_opencl_filter_frame</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <operator>&amp;</operator><name>ff_opencl_filter_config_input</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>unsharp_opencl_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <operator>&amp;</operator><name>ff_opencl_filter_config_output</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_unsharp_opencl</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"unsharp_opencl"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Apply unsharp mask to input video"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>UnsharpOpenCLContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>unsharp_opencl_class</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <operator>&amp;</operator><name>ff_opencl_filter_init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <operator>&amp;</operator><name>unsharp_opencl_uninit</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <operator>&amp;</operator><name>ff_opencl_filter_query_formats</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>unsharp_opencl_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>unsharp_opencl_outputs</name></expr>,
<expr><operator>.</operator><name>flags_internal</name> <operator>=</operator> <name>FF_FILTER_FLAG_HWFRAME_AWARE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
