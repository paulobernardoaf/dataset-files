<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\opencl.h">

















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVFILTER_OPENCL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVFILTER_OPENCL_H</name></cpp:macro></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CL_USE_DEPRECATED_OPENCL_1_2_APIS</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bprint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/buffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hwcontext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hwcontext_opencl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixfmt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>OpenCLFilterContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>device_ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>device</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVOpenCLDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cl_program</name></type> <name>program</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>output_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>output_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>output_height</name></decl>;</decl_stmt>
}</block></struct></type> <name>OpenCLFilterContext</name>;</typedef>


<typedef>typedef <type><struct>struct <name>OpenCLKernelArg</name> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>arg_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>arg_val</name></decl>;</decl_stmt>
}</block></struct></type> <name>OpenCLKernelArg</name>;</typedef>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CL_SET_KERNEL_ARG</name><parameter_list>(<parameter><type><name>kernel</name></type></parameter>, <parameter><type><name>arg_num</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>arg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cle = clSetKernelArg(kernel, arg_num, sizeof(type), arg); if (cle != CL_SUCCESS) { av_log(avctx, AV_LOG_ERROR, "Failed to set kernel " "argument %d: error %d.\n", arg_num, cle); err = AVERROR(EIO); goto fail; }</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CL_FAIL_ON_ERROR</name><parameter_list>(<parameter><type><name>errcode</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (cle != CL_SUCCESS) { av_log(avctx, AV_LOG_ERROR, __VA_ARGS__); err = errcode; goto fail; } } while(0)</cpp:value></cpp:define>


















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CL_CREATE_KERNEL</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>kernel_name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { ctx-&gt;kernel_ ##kernel_name = clCreateKernel(ctx-&gt;ocf.program, #kernel_name, &amp;cle); CL_FAIL_ON_ERROR(AVERROR(EIO), "Failed to create %s kernel: %d.\n", #kernel_name, cle); } while(0)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CL_RELEASE_KERNEL</name><parameter_list>(<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (k) { cle = clReleaseKernel(k); if (cle != CL_SUCCESS) av_log(avctx, AV_LOG_ERROR, "Failed to release " "OpenCL kernel: %d.\n", cle); } } while(0)</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CL_RELEASE_MEMORY</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (m) { cle = clReleaseMemObject(m); if (cle != CL_SUCCESS) av_log(avctx, AV_LOG_ERROR, "Failed to release " "OpenCL memory: %d.\n", cle); } } while(0)</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CL_RELEASE_QUEUE</name><parameter_list>(<parameter><type><name>q</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (q) { cle = clReleaseCommandQueue(q); if (cle != CL_SUCCESS) av_log(avctx, AV_LOG_ERROR, "Failed to release " "OpenCL command queue: %d.\n", cle); } } while(0)</cpp:value></cpp:define>


















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CL_ENQUEUE_KERNEL_WITH_ARGS</name><parameter_list>(<parameter><type><name>queue</name></type></parameter>, <parameter><type><name>kernel</name></type></parameter>, <parameter><type><name>global_work_size</name></type></parameter>, <parameter><type><name>local_work_size</name></type></parameter>, <parameter><type><name>event</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { OpenCLKernelArg args[] = {__VA_ARGS__}; for (int i = 0; i &lt; FF_ARRAY_ELEMS(args); i++) { cle = clSetKernelArg(kernel, i, args[i].arg_size, args[i].arg_val); if (cle != CL_SUCCESS) { av_log(avctx, AV_LOG_ERROR, "Failed to set kernel " "argument %d: error %d.\n", i, cle); err = AVERROR(EIO); goto fail; } } cle = clEnqueueNDRangeKernel( queue, kernel, FF_ARRAY_ELEMS(global_work_size), NULL, global_work_size, local_work_size, 0, NULL, event ); CL_FAIL_ON_ERROR(AVERROR(EIO), "Failed to enqueue kernel: %d.\n", cle); } while (0)</cpp:value></cpp:define>

































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CL_RUN_KERNEL_WITH_ARGS</name><parameter_list>(<parameter><type><name>queue</name></type></parameter>, <parameter><type><name>kernel</name></type></parameter>, <parameter><type><name>global_work_size</name></type></parameter>, <parameter><type><name>local_work_size</name></type></parameter>, <parameter><type><name>event</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { CL_ENQUEUE_KERNEL_WITH_ARGS( queue, kernel, global_work_size, local_work_size, event, __VA_ARGS__ ); cle = clFinish(queue); CL_FAIL_ON_ERROR(AVERROR(EIO), "Failed to finish command queue: %d.\n", cle); } while (0)</cpp:value></cpp:define>
















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CL_CREATE_BUFFER_FLAGS</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>buffer_name</name></type></parameter>, <parameter><type><name>flags</name></type></parameter>, <parameter><type><name>size</name></type></parameter>, <parameter><type><name>host_ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { ctx-&gt;buffer_name = clCreateBuffer( ctx-&gt;ocf.hwctx-&gt;context, flags, size, host_ptr, &amp;cle ); CL_FAIL_ON_ERROR(AVERROR(EIO), "Failed to create buffer %s: %d.\n", #buffer_name, cle); } while(0)</cpp:value></cpp:define>
















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CL_BLOCKING_WRITE_BUFFER</name><parameter_list>(<parameter><type><name>queue</name></type></parameter>, <parameter><type><name>buffer</name></type></parameter>, <parameter><type><name>size</name></type></parameter>, <parameter><type><name>host_ptr</name></type></parameter>, <parameter><type><name>event</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { cle = clEnqueueWriteBuffer( queue, buffer, CL_TRUE, 0, size, host_ptr, 0, NULL, event ); CL_FAIL_ON_ERROR(AVERROR(EIO), "Failed to write buffer to device: %d.\n", cle); } while(0)</cpp:value></cpp:define>






















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CL_CREATE_BUFFER</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>buffer_name</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CL_CREATE_BUFFER_FLAGS(ctx, buffer_name, 0, size, NULL)</cpp:value></cpp:define>




<function_decl><type><name>int</name></type> <name>ff_opencl_filter_query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>int</name></type> <name>ff_opencl_filter_config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>int</name></type> <name>ff_opencl_filter_config_output</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>int</name></type> <name>ff_opencl_filter_init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>ff_opencl_filter_uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>int</name></type> <name>ff_opencl_filter_load_program</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>program_source_array</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>nb_strings</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>int</name></type> <name>ff_opencl_filter_load_program_from_file</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>int</name></type> <name>ff_opencl_filter_work_size_from_image</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>work_size</name></decl></parameter>,
<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>block_alignment</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>ff_opencl_print_const_matrix_3x3</name><parameter_list>(<parameter><decl><type><name>AVBPrint</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name_str</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name><name>mat</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>cl_ulong</name></type> <name>ff_opencl_get_event_time</name><parameter_list>(<parameter><decl><type><name>cl_event</name></type> <name>event</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
