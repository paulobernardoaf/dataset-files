<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\bufferqueue.h">




















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVFILTER_BUFFERQUEUE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVFILTER_BUFFERQUEUE_H</name></cpp:macro></cpp:define>















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FF_BUFQUEUE_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_BUFQUEUE_SIZE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>




<struct>struct <name>FFBufQueue</name> <block>{
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name><name>queue</name><index>[<expr><name>FF_BUFQUEUE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>head</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>available</name></decl>;</decl_stmt> 
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUCKET</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>queue-&gt;queue[(queue-&gt;head + (i)) % FF_BUFQUEUE_SIZE]</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ff_bufqueue_is_full</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>FFBufQueue</name></name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>queue</name><operator>-&gt;</operator><name>available</name></name> <operator>==</operator> <name>FF_BUFQUEUE_SIZE</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ff_bufqueue_add</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>FFBufQueue</name></name> <modifier>*</modifier></type><name>queue</name></decl></parameter>,
<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ff_bufqueue_is_full</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Buffer queue overflow, dropping.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>BUCKET</name><argument_list>(<argument><expr><operator>--</operator><name><name>queue</name><operator>-&gt;</operator><name>available</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>BUCKET</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>available</name></name><operator>++</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>ff_bufqueue_peek</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>FFBufQueue</name></name> <modifier>*</modifier></type><name>queue</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>index</name> <operator>&lt;</operator> <name><name>queue</name><operator>-&gt;</operator><name>available</name></name></expr> ?</condition><then> <expr><call><name>BUCKET</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>ff_bufqueue_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>FFBufQueue</name></name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name><name>queue</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name><name>queue</name><operator>-&gt;</operator><name>head</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>available</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>available</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name><name>queue</name><operator>-&gt;</operator><name>head</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <operator>(</operator><name><name>queue</name><operator>-&gt;</operator><name>head</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>FF_BUFQUEUE_SIZE</name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ff_bufqueue_discard_all</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>FFBufQueue</name></name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name><name>queue</name><operator>-&gt;</operator><name>available</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>ff_bufqueue_get</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BUCKET</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
