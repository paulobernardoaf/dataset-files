<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vf_nlmeans.c">






























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vf_nlmeans.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>

<struct>struct <name>weighted_avg</name> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>total_weight</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>sum</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct <name>NLMeansContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_planes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>chroma_w</name></decl>, <name>chroma_h</name>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>pdiff_scale</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>double</name></type> <name>sigma</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>patch_size</name></decl>, <name>patch_hsize</name>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>patch_size_uv</name></decl>, <name>patch_hsize_uv</name>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>research_size</name></decl>, <name>research_hsize</name>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>research_size_uv</name></decl>, <name>research_hsize_uv</name>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>ii_orig</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>ii</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>ii_w</name></decl>, <name>ii_h</name>;</decl_stmt> 
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>ii_lz_32</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>weighted_avg</name></name> <modifier>*</modifier></type><name>wa</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>wa_linesize</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>weight_lut</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>max_meaningful_diff</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>NLMeansDSPContext</name></type> <name>dsp</name></decl>;</decl_stmt>
}</block></struct></type> <name>NLMeansContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(NLMeansContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_VIDEO_PARAM</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>nlmeans_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"denoising strength"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sigma</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">1.0</literal></expr> }</block></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">30.0</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"p"</literal></expr>, <expr><literal type="string">"patch size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>patch_size</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">3</literal><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pc"</literal></expr>, <expr><literal type="string">"patch size for chroma planes"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>patch_size_uv</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"r"</literal></expr>, <expr><literal type="string">"research window"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>research_size</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">7</literal><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rc"</literal></expr>, <expr><literal type="string">"research window for chroma planes"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>research_size_uv</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>nlmeans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_YUV410P</name></expr>, <expr><name>AV_PIX_FMT_YUV411P</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_YUV422P</name></expr>,
<expr><name>AV_PIX_FMT_YUV440P</name></expr>, <expr><name>AV_PIX_FMT_YUV444P</name></expr>,
<expr><name>AV_PIX_FMT_YUVJ444P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ440P</name></expr>,
<expr><name>AV_PIX_FMT_YUVJ422P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ420P</name></expr>,
<expr><name>AV_PIX_FMT_YUVJ411P</name></expr>,
<expr><name>AV_PIX_FMT_GRAY8</name></expr>, <expr><name>AV_PIX_FMT_GBRP</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>void</name></type> <name>compute_safe_ssd_integral_image_c</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dst_linesize_32</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>linesize1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>linesize2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>dst_top</name> <init>= <expr><name>dst</name> <operator>-</operator> <name>dst_linesize_32</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>w</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>w</name> <operator>&gt;=</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name>h</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d0</name> <init>= <expr><name><name>s1</name><index>[<expr><name>x</name></expr> ]</index></name> <operator>-</operator> <name><name>s2</name><index>[<expr><name>x</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d1</name> <init>= <expr><name><name>s1</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>s2</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d2</name> <init>= <expr><name><name>s1</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>s2</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d3</name> <init>= <expr><name><name>s1</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>s2</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr> ]</index></name> <operator>=</operator> <name><name>dst_top</name><index>[<expr><name>x</name></expr> ]</index></name> <operator>-</operator> <name><name>dst_top</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>d0</name><operator>*</operator><name>d0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>dst_top</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>dst_top</name><index>[<expr><name>x</name></expr> ]</index></name> <operator>+</operator> <name>d1</name><operator>*</operator><name>d1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>dst_top</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>dst_top</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>d2</name><operator>*</operator><name>d2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>dst_top</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>dst_top</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>d3</name><operator>*</operator><name>d3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr> ]</index></name> <operator>+=</operator> <name><name>dst</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>dst</name><index>[<expr><name>x</name></expr> ]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>dst</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name><name>dst</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>s1</name> <operator>+=</operator> <name>linesize1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>+=</operator> <name>linesize2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_linesize_32</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_top</name> <operator>+=</operator> <name>dst_linesize_32</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

























<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>compute_unsafe_ssd_integral_image</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dst_linesize_32</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>startx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>starty</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>linesize</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>offx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sh</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>starty</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>starty</name> <operator>+</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>acc</name> <init>= <expr><name><name>dst</name><index>[<expr><name>y</name><operator>*</operator><name>dst_linesize_32</name> <operator>+</operator> <name>startx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>dst</name><index>[<expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>dst_linesize_32</name> <operator>+</operator> <name>startx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>s1y</name> <init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>y</name> <operator>-</operator> <name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sh</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>s2y</name> <init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>y</name> <operator>-</operator> <operator>(</operator><name>r</name> <operator>+</operator> <name>offy</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sh</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>startx</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>startx</name> <operator>+</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>s1x</name> <init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sw</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>s2x</name> <init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <operator>(</operator><name>r</name> <operator>+</operator> <name>offx</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sw</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>v1</name> <init>= <expr><name><name>src</name><index>[<expr><name>s1y</name><operator>*</operator><name>linesize</name> <operator>+</operator> <name>s1x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>v2</name> <init>= <expr><name><name>src</name><index>[<expr><name>s2y</name><operator>*</operator><name>linesize</name> <operator>+</operator> <name>s2x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d</name> <init>= <expr><name>v1</name> <operator>-</operator> <name>v2</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>acc</name> <operator>+=</operator> <name>d</name> <operator>*</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>y</name><operator>*</operator><name>dst_linesize_32</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>dst_linesize_32</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>+</operator> <name>acc</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <name>void</name></type> <name>compute_ssd_integral_image</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NLMeansDSPContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>ii</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>ii_linesize_32</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>linesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offy</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ii_w</name> <init>= <expr><name>w</name> <operator>+</operator> <name>e</name><operator>*</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ii_h</name> <init>= <expr><name>h</name> <operator>+</operator> <name>e</name><operator>*</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>s1x</name> <init>= <expr><name>e</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>s1y</name> <init>= <expr><name>e</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>s2x</name> <init>= <expr><name>e</name> <operator>+</operator> <name>offx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>s2y</name> <init>= <expr><name>e</name> <operator>+</operator> <name>offy</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>startx_safe</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>s1x</name></expr></argument>, <argument><expr><name>s2x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>starty_safe</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>s1y</name></expr></argument>, <argument><expr><name>s2y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>u_endx_safe</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>s1x</name> <operator>+</operator> <name>w</name></expr></argument>, <argument><expr><name>s2x</name> <operator>+</operator> <name>w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>endy_safe</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>s1y</name> <operator>+</operator> <name>h</name></expr></argument>, <argument><expr><name>s2y</name> <operator>+</operator> <name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>safe_pw</name> <init>= <expr><operator>(</operator><name>u_endx_safe</name> <operator>-</operator> <name>startx_safe</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xf</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>safe_ph</name> <init>= <expr><name>endy_safe</name> <operator>-</operator> <name>starty_safe</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>endx_safe</name> <init>= <expr><name>startx_safe</name> <operator>+</operator> <name>safe_pw</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>compute_unsafe_ssd_integral_image</name><argument_list>(<argument><expr><name>ii</name></expr></argument>, <argument><expr><name>ii_linesize_32</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>src</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>,
<argument><expr><name>offx</name></expr></argument>, <argument><expr><name>offy</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>,
<argument><expr><name>ii_w</name></expr></argument>, <argument><expr><name>starty_safe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>compute_unsafe_ssd_integral_image</name><argument_list>(<argument><expr><name>ii</name></expr></argument>, <argument><expr><name>ii_linesize_32</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>starty_safe</name></expr></argument>,
<argument><expr><name>src</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>,
<argument><expr><name>offx</name></expr></argument>, <argument><expr><name>offy</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>,
<argument><expr><name>startx_safe</name></expr></argument>, <argument><expr><name>safe_ph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>startx_safe</name> <operator>-</operator> <name>s1x</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>startx_safe</name> <operator>-</operator> <name>s1x</name> <operator>&lt;</operator> <name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>starty_safe</name> <operator>-</operator> <name>s1y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>starty_safe</name> <operator>-</operator> <name>s1y</name> <operator>&lt;</operator> <name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>startx_safe</name> <operator>-</operator> <name>s2x</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>startx_safe</name> <operator>-</operator> <name>s2x</name> <operator>&lt;</operator> <name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>starty_safe</name> <operator>-</operator> <name>s2y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>starty_safe</name> <operator>-</operator> <name>s2y</name> <operator>&lt;</operator> <name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>safe_pw</name> <operator>&amp;&amp;</operator> <name>safe_ph</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>dsp</name><operator>-&gt;</operator><name>compute_safe_ssd_integral_image</name></name><argument_list>(<argument><expr><name>ii</name> <operator>+</operator> <name>starty_safe</name><operator>*</operator><name>ii_linesize_32</name> <operator>+</operator> <name>startx_safe</name></expr></argument>, <argument><expr><name>ii_linesize_32</name></expr></argument>,
<argument><expr><name>src</name> <operator>+</operator> <operator>(</operator><name>starty_safe</name> <operator>-</operator> <name>s1y</name><operator>)</operator> <operator>*</operator> <name>linesize</name> <operator>+</operator> <operator>(</operator><name>startx_safe</name> <operator>-</operator> <name>s1x</name><operator>)</operator></expr></argument>, <argument><expr><name>linesize</name></expr></argument>,
<argument><expr><name>src</name> <operator>+</operator> <operator>(</operator><name>starty_safe</name> <operator>-</operator> <name>s2y</name><operator>)</operator> <operator>*</operator> <name>linesize</name> <operator>+</operator> <operator>(</operator><name>startx_safe</name> <operator>-</operator> <name>s2x</name><operator>)</operator></expr></argument>, <argument><expr><name>linesize</name></expr></argument>,
<argument><expr><name>safe_pw</name></expr></argument>, <argument><expr><name>safe_ph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>compute_unsafe_ssd_integral_image</name><argument_list>(<argument><expr><name>ii</name></expr></argument>, <argument><expr><name>ii_linesize_32</name></expr></argument>,
<argument><expr><name>endx_safe</name></expr></argument>, <argument><expr><name>starty_safe</name></expr></argument>,
<argument><expr><name>src</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>,
<argument><expr><name>offx</name></expr></argument>, <argument><expr><name>offy</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>,
<argument><expr><name>ii_w</name> <operator>-</operator> <name>endx_safe</name></expr></argument>, <argument><expr><name>safe_ph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>compute_unsafe_ssd_integral_image</name><argument_list>(<argument><expr><name>ii</name></expr></argument>, <argument><expr><name>ii_linesize_32</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>endy_safe</name></expr></argument>,
<argument><expr><name>src</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>,
<argument><expr><name>offx</name></expr></argument>, <argument><expr><name>offy</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>,
<argument><expr><name>ii_w</name></expr></argument>, <argument><expr><name>ii_h</name> <operator>-</operator> <name>endy_safe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NLMeansContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>e</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>research_hsize</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>research_hsize_uv</name></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>patch_hsize</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>patch_hsize_uv</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_w</name></name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_h</name></name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>=</operator> <call><name>av_pix_fmt_count_planes</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




















<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ii_w</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name> <operator>+</operator> <name>e</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ii_h</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>+</operator> <name>e</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ii_lz_32</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ii_w</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ii_orig</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ii_h</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ii_lz_32</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>ii_orig</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>ii_orig</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ii</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ii_orig</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>ii_lz_32</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>wa_linesize</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>wa</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>wa_linesize</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>wa</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>wa</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>thread_data</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>src_linesize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>startx</name></decl>, <decl><type ref="prev"/><name>starty</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>endx</name></decl>, <decl><type ref="prev"/><name>endy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>ii_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nlmeans_slice</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_jobs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NLMeansContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>td</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name>src_linesize</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>src_linesize</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>process_h</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>endy</name></name> <operator>-</operator> <name><name>td</name><operator>-&gt;</operator><name>starty</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slice_start</name> <init>= <expr><operator>(</operator><name>process_h</name> <operator>*</operator> <name>jobnr</name> <operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slice_end</name> <init>= <expr><operator>(</operator><name>process_h</name> <operator>*</operator> <operator>(</operator><name>jobnr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nb_jobs</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>starty</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>starty</name></name> <operator>+</operator> <name>slice_start</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>endy</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>starty</name></name> <operator>+</operator> <name>slice_end</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>p</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>ii</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>ii_start</name></name> <operator>+</operator> <operator>(</operator><name>starty</name> <operator>-</operator> <name>p</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>ii_lz_32</name></name> <operator>-</operator> <name>p</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dist_b</name> <init>= <expr><literal type="number">2</literal><operator>*</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dist_d</name> <init>= <expr><name>dist_b</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>ii_lz_32</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dist_e</name> <init>= <expr><name>dist_d</name> <operator>+</operator> <name>dist_b</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>starty</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>endy</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>src</name></name> <operator>+</operator> <name>y</name><operator>*</operator><name>src_linesize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>weighted_avg</name></name> <modifier>*</modifier></type><name>wa</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>wa</name></name> <operator>+</operator> <name>y</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>wa_linesize</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>startx</name></name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>td</name><operator>-&gt;</operator><name>endx</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>





























<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>a</name> <init>= <expr><name><name>ii</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>b</name> <init>= <expr><name><name>ii</name><index>[<expr><name>x</name> <operator>+</operator> <name>dist_b</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>d</name> <init>= <expr><name><name>ii</name><index>[<expr><name>x</name> <operator>+</operator> <name>dist_d</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>e</name> <init>= <expr><name><name>ii</name><index>[<expr><name>x</name> <operator>+</operator> <name>dist_e</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>patch_diff_sq</name> <init>= <expr><name>e</name> <operator>-</operator> <name>d</name> <operator>-</operator> <name>b</name> <operator>+</operator> <name>a</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>patch_diff_sq</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>max_meaningful_diff</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>weight</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>weight_lut</name><index>[<expr><name>patch_diff_sq</name></expr>]</index></name></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><name><name>wa</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>total_weight</name> <operator>+=</operator> <name>weight</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wa</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>sum</name> <operator>+=</operator> <name>weight</name> <operator>*</operator> <name><name>src</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>ii</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>ii_lz_32</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>weight_averages</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dst_linesize</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>src_linesize</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>weighted_avg</name></name> <modifier>*</modifier></type><name>wa</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>wa_linesize</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>wa</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>total_weight</name> <operator>+=</operator> <literal type="number">1.f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wa</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>sum</name> <operator>+=</operator> <literal type="number">1.f</literal> <operator>*</operator> <name><name>src</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>wa</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>sum</name> <operator>/</operator> <name><name>wa</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>total_weight</name> <operator>+</operator> <literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>wa</name> <operator>+=</operator> <name>wa_linesize</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nlmeans_plane</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dst_linesize</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>src_linesize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>offx</name></decl>, <decl><type ref="prev"/><name>offy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NLMeansContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>e</name> <init>= <expr><name>r</name> <operator>+</operator> <name>p</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>centered_ii</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ii</name></name> <operator>+</operator> <name>e</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>ii_lz_32</name></name> <operator>+</operator> <name>e</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>wa</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>wa_linesize</name></name> <operator>*</operator> <name>h</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>wa</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>offy</name> <operator>=</operator> <operator>-</operator><name>r</name></expr>;</init> <condition><expr><name>offy</name> <operator>&lt;=</operator> <name>r</name></expr>;</condition> <incr><expr><name>offy</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>offx</name> <operator>=</operator> <operator>-</operator><name>r</name></expr>;</init> <condition><expr><name>offx</name> <operator>&lt;=</operator> <name>r</name></expr>;</condition> <incr><expr><name>offx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>offx</name> <operator>||</operator> <name>offy</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>thread_data</name></name></type> <name>td</name> <init>= <expr><block>{
<expr><operator>.</operator><name>src</name> <operator>=</operator> <name>src</name> <operator>+</operator> <name>offy</name><operator>*</operator><name>src_linesize</name> <operator>+</operator> <name>offx</name></expr>,
<expr><operator>.</operator><name>src_linesize</name> <operator>=</operator> <name>src_linesize</name></expr>,
<expr><operator>.</operator><name>startx</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><name>offx</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>starty</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><name>offy</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>endx</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>w</name> <operator>-</operator> <name>offx</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>endy</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <name>offy</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>ii_start</name> <operator>=</operator> <name>centered_ii</name> <operator>+</operator> <name>offy</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>ii_lz_32</name></name> <operator>+</operator> <name>offx</name></expr>,
<expr><operator>.</operator><name>p</name> <operator>=</operator> <name>p</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>compute_ssd_integral_image</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dsp</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ii</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ii_lz_32</name></name></expr></argument>,
<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_linesize</name></expr></argument>,
<argument><expr><name>offx</name></expr></argument>, <argument><expr><name>offy</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>nlmeans_slice</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>td</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>td</name><operator>.</operator><name>endy</name></name> <operator>-</operator> <name><name>td</name><operator>.</operator><name>starty</name></name></expr></argument>, <argument><expr><call><name>ff_filter_get_nb_threads</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>weight_averages</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_linesize</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_linesize</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>wa</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>wa_linesize</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NLMeansContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w</name> <init>= <expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>chroma_w</name></name></expr> </then><else>: <expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name> <init>= <expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>chroma_h</name></name></expr> </then><else>: <expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>p</name> <init>= <expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>patch_hsize_uv</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>patch_hsize</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>r</name> <init>= <expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>research_hsize_uv</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>research_hsize</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>nlmeans_plane</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_ODD_FIELD</name><parameter_list>(<parameter><type><name>field</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (!(s-&gt;field &amp; 1)) { s-&gt;field |= 1; av_log(ctx, AV_LOG_WARNING, name " size must be odd, " "setting it to %d\n", s-&gt;field); } } while (0)</cpp:value></cpp:define>







<function><type><name>void</name></type> <name>ff_nlmeans_init</name><parameter_list>(<parameter><decl><type><name>NLMeansDSPContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>compute_safe_ssd_integral_image</name></name> <operator>=</operator> <name>compute_safe_ssd_integral_image_c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_AARCH64</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_nlmeans_init_aarch64</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NLMeansContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>h</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>sigma</name></name> <operator>*</operator> <literal type="number">10.</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pdiff_scale</name></name> <operator>=</operator> <literal type="number">1.</literal> <operator>/</operator> <operator>(</operator><name>h</name> <operator>*</operator> <name>h</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_meaningful_diff</name></name> <operator>=</operator> <call><name>log</name><argument_list>(<argument><expr><literal type="number">255.</literal></expr></argument>)</argument_list></call> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>pdiff_scale</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>weight_lut</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>max_meaningful_diff</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>weight_lut</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>weight_lut</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>max_meaningful_diff</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>weight_lut</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>exp</name><argument_list>(<argument><expr><operator>-</operator><name>i</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>pdiff_scale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>CHECK_ODD_FIELD</name><argument_list>(<argument><expr><name>research_size</name></expr></argument>, <argument><expr><literal type="string">"Luma research window"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ODD_FIELD</name><argument_list>(<argument><expr><name>patch_size</name></expr></argument>, <argument><expr><literal type="string">"Luma patch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>research_size_uv</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>research_size_uv</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>research_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>patch_size_uv</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>patch_size_uv</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>patch_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CHECK_ODD_FIELD</name><argument_list>(<argument><expr><name>research_size_uv</name></expr></argument>, <argument><expr><literal type="string">"Chroma research window"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ODD_FIELD</name><argument_list>(<argument><expr><name>patch_size_uv</name></expr></argument>, <argument><expr><literal type="string">"Chroma patch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>research_hsize</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>research_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>research_hsize_uv</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>research_size_uv</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>patch_hsize</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>patch_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>patch_hsize_uv</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>patch_size_uv</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Research window: %dx%d / %dx%d, patch size: %dx%d / %dx%d\n"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>research_size</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>research_size</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>research_size_uv</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>research_size_uv</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>patch_size</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>patch_size</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>patch_size_uv</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>patch_size_uv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_nlmeans_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>NLMeansContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>weight_lut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ii_orig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>wa</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>nlmeans_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>nlmeans_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_nlmeans</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"nlmeans"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Non-local means denoiser."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>NLMeansContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>nlmeans_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>nlmeans_outputs</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>nlmeans_class</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC</name> <operator>|</operator> <name>AVFILTER_FLAG_SLICE_THREADS</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
