<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\dnn\dnn_backend_native_layer_depth2space.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnn_backend_native.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnn_backend_native_layer_depth2space.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>dnn_load_layer_depth2space</name><parameter_list>(<parameter><decl><type><name>Layer</name> <modifier>*</modifier></type><name>layer</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>model_file_context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>file_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DepthToSpaceParams</name> <modifier>*</modifier></type><name>params</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dnn_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>params</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>params</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>params</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>block_size</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>avio_rl32</name><argument_list>(<argument><expr><name>model_file_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dnn_size</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>layer</name><operator>-&gt;</operator><name>input_operand_indexes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>avio_rl32</name><argument_list>(<argument><expr><name>model_file_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>layer</name><operator>-&gt;</operator><name>output_operand_index</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>avio_rl32</name><argument_list>(<argument><expr><name>model_file_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dnn_size</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>layer</name><operator>-&gt;</operator><name>params</name></name> <operator>=</operator> <name>params</name></expr>;</expr_stmt>

<return>return <expr><name>dnn_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dnn_execute_layer_depth2space</name><parameter_list>(<parameter><decl><type><name>DnnOperand</name> <modifier>*</modifier></type><name>operands</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>input_operand_indexes</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>output_operand_index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>parameters</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>DepthToSpaceParams</name> <modifier>*</modifier></type><name>params</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>DepthToSpaceParams</name> <operator>*</operator><operator>)</operator><name>parameters</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_size</name> <init>= <expr><name><name>params</name><operator>-&gt;</operator><name>block_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>input_operand_index</name> <init>= <expr><name><name>input_operand_indexes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>number</name> <init>= <expr><name><name>operands</name><index>[<expr><name>input_operand_index</name></expr>]</index></name><operator>.</operator><name><name>dims</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name><name>operands</name><index>[<expr><name>input_operand_index</name></expr>]</index></name><operator>.</operator><name><name>dims</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name><name>operands</name><index>[<expr><name>input_operand_index</name></expr>]</index></name><operator>.</operator><name><name>dims</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>channels</name> <init>= <expr><name><name>operands</name><index>[<expr><name>input_operand_index</name></expr>]</index></name><operator>.</operator><name><name>dims</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>input</name> <init>= <expr><name><name>operands</name><index>[<expr><name>input_operand_index</name></expr>]</index></name><operator>.</operator><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>by</name></decl>, <decl><type ref="prev"/><name>bx</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_channels</name> <init>= <expr><name>channels</name> <operator>/</operator> <operator>(</operator><name>block_size</name> <operator>*</operator> <name>block_size</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>output_linesize</name> <init>= <expr><name>width</name> <operator>*</operator> <name>channels</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>by_linesize</name> <init>= <expr><name>output_linesize</name> <operator>/</operator> <name>block_size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x_linesize</name> <init>= <expr><name>new_channels</name> <operator>*</operator> <name>block_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DnnOperand</name> <modifier>*</modifier></type><name>output_operand</name> <init>= <expr><operator>&amp;</operator><name><name>operands</name><index>[<expr><name>output_operand_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>output_operand</name><operator>-&gt;</operator><name>dims</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>number</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output_operand</name><operator>-&gt;</operator><name>dims</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>height</name> <operator>*</operator> <name>block_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output_operand</name><operator>-&gt;</operator><name>dims</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>width</name> <operator>*</operator> <name>block_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output_operand</name><operator>-&gt;</operator><name>dims</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>new_channels</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output_operand</name><operator>-&gt;</operator><name>data_type</name></name> <operator>=</operator> <name><name>operands</name><index>[<expr><name>input_operand_index</name></expr>]</index></name><operator>.</operator><name>data_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output_operand</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <call><name>calculate_operand_data_length</name><argument_list>(<argument><expr><name>output_operand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output_operand</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>av_realloc</name><argument_list>(<argument><expr><name><name>output_operand</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>output_operand</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>output_operand</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>output</name> <operator>=</operator> <name><name>output_operand</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><operator>++</operator><name>y</name></expr></incr>)</control><block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control><block>{<block_content>
<for>for <control>(<init><expr><name>by</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>by</name> <operator>&lt;</operator> <name>block_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>by</name></expr></incr>)</control><block>{<block_content>
<for>for <control>(<init><expr><name>bx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bx</name> <operator>&lt;</operator> <name>block_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>bx</name></expr></incr>)</control><block>{<block_content>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>new_channels</name></expr>;</condition> <incr><expr><operator>++</operator><name>ch</name></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>by</name> <operator>*</operator> <name>by_linesize</name> <operator>+</operator> <name>x</name> <operator>*</operator> <name>x_linesize</name> <operator>+</operator> <name>bx</name> <operator>*</operator> <name>new_channels</name> <operator>+</operator> <name>ch</name></expr>]</index></name> <operator>=</operator> <name><name>input</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>input</name> <operator>+=</operator> <name>new_channels</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><name>output</name> <operator>+=</operator> <name>output_linesize</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
