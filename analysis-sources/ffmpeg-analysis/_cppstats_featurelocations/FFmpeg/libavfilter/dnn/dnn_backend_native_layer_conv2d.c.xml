<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\dnn\dnn_backend_native_layer_conv2d.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnn_backend_native_layer_conv2d.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLAMP_TO_EDGE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &lt; 0 ? 0 : ((x) &gt;= (w) ? (w - 1) : (x)))</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>dnn_load_layer_conv2d</name><parameter_list>(<parameter><decl><type><name>Layer</name> <modifier>*</modifier></type><name>layer</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>model_file_context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>file_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ConvolutionalParams</name> <modifier>*</modifier></type><name>conv_params</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>kernel_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dnn_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>conv_params</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>conv_params</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>conv_params</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>conv_params</name><operator>-&gt;</operator><name>dilation</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>avio_rl32</name><argument_list>(<argument><expr><name>model_file_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conv_params</name><operator>-&gt;</operator><name>padding_method</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>avio_rl32</name><argument_list>(<argument><expr><name>model_file_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conv_params</name><operator>-&gt;</operator><name>activation</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>avio_rl32</name><argument_list>(<argument><expr><name>model_file_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conv_params</name><operator>-&gt;</operator><name>input_num</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>avio_rl32</name><argument_list>(<argument><expr><name>model_file_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conv_params</name><operator>-&gt;</operator><name>output_num</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>avio_rl32</name><argument_list>(<argument><expr><name>model_file_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conv_params</name><operator>-&gt;</operator><name>kernel_size</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>avio_rl32</name><argument_list>(<argument><expr><name>model_file_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conv_params</name><operator>-&gt;</operator><name>has_bias</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>avio_rl32</name><argument_list>(<argument><expr><name>model_file_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dnn_size</name> <operator>+=</operator> <literal type="number">28</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>kernel_size</name> <operator>=</operator> <name><name>conv_params</name><operator>-&gt;</operator><name>input_num</name></name> <operator>*</operator> <name><name>conv_params</name><operator>-&gt;</operator><name>output_num</name></name> <operator>*</operator>
<name><name>conv_params</name><operator>-&gt;</operator><name>kernel_size</name></name> <operator>*</operator> <name><name>conv_params</name><operator>-&gt;</operator><name>kernel_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dnn_size</name> <operator>+=</operator> <name>kernel_size</name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>conv_params</name><operator>-&gt;</operator><name>has_bias</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dnn_size</name> <operator>+=</operator> <name><name>conv_params</name><operator>-&gt;</operator><name>output_num</name></name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dnn_size</name> <operator>&gt;</operator> <name>file_size</name> <operator>||</operator> <name><name>conv_params</name><operator>-&gt;</operator><name>input_num</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>conv_params</name><operator>-&gt;</operator><name>output_num</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>conv_params</name><operator>-&gt;</operator><name>kernel_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conv_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>conv_params</name><operator>-&gt;</operator><name>kernel</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>kernel_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>conv_params</name><operator>-&gt;</operator><name>kernel</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conv_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>kernel_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>conv_params</name><operator>-&gt;</operator><name>kernel</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_int2float</name><argument_list>(<argument><expr><call><name>avio_rl32</name><argument_list>(<argument><expr><name>model_file_context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>conv_params</name><operator>-&gt;</operator><name>biases</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>conv_params</name><operator>-&gt;</operator><name>has_bias</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>conv_params</name><operator>-&gt;</operator><name>biases</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>conv_params</name><operator>-&gt;</operator><name>output_num</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>conv_params</name><operator>-&gt;</operator><name>biases</name></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conv_params</name><operator>-&gt;</operator><name>kernel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conv_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>conv_params</name><operator>-&gt;</operator><name>output_num</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name><name>conv_params</name><operator>-&gt;</operator><name>biases</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_int2float</name><argument_list>(<argument><expr><call><name>avio_rl32</name><argument_list>(<argument><expr><name>model_file_context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>layer</name><operator>-&gt;</operator><name>params</name></name> <operator>=</operator> <name>conv_params</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>layer</name><operator>-&gt;</operator><name>input_operand_indexes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>avio_rl32</name><argument_list>(<argument><expr><name>model_file_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>layer</name><operator>-&gt;</operator><name>output_operand_index</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>avio_rl32</name><argument_list>(<argument><expr><name>model_file_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dnn_size</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<return>return <expr><name>dnn_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dnn_execute_layer_conv2d</name><parameter_list>(<parameter><decl><type><name>DnnOperand</name> <modifier>*</modifier></type><name>operands</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>input_operand_indexes</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>output_operand_index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>parameters</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>input_operand_index</name> <init>= <expr><name><name>input_operand_indexes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>number</name> <init>= <expr><name><name>operands</name><index>[<expr><name>input_operand_index</name></expr>]</index></name><operator>.</operator><name><name>dims</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name><name>operands</name><index>[<expr><name>input_operand_index</name></expr>]</index></name><operator>.</operator><name><name>dims</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name><name>operands</name><index>[<expr><name>input_operand_index</name></expr>]</index></name><operator>.</operator><name><name>dims</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>channel</name> <init>= <expr><name><name>operands</name><index>[<expr><name>input_operand_index</name></expr>]</index></name><operator>.</operator><name><name>dims</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>input</name> <init>= <expr><name><name>operands</name><index>[<expr><name>input_operand_index</name></expr>]</index></name><operator>.</operator><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ConvolutionalParams</name> <modifier>*</modifier></type><name>conv_params</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ConvolutionalParams</name> <operator>*</operator><operator>)</operator><name>parameters</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>radius</name> <init>= <expr><name><name>conv_params</name><operator>-&gt;</operator><name>kernel_size</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_linesize</name> <init>= <expr><name>width</name> <operator>*</operator> <name><name>conv_params</name><operator>-&gt;</operator><name>input_num</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>filter_linesize</name> <init>= <expr><name><name>conv_params</name><operator>-&gt;</operator><name>kernel_size</name></name> <operator>*</operator> <name><name>conv_params</name><operator>-&gt;</operator><name>input_num</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>filter_size</name> <init>= <expr><name><name>conv_params</name><operator>-&gt;</operator><name>kernel_size</name></name> <operator>*</operator> <name>filter_linesize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pad_size</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>conv_params</name><operator>-&gt;</operator><name>padding_method</name></name> <operator>==</operator> <name>VALID</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name><name>conv_params</name><operator>-&gt;</operator><name>kernel_size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>conv_params</name><operator>-&gt;</operator><name>dilation</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DnnOperand</name> <modifier>*</modifier></type><name>output_operand</name> <init>= <expr><operator>&amp;</operator><name><name>operands</name><index>[<expr><name>output_operand_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>output_operand</name><operator>-&gt;</operator><name>dims</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>number</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output_operand</name><operator>-&gt;</operator><name>dims</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>height</name> <operator>-</operator> <name>pad_size</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output_operand</name><operator>-&gt;</operator><name>dims</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>width</name> <operator>-</operator> <name>pad_size</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output_operand</name><operator>-&gt;</operator><name>dims</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>conv_params</name><operator>-&gt;</operator><name>output_num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output_operand</name><operator>-&gt;</operator><name>data_type</name></name> <operator>=</operator> <name><name>operands</name><index>[<expr><name>input_operand_index</name></expr>]</index></name><operator>.</operator><name>data_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output_operand</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <call><name>calculate_operand_data_length</name><argument_list>(<argument><expr><name>output_operand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output_operand</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>av_realloc</name><argument_list>(<argument><expr><name><name>output_operand</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>output_operand</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>output_operand</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>output</name> <operator>=</operator> <name><name>output_operand</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>channel</name> <operator>==</operator> <name><name>conv_params</name><operator>-&gt;</operator><name>input_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>pad_size</name></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name> <operator>-</operator> <name>pad_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>y</name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>pad_size</name></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name> <operator>-</operator> <name>pad_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>n_filter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n_filter</name> <operator>&lt;</operator> <name><name>conv_params</name><operator>-&gt;</operator><name>output_num</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>n_filter</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>conv_params</name><operator>-&gt;</operator><name>has_bias</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>n_filter</name></expr>]</index></name> <operator>=</operator> <name><name>conv_params</name><operator>-&gt;</operator><name>biases</name><index>[<expr><name>n_filter</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>n_filter</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>conv_params</name><operator>-&gt;</operator><name>input_num</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>ch</name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>kernel_y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>kernel_y</name> <operator>&lt;</operator> <name><name>conv_params</name><operator>-&gt;</operator><name>kernel_size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>kernel_y</name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>kernel_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>kernel_x</name> <operator>&lt;</operator> <name><name>conv_params</name><operator>-&gt;</operator><name>kernel_size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>kernel_x</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>input_pel</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>conv_params</name><operator>-&gt;</operator><name>padding_method</name></name> <operator>==</operator> <name>SAME_CLAMP_TO_EDGE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y_pos</name> <init>= <expr><call><name>CLAMP_TO_EDGE</name><argument_list>(<argument><expr><name>y</name> <operator>+</operator> <operator>(</operator><name>kernel_y</name> <operator>-</operator> <name>radius</name><operator>)</operator> <operator>*</operator> <name><name>conv_params</name><operator>-&gt;</operator><name>dilation</name></name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x_pos</name> <init>= <expr><call><name>CLAMP_TO_EDGE</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <operator>(</operator><name>kernel_x</name> <operator>-</operator> <name>radius</name><operator>)</operator> <operator>*</operator> <name><name>conv_params</name><operator>-&gt;</operator><name>dilation</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>input_pel</name> <operator>=</operator> <name><name>input</name><index>[<expr><name>y_pos</name> <operator>*</operator> <name>src_linesize</name> <operator>+</operator> <name>x_pos</name> <operator>*</operator> <name><name>conv_params</name><operator>-&gt;</operator><name>input_num</name></name> <operator>+</operator> <name>ch</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y_pos</name> <init>= <expr><name>y</name> <operator>+</operator> <operator>(</operator><name>kernel_y</name> <operator>-</operator> <name>radius</name><operator>)</operator> <operator>*</operator> <name><name>conv_params</name><operator>-&gt;</operator><name>dilation</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x_pos</name> <init>= <expr><name>x</name> <operator>+</operator> <operator>(</operator><name>kernel_x</name> <operator>-</operator> <name>radius</name><operator>)</operator> <operator>*</operator> <name><name>conv_params</name><operator>-&gt;</operator><name>dilation</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>input_pel</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>x_pos</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>x_pos</name> <operator>&gt;=</operator> <name>width</name> <operator>||</operator> <name>y_pos</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>y_pos</name> <operator>&gt;=</operator> <name>height</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0.0</literal></expr> </then><else>:
<expr><name><name>input</name><index>[<expr><name>y_pos</name> <operator>*</operator> <name>src_linesize</name> <operator>+</operator> <name>x_pos</name> <operator>*</operator> <name><name>conv_params</name><operator>-&gt;</operator><name>input_num</name></name> <operator>+</operator> <name>ch</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>output</name><index>[<expr><name>n_filter</name></expr>]</index></name> <operator>+=</operator> <name>input_pel</name> <operator>*</operator> <name><name>conv_params</name><operator>-&gt;</operator><name>kernel</name><index>[<expr><name>n_filter</name> <operator>*</operator> <name>filter_size</name> <operator>+</operator> <name>kernel_y</name> <operator>*</operator> <name>filter_linesize</name> <operator>+</operator>
<name>kernel_x</name> <operator>*</operator> <name><name>conv_params</name><operator>-&gt;</operator><name>input_num</name></name> <operator>+</operator> <name>ch</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
<switch>switch <condition>(<expr><name><name>conv_params</name><operator>-&gt;</operator><name>activation</name></name></expr>)</condition><block>{<block_content>
<case>case <expr><name>RELU</name></expr>:</case>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>n_filter</name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>output</name><index>[<expr><name>n_filter</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TANH</name></expr>:</case>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>n_filter</name></expr>]</index></name> <operator>=</operator> <literal type="number">2.0f</literal> <operator>/</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>+</operator> <call><name>exp</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2.0f</literal> <operator>*</operator> <name><name>output</name><index>[<expr><name>n_filter</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>-</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SIGMOID</name></expr>:</case>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>n_filter</name></expr>]</index></name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>+</operator> <call><name>exp</name><argument_list>(<argument><expr><operator>-</operator><name><name>output</name><index>[<expr><name>n_filter</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NONE</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>LEAKY_RELU</name></expr>:</case>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>n_filter</name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>output</name><index>[<expr><name>n_filter</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">0.2</literal> <operator>*</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>output</name><index>[<expr><name>n_filter</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></for>
<expr_stmt><expr><name>output</name> <operator>+=</operator> <name><name>conv_params</name><operator>-&gt;</operator><name>output_num</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
