<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\dnn\dnn_interface.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../dnn_interface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnn_backend_native.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnn_backend_tf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<function><type><name>DNNModule</name> <modifier>*</modifier></type><name>ff_get_dnn_module</name><parameter_list>(<parameter><decl><type><name>DNNBackendType</name></type> <name>backend_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DNNModule</name> <modifier>*</modifier></type><name>dnn_module</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dnn_module</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DNNModule</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>dnn_module</name></expr>)</condition><block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name>backend_type</name></expr>)</condition><block>{<block_content>
<case>case <expr><name>DNN_NATIVE</name></expr>:</case>
<expr_stmt><expr><name><name>dnn_module</name><operator>-&gt;</operator><name>load_model</name></name> <operator>=</operator> <operator>&amp;</operator><name>ff_dnn_load_model_native</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnn_module</name><operator>-&gt;</operator><name>execute_model</name></name> <operator>=</operator> <operator>&amp;</operator><name>ff_dnn_execute_model_native</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnn_module</name><operator>-&gt;</operator><name>free_model</name></name> <operator>=</operator> <operator>&amp;</operator><name>ff_dnn_free_model_native</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DNN_TF</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>CONFIG_LIBTENSORFLOW</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
<expr_stmt><expr><name><name>dnn_module</name><operator>-&gt;</operator><name>load_model</name></name> <operator>=</operator> <operator>&amp;</operator><name>ff_dnn_load_model_tf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnn_module</name><operator>-&gt;</operator><name>execute_model</name></name> <operator>=</operator> <operator>&amp;</operator><name>ff_dnn_execute_model_tf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dnn_module</name><operator>-&gt;</operator><name>free_model</name></name> <operator>=</operator> <operator>&amp;</operator><name>ff_dnn_free_model_tf</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dnn_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Module backend_type is not native or tensorflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dnn_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><name>dnn_module</name></expr>;</return>
</block_content>}</block></function>
</unit>
