<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\dnn\dnn_backend_native_layer_pad.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnn_backend_native_layer_pad.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>dnn_load_layer_pad</name><parameter_list>(<parameter><decl><type><name>Layer</name> <modifier>*</modifier></type><name>layer</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>model_file_context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>file_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LayerPadParams</name> <modifier>*</modifier></type><name>params</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dnn_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>params</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>params</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>params</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>avio_rl32</name><argument_list>(<argument><expr><name>model_file_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dnn_size</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>paddings</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>model_file_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>paddings</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>model_file_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dnn_size</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>layer</name><operator>-&gt;</operator><name>input_operand_indexes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>avio_rl32</name><argument_list>(<argument><expr><name>model_file_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>layer</name><operator>-&gt;</operator><name>output_operand_index</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>avio_rl32</name><argument_list>(<argument><expr><name>model_file_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dnn_size</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>layer</name><operator>-&gt;</operator><name>params</name></name> <operator>=</operator> <name>params</name></expr>;</expr_stmt>

<return>return <expr><name>dnn_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>before_get_buddy</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>given</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>paddings</name></decl></parameter>, <parameter><decl><type><name>LayerPadModeParam</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>LPMP_SYMMETRIC</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>paddings</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>given</name><operator>)</operator></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>LPMP_REFLECT</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>paddings</name> <operator>-</operator> <name>given</name><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><literal type="string">"should not reach here"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>after_get_buddy</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>given</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>border</name></decl></parameter>, <parameter><decl><type><name>LayerPadModeParam</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>LPMP_SYMMETRIC</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name>given</name> <operator>-</operator> <name>border</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>border</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>offset</name><operator>)</operator></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>LPMP_REFLECT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name>given</name> <operator>-</operator> <name>border</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>border</name> <operator>-</operator> <literal type="number">2</literal> <operator>-</operator> <name>offset</name><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><literal type="string">"should not reach here"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>dnn_execute_layer_pad</name><parameter_list>(<parameter><decl><type><name>DnnOperand</name> <modifier>*</modifier></type><name>operands</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>input_operand_indexes</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>output_operand_index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>parameters</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>before_paddings</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>after_paddings</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LayerPadParams</name> <modifier>*</modifier></type><name>params</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>LayerPadParams</name> <operator>*</operator><operator>)</operator><name>parameters</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int32_t</name></type> <name>input_operand_index</name> <init>= <expr><name><name>input_operand_indexes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>number</name> <init>= <expr><name><name>operands</name><index>[<expr><name>input_operand_index</name></expr>]</index></name><operator>.</operator><name><name>dims</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name><name>operands</name><index>[<expr><name>input_operand_index</name></expr>]</index></name><operator>.</operator><name><name>dims</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name><name>operands</name><index>[<expr><name>input_operand_index</name></expr>]</index></name><operator>.</operator><name><name>dims</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>channel</name> <init>= <expr><name><name>operands</name><index>[<expr><name>input_operand_index</name></expr>]</index></name><operator>.</operator><name><name>dims</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>input</name> <init>= <expr><name><name>operands</name><index>[<expr><name>input_operand_index</name></expr>]</index></name><operator>.</operator><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>new_number</name> <init>= <expr><name>number</name> <operator>+</operator> <name><name>params</name><operator>-&gt;</operator><name>paddings</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>params</name><operator>-&gt;</operator><name>paddings</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_height</name> <init>= <expr><name>height</name> <operator>+</operator> <name><name>params</name><operator>-&gt;</operator><name>paddings</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>params</name><operator>-&gt;</operator><name>paddings</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_width</name> <init>= <expr><name>width</name> <operator>+</operator> <name><name>params</name><operator>-&gt;</operator><name>paddings</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>params</name><operator>-&gt;</operator><name>paddings</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_channel</name> <init>= <expr><name>channel</name> <operator>+</operator> <name><name>params</name><operator>-&gt;</operator><name>paddings</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>params</name><operator>-&gt;</operator><name>paddings</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c_stride</name> <init>= <expr><name>channel</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wc_stride</name> <init>= <expr><name>c_stride</name> <operator>*</operator> <name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hwc_stride</name> <init>= <expr><name>wc_stride</name> <operator>*</operator> <name>height</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>new_c_stride</name> <init>= <expr><name>new_channel</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_wc_stride</name> <init>= <expr><name>new_c_stride</name> <operator>*</operator> <name>new_width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_hwc_stride</name> <init>= <expr><name>new_wc_stride</name> <operator>*</operator> <name>new_height</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DnnOperand</name> <modifier>*</modifier></type><name>output_operand</name> <init>= <expr><operator>&amp;</operator><name><name>operands</name><index>[<expr><name>output_operand_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>output_operand</name><operator>-&gt;</operator><name>dims</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>new_number</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output_operand</name><operator>-&gt;</operator><name>dims</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>new_height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output_operand</name><operator>-&gt;</operator><name>dims</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>new_width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output_operand</name><operator>-&gt;</operator><name>dims</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>new_channel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output_operand</name><operator>-&gt;</operator><name>data_type</name></name> <operator>=</operator> <name><name>operands</name><index>[<expr><name>input_operand_index</name></expr>]</index></name><operator>.</operator><name>data_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output_operand</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <call><name>calculate_operand_data_length</name><argument_list>(<argument><expr><name>output_operand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output_operand</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>av_realloc</name><argument_list>(<argument><expr><name><name>output_operand</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>output_operand</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>output_operand</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>output</name> <operator>=</operator> <name><name>output_operand</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>number</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>h</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>h</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>w</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>w</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>input</name> <operator>+</operator> <name>n</name> <operator>*</operator> <name>hwc_stride</name> <operator>+</operator> <name>h</name> <operator>*</operator> <name>wc_stride</name> <operator>+</operator> <name>w</name> <operator>*</operator> <name>c_stride</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>output</name> <operator>+</operator> <operator>(</operator><name>n</name> <operator>+</operator> <name><name>params</name><operator>-&gt;</operator><name>paddings</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>new_hwc_stride</name>
<operator>+</operator> <operator>(</operator><name>h</name> <operator>+</operator> <name><name>params</name><operator>-&gt;</operator><name>paddings</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>new_wc_stride</name>
<operator>+</operator> <operator>(</operator><name>w</name> <operator>+</operator> <name><name>params</name><operator>-&gt;</operator><name>paddings</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>new_c_stride</name>
<operator>+</operator> <name><name>params</name><operator>-&gt;</operator><name>paddings</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>channel</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>


<expr_stmt><expr><name>before_paddings</name> <operator>=</operator> <name><name>params</name><operator>-&gt;</operator><name>paddings</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>after_paddings</name> <operator>=</operator> <name><name>params</name><operator>-&gt;</operator><name>paddings</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>before_paddings</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>output</name> <operator>+</operator> <name>n</name> <operator>*</operator> <name>new_hwc_stride</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>LPMP_CONSTANT</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>new_hwc_stride</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>params</name><operator>-&gt;</operator><name>constant_values</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>buddy</name> <init>= <expr><call><name>before_get_buddy</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>before_paddings</name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>output</name> <operator>+</operator> <name>buddy</name> <operator>*</operator> <name>new_hwc_stride</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>new_hwc_stride</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>after_paddings</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>given</name> <init>= <expr><name>number</name> <operator>+</operator> <name>before_paddings</name> <operator>+</operator> <name>n</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>output</name> <operator>+</operator> <name>given</name> <operator>*</operator> <name>new_hwc_stride</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>LPMP_CONSTANT</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>new_hwc_stride</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>params</name><operator>-&gt;</operator><name>constant_values</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>buddy</name> <init>= <expr><call><name>after_get_buddy</name><argument_list>(<argument><expr><name>given</name></expr></argument>, <argument><expr><name>number</name> <operator>+</operator> <name>before_paddings</name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>output</name> <operator>+</operator> <name>buddy</name> <operator>*</operator> <name>new_hwc_stride</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>new_hwc_stride</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>before_paddings</name> <operator>=</operator> <name><name>params</name><operator>-&gt;</operator><name>paddings</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>after_paddings</name> <operator>=</operator> <name><name>params</name><operator>-&gt;</operator><name>paddings</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>new_number</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><name>output</name> <operator>+</operator> <name>n</name> <operator>*</operator> <name>new_hwc_stride</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>h</name> <operator>&lt;</operator> <name>before_paddings</name></expr>;</condition> <incr><expr><name>h</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>start</name> <operator>+</operator> <name>h</name> <operator>*</operator> <name>new_wc_stride</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>LPMP_CONSTANT</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>new_wc_stride</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>params</name><operator>-&gt;</operator><name>constant_values</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>buddy</name> <init>= <expr><call><name>before_get_buddy</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>before_paddings</name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>start</name> <operator>+</operator> <name>buddy</name> <operator>*</operator> <name>new_wc_stride</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>new_wc_stride</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><decl><type><name>int</name></type> <name>h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>h</name> <operator>&lt;</operator> <name>after_paddings</name></expr>;</condition> <incr><expr><name>h</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>given</name> <init>= <expr><name>height</name> <operator>+</operator> <name>before_paddings</name> <operator>+</operator> <name>h</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>start</name> <operator>+</operator> <name>given</name> <operator>*</operator> <name>new_wc_stride</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>LPMP_CONSTANT</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>new_wc_stride</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>params</name><operator>-&gt;</operator><name>constant_values</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>buddy</name> <init>= <expr><call><name>after_get_buddy</name><argument_list>(<argument><expr><name>given</name></expr></argument>, <argument><expr><name>height</name> <operator>+</operator> <name>before_paddings</name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>start</name> <operator>+</operator> <name>buddy</name> <operator>*</operator> <name>new_wc_stride</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>new_wc_stride</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<expr_stmt><expr><name>before_paddings</name> <operator>=</operator> <name><name>params</name><operator>-&gt;</operator><name>paddings</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>after_paddings</name> <operator>=</operator> <name><name>params</name><operator>-&gt;</operator><name>paddings</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>new_number</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>h</name> <operator>&lt;</operator> <name>new_height</name></expr>;</condition> <incr><expr><name>h</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><name>output</name> <operator>+</operator> <name>n</name> <operator>*</operator> <name>new_hwc_stride</name> <operator>+</operator> <name>h</name> <operator>*</operator> <name>new_wc_stride</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>w</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name>before_paddings</name></expr>;</condition> <incr><expr><name>w</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>start</name> <operator>+</operator> <name>w</name> <operator>*</operator> <name>new_c_stride</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>LPMP_CONSTANT</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>new_c_stride</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>params</name><operator>-&gt;</operator><name>constant_values</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>buddy</name> <init>= <expr><call><name>before_get_buddy</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>before_paddings</name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>start</name> <operator>+</operator> <name>buddy</name> <operator>*</operator> <name>new_c_stride</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>new_c_stride</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><decl><type><name>int</name></type> <name>w</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name>after_paddings</name></expr>;</condition> <incr><expr><name>w</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>given</name> <init>= <expr><name>width</name> <operator>+</operator> <name>before_paddings</name> <operator>+</operator> <name>w</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>start</name> <operator>+</operator> <name>given</name> <operator>*</operator> <name>new_c_stride</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>LPMP_CONSTANT</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>new_c_stride</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>params</name><operator>-&gt;</operator><name>constant_values</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>buddy</name> <init>= <expr><call><name>after_get_buddy</name><argument_list>(<argument><expr><name>given</name></expr></argument>, <argument><expr><name>width</name> <operator>+</operator> <name>before_paddings</name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>start</name> <operator>+</operator> <name>buddy</name> <operator>*</operator> <name>new_c_stride</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>new_c_stride</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>


<expr_stmt><expr><name>before_paddings</name> <operator>=</operator> <name><name>params</name><operator>-&gt;</operator><name>paddings</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>after_paddings</name> <operator>=</operator> <name><name>params</name><operator>-&gt;</operator><name>paddings</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>new_number</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>h</name> <operator>&lt;</operator> <name>new_height</name></expr>;</condition> <incr><expr><name>h</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>w</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name>new_width</name></expr>;</condition> <incr><expr><name>w</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><name>output</name> <operator>+</operator> <name>n</name> <operator>*</operator> <name>new_hwc_stride</name> <operator>+</operator> <name>h</name> <operator>*</operator> <name>new_wc_stride</name> <operator>+</operator> <name>w</name> <operator>*</operator> <name>new_c_stride</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>before_paddings</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>start</name> <operator>+</operator> <name>c</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>LPMP_CONSTANT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <name><name>params</name><operator>-&gt;</operator><name>constant_values</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>buddy</name> <init>= <expr><call><name>before_get_buddy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>before_paddings</name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>start</name> <operator>+</operator> <name>buddy</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <operator>*</operator><name>src</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>after_paddings</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>given</name> <init>= <expr><name>channel</name> <operator>+</operator> <name>before_paddings</name> <operator>+</operator> <name>c</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>start</name> <operator>+</operator> <name>given</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>LPMP_CONSTANT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <name><name>params</name><operator>-&gt;</operator><name>constant_values</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>buddy</name> <init>= <expr><call><name>after_get_buddy</name><argument_list>(<argument><expr><name>given</name></expr></argument>, <argument><expr><name>channel</name> <operator>+</operator> <name>before_paddings</name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>start</name> <operator>+</operator> <name>buddy</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <operator>*</operator><name>src</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
