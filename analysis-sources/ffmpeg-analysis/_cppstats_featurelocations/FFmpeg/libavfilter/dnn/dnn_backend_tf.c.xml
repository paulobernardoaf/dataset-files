<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\dnn\dnn_backend_tf.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnn_backend_tf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnn_backend_native.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnn_backend_native_layer_conv2d.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnn_backend_native_layer_depth2space.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/avio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnn_backend_native_layer_pad.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnn_backend_native_layer_maximum.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tensorflow/c/c_api.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>TFModel</name><block>{
<decl_stmt><decl><type><name>TF_Graph</name> <modifier>*</modifier></type><name>graph</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TF_Session</name> <modifier>*</modifier></type><name>session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TF_Status</name> <modifier>*</modifier></type><name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TF_Output</name></type> <name>input</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TF_Tensor</name> <modifier>*</modifier></type><name>input_tensor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TF_Output</name> <modifier>*</modifier></type><name>outputs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TF_Tensor</name> <modifier>*</modifier><modifier>*</modifier></type><name>output_tensors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>nb_output</name></decl>;</decl_stmt>
}</block></struct></type> <name>TFModel</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_buffer</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>TF_Buffer</name> <modifier>*</modifier></type><name>read_graph</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>model_filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TF_Buffer</name> <modifier>*</modifier></type><name>graph_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>graph_data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>model_file_context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>bytes_read</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avio_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>model_file_context</name></expr></argument>, <argument><expr><name>model_filename</name></expr></argument>, <argument><expr><name>AVIO_FLAG_READ</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>avio_size</name><argument_list>(<argument><expr><name>model_file_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>graph_data</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>graph_data</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>avio_closep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>model_file_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bytes_read</name> <operator>=</operator> <call><name>avio_read</name><argument_list>(<argument><expr><name>model_file_context</name></expr></argument>, <argument><expr><name>graph_data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_closep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>model_file_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_read</name> <operator>!=</operator> <name>size</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>graph_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>graph_buf</name> <operator>=</operator> <call><name>TF_NewBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>graph_buf</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>graph_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>graph_buf</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>graph_buf</name><operator>-&gt;</operator><name>data_deallocator</name></name> <operator>=</operator> <name>free_buffer</name></expr>;</expr_stmt>

<return>return <expr><name>graph_buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>TF_Tensor</name> <modifier>*</modifier></type><name>allocate_input_tensor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DNNData</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TF_DataType</name></type> <name>dt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name><name>input_dims</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><name><name>input</name><operator>-&gt;</operator><name>height</name></name></expr>, <expr><name><name>input</name><operator>-&gt;</operator><name>width</name></name></expr>, <expr><name><name>input</name><operator>-&gt;</operator><name>channels</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>dt</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DNN_FLOAT</name></expr>:</case>
<expr_stmt><expr><name>dt</name> <operator>=</operator> <name>TF_FLOAT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DNN_UINT8</name></expr>:</case>
<expr_stmt><expr><name>dt</name> <operator>=</operator> <name>TF_UINT8</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><literal type="string">"should not reach here"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<return>return <expr><call><name>TF_AllocateTensor</name><argument_list>(<argument><expr><name>dt</name></expr></argument>, <argument><expr><name>input_dims</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,
<argument><expr><name><name>input_dims</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>input_dims</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>input_dims</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DNNReturnType</name></type> <name>get_input_tf</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>model</name></decl></parameter>, <parameter><decl><type><name>DNNData</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TFModel</name> <modifier>*</modifier></type><name>tf_model</name> <init>= <expr><operator>(</operator><name>TFModel</name> <operator>*</operator><operator>)</operator><name>model</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TF_Status</name> <modifier>*</modifier></type><name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name><name>dims</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TF_Output</name></type> <name>tf_output</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tf_output</name><operator>.</operator><name>oper</name></name> <operator>=</operator> <call><name>TF_GraphOperationByName</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>, <argument><expr><name>input_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tf_output</name><operator>.</operator><name>oper</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>DNN_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tf_output</name><operator>.</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>dt</name></name> <operator>=</operator> <call><name>TF_OperationOutputType</name><argument_list>(<argument><expr><name>tf_output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>TF_NewStatus</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_GraphGetTensorShape</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>, <argument><expr><name>tf_output</name></expr></argument>, <argument><expr><name>dims</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TF_GetCode</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TF_OK</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>TF_DeleteStatus</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DNN_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>TF_DeleteStatus</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>dims</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>dims</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>dims</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>dims</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>DNN_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DNNReturnType</name></type> <name>set_input_output_tf</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>model</name></decl></parameter>, <parameter><decl><type><name>DNNData</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>output_names</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>nb_output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TFModel</name> <modifier>*</modifier></type><name>tf_model</name> <init>= <expr><operator>(</operator><name>TFModel</name> <operator>*</operator><operator>)</operator><name>model</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TF_SessionOptions</name> <modifier>*</modifier></type><name>sess_opts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TF_Operation</name> <modifier>*</modifier></type><name>init_op</name> <init>= <expr><call><name>TF_GraphOperationByName</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>, <argument><expr><literal type="string">"init"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>tf_model</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>oper</name></name> <operator>=</operator> <call><name>TF_GraphOperationByName</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>, <argument><expr><name>input_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tf_model</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>oper</name></name></expr>)</condition><block>{<block_content>
<return>return <expr><name>DNN_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tf_model</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tf_model</name><operator>-&gt;</operator><name>input_tensor</name></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>TF_DeleteTensor</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>input_tensor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tf_model</name><operator>-&gt;</operator><name>input_tensor</name></name> <operator>=</operator> <call><name>allocate_input_tensor</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tf_model</name><operator>-&gt;</operator><name>input_tensor</name></name></expr>)</condition><block>{<block_content>
<return>return <expr><name>DNN_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>TF_TensorData</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>input_tensor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>nb_output</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>DNN_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tf_model</name><operator>-&gt;</operator><name>outputs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tf_model</name><operator>-&gt;</operator><name>outputs</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>nb_output</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>tf_model</name><operator>-&gt;</operator><name>outputs</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tf_model</name><operator>-&gt;</operator><name>outputs</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>DNN_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_output</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>tf_model</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>oper</name> <operator>=</operator> <call><name>TF_GraphOperationByName</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>, <argument><expr><name><name>output_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tf_model</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>oper</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tf_model</name><operator>-&gt;</operator><name>outputs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DNN_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tf_model</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>tf_model</name><operator>-&gt;</operator><name>output_tensors</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tf_model</name><operator>-&gt;</operator><name>nb_output</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tf_model</name><operator>-&gt;</operator><name>output_tensors</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TF_DeleteTensor</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>output_tensors</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tf_model</name><operator>-&gt;</operator><name>output_tensors</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tf_model</name><operator>-&gt;</operator><name>output_tensors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tf_model</name><operator>-&gt;</operator><name>output_tensors</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>nb_output</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>tf_model</name><operator>-&gt;</operator><name>output_tensors</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tf_model</name><operator>-&gt;</operator><name>output_tensors</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tf_model</name><operator>-&gt;</operator><name>outputs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DNN_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>tf_model</name><operator>-&gt;</operator><name>nb_output</name></name> <operator>=</operator> <name>nb_output</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tf_model</name><operator>-&gt;</operator><name>session</name></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>TF_CloseSession</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_DeleteSession</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sess_opts</name> <operator>=</operator> <call><name>TF_NewSessionOptions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tf_model</name><operator>-&gt;</operator><name>session</name></name> <operator>=</operator> <call><name>TF_NewSession</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>, <argument><expr><name>sess_opts</name></expr></argument>, <argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_DeleteSessionOptions</name><argument_list>(<argument><expr><name>sess_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TF_GetCode</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TF_OK</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>DNN_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>init_op</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>TF_SessionRun</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>init_op</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TF_GetCode</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TF_OK</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>DNN_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>DNN_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DNNReturnType</name></type> <name>load_tf_model</name><parameter_list>(<parameter><decl><type><name>TFModel</name> <modifier>*</modifier></type><name>tf_model</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>model_filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TF_Buffer</name> <modifier>*</modifier></type><name>graph_def</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TF_ImportGraphDefOptions</name> <modifier>*</modifier></type><name>graph_opts</name></decl>;</decl_stmt>

<expr_stmt><expr><name>graph_def</name> <operator>=</operator> <call><name>read_graph</name><argument_list>(<argument><expr><name>model_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>graph_def</name></expr>)</condition><block>{<block_content>
<return>return <expr><name>DNN_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tf_model</name><operator>-&gt;</operator><name>graph</name></name> <operator>=</operator> <call><name>TF_NewGraph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <call><name>TF_NewStatus</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>graph_opts</name> <operator>=</operator> <call><name>TF_NewImportGraphDefOptions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_GraphImportGraphDef</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>, <argument><expr><name>graph_def</name></expr></argument>, <argument><expr><name>graph_opts</name></expr></argument>, <argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_DeleteImportGraphDefOptions</name><argument_list>(<argument><expr><name>graph_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_DeleteBuffer</name><argument_list>(<argument><expr><name>graph_def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TF_GetCode</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TF_OK</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>TF_DeleteGraph</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_DeleteStatus</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DNN_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>DNN_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAME_BUFFER_SIZE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>DNNReturnType</name></type> <name>add_conv_layer</name><parameter_list>(<parameter><decl><type><name>TFModel</name> <modifier>*</modifier></type><name>tf_model</name></decl></parameter>, <parameter><decl><type><name>TF_Operation</name> <modifier>*</modifier></type><name>transpose_op</name></decl></parameter>, <parameter><decl><type><name>TF_Operation</name> <modifier>*</modifier><modifier>*</modifier></type><name>cur_op</name></decl></parameter>,
<parameter><decl><type><name>ConvolutionalParams</name><modifier>*</modifier></type> <name>params</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>layer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TF_Operation</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TF_OperationDescription</name> <modifier>*</modifier></type><name>op_desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TF_Output</name></type> <name>input</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name><name>strides</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TF_Tensor</name> <modifier>*</modifier></type><name>tensor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name><name>dims</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dims_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name_buffer</name><index>[<expr><name>NAME_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>params</name><operator>-&gt;</operator><name>input_num</name></name> <operator>*</operator> <name><name>params</name><operator>-&gt;</operator><name>output_num</name></name> <operator>*</operator> <name><name>params</name><operator>-&gt;</operator><name>kernel_size</name></name> <operator>*</operator> <name><name>params</name><operator>-&gt;</operator><name>kernel_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>input</name><operator>.</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name_buffer</name></expr></argument>, <argument><expr><name>NAME_BUFFER_SIZE</name></expr></argument>, <argument><expr><literal type="string">"conv_kernel%d"</literal></expr></argument>, <argument><expr><name>layer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op_desc</name> <operator>=</operator> <call><name>TF_NewOperation</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>, <argument><expr><literal type="string">"Const"</literal></expr></argument>, <argument><expr><name>name_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_SetAttrType</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><literal type="string">"dtype"</literal></expr></argument>, <argument><expr><name>TF_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dims</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>params</name><operator>-&gt;</operator><name>output_num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dims</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>params</name><operator>-&gt;</operator><name>kernel_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dims</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>params</name><operator>-&gt;</operator><name>kernel_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dims</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>params</name><operator>-&gt;</operator><name>input_num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dims_len</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tensor</name> <operator>=</operator> <call><name>TF_AllocateTensor</name><argument_list>(<argument><expr><name>TF_FLOAT</name></expr></argument>, <argument><expr><name>dims</name></expr></argument>, <argument><expr><name>dims_len</name></expr></argument>, <argument><expr><name>size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>TF_TensorData</name><argument_list>(<argument><expr><name>tensor</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>kernel</name></name></expr></argument>, <argument><expr><name>size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_SetAttrTensor</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>, <argument><expr><name>tensor</name></expr></argument>, <argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TF_GetCode</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TF_OK</name></expr>)</condition><block>{<block_content>
<return>return <expr><name>DNN_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>TF_FinishOperation</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TF_GetCode</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TF_OK</name></expr>)</condition><block>{<block_content>
<return>return <expr><name>DNN_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name_buffer</name></expr></argument>, <argument><expr><name>NAME_BUFFER_SIZE</name></expr></argument>, <argument><expr><literal type="string">"transpose%d"</literal></expr></argument>, <argument><expr><name>layer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op_desc</name> <operator>=</operator> <call><name>TF_NewOperation</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>, <argument><expr><literal type="string">"Transpose"</literal></expr></argument>, <argument><expr><name>name_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>input</name><operator>.</operator><name>oper</name></name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_AddInput</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>input</name><operator>.</operator><name>oper</name></name> <operator>=</operator> <name>transpose_op</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_AddInput</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_SetAttrType</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><literal type="string">"T"</literal></expr></argument>, <argument><expr><name>TF_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_SetAttrType</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><literal type="string">"Tperm"</literal></expr></argument>, <argument><expr><name>TF_INT32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>TF_FinishOperation</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TF_GetCode</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TF_OK</name></expr>)</condition><block>{<block_content>
<return>return <expr><name>DNN_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name_buffer</name></expr></argument>, <argument><expr><name>NAME_BUFFER_SIZE</name></expr></argument>, <argument><expr><literal type="string">"conv2d%d"</literal></expr></argument>, <argument><expr><name>layer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op_desc</name> <operator>=</operator> <call><name>TF_NewOperation</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>, <argument><expr><literal type="string">"Conv2D"</literal></expr></argument>, <argument><expr><name>name_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>input</name><operator>.</operator><name>oper</name></name> <operator>=</operator> <operator>*</operator><name>cur_op</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_AddInput</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>input</name><operator>.</operator><name>oper</name></name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_AddInput</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_SetAttrType</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><literal type="string">"T"</literal></expr></argument>, <argument><expr><name>TF_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_SetAttrIntList</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><literal type="string">"strides"</literal></expr></argument>, <argument><expr><name>strides</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_SetAttrString</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><literal type="string">"padding"</literal></expr></argument>, <argument><expr><literal type="string">"VALID"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cur_op</name> <operator>=</operator> <call><name>TF_FinishOperation</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TF_GetCode</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TF_OK</name></expr>)</condition><block>{<block_content>
<return>return <expr><name>DNN_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name_buffer</name></expr></argument>, <argument><expr><name>NAME_BUFFER_SIZE</name></expr></argument>, <argument><expr><literal type="string">"conv_biases%d"</literal></expr></argument>, <argument><expr><name>layer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op_desc</name> <operator>=</operator> <call><name>TF_NewOperation</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>, <argument><expr><literal type="string">"Const"</literal></expr></argument>, <argument><expr><name>name_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_SetAttrType</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><literal type="string">"dtype"</literal></expr></argument>, <argument><expr><name>TF_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dims</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>params</name><operator>-&gt;</operator><name>output_num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dims_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tensor</name> <operator>=</operator> <call><name>TF_AllocateTensor</name><argument_list>(<argument><expr><name>TF_FLOAT</name></expr></argument>, <argument><expr><name>dims</name></expr></argument>, <argument><expr><name>dims_len</name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>output_num</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>TF_TensorData</name><argument_list>(<argument><expr><name>tensor</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>biases</name></name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>output_num</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_SetAttrTensor</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>, <argument><expr><name>tensor</name></expr></argument>, <argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TF_GetCode</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TF_OK</name></expr>)</condition><block>{<block_content>
<return>return <expr><name>DNN_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>TF_FinishOperation</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TF_GetCode</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TF_OK</name></expr>)</condition><block>{<block_content>
<return>return <expr><name>DNN_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name_buffer</name></expr></argument>, <argument><expr><name>NAME_BUFFER_SIZE</name></expr></argument>, <argument><expr><literal type="string">"bias_add%d"</literal></expr></argument>, <argument><expr><name>layer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op_desc</name> <operator>=</operator> <call><name>TF_NewOperation</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>, <argument><expr><literal type="string">"BiasAdd"</literal></expr></argument>, <argument><expr><name>name_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>input</name><operator>.</operator><name>oper</name></name> <operator>=</operator> <operator>*</operator><name>cur_op</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_AddInput</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>input</name><operator>.</operator><name>oper</name></name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_AddInput</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_SetAttrType</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><literal type="string">"T"</literal></expr></argument>, <argument><expr><name>TF_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cur_op</name> <operator>=</operator> <call><name>TF_FinishOperation</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TF_GetCode</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TF_OK</name></expr>)</condition><block>{<block_content>
<return>return <expr><name>DNN_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name_buffer</name></expr></argument>, <argument><expr><name>NAME_BUFFER_SIZE</name></expr></argument>, <argument><expr><literal type="string">"activation%d"</literal></expr></argument>, <argument><expr><name>layer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>activation</name></name></expr>)</condition><block>{<block_content>
<case>case <expr><name>RELU</name></expr>:</case>
<expr_stmt><expr><name>op_desc</name> <operator>=</operator> <call><name>TF_NewOperation</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>, <argument><expr><literal type="string">"Relu"</literal></expr></argument>, <argument><expr><name>name_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TANH</name></expr>:</case>
<expr_stmt><expr><name>op_desc</name> <operator>=</operator> <call><name>TF_NewOperation</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>, <argument><expr><literal type="string">"Tanh"</literal></expr></argument>, <argument><expr><name>name_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SIGMOID</name></expr>:</case>
<expr_stmt><expr><name>op_desc</name> <operator>=</operator> <call><name>TF_NewOperation</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>, <argument><expr><literal type="string">"Sigmoid"</literal></expr></argument>, <argument><expr><name>name_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><name>DNN_ERROR</name></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>input</name><operator>.</operator><name>oper</name></name> <operator>=</operator> <operator>*</operator><name>cur_op</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_AddInput</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_SetAttrType</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><literal type="string">"T"</literal></expr></argument>, <argument><expr><name>TF_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cur_op</name> <operator>=</operator> <call><name>TF_FinishOperation</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TF_GetCode</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TF_OK</name></expr>)</condition><block>{<block_content>
<return>return <expr><name>DNN_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>DNN_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DNNReturnType</name></type> <name>add_depth_to_space_layer</name><parameter_list>(<parameter><decl><type><name>TFModel</name> <modifier>*</modifier></type><name>tf_model</name></decl></parameter>, <parameter><decl><type><name>TF_Operation</name> <modifier>*</modifier><modifier>*</modifier></type><name>cur_op</name></decl></parameter>,
<parameter><decl><type><name>DepthToSpaceParams</name> <modifier>*</modifier></type><name>params</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>layer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TF_OperationDescription</name> <modifier>*</modifier></type><name>op_desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TF_Output</name></type> <name>input</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name_buffer</name><index>[<expr><name>NAME_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name_buffer</name></expr></argument>, <argument><expr><name>NAME_BUFFER_SIZE</name></expr></argument>, <argument><expr><literal type="string">"depth_to_space%d"</literal></expr></argument>, <argument><expr><name>layer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op_desc</name> <operator>=</operator> <call><name>TF_NewOperation</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>, <argument><expr><literal type="string">"DepthToSpace"</literal></expr></argument>, <argument><expr><name>name_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>input</name><operator>.</operator><name>oper</name></name> <operator>=</operator> <operator>*</operator><name>cur_op</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>input</name><operator>.</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_AddInput</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_SetAttrType</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><literal type="string">"T"</literal></expr></argument>, <argument><expr><name>TF_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_SetAttrInt</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><literal type="string">"block_size"</literal></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cur_op</name> <operator>=</operator> <call><name>TF_FinishOperation</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TF_GetCode</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TF_OK</name></expr>)</condition><block>{<block_content>
<return>return <expr><name>DNN_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>DNN_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DNNReturnType</name></type> <name>add_pad_layer</name><parameter_list>(<parameter><decl><type><name>TFModel</name> <modifier>*</modifier></type><name>tf_model</name></decl></parameter>, <parameter><decl><type><name>TF_Operation</name> <modifier>*</modifier><modifier>*</modifier></type><name>cur_op</name></decl></parameter>,
<parameter><decl><type><name>LayerPadParams</name> <modifier>*</modifier></type><name>params</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>layer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TF_Operation</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TF_Tensor</name> <modifier>*</modifier></type><name>tensor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TF_OperationDescription</name> <modifier>*</modifier></type><name>op_desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TF_Output</name></type> <name>input</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>pads</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name><name>pads_shape</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>name_buffer</name><index>[<expr><name>NAME_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name_buffer</name></expr></argument>, <argument><expr><name>NAME_BUFFER_SIZE</name></expr></argument>, <argument><expr><literal type="string">"pad%d"</literal></expr></argument>, <argument><expr><name>layer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>op_desc</name> <operator>=</operator> <call><name>TF_NewOperation</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>, <argument><expr><literal type="string">"Const"</literal></expr></argument>, <argument><expr><name>name_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_SetAttrType</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><literal type="string">"dtype"</literal></expr></argument>, <argument><expr><name>TF_INT32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tensor</name> <operator>=</operator> <call><name>TF_AllocateTensor</name><argument_list>(<argument><expr><name>TF_INT32</name></expr></argument>, <argument><expr><name>pads_shape</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pads</name> <operator>=</operator> <operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><call><name>TF_TensorData</name><argument_list>(<argument><expr><name>tensor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pads</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>params</name><operator>-&gt;</operator><name>paddings</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pads</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>params</name><operator>-&gt;</operator><name>paddings</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pads</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>params</name><operator>-&gt;</operator><name>paddings</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pads</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>params</name><operator>-&gt;</operator><name>paddings</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pads</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>params</name><operator>-&gt;</operator><name>paddings</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pads</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>params</name><operator>-&gt;</operator><name>paddings</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pads</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>params</name><operator>-&gt;</operator><name>paddings</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pads</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>params</name><operator>-&gt;</operator><name>paddings</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_SetAttrTensor</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>, <argument><expr><name>tensor</name></expr></argument>, <argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TF_GetCode</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TF_OK</name></expr>)</condition><block>{<block_content>
<return>return <expr><name>DNN_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>TF_FinishOperation</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TF_GetCode</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TF_OK</name></expr>)</condition><block>{<block_content>
<return>return <expr><name>DNN_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>op_desc</name> <operator>=</operator> <call><name>TF_NewOperation</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>, <argument><expr><literal type="string">"MirrorPad"</literal></expr></argument>, <argument><expr><literal type="string">"mirror_pad"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>input</name><operator>.</operator><name>oper</name></name> <operator>=</operator> <operator>*</operator><name>cur_op</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>input</name><operator>.</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_AddInput</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>input</name><operator>.</operator><name>oper</name></name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_AddInput</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_SetAttrType</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><literal type="string">"T"</literal></expr></argument>, <argument><expr><name>TF_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_SetAttrType</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><literal type="string">"Tpaddings"</literal></expr></argument>, <argument><expr><name>TF_INT32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_SetAttrString</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><literal type="string">"mode"</literal></expr></argument>, <argument><expr><literal type="string">"SYMMETRIC"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cur_op</name> <operator>=</operator> <call><name>TF_FinishOperation</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TF_GetCode</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TF_OK</name></expr>)</condition><block>{<block_content>
<return>return <expr><name>DNN_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>DNN_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DNNReturnType</name></type> <name>add_maximum_layer</name><parameter_list>(<parameter><decl><type><name>TFModel</name> <modifier>*</modifier></type><name>tf_model</name></decl></parameter>, <parameter><decl><type><name>TF_Operation</name> <modifier>*</modifier><modifier>*</modifier></type><name>cur_op</name></decl></parameter>,
<parameter><decl><type><name>DnnLayerMaximumParams</name> <modifier>*</modifier></type><name>params</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>layer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TF_Operation</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TF_Tensor</name> <modifier>*</modifier></type><name>tensor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TF_OperationDescription</name> <modifier>*</modifier></type><name>op_desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TF_Output</name></type> <name>input</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>name_buffer</name><index>[<expr><name>NAME_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name_buffer</name></expr></argument>, <argument><expr><name>NAME_BUFFER_SIZE</name></expr></argument>, <argument><expr><literal type="string">"maximum/y%d"</literal></expr></argument>, <argument><expr><name>layer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>op_desc</name> <operator>=</operator> <call><name>TF_NewOperation</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>, <argument><expr><literal type="string">"Const"</literal></expr></argument>, <argument><expr><name>name_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_SetAttrType</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><literal type="string">"dtype"</literal></expr></argument>, <argument><expr><name>TF_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tensor</name> <operator>=</operator> <call><name>TF_AllocateTensor</name><argument_list>(<argument><expr><name>TF_FLOAT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>TF_DataTypeSize</name><argument_list>(<argument><expr><name>TF_FLOAT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>TF_TensorData</name><argument_list>(<argument><expr><name>tensor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name><name>params</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_SetAttrTensor</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>, <argument><expr><name>tensor</name></expr></argument>, <argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TF_GetCode</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TF_OK</name></expr>)</condition><block>{<block_content>
<return>return <expr><name>DNN_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>TF_FinishOperation</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TF_GetCode</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TF_OK</name></expr>)</condition><block>{<block_content>
<return>return <expr><name>DNN_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name_buffer</name></expr></argument>, <argument><expr><name>NAME_BUFFER_SIZE</name></expr></argument>, <argument><expr><literal type="string">"maximum%d"</literal></expr></argument>, <argument><expr><name>layer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op_desc</name> <operator>=</operator> <call><name>TF_NewOperation</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>, <argument><expr><literal type="string">"Maximum"</literal></expr></argument>, <argument><expr><name>name_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>input</name><operator>.</operator><name>oper</name></name> <operator>=</operator> <operator>*</operator><name>cur_op</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>input</name><operator>.</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_AddInput</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>input</name><operator>.</operator><name>oper</name></name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_AddInput</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_SetAttrType</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><literal type="string">"T"</literal></expr></argument>, <argument><expr><name>TF_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cur_op</name> <operator>=</operator> <call><name>TF_FinishOperation</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TF_GetCode</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TF_OK</name></expr>)</condition><block>{<block_content>
<return>return <expr><name>DNN_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>DNN_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DNNReturnType</name></type> <name>load_native_model</name><parameter_list>(<parameter><decl><type><name>TFModel</name> <modifier>*</modifier></type><name>tf_model</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>model_filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>layer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TF_OperationDescription</name> <modifier>*</modifier></type><name>op_desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TF_Operation</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TF_Operation</name> <modifier>*</modifier></type><name>transpose_op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TF_Tensor</name> <modifier>*</modifier></type><name>tensor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TF_Output</name></type> <name>input</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>transpose_perm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name><name>transpose_perm_shape</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">4</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name><name>input_shape</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DNNReturnType</name></type> <name>layer_add_res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DNNModel</name> <modifier>*</modifier></type><name>native_model</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ConvolutionalNetwork</name> <modifier>*</modifier></type><name>conv_network</name></decl>;</decl_stmt>

<expr_stmt><expr><name>native_model</name> <operator>=</operator> <call><name>ff_dnn_load_model_native</name><argument_list>(<argument><expr><name>model_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>native_model</name></expr>)</condition><block>{<block_content>
<return>return <expr><name>DNN_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>conv_network</name> <operator>=</operator> <operator>(</operator><name>ConvolutionalNetwork</name> <operator>*</operator><operator>)</operator><name><name>native_model</name><operator>-&gt;</operator><name>model</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tf_model</name><operator>-&gt;</operator><name>graph</name></name> <operator>=</operator> <call><name>TF_NewGraph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <call><name>TF_NewStatus</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLEANUP_ON_ERROR</name><parameter_list>(<parameter><type><name>tf_model</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ TF_DeleteGraph(tf_model-&gt;graph); TF_DeleteStatus(tf_model-&gt;status); return DNN_ERROR; }</cpp:value></cpp:define>






<expr_stmt><expr><name>op_desc</name> <operator>=</operator> <call><name>TF_NewOperation</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>, <argument><expr><literal type="string">"Placeholder"</literal></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_SetAttrType</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><literal type="string">"dtype"</literal></expr></argument>, <argument><expr><name>TF_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_SetAttrShape</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><literal type="string">"shape"</literal></expr></argument>, <argument><expr><name>input_shape</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>TF_FinishOperation</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TF_GetCode</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TF_OK</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>CLEANUP_ON_ERROR</name><argument_list>(<argument><expr><name>tf_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>op_desc</name> <operator>=</operator> <call><name>TF_NewOperation</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>, <argument><expr><literal type="string">"Const"</literal></expr></argument>, <argument><expr><literal type="string">"transpose_perm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_SetAttrType</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><literal type="string">"dtype"</literal></expr></argument>, <argument><expr><name>TF_INT32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tensor</name> <operator>=</operator> <call><name>TF_AllocateTensor</name><argument_list>(<argument><expr><name>TF_INT32</name></expr></argument>, <argument><expr><name>transpose_perm_shape</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>transpose_perm</name> <operator>=</operator> <operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><call><name>TF_TensorData</name><argument_list>(<argument><expr><name>tensor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>transpose_perm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>transpose_perm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>transpose_perm</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>transpose_perm</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_SetAttrTensor</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>, <argument><expr><name>tensor</name></expr></argument>, <argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TF_GetCode</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TF_OK</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>CLEANUP_ON_ERROR</name><argument_list>(<argument><expr><name>tf_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>transpose_op</name> <operator>=</operator> <call><name>TF_FinishOperation</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>layer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>layer</name> <operator>&lt;</operator> <name><name>conv_network</name><operator>-&gt;</operator><name>layers_num</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>layer</name></expr></incr>)</control><block>{<block_content>
<switch>switch <condition>(<expr><name><name>conv_network</name><operator>-&gt;</operator><name>layers</name><index>[<expr><name>layer</name></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition><block>{<block_content>
<case>case <expr><name>DLT_INPUT</name></expr>:</case>
<expr_stmt><expr><name>layer_add_res</name> <operator>=</operator> <name>DNN_SUCCESS</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DLT_CONV2D</name></expr>:</case>
<expr_stmt><expr><name>layer_add_res</name> <operator>=</operator> <call><name>add_conv_layer</name><argument_list>(<argument><expr><name>tf_model</name></expr></argument>, <argument><expr><name>transpose_op</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument>,
<argument><expr><operator>(</operator><name>ConvolutionalParams</name> <operator>*</operator><operator>)</operator><name><name>conv_network</name><operator>-&gt;</operator><name>layers</name><index>[<expr><name>layer</name></expr>]</index></name><operator>.</operator><name>params</name></expr></argument>, <argument><expr><name>layer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DLT_DEPTH_TO_SPACE</name></expr>:</case>
<expr_stmt><expr><name>layer_add_res</name> <operator>=</operator> <call><name>add_depth_to_space_layer</name><argument_list>(<argument><expr><name>tf_model</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument>,
<argument><expr><operator>(</operator><name>DepthToSpaceParams</name> <operator>*</operator><operator>)</operator><name><name>conv_network</name><operator>-&gt;</operator><name>layers</name><index>[<expr><name>layer</name></expr>]</index></name><operator>.</operator><name>params</name></expr></argument>, <argument><expr><name>layer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DLT_MIRROR_PAD</name></expr>:</case>
<expr_stmt><expr><name>layer_add_res</name> <operator>=</operator> <call><name>add_pad_layer</name><argument_list>(<argument><expr><name>tf_model</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument>,
<argument><expr><operator>(</operator><name>LayerPadParams</name> <operator>*</operator><operator>)</operator><name><name>conv_network</name><operator>-&gt;</operator><name>layers</name><index>[<expr><name>layer</name></expr>]</index></name><operator>.</operator><name>params</name></expr></argument>, <argument><expr><name>layer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DLT_MAXIMUM</name></expr>:</case>
<expr_stmt><expr><name>layer_add_res</name> <operator>=</operator> <call><name>add_maximum_layer</name><argument_list>(<argument><expr><name>tf_model</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument>,
<argument><expr><operator>(</operator><name>DnnLayerMaximumParams</name> <operator>*</operator><operator>)</operator><name><name>conv_network</name><operator>-&gt;</operator><name>layers</name><index>[<expr><name>layer</name></expr>]</index></name><operator>.</operator><name>params</name></expr></argument>, <argument><expr><name>layer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>CLEANUP_ON_ERROR</name><argument_list>(<argument><expr><name>tf_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>layer_add_res</name> <operator>!=</operator> <name>DNN_SUCCESS</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>CLEANUP_ON_ERROR</name><argument_list>(<argument><expr><name>tf_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>op_desc</name> <operator>=</operator> <call><name>TF_NewOperation</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>, <argument><expr><literal type="string">"Identity"</literal></expr></argument>, <argument><expr><literal type="string">"y"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>input</name><operator>.</operator><name>oper</name></name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>input</name><operator>.</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_AddInput</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_FinishOperation</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>, <argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TF_GetCode</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TF_OK</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>CLEANUP_ON_ERROR</name><argument_list>(<argument><expr><name>tf_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_dnn_free_model_native</name><argument_list>(<argument><expr><operator>&amp;</operator><name>native_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DNN_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>DNNModel</name> <modifier>*</modifier></type><name>ff_dnn_load_model_tf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>model_filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DNNModel</name> <modifier>*</modifier></type><name>model</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TFModel</name> <modifier>*</modifier></type><name>tf_model</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>model</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DNNModel</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>model</name></expr>)</condition><block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tf_model</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TFModel</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tf_model</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>load_tf_model</name><argument_list>(<argument><expr><name>tf_model</name></expr></argument>, <argument><expr><name>model_filename</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DNN_SUCCESS</name></expr>)</condition><block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>load_native_model</name><argument_list>(<argument><expr><name>tf_model</name></expr></argument>, <argument><expr><name>model_filename</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DNN_SUCCESS</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tf_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>model</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>tf_model</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>set_input_output</name></name> <operator>=</operator> <operator>&amp;</operator><name>set_input_output_tf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>get_input</name></name> <operator>=</operator> <operator>&amp;</operator><name>get_input_tf</name></expr>;</expr_stmt>

<return>return <expr><name>model</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>DNNReturnType</name></type> <name>ff_dnn_execute_model_tf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DNNModel</name> <modifier>*</modifier></type><name>model</name></decl></parameter>, <parameter><decl><type><name>DNNData</name> <modifier>*</modifier></type><name>outputs</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>nb_output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TFModel</name> <modifier>*</modifier></type><name>tf_model</name> <init>= <expr><operator>(</operator><name>TFModel</name> <operator>*</operator><operator>)</operator><name><name>model</name><operator>-&gt;</operator><name>model</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>nb</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>nb_output</name></expr></argument>, <argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>nb_output</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>nb</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>DNN_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>output_tensors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tf_model</name><operator>-&gt;</operator><name>nb_output</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tf_model</name><operator>-&gt;</operator><name>output_tensors</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TF_DeleteTensor</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>output_tensors</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tf_model</name><operator>-&gt;</operator><name>output_tensors</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>TF_SessionRun</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>tf_model</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tf_model</name><operator>-&gt;</operator><name>input_tensor</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>outputs</name></name></expr></argument>, <argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>output_tensors</name></name></expr></argument>, <argument><expr><name>nb</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>TF_GetCode</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TF_OK</name></expr>)</condition><block>{<block_content>
<return>return <expr><name>DNN_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>outputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <call><name>TF_Dim</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>output_tensors</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <call><name>TF_Dim</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>output_tensors</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>channels</name> <operator>=</operator> <call><name>TF_Dim</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>output_tensors</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <call><name>TF_TensorData</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>output_tensors</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dt</name> <operator>=</operator> <call><name>TF_TensorType</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>output_tensors</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>DNN_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_dnn_free_model_tf</name><parameter_list>(<parameter><decl><type><name>DNNModel</name> <modifier>*</modifier><modifier>*</modifier></type><name>model</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TFModel</name> <modifier>*</modifier></type><name>tf_model</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>model</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>tf_model</name> <operator>=</operator> <operator>(</operator><name>TFModel</name> <operator>*</operator><operator>)</operator><name><operator>(</operator><operator>*</operator><name>model</name><operator>)</operator><operator>-&gt;</operator><name>model</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tf_model</name><operator>-&gt;</operator><name>graph</name></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>TF_DeleteGraph</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tf_model</name><operator>-&gt;</operator><name>session</name></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>TF_CloseSession</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TF_DeleteSession</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>TF_DeleteStatus</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tf_model</name><operator>-&gt;</operator><name>input_tensor</name></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>TF_DeleteTensor</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>input_tensor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tf_model</name><operator>-&gt;</operator><name>output_tensors</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tf_model</name><operator>-&gt;</operator><name>nb_output</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tf_model</name><operator>-&gt;</operator><name>output_tensors</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TF_DeleteTensor</name><argument_list>(<argument><expr><name><name>tf_model</name><operator>-&gt;</operator><name>output_tensors</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tf_model</name><operator>-&gt;</operator><name>output_tensors</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tf_model</name><operator>-&gt;</operator><name>outputs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tf_model</name><operator>-&gt;</operator><name>output_tensors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tf_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
