<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vf_decimate.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/timestamp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INPUT_MAIN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INPUT_CLEANSRC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<struct>struct <name>qitem</name> <block>{
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>maxbdiff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>totdiff</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct <name>DecimateContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>qitem</name></name> <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>fid</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>filled</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>last</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier><modifier>*</modifier></type><name>clean_src</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>got_frame</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>AVRational</name></type> <name>ts_unit</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int64_t</name></type> <name>start_pts</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>eof</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>hsub</name></decl>, <name>vsub</name>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nxblocks</name></decl>, <name>nyblocks</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bdiffsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>bdiffs</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>cycle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>dupthresh_flt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>scthresh_flt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>dupthresh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>scthresh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>blockx</name></decl>, <name>blocky</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ppsrc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>chroma</name></decl>;</decl_stmt>
}</block></struct></type> <name>DecimateContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(DecimateContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM|AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>decimate_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"cycle"</literal></expr>, <expr><literal type="string">"set the number of frame from which one will be dropped"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>cycle</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">5</literal></expr>}</block></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dupthresh"</literal></expr>, <expr><literal type="string">"set duplicate threshold"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>dupthresh_flt</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">1.1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"scthresh"</literal></expr>, <expr><literal type="string">"set scene change threshold"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>scthresh_flt</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">15.0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"blockx"</literal></expr>, <expr><literal type="string">"set the size of the x-axis blocks used during metric calculations"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>blockx</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">32</literal></expr>}</block></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">9</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"blocky"</literal></expr>, <expr><literal type="string">"set the size of the y-axis blocks used during metric calculations"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>blocky</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">32</literal></expr>}</block></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">9</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ppsrc"</literal></expr>, <expr><literal type="string">"mark main input as a pre-processed input and activate clean source input stream"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>ppsrc</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"chroma"</literal></expr>, <expr><literal type="string">"set whether or not chroma is considered in the metric calculations"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>chroma</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>decimate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>calc_diffs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DecimateContext</name> <modifier>*</modifier></type><name>dm</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>qitem</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>f1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>f2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>maxdiff</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>bdiffs</name> <init>= <expr><name><name>dm</name><operator>-&gt;</operator><name>bdiffs</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>plane</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>bdiffs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>dm</name><operator>-&gt;</operator><name>bdiffsize</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>bdiffs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <operator>(</operator><ternary><condition><expr><name><name>dm</name><operator>-&gt;</operator><name>chroma</name></name> <operator>&amp;&amp;</operator> <name><name>f1</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>xl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>linesize1</name> <init>= <expr><name><name>f1</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>linesize2</name> <init>= <expr><name><name>f2</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>f1p</name> <init>= <expr><name><name>f1</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>f2p</name> <init>= <expr><name><name>f2</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><ternary><condition><expr><name>plane</name></expr> ?</condition><then> <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>f1</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>dm</name><operator>-&gt;</operator><name>hsub</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>f1</name><operator>-&gt;</operator><name>width</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><ternary><condition><expr><name>plane</name></expr> ?</condition><then> <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>f1</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>dm</name><operator>-&gt;</operator><name>vsub</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>f1</name><operator>-&gt;</operator><name>height</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hblockx</name> <init>= <expr><name><name>dm</name><operator>-&gt;</operator><name>blockx</name></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hblocky</name> <init>= <expr><name><name>dm</name><operator>-&gt;</operator><name>blocky</name></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>plane</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hblockx</name> <operator>&gt;&gt;=</operator> <name><name>dm</name><operator>-&gt;</operator><name>hsub</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>hblocky</name> <operator>&gt;&gt;=</operator> <name><name>dm</name><operator>-&gt;</operator><name>vsub</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ydest</name> <init>= <expr><name>y</name> <operator>/</operator> <name>hblocky</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xdest</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALC_DIFF</name><parameter_list>(<parameter><type><name>nbits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { for (x = 0; x &lt; width; x += hblockx) { int64_t acc = 0; int m = FFMIN(width, x + hblockx); for (xl = x; xl &lt; m; xl++) acc += abs(((const uint##nbits##_t *)f1p)[xl] - ((const uint##nbits##_t *)f2p)[xl]); bdiffs[ydest * dm-&gt;nxblocks + xdest] += acc; xdest++; } } while (0)</cpp:value></cpp:define>










<if_stmt><if>if <condition>(<expr><name><name>dm</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>CALC_DIFF</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>CALC_DIFF</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>f1p</name> <operator>+=</operator> <name>linesize1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>f2p</name> <operator>+=</operator> <name>linesize2</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dm</name><operator>-&gt;</operator><name>nyblocks</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>dm</name><operator>-&gt;</operator><name>nxblocks</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>tmp</name> <init>= <expr><name><name>bdiffs</name><index>[ <expr><name>i</name> <operator>*</operator> <name><name>dm</name><operator>-&gt;</operator><name>nxblocks</name></name> <operator>+</operator> <name>j</name></expr> ]</index></name>
<operator>+</operator> <name><name>bdiffs</name><index>[ <expr><name>i</name> <operator>*</operator> <name><name>dm</name><operator>-&gt;</operator><name>nxblocks</name></name> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name>
<operator>+</operator> <name><name>bdiffs</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>dm</name><operator>-&gt;</operator><name>nxblocks</name></name> <operator>+</operator> <name>j</name></expr> ]</index></name>
<operator>+</operator> <name><name>bdiffs</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>dm</name><operator>-&gt;</operator><name>nxblocks</name></name> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&gt;</operator> <name>maxdiff</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>maxdiff</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>totdiff</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dm</name><operator>-&gt;</operator><name>bdiffsize</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>totdiff</name></name> <operator>+=</operator> <name><name>bdiffs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>maxbdiff</name></name> <operator>=</operator> <name>maxdiff</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>scpos</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>duppos</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>drop</name> <init>= <expr><name>INT_MIN</name></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>lowest</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DecimateContext</name> <modifier>*</modifier></type><name>dm</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>prv</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>FF_INLINK_IDX</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>INPUT_MAIN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dm</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name><name>dm</name><operator>-&gt;</operator><name>fid</name></name></expr>]</index></name><operator>.</operator><name>frame</name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dm</name><operator>-&gt;</operator><name>got_frame</name><index>[<expr><name>INPUT_MAIN</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>dm</name><operator>-&gt;</operator><name>clean_src</name><index>[<expr><name><name>dm</name><operator>-&gt;</operator><name>fid</name></name></expr>]</index></name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dm</name><operator>-&gt;</operator><name>got_frame</name><index>[<expr><name>INPUT_CLEANSRC</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dm</name><operator>-&gt;</operator><name>got_frame</name><index>[<expr><name>INPUT_MAIN</name></expr>]</index></name> <operator>||</operator> <operator>(</operator><name><name>dm</name><operator>-&gt;</operator><name>ppsrc</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>dm</name><operator>-&gt;</operator><name>got_frame</name><index>[<expr><name>INPUT_CLEANSRC</name></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dm</name><operator>-&gt;</operator><name>got_frame</name><index>[<expr><name>INPUT_MAIN</name></expr>]</index></name> <operator>=</operator> <name><name>dm</name><operator>-&gt;</operator><name>got_frame</name><index>[<expr><name>INPUT_CLEANSRC</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dm</name><operator>-&gt;</operator><name>ppsrc</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>in</name> <operator>=</operator> <name><name>dm</name><operator>-&gt;</operator><name>clean_src</name><index>[<expr><name><name>dm</name><operator>-&gt;</operator><name>fid</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>in</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prv</name> <operator>=</operator> <ternary><condition><expr><name><name>dm</name><operator>-&gt;</operator><name>fid</name></name></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name><name>dm</name><operator>-&gt;</operator><name>ppsrc</name></name></expr> ?</condition><then> <expr><name><name>dm</name><operator>-&gt;</operator><name>clean_src</name><index>[<expr><name><name>dm</name><operator>-&gt;</operator><name>fid</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>dm</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name><name>dm</name><operator>-&gt;</operator><name>fid</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>frame</name></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><name><name>dm</name><operator>-&gt;</operator><name>last</name></name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dm</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name><name>dm</name><operator>-&gt;</operator><name>fid</name></name></expr>]</index></name><operator>.</operator><name>maxbdiff</name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dm</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name><name>dm</name><operator>-&gt;</operator><name>fid</name></name></expr>]</index></name><operator>.</operator><name>totdiff</name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>calc_diffs</name><argument_list>(<argument><expr><name>dm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dm</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name><name>dm</name><operator>-&gt;</operator><name>fid</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>prv</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>dm</name><operator>-&gt;</operator><name>fid</name></name> <operator>!=</operator> <name><name>dm</name><operator>-&gt;</operator><name>cycle</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dm</name><operator>-&gt;</operator><name>last</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dm</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>av_frame_clone</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dm</name><operator>-&gt;</operator><name>fid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>lowest</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dm</name><operator>-&gt;</operator><name>cycle</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dm</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>totdiff</name> <operator>&gt;</operator> <name><name>dm</name><operator>-&gt;</operator><name>scthresh</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>scpos</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dm</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>maxbdiff</name> <operator>&lt;</operator> <name><name>dm</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>lowest</name></expr>]</index></name><operator>.</operator><name>maxbdiff</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lowest</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>dm</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>lowest</name></expr>]</index></name><operator>.</operator><name>maxbdiff</name> <operator>&lt;</operator> <name><name>dm</name><operator>-&gt;</operator><name>dupthresh</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>duppos</name> <operator>=</operator> <name>lowest</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>drop</name> <operator>=</operator> <ternary><condition><expr><name>scpos</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>duppos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>scpos</name></expr> </then><else>: <expr><name>lowest</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>av_log_get_level</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>AV_LOG_DEBUG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"1/%d frame drop:\n"</literal></expr></argument>, <argument><expr><name><name>dm</name><operator>-&gt;</operator><name>cycle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dm</name><operator>-&gt;</operator><name>cycle</name></name> <operator>&amp;&amp;</operator> <name><name>dm</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frame</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,<argument><expr><literal type="string">" #%d: totdiff=%08"</literal><name>PRIx64</name><literal type="string">" maxbdiff=%08"</literal><name>PRIx64</name><literal type="string">"%s%s%s%s\n"</literal></expr></argument>,
<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>dm</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>totdiff</name></expr></argument>, <argument><expr><name><name>dm</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>maxbdiff</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>==</operator> <name>scpos</name></expr> ?</condition><then> <expr><literal type="string">" sc"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>==</operator> <name>duppos</name></expr> ?</condition><then> <expr><literal type="string">" dup"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>==</operator> <name>lowest</name></expr> ?</condition><then> <expr><literal type="string">" lowest"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>==</operator> <name>drop</name></expr> ?</condition><then> <expr><literal type="string">" [DROP]"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dm</name><operator>-&gt;</operator><name>cycle</name></name> <operator>&amp;&amp;</operator> <name><name>dm</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frame</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>drop</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dm</name><operator>-&gt;</operator><name>ppsrc</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dm</name><operator>-&gt;</operator><name>clean_src</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dm</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name><name>dm</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frame</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dm</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frame</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator> <name><name>dm</name><operator>-&gt;</operator><name>start_pts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dm</name><operator>-&gt;</operator><name>start_pts</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dm</name><operator>-&gt;</operator><name>ppsrc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>frame</name> <operator>=</operator> <name><name>dm</name><operator>-&gt;</operator><name>clean_src</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dm</name><operator>-&gt;</operator><name>clean_src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <macro><name>av_rescale_q</name><argument_list>(<argument>outlink-&gt;frame_count_in</argument>, <argument>dm-&gt;ts_unit</argument>, <argument>(AVRational){<literal type="number">1</literal></argument>,<argument><literal type="number">1</literal>}</argument>)</argument_list></macro> <operator>+</operator>
<operator>(</operator><ternary><condition><expr><name><name>dm</name><operator>-&gt;</operator><name>start_pts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>dm</name><operator>-&gt;</operator><name>start_pts</name></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>max_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DecimateContext</name> <modifier>*</modifier></type><name>dm</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>pix_desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dm</name><operator>-&gt;</operator><name>hsub</name></name> <operator>=</operator> <name><name>pix_desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dm</name><operator>-&gt;</operator><name>vsub</name></name> <operator>=</operator> <name><name>pix_desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dm</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <name><name>pix_desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>
<expr_stmt><expr><name>max_value</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>dm</name><operator>-&gt;</operator><name>depth</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dm</name><operator>-&gt;</operator><name>scthresh</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>max_value</name> <operator>*</operator> <name>w</name> <operator>*</operator> <name>h</name> <operator>*</operator> <name><name>dm</name><operator>-&gt;</operator><name>scthresh_flt</name></name><operator>)</operator> <operator>/</operator> <literal type="number">100</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dm</name><operator>-&gt;</operator><name>dupthresh</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>max_value</name> <operator>*</operator> <name><name>dm</name><operator>-&gt;</operator><name>blockx</name></name> <operator>*</operator> <name><name>dm</name><operator>-&gt;</operator><name>blocky</name></name> <operator>*</operator> <name><name>dm</name><operator>-&gt;</operator><name>dupthresh_flt</name></name><operator>)</operator> <operator>/</operator> <literal type="number">100</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dm</name><operator>-&gt;</operator><name>nxblocks</name></name> <operator>=</operator> <operator>(</operator><name>w</name> <operator>+</operator> <name><name>dm</name><operator>-&gt;</operator><name>blockx</name></name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>dm</name><operator>-&gt;</operator><name>blockx</name></name><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dm</name><operator>-&gt;</operator><name>nyblocks</name></name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>+</operator> <name><name>dm</name><operator>-&gt;</operator><name>blocky</name></name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>dm</name><operator>-&gt;</operator><name>blocky</name></name><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dm</name><operator>-&gt;</operator><name>bdiffsize</name></name> <operator>=</operator> <name><name>dm</name><operator>-&gt;</operator><name>nxblocks</name></name> <operator>*</operator> <name><name>dm</name><operator>-&gt;</operator><name>nyblocks</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dm</name><operator>-&gt;</operator><name>bdiffs</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>dm</name><operator>-&gt;</operator><name>bdiffsize</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>dm</name><operator>-&gt;</operator><name>bdiffs</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dm</name><operator>-&gt;</operator><name>queue</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>dm</name><operator>-&gt;</operator><name>cycle</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>dm</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dm</name><operator>-&gt;</operator><name>bdiffs</name></name> <operator>||</operator> <operator>!</operator><name><name>dm</name><operator>-&gt;</operator><name>queue</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dm</name><operator>-&gt;</operator><name>ppsrc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dm</name><operator>-&gt;</operator><name>clean_src</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>dm</name><operator>-&gt;</operator><name>cycle</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>dm</name><operator>-&gt;</operator><name>clean_src</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dm</name><operator>-&gt;</operator><name>clean_src</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>decimate_init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DecimateContext</name> <modifier>*</modifier></type><name>dm</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterPad</name></type> <name>pad</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><literal type="string">"main"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pad</name><operator>.</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_insert_inpad</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>INPUT_MAIN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pad</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pad</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dm</name><operator>-&gt;</operator><name>ppsrc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pad</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><literal type="string">"clean_src"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pad</name><operator>.</operator><name>config_props</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pad</name><operator>.</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_insert_inpad</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>INPUT_CLEANSRC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pad</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pad</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dm</name><operator>-&gt;</operator><name>blockx</name></name> <operator>&amp;</operator> <operator>(</operator><name><name>dm</name><operator>-&gt;</operator><name>blockx</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>dm</name><operator>-&gt;</operator><name>blocky</name></name> <operator>&amp;</operator> <operator>(</operator><name><name>dm</name><operator>-&gt;</operator><name>blocky</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"blockx and blocky settings must be power of two\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dm</name><operator>-&gt;</operator><name>start_pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>decimate_uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DecimateContext</name> <modifier>*</modifier></type><name>dm</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dm</name><operator>-&gt;</operator><name>last</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dm</name><operator>-&gt;</operator><name>bdiffs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dm</name><operator>-&gt;</operator><name>queue</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dm</name><operator>-&gt;</operator><name>cycle</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dm</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dm</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dm</name><operator>-&gt;</operator><name>clean_src</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dm</name><operator>-&gt;</operator><name>cycle</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dm</name><operator>-&gt;</operator><name>clean_src</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dm</name><operator>-&gt;</operator><name>clean_src</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_inputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>input_pads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>request_inlink</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DecimateContext</name> <modifier>*</modifier></type><name>dm</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dm</name><operator>-&gt;</operator><name>got_frame</name><index>[<expr><name>lid</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><name>lid</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_request_frame</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AVERROR_EOF</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>dm</name><operator>-&gt;</operator><name>eof</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>lid</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>filter_frame</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>request_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DecimateContext</name> <modifier>*</modifier></type><name>dm</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>eof_mask</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><name>INPUT_MAIN</name> <operator>|</operator> <name><name>dm</name><operator>-&gt;</operator><name>ppsrc</name></name><operator>&lt;&lt;</operator><name>INPUT_CLEANSRC</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dm</name><operator>-&gt;</operator><name>eof</name></name> <operator>&amp;</operator> <name>eof_mask</name><operator>)</operator> <operator>==</operator> <name>eof_mask</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>request_inlink</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>INPUT_MAIN</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dm</name><operator>-&gt;</operator><name>ppsrc</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>ret</name> <operator>=</operator> <call><name>request_inlink</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>INPUT_CLEANSRC</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_NOALPHA</name><parameter_list>(<parameter><type><name>suf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AV_PIX_FMT_YUV420##suf, AV_PIX_FMT_YUV422##suf, AV_PIX_FMT_YUV444##suf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_ALPHA</name><parameter_list>(<parameter><type><name>suf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AV_PIX_FMT_YUVA420##suf, AV_PIX_FMT_YUVA422##suf, AV_PIX_FMT_YUVA444##suf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF</name><parameter_list>(<parameter><type><name>suf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PF_NOALPHA(suf), PF_ALPHA(suf)</cpp:value></cpp:define>
<expr><call><name>PF</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>PF</name><argument_list>(<argument><expr><name>P9</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>PF</name><argument_list>(<argument><expr><name>P10</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>PF_NOALPHA</name><argument_list>(<argument><expr><name>P12</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>PF_NOALPHA</name><argument_list>(<argument><expr><name>P14</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>PF</name><argument_list>(<argument><expr><name>P16</name></expr></argument>)</argument_list></call></expr>,
<expr><name>AV_PIX_FMT_YUV440P</name></expr>, <expr><name>AV_PIX_FMT_YUV411P</name></expr>, <expr><name>AV_PIX_FMT_YUV410P</name></expr>,
<expr><name>AV_PIX_FMT_GRAY8</name></expr>, <expr><name>AV_PIX_FMT_GRAY16</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts_list</name> <init>= <expr><call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts_list</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fmts_list</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_output</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DecimateContext</name> <modifier>*</modifier></type><name>dm</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>=
<expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><ternary><condition><expr><name><name>dm</name><operator>-&gt;</operator><name>ppsrc</name></name></expr> ?</condition><then> <expr><name>INPUT_CLEANSRC</name></expr> </then><else>: <expr><name>INPUT_MAIN</name></expr></else></ternary></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVRational</name></type> <name>fps</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>frame_rate</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fps</name><operator>.</operator><name>num</name></name> <operator>||</operator> <operator>!</operator><name><name>fps</name><operator>.</operator><name>den</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"The input needs a constant frame rate; "</literal>
<literal type="string">"current rate of %d/%d is invalid\n"</literal></expr></argument>, <argument><expr><name><name>fps</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>fps</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fps</name> <operator>=</operator> <macro><name>av_mul_q</name><argument_list>(<argument>fps</argument>, <argument>(AVRational){dm-&gt;cycle - <literal type="number">1</literal></argument>, <argument>dm-&gt;cycle}</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"FPS: %d/%d -&gt; %d/%d\n"</literal></expr></argument>,
<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>frame_rate</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>frame_rate</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name><name>fps</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>fps</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>time_base</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>frame_rate</name></name> <operator>=</operator> <name>fps</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dm</name><operator>-&gt;</operator><name>ts_unit</name></name> <operator>=</operator> <call><name>av_inv_q</name><argument_list>(<argument><expr><call><name>av_mul_q</name><argument_list>(<argument><expr><name>fps</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>decimate_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>request_frame</name> <operator>=</operator> <name>request_frame</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_output</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_decimate</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"decimate"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Decimate frames (post field matching filter)."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>decimate_init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>decimate_uninit</name></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DecimateContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>decimate_outputs</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>decimate_class</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_DYNAMIC_INPUTS</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
