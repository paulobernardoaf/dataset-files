<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\af_loudnorm.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ebur128.h"</cpp:file></cpp:include>

<enum>enum <name>FrameType</name> <block>{
<decl><name>FIRST_FRAME</name></decl>,
<decl><name>INNER_FRAME</name></decl>,
<decl><name>FINAL_FRAME</name></decl>,
<decl><name>LINEAR_MODE</name></decl>,
<decl><name>FRAME_NB</name></decl>
}</block>;</enum>

<enum>enum <name>LimiterState</name> <block>{
<decl><name>OUT</name></decl>,
<decl><name>ATTACK</name></decl>,
<decl><name>SUSTAIN</name></decl>,
<decl><name>RELEASE</name></decl>,
<decl><name>STATE_NB</name></decl>
}</block>;</enum>

<enum>enum <name>PrintFormat</name> <block>{
<decl><name>NONE</name></decl>,
<decl><name>JSON</name></decl>,
<decl><name>SUMMARY</name></decl>,
<decl><name>PF_NB</name></decl>
}</block>;</enum>

<typedef>typedef <type><struct>struct <name>LoudNormContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>target_i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>target_lra</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>target_tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>measured_i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>measured_lra</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>measured_tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>measured_thresh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>linear</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dual_mono</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>PrintFormat</name></name></type> <name>print_format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buf_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_buf_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>delta</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>weights</name><index>[<expr><literal type="number">21</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>prev_delta</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>gain_reduction</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>limiter_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>prev_smp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>limiter_buf_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>limiter_buf_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>LimiterState</name></name></type> <name>limiter_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>peak_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>env_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>env_cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attack_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>release_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>FrameType</name></name></type> <name>frame_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>above_threshold</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_nb_samples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFEBUR128State</name> <modifier>*</modifier></type><name>r128_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFEBUR128State</name> <modifier>*</modifier></type><name>r128_out</name></decl>;</decl_stmt>
}</block></struct></type> <name>LoudNormContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(LoudNormContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_AUDIO_PARAM|AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>loudnorm_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"I"</literal></expr>, <expr><literal type="string">"set integrated loudness target"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>target_i</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <operator>-</operator><literal type="number">24.</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">70.</literal></expr>, <expr><operator>-</operator><literal type="number">5.</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"i"</literal></expr>, <expr><literal type="string">"set integrated loudness target"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>target_i</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <operator>-</operator><literal type="number">24.</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">70.</literal></expr>, <expr><operator>-</operator><literal type="number">5.</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"LRA"</literal></expr>, <expr><literal type="string">"set loudness range target"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>target_lra</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">7.</literal></expr>}</block></expr>, <expr><literal type="number">1.</literal></expr>, <expr><literal type="number">20.</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"lra"</literal></expr>, <expr><literal type="string">"set loudness range target"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>target_lra</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">7.</literal></expr>}</block></expr>, <expr><literal type="number">1.</literal></expr>, <expr><literal type="number">20.</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"TP"</literal></expr>, <expr><literal type="string">"set maximum true peak"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>target_tp</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <operator>-</operator><literal type="number">2.</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">9.</literal></expr>, <expr><literal type="number">0.</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"tp"</literal></expr>, <expr><literal type="string">"set maximum true peak"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>target_tp</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <operator>-</operator><literal type="number">2.</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">9.</literal></expr>, <expr><literal type="number">0.</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"measured_I"</literal></expr>, <expr><literal type="string">"measured IL of input file"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>measured_i</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">0.</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">99.</literal></expr>, <expr><literal type="number">0.</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"measured_i"</literal></expr>, <expr><literal type="string">"measured IL of input file"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>measured_i</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">0.</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">99.</literal></expr>, <expr><literal type="number">0.</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"measured_LRA"</literal></expr>, <expr><literal type="string">"measured LRA of input file"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>measured_lra</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">0.</literal></expr>}</block></expr>, <expr><literal type="number">0.</literal></expr>, <expr><literal type="number">99.</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"measured_lra"</literal></expr>, <expr><literal type="string">"measured LRA of input file"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>measured_lra</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">0.</literal></expr>}</block></expr>, <expr><literal type="number">0.</literal></expr>, <expr><literal type="number">99.</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"measured_TP"</literal></expr>, <expr><literal type="string">"measured true peak of input file"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>measured_tp</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">99.</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">99.</literal></expr>, <expr><literal type="number">99.</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"measured_tp"</literal></expr>, <expr><literal type="string">"measured true peak of input file"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>measured_tp</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">99.</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">99.</literal></expr>, <expr><literal type="number">99.</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"measured_thresh"</literal></expr>, <expr><literal type="string">"measured threshold of input file"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>measured_thresh</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <operator>-</operator><literal type="number">70.</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">99.</literal></expr>, <expr><literal type="number">0.</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"offset"</literal></expr>, <expr><literal type="string">"set offset gain"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">0.</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">99.</literal></expr>, <expr><literal type="number">99.</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"linear"</literal></expr>, <expr><literal type="string">"normalize linearly if possible"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>linear</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dual_mono"</literal></expr>, <expr><literal type="string">"treat mono input as dual-mono"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>dual_mono</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"print_format"</literal></expr>, <expr><literal type="string">"set print format for stats"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>print_format</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>NONE</name></expr>}</block></expr>, <expr><name>NONE</name></expr>, <expr><name>PF_NB</name> <operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"print_format"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"none"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>NONE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"print_format"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"json"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>JSON</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"print_format"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"summary"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>SUMMARY</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"print_format"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>loudnorm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>frame_size</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sample_rate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>frame_len_msec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>frame_size</name> <init>= <expr><call><name>round</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>sample_rate</name> <operator>*</operator> <operator>(</operator><name>frame_len_msec</name> <operator>/</operator> <literal type="number">1000.0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>frame_size</name> <operator>+</operator> <operator>(</operator><name>frame_size</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_gaussian_filter</name><parameter_list>(<parameter><decl><type><name>LoudNormContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>total_weight</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>sigma</name> <init>= <expr><literal type="number">3.5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>adjust</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">21</literal> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>c1</name> <init>= <expr><literal type="number">1.0</literal> <operator>/</operator> <operator>(</operator><name>sigma</name> <operator>*</operator> <call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">2.0</literal> <operator>*</operator> <name>M_PI</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>c2</name> <init>= <expr><literal type="number">2.0</literal> <operator>*</operator> <call><name>pow</name><argument_list>(<argument><expr><name>sigma</name></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">21</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>x</name> <init>= <expr><name>i</name> <operator>-</operator> <name>offset</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>weights</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>c1</name> <operator>*</operator> <call><name>exp</name><argument_list>(<argument><expr><operator>-</operator><operator>(</operator><call><name>pow</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call> <operator>/</operator> <name>c2</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>total_weight</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>weights</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>adjust</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>/</operator> <name>total_weight</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">21</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>weights</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <name>adjust</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>gaussian_filter</name><parameter_list>(<parameter><decl><type><name>LoudNormContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>result</name> <init>= <expr><literal type="number">0.</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <ternary><condition><expr><name>index</name> <operator>-</operator> <literal type="number">10</literal> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>index</name> <operator>-</operator> <literal type="number">10</literal></expr> </then><else>: <expr><name>index</name> <operator>+</operator> <literal type="number">20</literal></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">21</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>delta</name><index>[<expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>index</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">30</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>index</name> <operator>+</operator> <name>i</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>index</name> <operator>+</operator> <name>i</name> <operator>-</operator> <literal type="number">30</literal><operator>)</operator></expr></else></ternary></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>weights</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>detect_peak</name><parameter_list>(<parameter><decl><type><name>LoudNormContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>peak_delta</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>peak_value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>ceiling</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>peak_delta</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>limiter_buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ceiling</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>target_tp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>limiter_buf_index</name></name> <operator>+</operator> <operator>(</operator><name>offset</name> <operator>*</operator> <name>channels</name><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1920</literal> <operator>*</operator> <name>channels</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>limiter_buf_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>index</name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>limiter_buf_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>FIRST_FRAME</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_smp</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>index</name> <operator>+</operator> <name>c</name> <operator>-</operator> <name>channels</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>this</name></decl>, <decl><type ref="prev"/><name>next</name></decl>, <decl><type ref="prev"/><name>max_peak</name></decl>;</decl_stmt>

<expr_stmt><expr><name>this</name> <operator>=</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><ternary><condition><expr><operator>(</operator><name>index</name> <operator>+</operator> <name>c</name><operator>)</operator> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>limiter_buf_size</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>index</name> <operator>+</operator> <name>c</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>index</name> <operator>+</operator> <name>c</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>limiter_buf_size</name></name><operator>)</operator></expr></else></ternary></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><ternary><condition><expr><operator>(</operator><name>index</name> <operator>+</operator> <name>c</name> <operator>+</operator> <name>channels</name><operator>)</operator> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>limiter_buf_size</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>index</name> <operator>+</operator> <name>c</name> <operator>+</operator> <name>channels</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>index</name> <operator>+</operator> <name>c</name> <operator>+</operator> <name>channels</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>limiter_buf_size</name></name><operator>)</operator></expr></else></ternary></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>prev_smp</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&lt;=</operator> <name>this</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>next</name> <operator>&lt;=</operator> <name>this</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>this</name> <operator>&gt;</operator> <name>ceiling</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>detected</name></decl>;</decl_stmt>

<expr_stmt><expr><name>detected</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><ternary><condition><expr><operator>(</operator><name>index</name> <operator>+</operator> <name>c</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>*</operator> <name>channels</name><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>limiter_buf_size</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>index</name> <operator>+</operator> <name>c</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>*</operator> <name>channels</name><operator>)</operator><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>index</name> <operator>+</operator> <name>c</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>*</operator> <name>channels</name><operator>)</operator> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>limiter_buf_size</name></name><operator>)</operator></expr></else></ternary></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>next</name> <operator>&gt;</operator> <name>this</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>detected</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>detected</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>index</name> <operator>+</operator> <name>c</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>max_peak</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>max_peak</name> <operator>=</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>index</name> <operator>+</operator> <name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_smp</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><ternary><condition><expr><operator>(</operator><name>index</name> <operator>+</operator> <name>c</name><operator>)</operator> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>limiter_buf_size</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>index</name> <operator>+</operator> <name>c</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>index</name> <operator>+</operator> <name>c</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>limiter_buf_size</name></name><operator>)</operator></expr></else></ternary></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>peak_delta</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>peak_index</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>peak_value</name> <operator>=</operator> <name>max_peak</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_smp</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name>this</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>index</name> <operator>+=</operator> <name>channels</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>limiter_buf_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>index</name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>limiter_buf_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>true_peak_limiter</name><parameter_list>(<parameter><decl><type><name>LoudNormContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>index</name></decl>, <decl><type ref="prev"/><name>peak_delta</name></decl>, <decl><type ref="prev"/><name>smp_cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>ceiling</name></decl>, <decl><type ref="prev"/><name>peak_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>limiter_buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ceiling</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>target_tp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>index</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>limiter_buf_index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>smp_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>FIRST_FRAME</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>max</name></decl>;</decl_stmt>

<expr_stmt><expr><name>max</name> <operator>=</operator> <literal type="number">0.</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">1920</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>max</name> <operator>=</operator> <ternary><condition><expr><call><name>fabs</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>max</name></expr> ?</condition><then> <expr><call><name>fabs</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>max</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>channels</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>max</name> <operator>&gt;</operator> <name>ceiling</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>gain_reduction</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ceiling</name> <operator>/</operator> <name>max</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>limiter_state</name></name> <operator>=</operator> <name>SUSTAIN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>limiter_buf</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">1920</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>env</name></decl>;</decl_stmt>
<expr_stmt><expr><name>env</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>gain_reduction</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>c</name></expr>]</index></name> <operator>*=</operator> <name>env</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>channels</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>limiter_buf</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>

<switch>switch<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>limiter_state</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OUT</name></expr>:</case>
<expr_stmt><expr><call><name>detect_peak</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>smp_cnt</name></expr></argument>, <argument><expr><name>nb_samples</name> <operator>-</operator> <name>smp_cnt</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>peak_delta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>peak_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>peak_delta</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>env_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>smp_cnt</name> <operator>+=</operator> <operator>(</operator><name>peak_delta</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>attack_length</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>gain_reduction</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>gain_reduction</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ceiling</name> <operator>/</operator> <name>peak_value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>limiter_state</name></name> <operator>=</operator> <name>ATTACK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>env_index</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>peak_index</name></name> <operator>-</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>attack_length</name></name> <operator>*</operator> <name>channels</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>env_index</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>env_index</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>limiter_buf_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>env_index</name></name> <operator>+=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>env_cnt</name></name> <operator>*</operator> <name>channels</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>env_index</name></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>limiter_buf_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>env_index</name></name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>limiter_buf_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>smp_cnt</name> <operator>=</operator> <name>nb_samples</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>ATTACK</name></expr>:</case>
<for>for <control>(<init>;</init> <condition><expr><name><name>s</name><operator>-&gt;</operator><name>env_cnt</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>attack_length</name></name></expr>;</condition> <incr><expr><name><name>s</name><operator>-&gt;</operator><name>env_cnt</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>env</name></decl>;</decl_stmt>
<expr_stmt><expr><name>env</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>gain_reduction</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>env_cnt</name></name> <operator>/</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>attack_length</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>gain_reduction</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>gain_reduction</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>env_index</name></name> <operator>+</operator> <name>c</name></expr>]</index></name> <operator>*=</operator> <name>env</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>env_index</name></name> <operator>+=</operator> <name>channels</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>env_index</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>limiter_buf_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>env_index</name></name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>limiter_buf_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>smp_cnt</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>smp_cnt</name> <operator>&gt;=</operator> <name>nb_samples</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>env_cnt</name></name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>smp_cnt</name> <operator>&lt;</operator> <name>nb_samples</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>env_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>attack_length</name></name> <operator>=</operator> <literal type="number">1920</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>limiter_state</name></name> <operator>=</operator> <name>SUSTAIN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>SUSTAIN</name></expr>:</case>
<expr_stmt><expr><call><name>detect_peak</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>smp_cnt</name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>peak_delta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>peak_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>peak_delta</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>limiter_state</name></name> <operator>=</operator> <name>RELEASE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>gain_reduction</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>gain_reduction</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>gain_reduction</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>env_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>gain_reduction</name></decl>;</decl_stmt>
<expr_stmt><expr><name>gain_reduction</name> <operator>=</operator> <name>ceiling</name> <operator>/</operator> <name>peak_value</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gain_reduction</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>gain_reduction</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>limiter_state</name></name> <operator>=</operator> <name>ATTACK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>attack_length</name></name> <operator>=</operator> <name>peak_delta</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>attack_length</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>attack_length</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>gain_reduction</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>gain_reduction</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>gain_reduction</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>gain_reduction</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>env_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name><name>s</name><operator>-&gt;</operator><name>env_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>s</name><operator>-&gt;</operator><name>env_cnt</name></name> <operator>&lt;</operator> <name>peak_delta</name></expr>;</condition> <incr><expr><name><name>s</name><operator>-&gt;</operator><name>env_cnt</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>env</name></decl>;</decl_stmt>
<expr_stmt><expr><name>env</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>gain_reduction</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>env_index</name></name> <operator>+</operator> <name>c</name></expr>]</index></name> <operator>*=</operator> <name>env</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>env_index</name></name> <operator>+=</operator> <name>channels</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>env_index</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>limiter_buf_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>env_index</name></name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>limiter_buf_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>smp_cnt</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>smp_cnt</name> <operator>&gt;=</operator> <name>nb_samples</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>env_cnt</name></name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>RELEASE</name></expr>:</case>
<for>for <control>(<init>;</init> <condition><expr><name><name>s</name><operator>-&gt;</operator><name>env_cnt</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>release_length</name></name></expr>;</condition> <incr><expr><name><name>s</name><operator>-&gt;</operator><name>env_cnt</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>env</name></decl>;</decl_stmt>
<expr_stmt><expr><name>env</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>gain_reduction</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>env_cnt</name></name> <operator>/</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>release_length</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>gain_reduction</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>gain_reduction</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>env_index</name></name> <operator>+</operator> <name>c</name></expr>]</index></name> <operator>*=</operator> <name>env</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>env_index</name></name> <operator>+=</operator> <name>channels</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>env_index</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>limiter_buf_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>env_index</name></name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>limiter_buf_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>smp_cnt</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>smp_cnt</name> <operator>&gt;=</operator> <name>nb_samples</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>env_cnt</name></name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>smp_cnt</name> <operator>&lt;</operator> <name>nb_samples</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>env_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>limiter_state</name></name> <operator>=</operator> <name>OUT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<break>break;</break>
</block_content>}</block></switch>

</block_content>}</block> while <condition>(<expr><name>smp_cnt</name> <operator>&lt;</operator> <name>nb_samples</name></expr>)</condition>;</do>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>index</name> <operator>+</operator> <name>c</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name><name>out</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>ceiling</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name>ceiling</name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name><name>out</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>channels</name></expr>;</expr_stmt>
<expr_stmt><expr><name>index</name> <operator>+=</operator> <name>channels</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>limiter_buf_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>index</name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>limiter_buf_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LoudNormContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>limiter_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>subframe_length</name></decl>, <decl><type ref="prev"/><name>src_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>gain</name></decl>, <decl><type ref="prev"/><name>gain_next</name></decl>, <decl><type ref="prev"/><name>env_global</name></decl>, <decl><type ref="prev"/><name>env_shortterm</name></decl>,
<decl><type ref="prev"/><name>global</name></decl>, <decl><type ref="prev"/><name>shortterm</name></decl>, <decl><type ref="prev"/><name>lra</name></decl>, <decl><type ref="prev"/><name>relative_threshold</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_frame_is_writable</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>out</name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ff_get_audio_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>double</name> <operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>limiter_buf</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>limiter_buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_ebur128_add_frames_double</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>r128_in</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>FIRST_FRAME</name> <operator>&amp;&amp;</operator> <name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>&lt;</operator> <call><name>frame_size</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><literal type="number">3000</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>offset_tp</name></decl>, <decl><type ref="prev"/><name>true_peak</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_ebur128_loudness_global</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>r128_in</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>global</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>tmp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ff_ebur128_sample_peak</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>r128_in</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>tmp</name> <operator>&gt;</operator> <name>true_peak</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>true_peak</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>target_i</name></name> <operator>-</operator> <name>global</name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset_tp</name> <operator>=</operator> <name>true_peak</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <ternary><condition><expr><name>offset_tp</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>target_tp</name></name></expr> ?</condition><then> <expr><name>offset</name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>target_tp</name></name> <operator>-</operator> <name>true_peak</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><literal type="number">10.</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>offset</name></name> <operator>/</operator> <literal type="number">20.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>=</operator> <name>LINEAR_MODE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frame_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FIRST_FRAME</name></expr>:</case>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>buf_index</name></name> <operator>+</operator> <name>c</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_index</name></name> <operator>+=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>ff_ebur128_loudness_shortterm</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>r128_in</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shortterm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>shortterm</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>measured_thresh</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>above_threshold</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>env_shortterm</name> <operator>=</operator> <ternary><condition><expr><name>shortterm</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">70.</literal></expr> ?</condition><then> <expr><literal type="number">0.</literal></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>target_i</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>measured_i</name></name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>above_threshold</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>env_shortterm</name> <operator>=</operator> <ternary><condition><expr><name>shortterm</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">70.</literal></expr> ?</condition><then> <expr><literal type="number">0.</literal></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>target_i</name></name> <operator>-</operator> <name>shortterm</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">30</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>delta</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><literal type="number">10.</literal></expr></argument>, <argument><expr><name>env_shortterm</name> <operator>/</operator> <literal type="number">20.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_delta</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>delta</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_index</name></name> <operator>=</operator>
<name><name>s</name><operator>-&gt;</operator><name>limiter_buf_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>limiter_buf_size</name></name> <operator>/</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>limiter_buf</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>limiter_buf_index</name></name> <operator>+</operator> <name>c</name></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>buf_index</name></name> <operator>+</operator> <name>c</name></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>delta</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>limiter_buf_index</name></name> <operator>+=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>limiter_buf_index</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>limiter_buf_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>limiter_buf_index</name></name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>limiter_buf_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_index</name></name> <operator>+=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>subframe_length</name> <operator>=</operator> <call><name>frame_size</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>true_peak_limiter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>subframe_length</name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_ebur128_add_frames_double</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>r128_out</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>subframe_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pts</name></name> <operator>+=</operator>
<name><name>out</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator>
<name><name>inlink</name><operator>-&gt;</operator><name>min_samples</name></name> <operator>=</operator>
<name><name>inlink</name><operator>-&gt;</operator><name>max_samples</name></name> <operator>=</operator>
<name><name>inlink</name><operator>-&gt;</operator><name>partial_buf_size</name></name> <operator>=</operator> <name>subframe_length</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>=</operator> <name>INNER_FRAME</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>INNER_FRAME</name></expr>:</case>
<expr_stmt><expr><name>gain</name> <operator>=</operator> <call><name>gaussian_filter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>index</name></name> <operator>+</operator> <literal type="number">10</literal> <operator>&lt;</operator> <literal type="number">30</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>index</name></name> <operator>+</operator> <literal type="number">10</literal></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>index</name></name> <operator>+</operator> <literal type="number">10</literal> <operator>-</operator> <literal type="number">30</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gain_next</name> <operator>=</operator> <call><name>gaussian_filter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>index</name></name> <operator>+</operator> <literal type="number">11</literal> <operator>&lt;</operator> <literal type="number">30</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>index</name></name> <operator>+</operator> <literal type="number">11</literal></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>index</name></name> <operator>+</operator> <literal type="number">11</literal> <operator>-</operator> <literal type="number">30</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>prev_buf_index</name></name> <operator>+</operator> <name>c</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>limiter_buf</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>limiter_buf_index</name></name> <operator>+</operator> <name>c</name></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>buf_index</name></name> <operator>+</operator> <name>c</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>gain</name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>n</name> <operator>/</operator> <name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>gain_next</name> <operator>-</operator> <name>gain</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>limiter_buf_index</name></name> <operator>+=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>limiter_buf_index</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>limiter_buf_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>limiter_buf_index</name></name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>limiter_buf_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_buf_index</name></name> <operator>+=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>prev_buf_index</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_buf_index</name></name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_index</name></name> <operator>+=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>buf_index</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_index</name></name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>subframe_length</name> <operator>=</operator> <operator>(</operator><call><name>frame_size</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name><operator>)</operator> <operator>*</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>limiter_buf_index</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>limiter_buf_index</name></name> <operator>+</operator> <name>subframe_length</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>limiter_buf_size</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>limiter_buf_index</name></name> <operator>+</operator> <name>subframe_length</name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>limiter_buf_index</name></name> <operator>+</operator> <name>subframe_length</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>limiter_buf_size</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>true_peak_limiter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_ebur128_add_frames_double</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>r128_out</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_ebur128_loudness_range</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>r128_in</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_ebur128_loudness_global</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>r128_in</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>global</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_ebur128_loudness_shortterm</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>r128_in</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shortterm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_ebur128_relative_threshold</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>r128_in</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>relative_threshold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>above_threshold</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>shortterm_out</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>shortterm</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>measured_thresh</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_delta</name></name> <operator>*=</operator> <literal type="number">1.0058</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_ebur128_loudness_shortterm</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>r128_out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shortterm_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>shortterm_out</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>target_i</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>above_threshold</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>shortterm</name> <operator>&lt;</operator> <name>relative_threshold</name> <operator>||</operator> <name>shortterm</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">70.</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>above_threshold</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>delta</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prev_delta</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>env_global</name> <operator>=</operator> <ternary><condition><expr><call><name>fabs</name><argument_list>(<argument><expr><name>shortterm</name> <operator>-</operator> <name>global</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>target_lra</name></name> <operator>/</operator> <literal type="number">2.</literal><operator>)</operator></expr> ?</condition><then> <expr><name>shortterm</name> <operator>-</operator> <name>global</name></expr> </then><else>: <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>target_lra</name></name> <operator>/</operator> <literal type="number">2.</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>shortterm</name> <operator>-</operator> <name>global</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>env_shortterm</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>target_i</name></name> <operator>-</operator> <name>shortterm</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>delta</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><literal type="number">10.</literal></expr></argument>, <argument><expr><operator>(</operator><name>env_global</name> <operator>+</operator> <name>env_shortterm</name><operator>)</operator> <operator>/</operator> <literal type="number">20.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_delta</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>delta</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>index</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>index</name></name> <operator>&gt;=</operator> <literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>index</name></name> <operator>-=</operator> <literal type="number">30</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_nb_samples</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pts</name></name> <operator>+=</operator> <name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FINAL_FRAME</name></expr>:</case>
<expr_stmt><expr><name>gain</name> <operator>=</operator> <call><name>gaussian_filter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>index</name></name> <operator>+</operator> <literal type="number">10</literal> <operator>&lt;</operator> <literal type="number">30</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>index</name></name> <operator>+</operator> <literal type="number">10</literal></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>index</name></name> <operator>+</operator> <literal type="number">10</literal> <operator>-</operator> <literal type="number">30</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>limiter_buf_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>src_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>limiter_buf_size</name></name> <operator>/</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>limiter_buf</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>limiter_buf_index</name></name> <operator>+</operator> <name>c</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>src_index</name> <operator>+</operator> <name>c</name></expr>]</index></name> <operator>*</operator> <name>gain</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>src_index</name> <operator>+=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>limiter_buf_index</name></name> <operator>+=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>limiter_buf_index</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>limiter_buf_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>limiter_buf_index</name></name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>limiter_buf_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>subframe_length</name> <operator>=</operator> <call><name>frame_size</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>/</operator> <name>subframe_length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>true_peak_limiter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>subframe_length</name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>subframe_length</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>src_index</name> <operator>&lt;</operator> <operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>*</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>limiter_buf</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>limiter_buf_index</name></name> <operator>+</operator> <name>c</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>src_index</name> <operator>+</operator> <name>c</name></expr>]</index></name> <operator>*</operator> <name>gain</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>limiter_buf</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>limiter_buf_index</name></name> <operator>+</operator> <name>c</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>src_index</name> <operator>&lt;</operator> <operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>*</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>src_index</name> <operator>+=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>limiter_buf_index</name></name> <operator>+=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>limiter_buf_index</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>limiter_buf_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>limiter_buf_index</name></name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>limiter_buf_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><name>subframe_length</name> <operator>*</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_ebur128_add_frames_double</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>r128_out</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LINEAR_MODE</name></expr>:</case>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>c</name></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_ebur128_add_frames_double</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>r128_out</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pts</name></name> <operator>+=</operator> <name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>in</name> <operator>!=</operator> <name>out</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>request_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LoudNormContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_request_frame</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AVERROR_EOF</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>INNER_FRAME</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_samples</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nb_samples</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>/</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>prev_nb_samples</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nb_samples</name> <operator>-=</operator> <operator>(</operator><call><name>frame_size</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>prev_nb_samples</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>frame</name> <operator>=</operator> <call><name>ff_get_audio_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name>nb_samples</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>=</operator> <operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>limiter_buf_size</name></name> <operator>/</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>prev_nb_samples</name></name><operator>)</operator> <operator>*</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>-=</operator> <operator>(</operator><call><name>frame_size</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>prev_nb_samples</name></name><operator>)</operator> <operator>*</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_index</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>buf_index</name></name> <operator>-</operator> <name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>buf_index</name></name> <operator>-</operator> <name>offset</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>buf_index</name></name> <operator>-</operator> <name>offset</name></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>src</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>buf_index</name></name> <operator>+</operator> <name>c</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_index</name></name> <operator>+=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>buf_index</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_index</name></name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>=</operator> <name>FINAL_FRAME</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>filter_frame</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LoudNormContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>formats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>layouts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>input_srate</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">192000</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVSampleFormat</name></name></type> <name><name>sample_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_SAMPLE_FMT_DBL</name></expr>,
<expr><name>AV_SAMPLE_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>layouts</name> <operator>=</operator> <call><name>ff_all_channel_counts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>layouts</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_common_channel_layouts</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>layouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>sample_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>formats</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_common_formats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>!=</operator> <name>LINEAR_MODE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>input_srate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>formats</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><name>formats</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inlink</name><operator>-&gt;</operator><name>out_samplerates</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><name>formats</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>outlink</name><operator>-&gt;</operator><name>in_samplerates</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LoudNormContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>r128_in</name></name> <operator>=</operator> <call><name>ff_ebur128_init</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FF_EBUR128_MODE_I</name> <operator>|</operator> <name>FF_EBUR128_MODE_S</name> <operator>|</operator> <name>FF_EBUR128_MODE_LRA</name> <operator>|</operator> <name>FF_EBUR128_MODE_SAMPLE_PEAK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>r128_in</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>r128_out</name></name> <operator>=</operator> <call><name>ff_ebur128_init</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FF_EBUR128_MODE_I</name> <operator>|</operator> <name>FF_EBUR128_MODE_S</name> <operator>|</operator> <name>FF_EBUR128_MODE_LRA</name> <operator>|</operator> <name>FF_EBUR128_MODE_SAMPLE_PEAK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>r128_out</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>dual_mono</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_ebur128_set_channel</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>r128_in</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FF_EBUR128_DUAL_MONO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_ebur128_set_channel</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>r128_out</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FF_EBUR128_DUAL_MONO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>=</operator> <call><name>frame_size</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><literal type="number">3000</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>limiter_buf_size</name></name> <operator>=</operator> <call><name>frame_size</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><literal type="number">210</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>limiter_buf</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>limiter_buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>limiter_buf</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_smp</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>prev_smp</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>prev_smp</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>init_gaussian_filter</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>!=</operator> <name>LINEAR_MODE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>inlink</name><operator>-&gt;</operator><name>min_samples</name></name> <operator>=</operator>
<name><name>inlink</name><operator>-&gt;</operator><name>max_samples</name></name> <operator>=</operator>
<name><name>inlink</name><operator>-&gt;</operator><name>partial_buf_size</name></name> <operator>=</operator> <call><name>frame_size</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><literal type="number">3000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_index</name></name> <operator>=</operator>
<name><name>s</name><operator>-&gt;</operator><name>prev_buf_index</name></name> <operator>=</operator>
<name><name>s</name><operator>-&gt;</operator><name>limiter_buf_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>limiter_state</name></name> <operator>=</operator> <name>OUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><literal type="number">10.</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>offset</name></name> <operator>/</operator> <literal type="number">20.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>target_tp</name></name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><literal type="number">10.</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>target_tp</name></name> <operator>/</operator> <literal type="number">20.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>attack_length</name></name> <operator>=</operator> <call><name>frame_size</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>release_length</name></name> <operator>=</operator> <call><name>frame_size</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LoudNormContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>=</operator> <name>FIRST_FRAME</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>linear</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>offset_tp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>target_i</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>measured_i</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset_tp</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>measured_tp</name></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>measured_tp</name></name> <operator>!=</operator> <literal type="number">99</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>measured_thresh</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">70</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>measured_lra</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>measured_i</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>offset_tp</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>target_tp</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>measured_lra</name></name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>target_lra</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>=</operator> <name>LINEAR_MODE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LoudNormContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>i_in</name></decl>, <decl><type ref="prev"/><name>i_out</name></decl>, <decl><type ref="prev"/><name>lra_in</name></decl>, <decl><type ref="prev"/><name>lra_out</name></decl>, <decl><type ref="prev"/><name>thresh_in</name></decl>, <decl><type ref="prev"/><name>thresh_out</name></decl>, <decl><type ref="prev"/><name>tp_in</name></decl>, <decl><type ref="prev"/><name>tp_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>r128_in</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>r128_out</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_ebur128_loudness_range</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>r128_in</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lra_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_ebur128_loudness_global</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>r128_in</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_ebur128_relative_threshold</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>r128_in</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>thresh_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>tmp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ff_ebur128_sample_peak</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>r128_in</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>tmp</name> <operator>&gt;</operator> <name>tp_in</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tp_in</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>ff_ebur128_loudness_range</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>r128_out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lra_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_ebur128_loudness_global</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>r128_out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_ebur128_relative_threshold</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>r128_out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>thresh_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>tmp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ff_ebur128_sample_peak</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>r128_out</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>tmp</name> <operator>&gt;</operator> <name>tp_out</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tp_out</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<switch>switch<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>print_format</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>NONE</name></expr>:</case>
<break>break;</break>

<case>case <expr><name>JSON</name></expr>:</case>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>,
<argument><expr><literal type="string">"\n{\n"</literal>
<literal type="string">"\t\"input_i\" : \"%.2f\",\n"</literal>
<literal type="string">"\t\"input_tp\" : \"%.2f\",\n"</literal>
<literal type="string">"\t\"input_lra\" : \"%.2f\",\n"</literal>
<literal type="string">"\t\"input_thresh\" : \"%.2f\",\n"</literal>
<literal type="string">"\t\"output_i\" : \"%.2f\",\n"</literal>
<literal type="string">"\t\"output_tp\" : \"%+.2f\",\n"</literal>
<literal type="string">"\t\"output_lra\" : \"%.2f\",\n"</literal>
<literal type="string">"\t\"output_thresh\" : \"%.2f\",\n"</literal>
<literal type="string">"\t\"normalization_type\" : \"%s\",\n"</literal>
<literal type="string">"\t\"target_offset\" : \"%.2f\"\n"</literal>
<literal type="string">"}\n"</literal></expr></argument>,
<argument><expr><name>i_in</name></expr></argument>,
<argument><expr><literal type="number">20.</literal> <operator>*</operator> <call><name>log10</name><argument_list>(<argument><expr><name>tp_in</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>lra_in</name></expr></argument>,
<argument><expr><name>thresh_in</name></expr></argument>,
<argument><expr><name>i_out</name></expr></argument>,
<argument><expr><literal type="number">20.</literal> <operator>*</operator> <call><name>log10</name><argument_list>(<argument><expr><name>tp_out</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>lra_out</name></expr></argument>,
<argument><expr><name>thresh_out</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>LINEAR_MODE</name></expr> ?</condition><then> <expr><literal type="string">"linear"</literal></expr> </then><else>: <expr><literal type="string">"dynamic"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>target_i</name></name> <operator>-</operator> <name>i_out</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SUMMARY</name></expr>:</case>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>,
<argument><expr><literal type="string">"\n"</literal>
<literal type="string">"Input Integrated: %+6.1f LUFS\n"</literal>
<literal type="string">"Input True Peak: %+6.1f dBTP\n"</literal>
<literal type="string">"Input LRA: %6.1f LU\n"</literal>
<literal type="string">"Input Threshold: %+6.1f LUFS\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"Output Integrated: %+6.1f LUFS\n"</literal>
<literal type="string">"Output True Peak: %+6.1f dBTP\n"</literal>
<literal type="string">"Output LRA: %6.1f LU\n"</literal>
<literal type="string">"Output Threshold: %+6.1f LUFS\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"Normalization Type: %s\n"</literal>
<literal type="string">"Target Offset: %+6.1f LU\n"</literal></expr></argument>,
<argument><expr><name>i_in</name></expr></argument>,
<argument><expr><literal type="number">20.</literal> <operator>*</operator> <call><name>log10</name><argument_list>(<argument><expr><name>tp_in</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>lra_in</name></expr></argument>,
<argument><expr><name>thresh_in</name></expr></argument>,
<argument><expr><name>i_out</name></expr></argument>,
<argument><expr><literal type="number">20.</literal> <operator>*</operator> <call><name>log10</name><argument_list>(<argument><expr><name>tp_out</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>lra_out</name></expr></argument>,
<argument><expr><name>thresh_out</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>LINEAR_MODE</name></expr> ?</condition><then> <expr><literal type="string">"Linear"</literal></expr> </then><else>: <expr><literal type="string">"Dynamic"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>target_i</name></name> <operator>-</operator> <name>i_out</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<label><name>end</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>r128_in</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_ebur128_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>r128_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>r128_out</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_ebur128_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>r128_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>limiter_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>prev_smp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>avfilter_af_loudnorm_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>avfilter_af_loudnorm_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>request_frame</name> <operator>=</operator> <name>request_frame</name></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_af_loudnorm</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"loudnorm"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"EBU R128 loudness normalization"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LoudNormContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>loudnorm_class</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>avfilter_af_loudnorm_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>avfilter_af_loudnorm_outputs</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
