<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\drawutils.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avutil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/colorspace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"drawutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>

<enum>enum <block>{ <decl><name>RED</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>GREEN</name></decl>, <decl><name>BLUE</name></decl>, <decl><name>ALPHA</name></decl> }</block>;</enum>

<function><type><name>int</name></type> <name>ff_fill_rgba_map</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rgba_map</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>pix_fmt</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_0RGB</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_ARGB</name></expr>:</case> <expr_stmt><expr><name><name>rgba_map</name><index>[<expr><name>ALPHA</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>rgba_map</name><index>[<expr><name>RED</name></expr> ]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>rgba_map</name><index>[<expr><name>GREEN</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>rgba_map</name><index>[<expr><name>BLUE</name></expr> ]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AV_PIX_FMT_0BGR</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_ABGR</name></expr>:</case> <expr_stmt><expr><name><name>rgba_map</name><index>[<expr><name>ALPHA</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>rgba_map</name><index>[<expr><name>BLUE</name></expr> ]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>rgba_map</name><index>[<expr><name>GREEN</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>rgba_map</name><index>[<expr><name>RED</name></expr> ]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB48LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_RGB48BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_RGBA64BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_RGBA64LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_RGB0</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_RGBA</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_RGB24</name></expr>:</case> <expr_stmt><expr><name><name>rgba_map</name><index>[<expr><name>RED</name></expr> ]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>rgba_map</name><index>[<expr><name>GREEN</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>rgba_map</name><index>[<expr><name>BLUE</name></expr> ]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>rgba_map</name><index>[<expr><name>ALPHA</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR48LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_BGR48BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_BGRA64BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_BGRA64LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_BGRA</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_BGR0</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_BGR24</name></expr>:</case> <expr_stmt><expr><name><name>rgba_map</name><index>[<expr><name>BLUE</name></expr> ]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>rgba_map</name><index>[<expr><name>GREEN</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>rgba_map</name><index>[<expr><name>RED</name></expr> ]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>rgba_map</name><index>[<expr><name>ALPHA</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AV_PIX_FMT_GBRP9LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP9BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP10LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP10BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP12LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP12BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP14LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP14BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP16LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP16BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRAP</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRAP10LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRAP10BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRAP12LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRAP12BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRAP16LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRAP16BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP</name></expr>:</case> <expr_stmt><expr><name><name>rgba_map</name><index>[<expr><name>GREEN</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>rgba_map</name><index>[<expr><name>BLUE</name></expr> ]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>rgba_map</name><index>[<expr><name>RED</name></expr> ]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>rgba_map</name><index>[<expr><name>ALPHA</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> 
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_fill_line_with_color</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>line</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>pixel_step</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name><name>dst_color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name><name>rgba_color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>is_packed_rgba</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name><name>rgba_map_ptr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>rgba_map</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>pix_desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hsub</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>pix_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hsub</name> <operator>=</operator> <name><name>pix_desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>is_packed_rgba</name> <operator>=</operator> <call><name>ff_fill_rgba_map</name><argument_list>(<argument><expr><name>rgba_map</name></expr></argument>, <argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>is_packed_rgba</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pixel_step</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>av_get_bits_per_pixel</name><argument_list>(<argument><expr><name>pix_desc</name></expr></argument>)</argument_list></call><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst_color</name><index>[<expr><name><name>rgba_map</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>rgba_color</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>pixel_step</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>pixel_step</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dst_color</name></expr></argument>, <argument><expr><name><name>pixel_step</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>rgba_map_ptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>rgba_map_ptr</name></expr></argument>, <argument><expr><name>rgba_map</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rgba_map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>plane</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst_color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>RGB_TO_Y_CCIR</name><argument_list>(<argument><expr><name><name>rgba_color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>rgba_color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>rgba_color</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>RGB_TO_U_CCIR</name><argument_list>(<argument><expr><name><name>rgba_color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>rgba_color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>rgba_color</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_color</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>RGB_TO_V_CCIR</name><argument_list>(<argument><expr><name><name>rgba_color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>rgba_color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>rgba_color</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_color</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>rgba_color</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>line_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hsub1</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>plane</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>plane</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><name>hsub</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pixel_step</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>line_size</name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>hsub1</name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>pixel_step</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>line_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>line</name><index>[<expr><name>plane</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<while>while<condition>(<expr><name>plane</name> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name>plane</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>line</name><index>[<expr><operator>--</operator><name>plane</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>line</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst_color</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_draw_rectangle</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>dst_linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>pixelstep</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>hsub</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vsub</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>plane</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>dst</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>hsub1</name> <init>= <expr><ternary><condition><expr><name>plane</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>plane</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>hsub</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vsub1</name> <init>= <expr><ternary><condition><expr><name>plane</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>plane</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>vsub</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>hsub1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>vsub1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>dst</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>y</name> <operator>&gt;&gt;</operator> <name>vsub1</name><operator>)</operator> <operator>*</operator> <name><name>dst_linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <name>hsub1</name><operator>)</operator> <operator>*</operator> <name><name>pixelstep</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>src</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name>width</name> <operator>*</operator> <name><name>pixelstep</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>dst_linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_copy_rectangle</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>dst_linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>src_linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>pixelstep</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>hsub</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vsub</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>plane</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>dst</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>hsub1</name> <init>= <expr><ternary><condition><expr><name>plane</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>plane</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>hsub</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vsub1</name> <init>= <expr><ternary><condition><expr><name>plane</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>plane</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>vsub</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>hsub1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>vsub1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>dst</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>y</name> <operator>&gt;&gt;</operator> <name>vsub1</name><operator>)</operator> <operator>*</operator> <name><name>dst_linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <name>hsub1</name><operator>)</operator> <operator>*</operator> <name><name>pixelstep</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>src</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name><name>src_linesize</name><index>[<expr><name>plane</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><operator>(</operator><name>y2</name><operator>&gt;&gt;</operator><name>vsub1</name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>width</name> <operator>*</operator> <name><name>pixelstep</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>dst_linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_draw_init</name><parameter_list>(<parameter><decl><type><name>FFDrawContext</name> <modifier>*</modifier></type><name>draw</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVComponentDescriptor</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nb_planes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>pixelstep</name><index>[<expr><name>MAX_PLANES</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>full_range</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name> <operator>||</operator> <operator>!</operator><name><name>desc</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>AV_PIX_FMT_FLAG_PLANAR</name> <operator>|</operator> <name>AV_PIX_FMT_FLAG_RGB</name> <operator>|</operator> <name>FF_PSEUDOPAL</name> <operator>|</operator> <name>AV_PIX_FMT_FLAG_ALPHA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <name>AV_PIX_FMT_P010LE</name> <operator>||</operator> <name>format</name> <operator>==</operator> <name>AV_PIX_FMT_P010BE</name> <operator>||</operator> <name>format</name> <operator>==</operator> <name>AV_PIX_FMT_P016LE</name> <operator>||</operator> <name>format</name> <operator>==</operator> <name>AV_PIX_FMT_P016BE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <name>AV_PIX_FMT_YUVJ420P</name> <operator>||</operator> <name>format</name> <operator>==</operator> <name>AV_PIX_FMT_YUVJ422P</name> <operator>||</operator> <name>format</name> <operator>==</operator> <name>AV_PIX_FMT_YUVJ444P</name> <operator>||</operator>
<name>format</name> <operator>==</operator> <name>AV_PIX_FMT_YUVJ411P</name> <operator>||</operator> <name>format</name> <operator>==</operator> <name>AV_PIX_FMT_YUVJ440P</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>full_range</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>&amp;</operator><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>depth</name></name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>depth</name></name> <operator>&gt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_BE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>plane</name></name> <operator>&gt;=</operator> <name>MAX_PLANES</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pixelstep</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>plane</name></name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>pixelstep</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>plane</name></name></expr>]</index></name> <operator>!=</operator> <name><name>c</name><operator>-&gt;</operator><name>step</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pixelstep</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>plane</name></name></expr>]</index></name> <operator>==</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator>
<name><name>c</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pixelstep</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>plane</name></name></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>step</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pixelstep</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>plane</name></name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nb_planes</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>nb_planes</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>plane</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>draw</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>draw</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>draw</name><operator>-&gt;</operator><name>desc</name></name> <operator>=</operator> <name>desc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>draw</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>draw</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>=</operator> <name>nb_planes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>draw</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>draw</name><operator>-&gt;</operator><name>full_range</name></name> <operator>=</operator> <name>full_range</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>draw</name><operator>-&gt;</operator><name>pixelstep</name></name></expr></argument>, <argument><expr><name>pixelstep</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>draw</name><operator>-&gt;</operator><name>pixelstep</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>draw</name><operator>-&gt;</operator><name>hsub</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>draw</name><operator>-&gt;</operator><name>hsub</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>draw</name><operator>-&gt;</operator><name>hsub_max</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>draw</name><operator>-&gt;</operator><name>vsub</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>draw</name><operator>-&gt;</operator><name>vsub</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>draw</name><operator>-&gt;</operator><name>vsub_max</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name> <operator>-</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_ALPHA</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FF_DRAW_PROCESS_ALPHA</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>draw</name><operator>-&gt;</operator><name>comp_mask</name><index>[<expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>plane</name></expr>]</index></name> <operator>|=</operator>
<literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_draw_color</name><parameter_list>(<parameter><decl><type><name>FFDrawContext</name> <modifier>*</modifier></type><name>draw</name></decl></parameter>, <parameter><decl><type><name>FFDrawColor</name> <modifier>*</modifier></type><name>color</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>rgba</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>rgba_map</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rgba</name> <operator>!=</operator> <name><name>color</name><operator>-&gt;</operator><name>rgba</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>color</name><operator>-&gt;</operator><name>rgba</name></name></expr></argument>, <argument><expr><name>rgba</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>color</name><operator>-&gt;</operator><name>rgba</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>draw</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_RGB</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>ff_fill_rgba_map</name><argument_list>(<argument><expr><name>rgba_map</name></expr></argument>, <argument><expr><name><name>draw</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>draw</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>color</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[<expr><name><name>rgba_map</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>rgba</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>draw</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name><name>rgba_map</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>depth</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>color</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>u16</name><index>[<expr><name><name>rgba_map</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>color</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[<expr><name><name>rgba_map</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>color</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name><name>rgba_map</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>rgba</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>draw</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name><name>rgba_map</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>depth</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>color</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name><name>rgba_map</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name><name>u16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>color</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name><name>rgba_map</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>draw</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name><name>rgba_map</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>depth</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>draw</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><name><name>draw</name><operator>-&gt;</operator><name>desc</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>color</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>plane</name></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[<expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>offset</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>draw</name><operator>-&gt;</operator><name>full_range</name></name></expr> ?</condition><then> <expr><call><name>RGB_TO_Y_JPEG</name><argument_list>(<argument><expr><name><name>rgba</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>rgba</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>rgba</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>RGB_TO_Y_CCIR</name><argument_list>(<argument><expr><name><name>rgba</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>rgba</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>rgba</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>plane</name></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[<expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>offset</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>draw</name><operator>-&gt;</operator><name>full_range</name></name></expr> ?</condition><then> <expr><call><name>RGB_TO_U_JPEG</name><argument_list>(<argument><expr><name><name>rgba</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>rgba</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>rgba</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>RGB_TO_U_CCIR</name><argument_list>(<argument><expr><name><name>rgba</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>rgba</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>rgba</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>plane</name></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[<expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>offset</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>draw</name><operator>-&gt;</operator><name>full_range</name></name></expr> ?</condition><then> <expr><call><name>RGB_TO_V_JPEG</name><argument_list>(<argument><expr><name><name>rgba</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>rgba</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>rgba</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>RGB_TO_V_CCIR</name><argument_list>(<argument><expr><name><name>rgba</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>rgba</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>rgba</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>rgba</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPAND</name><parameter_list>(<parameter><type><name>compn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (desc-&gt;comp[compn].depth &gt; 8) color-&gt;comp[desc-&gt;comp[compn].plane].u16[desc-&gt;comp[compn].offset] = color-&gt;comp[desc-&gt;comp[compn].plane].u8[desc-&gt;comp[compn].offset] &lt;&lt; (draw-&gt;desc-&gt;comp[compn].depth + draw-&gt;desc-&gt;comp[compn].shift - 8)</cpp:value></cpp:define>




<expr_stmt><expr><call><name>EXPAND</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EXPAND</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EXPAND</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EXPAND</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>draw</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_GRAY8</name> <operator>||</operator> <name><name>draw</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_GRAY8A</name> <operator>||</operator>
<name><name>draw</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_GRAY16LE</name> <operator>||</operator> <name><name>draw</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_YA16LE</name> <operator>||</operator>
<name><name>draw</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_GRAY9LE</name> <operator>||</operator>
<name><name>draw</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_GRAY10LE</name> <operator>||</operator>
<name><name>draw</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_GRAY12LE</name> <operator>||</operator>
<name><name>draw</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_GRAY14LE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><name><name>draw</name><operator>-&gt;</operator><name>desc</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>color</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>RGB_TO_Y_CCIR</name><argument_list>(<argument><expr><name><name>rgba</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>rgba</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>rgba</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EXPAND</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>color</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>rgba</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EXPAND</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Color conversion not implemented for %s\n"</literal></expr></argument>, <argument><expr><name><name>draw</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>color</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>color</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pointer_at</name><parameter_list>(<parameter><decl><type><name>FFDrawContext</name> <modifier>*</modifier></type><name>draw</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>data</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>linesize</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator>
<operator>(</operator><name>y</name> <operator>&gt;&gt;</operator> <name><name>draw</name><operator>-&gt;</operator><name>vsub</name><index>[<expr><name>plane</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator>
<operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <name><name>draw</name><operator>-&gt;</operator><name>hsub</name><index>[<expr><name>plane</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name><name>draw</name><operator>-&gt;</operator><name>pixelstep</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_copy_rectangle2</name><parameter_list>(<parameter><decl><type><name>FFDrawContext</name> <modifier>*</modifier></type><name>draw</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>dst_linesize</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>src_linesize</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dst_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_y</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>plane</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>wp</name></decl>, <decl><type ref="prev"/><name>hp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <name><name>draw</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>pointer_at</name><argument_list>(<argument><expr><name>draw</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_linesize</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>src_x</name></expr></argument>, <argument><expr><name>src_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>pointer_at</name><argument_list>(<argument><expr><name>draw</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_linesize</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>dst_x</name></expr></argument>, <argument><expr><name>dst_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>draw</name><operator>-&gt;</operator><name>hsub</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>draw</name><operator>-&gt;</operator><name>pixelstep</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>hp</name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>draw</name><operator>-&gt;</operator><name>vsub</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>hp</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>src_linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>+=</operator> <name><name>dst_linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_fill_rectangle</name><parameter_list>(<parameter><decl><type><name>FFDrawContext</name> <modifier>*</modifier></type><name>draw</name></decl></parameter>, <parameter><decl><type><name>FFDrawColor</name> <modifier>*</modifier></type><name>color</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>dst_linesize</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dst_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>plane</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>wp</name></decl>, <decl><type ref="prev"/><name>hp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFDrawColor</name></type> <name>color_tmp</name> <init>= <expr><operator>*</operator><name>color</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <name><name>draw</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>p0</name> <operator>=</operator> <call><name>pointer_at</name><argument_list>(<argument><expr><name>draw</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_linesize</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>dst_x</name></expr></argument>, <argument><expr><name>dst_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>draw</name><operator>-&gt;</operator><name>hsub</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hp</name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>draw</name><operator>-&gt;</operator><name>vsub</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p0</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>HAVE_BIGENDIAN</name> <operator>&amp;&amp;</operator> <name><name>draw</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><literal type="number">2</literal><operator>*</operator><name>x</name> <operator>&lt;</operator> <name><name>draw</name><operator>-&gt;</operator><name>pixelstep</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>color_tmp</name><operator>.</operator><name>comp</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>u16</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>color_tmp</name><operator>.</operator><name>comp</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>u16</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>wp</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>color_tmp</name><operator>.</operator><name>comp</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name>u8</name></expr></argument>, <argument><expr><name><name>draw</name><operator>-&gt;</operator><name>pixelstep</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>draw</name><operator>-&gt;</operator><name>pixelstep</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>wp</name> <operator>*=</operator> <name><name>draw</name><operator>-&gt;</operator><name>pixelstep</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p0</name> <operator>+</operator> <name><name>dst_linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>hp</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>dst_linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>clip_interval</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>wmax</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dx</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dx</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dx</name> <operator>=</operator> <operator>-</operator><operator>*</operator><name>x</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>w</name> <operator>+=</operator> <operator>*</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>x</name> <operator>+</operator> <operator>*</operator><name>w</name> <operator>&gt;</operator> <name>wmax</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>w</name> <operator>=</operator> <name>wmax</name> <operator>-</operator> <operator>*</operator><name>x</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>subsampling_bounds</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sub</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>sub</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>start</name> <operator>=</operator> <operator>(</operator><operator>-</operator><operator>*</operator><name>x</name><operator>)</operator> <operator>&amp;</operator> <name>mask</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>x</name> <operator>+=</operator> <operator>*</operator><name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>start</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><operator>*</operator><name>start</name></expr></argument>, <argument><expr><operator>*</operator><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>w</name> <operator>-=</operator> <operator>*</operator><name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <operator>*</operator><name>w</name> <operator>&amp;</operator> <name>mask</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>w</name> <operator>&gt;&gt;=</operator> <name>sub</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>component_used</name><parameter_list>(<parameter><decl><type><name>FFDrawContext</name> <modifier>*</modifier></type><name>draw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>comp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>draw</name><operator>-&gt;</operator><name>comp_mask</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>comp</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>blend_line</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>alpha</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>hsub</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>right</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>asrc</name> <init>= <expr><name>alpha</name> <operator>*</operator> <name>src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>tau</name> <init>= <expr><literal type="number">0x1010101</literal> <operator>-</operator> <name>alpha</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>suba</name> <init>= <expr><operator>(</operator><name>left</name> <operator>*</operator> <name>alpha</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>hsub</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>dst</name> <operator>*</operator> <operator>(</operator><literal type="number">0x1010101</literal> <operator>-</operator> <name>suba</name><operator>)</operator> <operator>+</operator> <name>src</name> <operator>*</operator> <name>suba</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>dst</name> <operator>*</operator> <name>tau</name> <operator>+</operator> <name>asrc</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>right</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>suba</name> <init>= <expr><operator>(</operator><name>right</name> <operator>*</operator> <name>alpha</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>hsub</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>dst</name> <operator>*</operator> <operator>(</operator><literal type="number">0x1010101</literal> <operator>-</operator> <name>suba</name><operator>)</operator> <operator>+</operator> <name>src</name> <operator>*</operator> <name>suba</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blend_line16</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>alpha</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>hsub</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>right</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>asrc</name> <init>= <expr><name>alpha</name> <operator>*</operator> <name>src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>tau</name> <init>= <expr><literal type="number">0x10001</literal> <operator>-</operator> <name>alpha</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>suba</name> <init>= <expr><operator>(</operator><name>left</name> <operator>*</operator> <name>alpha</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>hsub</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>value</name> <init>= <expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>(</operator><name>value</name> <operator>*</operator> <operator>(</operator><literal type="number">0x10001</literal> <operator>-</operator> <name>suba</name><operator>)</operator> <operator>+</operator> <name>src</name> <operator>*</operator> <name>suba</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>value</name> <init>= <expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>(</operator><name>value</name> <operator>*</operator> <name>tau</name> <operator>+</operator> <name>asrc</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>right</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>suba</name> <init>= <expr><operator>(</operator><name>right</name> <operator>*</operator> <name>alpha</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>hsub</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>value</name> <init>= <expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>(</operator><name>value</name> <operator>*</operator> <operator>(</operator><literal type="number">0x10001</literal> <operator>-</operator> <name>suba</name><operator>)</operator> <operator>+</operator> <name>src</name> <operator>*</operator> <name>suba</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_blend_rectangle</name><parameter_list>(<parameter><decl><type><name>FFDrawContext</name> <modifier>*</modifier></type><name>draw</name></decl></parameter>, <parameter><decl><type><name>FFDrawColor</name> <modifier>*</modifier></type><name>color</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>dst_linesize</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dst_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_h</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>x0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>alpha</name></decl>, <decl><type ref="prev"/><name>nb_planes</name></decl>, <decl><type ref="prev"/><name>nb_comp</name></decl>, <decl><type ref="prev"/><name>plane</name></decl>, <decl><type ref="prev"/><name>comp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w_sub</name></decl>, <decl><type ref="prev"/><name>h_sub</name></decl>, <decl><type ref="prev"/><name>x_sub</name></decl>, <decl><type ref="prev"/><name>y_sub</name></decl>, <decl><type ref="prev"/><name>left</name></decl>, <decl><type ref="prev"/><name>right</name></decl>, <decl><type ref="prev"/><name>top</name></decl>, <decl><type ref="prev"/><name>bottom</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>clip_interval</name><argument_list>(<argument><expr><name>dst_w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clip_interval</name><argument_list>(<argument><expr><name>dst_h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>h</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name><name>color</name><operator>-&gt;</operator><name>rgba</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>draw</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>alpha</name> <operator>=</operator> <literal type="number">0x10203</literal> <operator>*</operator> <name><name>color</name><operator>-&gt;</operator><name>rgba</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>alpha</name> <operator>=</operator> <literal type="number">0x101</literal> <operator>*</operator> <name><name>color</name><operator>-&gt;</operator><name>rgba</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>nb_planes</name> <operator>=</operator> <name><name>draw</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>-</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>draw</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_ALPHA</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>draw</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_DRAW_PROCESS_ALPHA</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>nb_planes</name> <operator>+=</operator> <operator>!</operator><name>nb_planes</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <name>nb_planes</name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>nb_comp</name> <operator>=</operator> <name><name>draw</name><operator>-&gt;</operator><name>pixelstep</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p0</name> <operator>=</operator> <call><name>pointer_at</name><argument_list>(<argument><expr><name>draw</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_linesize</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w_sub</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h_sub</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x_sub</name> <operator>=</operator> <name>x0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y_sub</name> <operator>=</operator> <name>y0</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>subsampling_bounds</name><argument_list>(<argument><expr><name><name>draw</name><operator>-&gt;</operator><name>hsub</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x_sub</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w_sub</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>subsampling_bounds</name><argument_list>(<argument><expr><name><name>draw</name><operator>-&gt;</operator><name>vsub</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y_sub</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h_sub</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>top</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>comp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>comp</name> <operator>&lt;</operator> <name>nb_comp</name></expr>;</condition> <incr><expr><name>comp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>depth</name> <init>= <expr><name><name>draw</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>comp</name></expr>]</index></name><operator>.</operator><name>depth</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>component_used</name><argument_list>(<argument><expr><name>draw</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p0</name> <operator>+</operator> <name>comp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>top</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blend_line</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>color</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[<expr><name>comp</name></expr>]</index></name></expr></argument>, <argument><expr><name>alpha</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>draw</name><operator>-&gt;</operator><name>pixelstep</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name>w_sub</name></expr></argument>,
<argument><expr><name><name>draw</name><operator>-&gt;</operator><name>hsub</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>blend_line16</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>color</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>u16</name><index>[<expr><name>comp</name></expr>]</index></name></expr></argument>, <argument><expr><name>alpha</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>draw</name><operator>-&gt;</operator><name>pixelstep</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name>w_sub</name></expr></argument>,
<argument><expr><name><name>draw</name><operator>-&gt;</operator><name>hsub</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>dst_linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h_sub</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>blend_line</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>color</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[<expr><name>comp</name></expr>]</index></name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>,
<argument><expr><name><name>draw</name><operator>-&gt;</operator><name>pixelstep</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name>w_sub</name></expr></argument>,
<argument><expr><name><name>draw</name><operator>-&gt;</operator><name>hsub</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>dst_linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h_sub</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>blend_line16</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>color</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>u16</name><index>[<expr><name>comp</name></expr>]</index></name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>,
<argument><expr><name><name>draw</name><operator>-&gt;</operator><name>pixelstep</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name>w_sub</name></expr></argument>,
<argument><expr><name><name>draw</name><operator>-&gt;</operator><name>hsub</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>dst_linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bottom</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blend_line</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>color</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[<expr><name>comp</name></expr>]</index></name></expr></argument>, <argument><expr><name>alpha</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>draw</name><operator>-&gt;</operator><name>pixelstep</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name>w_sub</name></expr></argument>,
<argument><expr><name><name>draw</name><operator>-&gt;</operator><name>hsub</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>blend_line16</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>color</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>u16</name><index>[<expr><name>comp</name></expr>]</index></name></expr></argument>, <argument><expr><name>alpha</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>draw</name><operator>-&gt;</operator><name>pixelstep</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name>w_sub</name></expr></argument>,
<argument><expr><name><name>draw</name><operator>-&gt;</operator><name>hsub</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blend_pixel16</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>alpha</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>mask</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask_linesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l2depth</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>shift</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>xm0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>xm</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>xmshf</name> <init>= <expr><literal type="number">3</literal> <operator>-</operator> <name>l2depth</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>xmmod</name> <init>= <expr><literal type="number">7</literal> <operator>&gt;&gt;</operator> <name>l2depth</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>mbits</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>l2depth</name><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>mmult</name> <init>= <expr><literal type="number">255</literal> <operator>/</operator> <name>mbits</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>value</name> <init>= <expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>xm</name> <operator>=</operator> <name>xm0</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name><name>mask</name><index>[<expr><name>xm</name> <operator>&gt;&gt;</operator> <name>xmshf</name></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><operator>(</operator><operator>~</operator><name>xm</name> <operator>&amp;</operator> <name>xmmod</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>l2depth</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name>mbits</name><operator>)</operator>
<operator>*</operator> <name>mmult</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xm</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>mask</name> <operator>+=</operator> <name>mask_linesize</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>alpha</name> <operator>=</operator> <operator>(</operator><name>t</name> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator> <operator>*</operator> <name>alpha</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><literal type="number">0x10001</literal> <operator>-</operator> <name>alpha</name><operator>)</operator> <operator>*</operator> <name>value</name> <operator>+</operator> <name>alpha</name> <operator>*</operator> <name>src</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blend_pixel</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>alpha</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>mask</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask_linesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l2depth</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>shift</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>xm0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>xm</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>xmshf</name> <init>= <expr><literal type="number">3</literal> <operator>-</operator> <name>l2depth</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>xmmod</name> <init>= <expr><literal type="number">7</literal> <operator>&gt;&gt;</operator> <name>l2depth</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>mbits</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>l2depth</name><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>mmult</name> <init>= <expr><literal type="number">255</literal> <operator>/</operator> <name>mbits</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>xm</name> <operator>=</operator> <name>xm0</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name><name>mask</name><index>[<expr><name>xm</name> <operator>&gt;&gt;</operator> <name>xmshf</name></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><operator>(</operator><operator>~</operator><name>xm</name> <operator>&amp;</operator> <name>xmmod</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>l2depth</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name>mbits</name><operator>)</operator>
<operator>*</operator> <name>mmult</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xm</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>mask</name> <operator>+=</operator> <name>mask_linesize</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>alpha</name> <operator>=</operator> <operator>(</operator><name>t</name> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator> <operator>*</operator> <name>alpha</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <operator>(</operator><operator>(</operator><literal type="number">0x1010101</literal> <operator>-</operator> <name>alpha</name><operator>)</operator> <operator>*</operator> <operator>*</operator><name>dst</name> <operator>+</operator> <name>alpha</name> <operator>*</operator> <name>src</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blend_line_hv16</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_delta</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>alpha</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>mask</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask_linesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l2depth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>hsub</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>vsub</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>xm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hband</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blend_pixel16</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask_linesize</name></expr></argument>, <argument><expr><name>l2depth</name></expr></argument>,
<argument><expr><name>left</name></expr></argument>, <argument><expr><name>hband</name></expr></argument>, <argument><expr><name>hsub</name> <operator>+</operator> <name>vsub</name></expr></argument>, <argument><expr><name>xm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_delta</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xm</name> <operator>+=</operator> <name>left</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>blend_pixel16</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask_linesize</name></expr></argument>, <argument><expr><name>l2depth</name></expr></argument>,
<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>hsub</name></expr></argument>, <argument><expr><name>hband</name></expr></argument>, <argument><expr><name>hsub</name> <operator>+</operator> <name>vsub</name></expr></argument>, <argument><expr><name>xm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_delta</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xm</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>hsub</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>right</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>blend_pixel16</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask_linesize</name></expr></argument>, <argument><expr><name>l2depth</name></expr></argument>,
<argument><expr><name>right</name></expr></argument>, <argument><expr><name>hband</name></expr></argument>, <argument><expr><name>hsub</name> <operator>+</operator> <name>vsub</name></expr></argument>, <argument><expr><name>xm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blend_line_hv</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_delta</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>alpha</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>mask</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask_linesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l2depth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>hsub</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>vsub</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>xm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hband</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blend_pixel</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask_linesize</name></expr></argument>, <argument><expr><name>l2depth</name></expr></argument>,
<argument><expr><name>left</name></expr></argument>, <argument><expr><name>hband</name></expr></argument>, <argument><expr><name>hsub</name> <operator>+</operator> <name>vsub</name></expr></argument>, <argument><expr><name>xm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_delta</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xm</name> <operator>+=</operator> <name>left</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>blend_pixel</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask_linesize</name></expr></argument>, <argument><expr><name>l2depth</name></expr></argument>,
<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>hsub</name></expr></argument>, <argument><expr><name>hband</name></expr></argument>, <argument><expr><name>hsub</name> <operator>+</operator> <name>vsub</name></expr></argument>, <argument><expr><name>xm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_delta</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xm</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>hsub</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>right</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>blend_pixel</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask_linesize</name></expr></argument>, <argument><expr><name>l2depth</name></expr></argument>,
<argument><expr><name>right</name></expr></argument>, <argument><expr><name>hband</name></expr></argument>, <argument><expr><name>hsub</name> <operator>+</operator> <name>vsub</name></expr></argument>, <argument><expr><name>xm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_blend_mask</name><parameter_list>(<parameter><decl><type><name>FFDrawContext</name> <modifier>*</modifier></type><name>draw</name></decl></parameter>, <parameter><decl><type><name>FFDrawColor</name> <modifier>*</modifier></type><name>color</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>dst_linesize</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_h</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>mask</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask_linesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask_h</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>l2depth</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>endianness</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>alpha</name></decl>, <decl><type ref="prev"/><name>nb_planes</name></decl>, <decl><type ref="prev"/><name>nb_comp</name></decl>, <decl><type ref="prev"/><name>plane</name></decl>, <decl><type ref="prev"/><name>comp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xm0</name></decl>, <decl><type ref="prev"/><name>ym0</name></decl>, <decl><type ref="prev"/><name>w_sub</name></decl>, <decl><type ref="prev"/><name>h_sub</name></decl>, <decl><type ref="prev"/><name>x_sub</name></decl>, <decl><type ref="prev"/><name>y_sub</name></decl>, <decl><type ref="prev"/><name>left</name></decl>, <decl><type ref="prev"/><name>right</name></decl>, <decl><type ref="prev"/><name>top</name></decl>, <decl><type ref="prev"/><name>bottom</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>clip_interval</name><argument_list>(<argument><expr><name>dst_w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask_w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xm0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clip_interval</name><argument_list>(<argument><expr><name>dst_h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask_h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ym0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mask</name> <operator>+=</operator> <name>ym0</name> <operator>*</operator> <name>mask_linesize</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mask_w</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>mask_h</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name><name>color</name><operator>-&gt;</operator><name>rgba</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>draw</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>alpha</name> <operator>=</operator> <operator>(</operator><literal type="number">0x10307</literal> <operator>*</operator> <name><name>color</name><operator>-&gt;</operator><name>rgba</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>alpha</name> <operator>=</operator> <operator>(</operator><literal type="number">0x101</literal> <operator>*</operator> <name><name>color</name><operator>-&gt;</operator><name>rgba</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>nb_planes</name> <operator>=</operator> <name><name>draw</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>-</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>draw</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_ALPHA</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>draw</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_DRAW_PROCESS_ALPHA</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>nb_planes</name> <operator>+=</operator> <operator>!</operator><name>nb_planes</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <name>nb_planes</name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>nb_comp</name> <operator>=</operator> <name><name>draw</name><operator>-&gt;</operator><name>pixelstep</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p0</name> <operator>=</operator> <call><name>pointer_at</name><argument_list>(<argument><expr><name>draw</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_linesize</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w_sub</name> <operator>=</operator> <name>mask_w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h_sub</name> <operator>=</operator> <name>mask_h</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x_sub</name> <operator>=</operator> <name>x0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y_sub</name> <operator>=</operator> <name>y0</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>subsampling_bounds</name><argument_list>(<argument><expr><name><name>draw</name><operator>-&gt;</operator><name>hsub</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x_sub</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w_sub</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>subsampling_bounds</name><argument_list>(<argument><expr><name><name>draw</name><operator>-&gt;</operator><name>vsub</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y_sub</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h_sub</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>top</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>comp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>comp</name> <operator>&lt;</operator> <name>nb_comp</name></expr>;</condition> <incr><expr><name>comp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>depth</name> <init>= <expr><name><name>draw</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>comp</name></expr>]</index></name><operator>.</operator><name>depth</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>component_used</name><argument_list>(<argument><expr><name>draw</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p0</name> <operator>+</operator> <name>comp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>mask</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>top</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blend_line_hv</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>draw</name><operator>-&gt;</operator><name>pixelstep</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>color</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[<expr><name>comp</name></expr>]</index></name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>,
<argument><expr><name>m</name></expr></argument>, <argument><expr><name>mask_linesize</name></expr></argument>, <argument><expr><name>l2depth</name></expr></argument>, <argument><expr><name>w_sub</name></expr></argument>,
<argument><expr><name><name>draw</name><operator>-&gt;</operator><name>hsub</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>draw</name><operator>-&gt;</operator><name>vsub</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>,
<argument><expr><name>xm0</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>blend_line_hv16</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>draw</name><operator>-&gt;</operator><name>pixelstep</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>color</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>u16</name><index>[<expr><name>comp</name></expr>]</index></name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>,
<argument><expr><name>m</name></expr></argument>, <argument><expr><name>mask_linesize</name></expr></argument>, <argument><expr><name>l2depth</name></expr></argument>, <argument><expr><name>w_sub</name></expr></argument>,
<argument><expr><name><name>draw</name><operator>-&gt;</operator><name>hsub</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>draw</name><operator>-&gt;</operator><name>vsub</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>,
<argument><expr><name>xm0</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>dst_linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>+=</operator> <name>top</name> <operator>*</operator> <name>mask_linesize</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h_sub</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>blend_line_hv</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>draw</name><operator>-&gt;</operator><name>pixelstep</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>color</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[<expr><name>comp</name></expr>]</index></name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>,
<argument><expr><name>m</name></expr></argument>, <argument><expr><name>mask_linesize</name></expr></argument>, <argument><expr><name>l2depth</name></expr></argument>, <argument><expr><name>w_sub</name></expr></argument>,
<argument><expr><name><name>draw</name><operator>-&gt;</operator><name>hsub</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>draw</name><operator>-&gt;</operator><name>vsub</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>,
<argument><expr><name>xm0</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>draw</name><operator>-&gt;</operator><name>vsub</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>dst_linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>+=</operator> <name>mask_linesize</name> <operator>&lt;&lt;</operator> <name><name>draw</name><operator>-&gt;</operator><name>vsub</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h_sub</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>blend_line_hv16</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>draw</name><operator>-&gt;</operator><name>pixelstep</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>color</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>u16</name><index>[<expr><name>comp</name></expr>]</index></name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>,
<argument><expr><name>m</name></expr></argument>, <argument><expr><name>mask_linesize</name></expr></argument>, <argument><expr><name>l2depth</name></expr></argument>, <argument><expr><name>w_sub</name></expr></argument>,
<argument><expr><name><name>draw</name><operator>-&gt;</operator><name>hsub</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>draw</name><operator>-&gt;</operator><name>vsub</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>,
<argument><expr><name>xm0</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>draw</name><operator>-&gt;</operator><name>vsub</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>dst_linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>+=</operator> <name>mask_linesize</name> <operator>&lt;&lt;</operator> <name><name>draw</name><operator>-&gt;</operator><name>vsub</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bottom</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>blend_line_hv</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>draw</name><operator>-&gt;</operator><name>pixelstep</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>color</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[<expr><name>comp</name></expr>]</index></name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>,
<argument><expr><name>m</name></expr></argument>, <argument><expr><name>mask_linesize</name></expr></argument>, <argument><expr><name>l2depth</name></expr></argument>, <argument><expr><name>w_sub</name></expr></argument>,
<argument><expr><name><name>draw</name><operator>-&gt;</operator><name>hsub</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>draw</name><operator>-&gt;</operator><name>vsub</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>,
<argument><expr><name>xm0</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>bottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>blend_line_hv16</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>draw</name><operator>-&gt;</operator><name>pixelstep</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>color</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name><name>u16</name><index>[<expr><name>comp</name></expr>]</index></name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>,
<argument><expr><name>m</name></expr></argument>, <argument><expr><name>mask_linesize</name></expr></argument>, <argument><expr><name>l2depth</name></expr></argument>, <argument><expr><name>w_sub</name></expr></argument>,
<argument><expr><name><name>draw</name><operator>-&gt;</operator><name>hsub</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>draw</name><operator>-&gt;</operator><name>vsub</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>,
<argument><expr><name>xm0</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>bottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_draw_round_to_sub</name><parameter_list>(<parameter><decl><type><name>FFDrawContext</name> <modifier>*</modifier></type><name>draw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sub_dir</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>round_dir</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>shift</name> <init>= <expr><ternary><condition><expr><name>sub_dir</name></expr> ?</condition><then> <expr><name><name>draw</name><operator>-&gt;</operator><name>vsub_max</name></name></expr> </then><else>: <expr><name><name>draw</name><operator>-&gt;</operator><name>hsub_max</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>shift</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>value</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>round_dir</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>+=</operator> <ternary><condition><expr><name>round_dir</name></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>shift</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>ff_draw_supported_pixel_formats</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFDrawContext</name></type> <name>draw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>fmts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>ff_draw_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>draw</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_add_format</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmts</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>fmts</name></expr>;</return>
</block_content>}</block></function>
</unit>
