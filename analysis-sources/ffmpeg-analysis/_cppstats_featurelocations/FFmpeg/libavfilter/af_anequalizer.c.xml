<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\af_anequalizer.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ffmath.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/parseutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER_ORDER</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<enum>enum <name>FilterType</name> <block>{
<decl><name>BUTTERWORTH</name></decl>,
<decl><name>CHEBYSHEV1</name></decl>,
<decl><name>CHEBYSHEV2</name></decl>,
<decl><name>NB_TYPES</name></decl>
}</block>;</enum>

<typedef>typedef <type><struct>struct <name>FoSection</name> <block>{
<decl_stmt><decl><type><name>double</name></type> <name>a0</name></decl>, <name>a1</name>, <name>a2</name>, <name>a3</name>, <name>a4</name>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>b0</name></decl>, <name>b1</name>, <name>b2</name>, <name>b3</name>, <name>b4</name>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>num</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>denum</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>FoSection</name>;</typedef>

<typedef>typedef <type><struct>struct <name>EqualizatorFilter</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ignore</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>channel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>freq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>gain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FoSection</name></type> <name><name>section</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>EqualizatorFilter</name>;</typedef>

<typedef>typedef <type><struct>struct <name>AudioNEqualizerContext</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>colors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>draw_curves</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <name>h</name>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>mag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fscale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_filters</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_allocated</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EqualizatorFilter</name> <modifier>*</modifier></type><name>filters</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>video</name></decl>;</decl_stmt>
}</block></struct></type> <name>AudioNEqualizerContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(AudioNEqualizerContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A</name></cpp:macro> <cpp:value>AV_OPT_FLAG_AUDIO_PARAM</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>anequalizer_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"params"</literal></expr>, <expr><name>NULL</name></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">""</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A</name><operator>|</operator><name>F</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"curves"</literal></expr>, <expr><literal type="string">"draw frequency response curves"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>draw_curves</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>V</name><operator>|</operator><name>F</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"size"</literal></expr>, <expr><literal type="string">"set video size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_IMAGE_SIZE</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"hd720"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>V</name><operator>|</operator><name>F</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"mgain"</literal></expr>, <expr><literal type="string">"set max gain"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mag</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name><operator>=</operator><literal type="number">60</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">900</literal></expr>, <expr><literal type="number">900</literal></expr>, <expr><name>V</name><operator>|</operator><name>F</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"fscale"</literal></expr>, <expr><literal type="string">"set frequency scale"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>fscale</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>V</name><operator>|</operator><name>F</name></expr>, <expr><literal type="string">"fscale"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"lin"</literal></expr>, <expr><literal type="string">"linear"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>V</name><operator>|</operator><name>F</name></expr>, <expr><literal type="string">"fscale"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"log"</literal></expr>, <expr><literal type="string">"logarithmic"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>V</name><operator>|</operator><name>F</name></expr>, <expr><literal type="string">"fscale"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"colors"</literal></expr>, <expr><literal type="string">"set channels curves colors"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>colors</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"red|green|blue|yellow|orange|lime|pink|magenta|brown"</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>V</name><operator>|</operator><name>F</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>anequalizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_curves</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AudioNEqualizerContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>colors</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>color</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>saveptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>colors</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>colors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>colors</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>fg</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_v</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>f</name></decl>;</decl_stmt>

<expr_stmt><expr><name>color</name> <operator>=</operator> <call><name>av_strtok</name><argument_list>(<argument><expr><ternary><condition><expr><name>ch</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>colors</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">" |"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>saveptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>color</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_parse_color</name><argument_list>(<argument><expr><name>fg</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>f</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>f</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr>;</condition> <incr><expr><name>f</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>zr</name></decl>, <decl><type ref="prev"/><name>zi</name></decl>, <decl><type ref="prev"/><name>zr2</name></decl>, <decl><type ref="prev"/><name>zi2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>Hr</name></decl>, <decl><type ref="prev"/><name>Hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>Hmag</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name>M_PI</name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>fscale</name></name></expr> ?</condition><then> <expr><call><name>pow</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>f</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>f</name></expr></else></ternary><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>zr</name> <operator>=</operator> <call><name>cos</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>zr2</name> <operator>=</operator> <name>zr</name> <operator>*</operator> <name>zr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>zi</name> <operator>=</operator> <operator>-</operator><call><name>sin</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>zi2</name> <operator>=</operator> <name>zi</name> <operator>*</operator> <name>zi</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_filters</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>channel</name> <operator>!=</operator> <name>ch</name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>ignore</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>FILTER_ORDER</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>FoSection</name> <modifier>*</modifier></type><name>S</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name><name>section</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><name>Hr</name> <operator>=</operator> <name><name>S</name><operator>-&gt;</operator><name>b4</name></name><operator>*</operator><operator>(</operator><literal type="number">1</literal><operator>-</operator><literal type="number">8</literal><operator>*</operator><name>zr2</name><operator>*</operator><name>zi2</name><operator>)</operator> <operator>+</operator> <name><name>S</name><operator>-&gt;</operator><name>b2</name></name><operator>*</operator><operator>(</operator><name>zr2</name><operator>-</operator><name>zi2</name><operator>)</operator> <operator>+</operator> <name>zr</name><operator>*</operator><operator>(</operator><name><name>S</name><operator>-&gt;</operator><name>b1</name></name><operator>+</operator><name><name>S</name><operator>-&gt;</operator><name>b3</name></name><operator>*</operator><operator>(</operator><name>zr2</name><operator>-</operator><literal type="number">3</literal><operator>*</operator><name>zi2</name><operator>)</operator><operator>)</operator><operator>+</operator> <name><name>S</name><operator>-&gt;</operator><name>b0</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>Hi</name> <operator>=</operator> <name>zi</name><operator>*</operator><operator>(</operator><name><name>S</name><operator>-&gt;</operator><name>b3</name></name><operator>*</operator><operator>(</operator><literal type="number">3</literal><operator>*</operator><name>zr2</name><operator>-</operator><name>zi2</name><operator>)</operator> <operator>+</operator> <name><name>S</name><operator>-&gt;</operator><name>b1</name></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>zr</name><operator>*</operator><operator>(</operator><literal type="number">2</literal><operator>*</operator><name><name>S</name><operator>-&gt;</operator><name>b4</name></name><operator>*</operator><operator>(</operator><name>zr2</name><operator>-</operator><name>zi2</name><operator>)</operator> <operator>+</operator> <name><name>S</name><operator>-&gt;</operator><name>b2</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>Hmag</name> <operator>*=</operator> <call><name>hypot</name><argument_list>(<argument><expr><name>Hr</name></expr></argument>, <argument><expr><name>Hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Hr</name> <operator>=</operator> <name><name>S</name><operator>-&gt;</operator><name>a4</name></name><operator>*</operator><operator>(</operator><literal type="number">1</literal><operator>-</operator><literal type="number">8</literal><operator>*</operator><name>zr2</name><operator>*</operator><name>zi2</name><operator>)</operator> <operator>+</operator> <name><name>S</name><operator>-&gt;</operator><name>a2</name></name><operator>*</operator><operator>(</operator><name>zr2</name><operator>-</operator><name>zi2</name><operator>)</operator> <operator>+</operator> <name>zr</name><operator>*</operator><operator>(</operator><name><name>S</name><operator>-&gt;</operator><name>a1</name></name><operator>+</operator><name><name>S</name><operator>-&gt;</operator><name>a3</name></name><operator>*</operator><operator>(</operator><name>zr2</name><operator>-</operator><literal type="number">3</literal><operator>*</operator><name>zi2</name><operator>)</operator><operator>)</operator><operator>+</operator> <name><name>S</name><operator>-&gt;</operator><name>a0</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>Hi</name> <operator>=</operator> <name>zi</name><operator>*</operator><operator>(</operator><name><name>S</name><operator>-&gt;</operator><name>a3</name></name><operator>*</operator><operator>(</operator><literal type="number">3</literal><operator>*</operator><name>zr2</name><operator>-</operator><name>zi2</name><operator>)</operator> <operator>+</operator> <name><name>S</name><operator>-&gt;</operator><name>a1</name></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>zr</name><operator>*</operator><operator>(</operator><literal type="number">2</literal><operator>*</operator><name><name>S</name><operator>-&gt;</operator><name>a4</name></name><operator>*</operator><operator>(</operator><name>zr2</name><operator>-</operator><name>zi2</name><operator>)</operator> <operator>+</operator> <name><name>S</name><operator>-&gt;</operator><name>a2</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>Hmag</name> <operator>/=</operator> <call><name>hypot</name><argument_list>(<argument><expr><name>Hr</name></expr></argument>, <argument><expr><name>Hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1.</literal> <operator>+</operator> <operator>-</operator><literal type="number">20</literal> <operator>*</operator> <call><name>log10</name><argument_list>(<argument><expr><name>Hmag</name></expr></argument>)</argument_list></call> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>mag</name></name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>prev_v</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>prev_v</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;=</operator> <name>prev_v</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>v</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;=</operator> <name>prev_v</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name>fg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>prev_v</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;=</operator> <name>v</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name>fg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>prev_v</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>colors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_video</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>outlink</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AudioNEqualizerContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>video</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>video</name></name> <operator>=</operator> <name>out</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>outlink</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_curves</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>inlink</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AudioNEqualizerContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterPad</name></type> <name>pad</name></decl>, <decl><type ref="prev"/><name>vpad</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pad</name> <operator>=</operator> <operator>(</operator><name>AVFilterPad</name><operator>)</operator><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><literal type="string">"out0"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
}</block></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pad</name><operator>.</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>draw_curves</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vpad</name> <operator>=</operator> <operator>(</operator><name>AVFilterPad</name><operator>)</operator><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><literal type="string">"out1"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_video</name></expr>,
}</block></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vpad</name><operator>.</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pad</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_insert_outpad</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pad</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>draw_curves</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_insert_outpad</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vpad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vpad</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_formats</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AudioNEqualizerContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterFormats</name> <modifier>*</modifier></type><name>formats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterChannelLayouts</name> <modifier>*</modifier></type><name>layouts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>AV_PIX_FMT_RGBA</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVSampleFormat</name></name></type> <name><name>sample_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_SAMPLE_FMT_DBLP</name></expr>,
<expr><name>AV_SAMPLE_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>draw_curves</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>videolink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><name>formats</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>videolink</name><operator>-&gt;</operator><name>in_formats</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_make_format_list</name><argument_list>(<argument><expr><name>sample_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><name>formats</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inlink</name><operator>-&gt;</operator><name>out_formats</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><name>formats</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>outlink</name><operator>-&gt;</operator><name>in_formats</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>layouts</name> <operator>=</operator> <call><name>ff_all_channel_counts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_channel_layouts_ref</name><argument_list>(<argument><expr><name>layouts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inlink</name><operator>-&gt;</operator><name>out_channel_layouts</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_channel_layouts_ref</name><argument_list>(<argument><expr><name>layouts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>outlink</name><operator>-&gt;</operator><name>in_channel_layouts</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>formats</name> <operator>=</operator> <call><name>ff_all_samplerates</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><name>formats</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inlink</name><operator>-&gt;</operator><name>out_samplerates</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_formats_ref</name><argument_list>(<argument><expr><name>formats</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>outlink</name><operator>-&gt;</operator><name>in_samplerates</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AudioNEqualizerContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_outputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>output_pads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>video</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_filters</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_allocated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>butterworth_fo_section</name><parameter_list>(<parameter><decl><type><name>FoSection</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>beta</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>si</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>g0</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>D</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>c0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c0</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>c0</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>b0</name></name> <operator>=</operator> <operator>(</operator><name>g</name><operator>*</operator><name>g</name><operator>*</operator><name>beta</name><operator>*</operator><name>beta</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>g</name><operator>*</operator><name>g0</name><operator>*</operator><name>si</name><operator>*</operator><name>beta</name> <operator>+</operator> <name>g0</name><operator>*</operator><name>g0</name><operator>)</operator><operator>/</operator><name>D</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>b1</name></name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>c0</name><operator>*</operator><operator>(</operator><name>g</name><operator>*</operator><name>g</name><operator>*</operator><name>beta</name><operator>*</operator><name>beta</name> <operator>-</operator> <name>g0</name><operator>*</operator><name>g0</name><operator>)</operator><operator>/</operator><name>D</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>b2</name></name> <operator>=</operator> <operator>(</operator><name>g</name><operator>*</operator><name>g</name><operator>*</operator><name>beta</name><operator>*</operator><name>beta</name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>g0</name><operator>*</operator><name>g</name><operator>*</operator><name>beta</name><operator>*</operator><name>si</name> <operator>+</operator> <name>g0</name><operator>*</operator><name>g0</name><operator>)</operator><operator>/</operator><name>D</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>b3</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>b4</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>a0</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>a1</name></name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>c0</name><operator>*</operator><operator>(</operator><name>beta</name><operator>*</operator><name>beta</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>/</operator><name>D</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>a2</name></name> <operator>=</operator> <operator>(</operator><name>beta</name><operator>*</operator><name>beta</name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>beta</name><operator>*</operator><name>si</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>/</operator><name>D</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>a3</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>a4</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>b0</name></name> <operator>=</operator> <operator>(</operator><name>g</name><operator>*</operator><name>g</name><operator>*</operator><name>beta</name><operator>*</operator><name>beta</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>g</name><operator>*</operator><name>g0</name><operator>*</operator><name>si</name><operator>*</operator><name>beta</name> <operator>+</operator> <name>g0</name><operator>*</operator><name>g0</name><operator>)</operator><operator>/</operator><name>D</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>b1</name></name> <operator>=</operator> <operator>-</operator><literal type="number">4</literal><operator>*</operator><name>c0</name><operator>*</operator><operator>(</operator><name>g0</name><operator>*</operator><name>g0</name> <operator>+</operator> <name>g</name><operator>*</operator><name>g0</name><operator>*</operator><name>si</name><operator>*</operator><name>beta</name><operator>)</operator><operator>/</operator><name>D</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>b2</name></name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><name>g0</name><operator>*</operator><name>g0</name><operator>*</operator><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c0</name><operator>*</operator><name>c0</name><operator>)</operator> <operator>-</operator> <name>g</name><operator>*</operator><name>g</name><operator>*</operator><name>beta</name><operator>*</operator><name>beta</name><operator>)</operator><operator>/</operator><name>D</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>b3</name></name> <operator>=</operator> <operator>-</operator><literal type="number">4</literal><operator>*</operator><name>c0</name><operator>*</operator><operator>(</operator><name>g0</name><operator>*</operator><name>g0</name> <operator>-</operator> <name>g</name><operator>*</operator><name>g0</name><operator>*</operator><name>si</name><operator>*</operator><name>beta</name><operator>)</operator><operator>/</operator><name>D</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>b4</name></name> <operator>=</operator> <operator>(</operator><name>g</name><operator>*</operator><name>g</name><operator>*</operator><name>beta</name><operator>*</operator><name>beta</name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>g</name><operator>*</operator><name>g0</name><operator>*</operator><name>si</name><operator>*</operator><name>beta</name> <operator>+</operator> <name>g0</name><operator>*</operator><name>g0</name><operator>)</operator><operator>/</operator><name>D</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>a0</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>a1</name></name> <operator>=</operator> <operator>-</operator><literal type="number">4</literal><operator>*</operator><name>c0</name><operator>*</operator><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>si</name><operator>*</operator><name>beta</name><operator>)</operator><operator>/</operator><name>D</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>a2</name></name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c0</name><operator>*</operator><name>c0</name> <operator>-</operator> <name>beta</name><operator>*</operator><name>beta</name><operator>)</operator><operator>/</operator><name>D</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>a3</name></name> <operator>=</operator> <operator>-</operator><literal type="number">4</literal><operator>*</operator><name>c0</name><operator>*</operator><operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>si</name><operator>*</operator><name>beta</name><operator>)</operator><operator>/</operator><name>D</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>a4</name></name> <operator>=</operator> <operator>(</operator><name>beta</name><operator>*</operator><name>beta</name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>si</name><operator>*</operator><name>beta</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>/</operator><name>D</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>butterworth_bp_filter</name><parameter_list>(<parameter><decl><type><name>EqualizatorFilter</name> <modifier>*</modifier></type><name>f</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>w0</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>wb</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>G</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>Gb</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>G0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>g</name></decl>, <decl><type ref="prev"/><name>c0</name></decl>, <decl><type ref="prev"/><name>g0</name></decl>, <decl><type ref="prev"/><name>beta</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>epsilon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>N</name> <operator>%</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>L</name> <init>= <expr><operator>(</operator><name>N</name> <operator>-</operator> <name>r</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>G</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>G0</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>section</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>a0</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>section</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>b0</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>section</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>a0</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>section</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>b0</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>G</name> <operator>=</operator> <call><name>ff_exp10</name><argument_list>(<argument><expr><name>G</name><operator>/</operator><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Gb</name> <operator>=</operator> <call><name>ff_exp10</name><argument_list>(<argument><expr><name>Gb</name><operator>/</operator><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>G0</name> <operator>=</operator> <call><name>ff_exp10</name><argument_list>(<argument><expr><name>G0</name><operator>/</operator><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>epsilon</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><operator>(</operator><name>G</name> <operator>*</operator> <name>G</name> <operator>-</operator> <name>Gb</name> <operator>*</operator> <name>Gb</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>Gb</name> <operator>*</operator> <name>Gb</name> <operator>-</operator> <name>G0</name> <operator>*</operator> <name>G0</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><name>G</name></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>/</operator> <name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g0</name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><name>G0</name></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>/</operator> <name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>beta</name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><name>epsilon</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0</literal> <operator>/</operator> <name>N</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>tan</name><argument_list>(<argument><expr><name>wb</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c0</name> <operator>=</operator> <call><name>cos</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>L</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>ui</name> <init>= <expr><operator>(</operator><literal type="number">2.0</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>N</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>si</name> <init>= <expr><call><name>sin</name><argument_list>(<argument><expr><name>M_PI</name> <operator>*</operator> <name>ui</name> <operator>/</operator> <literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>Di</name> <init>= <expr><name>beta</name> <operator>*</operator> <name>beta</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>si</name> <operator>*</operator> <name>beta</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>butterworth_fo_section</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>section</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>si</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>g0</name></expr></argument>, <argument><expr><name>Di</name></expr></argument>, <argument><expr><name>c0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>chebyshev1_fo_section</name><parameter_list>(<parameter><decl><type><name>FoSection</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>tetta_b</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>g0</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>si</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>b</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>D</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>c0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c0</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>c0</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>b0</name></name> <operator>=</operator> <operator>(</operator><name>tetta_b</name><operator>*</operator><name>tetta_b</name><operator>*</operator><operator>(</operator><name>b</name><operator>*</operator><name>b</name><operator>+</operator><name>g0</name><operator>*</operator><name>g0</name><operator>*</operator><name>c</name><operator>*</operator><name>c</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>g0</name><operator>*</operator><name>b</name><operator>*</operator><name>si</name><operator>*</operator><name>tetta_b</name><operator>*</operator><name>tetta_b</name> <operator>+</operator> <name>g0</name><operator>*</operator><name>g0</name><operator>)</operator><operator>/</operator><name>D</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>b1</name></name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>c0</name><operator>*</operator><operator>(</operator><name>tetta_b</name><operator>*</operator><name>tetta_b</name><operator>*</operator><operator>(</operator><name>b</name><operator>*</operator><name>b</name><operator>+</operator><name>g0</name><operator>*</operator><name>g0</name><operator>*</operator><name>c</name><operator>*</operator><name>c</name><operator>)</operator> <operator>-</operator> <name>g0</name><operator>*</operator><name>g0</name><operator>)</operator><operator>/</operator><name>D</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>b2</name></name> <operator>=</operator> <operator>(</operator><name>tetta_b</name><operator>*</operator><name>tetta_b</name><operator>*</operator><operator>(</operator><name>b</name><operator>*</operator><name>b</name><operator>+</operator><name>g0</name><operator>*</operator><name>g0</name><operator>*</operator><name>c</name><operator>*</operator><name>c</name><operator>)</operator> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>g0</name><operator>*</operator><name>b</name><operator>*</operator><name>si</name><operator>*</operator><name>tetta_b</name> <operator>+</operator> <name>g0</name><operator>*</operator><name>g0</name><operator>)</operator><operator>/</operator><name>D</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>b3</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>b4</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>a0</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>a1</name></name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>c0</name><operator>*</operator><operator>(</operator><name>tetta_b</name><operator>*</operator><name>tetta_b</name><operator>*</operator><operator>(</operator><name>a</name><operator>*</operator><name>a</name><operator>+</operator><name>c</name><operator>*</operator><name>c</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>/</operator><name>D</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>a2</name></name> <operator>=</operator> <operator>(</operator><name>tetta_b</name><operator>*</operator><name>tetta_b</name><operator>*</operator><operator>(</operator><name>a</name><operator>*</operator><name>a</name><operator>+</operator><name>c</name><operator>*</operator><name>c</name><operator>)</operator> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>a</name><operator>*</operator><name>si</name><operator>*</operator><name>tetta_b</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>/</operator><name>D</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>a3</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>a4</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>b0</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>b</name><operator>*</operator><name>b</name> <operator>+</operator> <name>g0</name><operator>*</operator><name>g0</name><operator>*</operator><name>c</name><operator>*</operator><name>c</name><operator>)</operator><operator>*</operator><name>tetta_b</name><operator>*</operator><name>tetta_b</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>g0</name><operator>*</operator><name>b</name><operator>*</operator><name>si</name><operator>*</operator><name>tetta_b</name> <operator>+</operator> <name>g0</name><operator>*</operator><name>g0</name><operator>)</operator><operator>/</operator><name>D</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>b1</name></name> <operator>=</operator> <operator>-</operator><literal type="number">4</literal><operator>*</operator><name>c0</name><operator>*</operator><operator>(</operator><name>g0</name><operator>*</operator><name>g0</name> <operator>+</operator> <name>g0</name><operator>*</operator><name>b</name><operator>*</operator><name>si</name><operator>*</operator><name>tetta_b</name><operator>)</operator><operator>/</operator><name>D</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>b2</name></name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><name>g0</name><operator>*</operator><name>g0</name><operator>*</operator><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c0</name><operator>*</operator><name>c0</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>b</name><operator>*</operator><name>b</name> <operator>+</operator> <name>g0</name><operator>*</operator><name>g0</name><operator>*</operator><name>c</name><operator>*</operator><name>c</name><operator>)</operator><operator>*</operator><name>tetta_b</name><operator>*</operator><name>tetta_b</name><operator>)</operator><operator>/</operator><name>D</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>b3</name></name> <operator>=</operator> <operator>-</operator><literal type="number">4</literal><operator>*</operator><name>c0</name><operator>*</operator><operator>(</operator><name>g0</name><operator>*</operator><name>g0</name> <operator>-</operator> <name>g0</name><operator>*</operator><name>b</name><operator>*</operator><name>si</name><operator>*</operator><name>tetta_b</name><operator>)</operator><operator>/</operator><name>D</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>b4</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>b</name><operator>*</operator><name>b</name> <operator>+</operator> <name>g0</name><operator>*</operator><name>g0</name><operator>*</operator><name>c</name><operator>*</operator><name>c</name><operator>)</operator><operator>*</operator><name>tetta_b</name><operator>*</operator><name>tetta_b</name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>g0</name><operator>*</operator><name>b</name><operator>*</operator><name>si</name><operator>*</operator><name>tetta_b</name> <operator>+</operator> <name>g0</name><operator>*</operator><name>g0</name><operator>)</operator><operator>/</operator><name>D</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>a0</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>a1</name></name> <operator>=</operator> <operator>-</operator><literal type="number">4</literal><operator>*</operator><name>c0</name><operator>*</operator><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>a</name><operator>*</operator><name>si</name><operator>*</operator><name>tetta_b</name><operator>)</operator><operator>/</operator><name>D</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>a2</name></name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c0</name><operator>*</operator><name>c0</name> <operator>-</operator> <operator>(</operator><name>a</name><operator>*</operator><name>a</name> <operator>+</operator> <name>c</name><operator>*</operator><name>c</name><operator>)</operator><operator>*</operator><name>tetta_b</name><operator>*</operator><name>tetta_b</name><operator>)</operator><operator>/</operator><name>D</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>a3</name></name> <operator>=</operator> <operator>-</operator><literal type="number">4</literal><operator>*</operator><name>c0</name><operator>*</operator><operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>a</name><operator>*</operator><name>si</name><operator>*</operator><name>tetta_b</name><operator>)</operator><operator>/</operator><name>D</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>a4</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>a</name><operator>*</operator><name>a</name> <operator>+</operator> <name>c</name><operator>*</operator><name>c</name><operator>)</operator><operator>*</operator><name>tetta_b</name><operator>*</operator><name>tetta_b</name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>a</name><operator>*</operator><name>si</name><operator>*</operator><name>tetta_b</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>/</operator><name>D</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>chebyshev1_bp_filter</name><parameter_list>(<parameter><decl><type><name>EqualizatorFilter</name> <modifier>*</modifier></type><name>f</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>w0</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>wb</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>G</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>Gb</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>G0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c0</name></decl>, <decl><type ref="prev"/><name>g0</name></decl>, <decl><type ref="prev"/><name>alfa</name></decl>, <decl><type ref="prev"/><name>beta</name></decl>, <decl><type ref="prev"/><name>tetta_b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>epsilon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>N</name> <operator>%</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>L</name> <init>= <expr><operator>(</operator><name>N</name> <operator>-</operator> <name>r</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>G</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>G0</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>section</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>a0</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>section</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>b0</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>section</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>a0</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>section</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>b0</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>G</name> <operator>=</operator> <call><name>ff_exp10</name><argument_list>(<argument><expr><name>G</name><operator>/</operator><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Gb</name> <operator>=</operator> <call><name>ff_exp10</name><argument_list>(<argument><expr><name>Gb</name><operator>/</operator><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>G0</name> <operator>=</operator> <call><name>ff_exp10</name><argument_list>(<argument><expr><name>G0</name><operator>/</operator><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>epsilon</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><operator>(</operator><name>G</name><operator>*</operator><name>G</name> <operator>-</operator> <name>Gb</name><operator>*</operator><name>Gb</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>Gb</name><operator>*</operator><name>Gb</name> <operator>-</operator> <name>G0</name><operator>*</operator><name>G0</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g0</name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><name>G0</name></expr></argument>,<argument><expr><literal type="number">1.0</literal><operator>/</operator><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>alfa</name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><literal type="number">1.0</literal><operator>/</operator><name>epsilon</name> <operator>+</operator> <call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal><operator>/</operator><operator>(</operator><name>epsilon</name><operator>*</operator><name>epsilon</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1.0</literal><operator>/</operator><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>beta</name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><name>G</name><operator>/</operator><name>epsilon</name> <operator>+</operator> <name>Gb</name> <operator>*</operator> <call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal><operator>/</operator><operator>(</operator><name>epsilon</name><operator>*</operator><name>epsilon</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1.0</literal><operator>/</operator><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">0.5</literal> <operator>*</operator> <operator>(</operator><name>alfa</name> <operator>-</operator> <literal type="number">1.0</literal><operator>/</operator><name>alfa</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">0.5</literal> <operator>*</operator> <operator>(</operator><name>beta</name> <operator>-</operator> <name>g0</name><operator>*</operator><name>g0</name><operator>*</operator><operator>(</operator><literal type="number">1</literal><operator>/</operator><name>beta</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tetta_b</name> <operator>=</operator> <call><name>tan</name><argument_list>(<argument><expr><name>wb</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c0</name> <operator>=</operator> <call><name>cos</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>L</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>ui</name> <init>= <expr><operator>(</operator><literal type="number">2.0</literal><operator>*</operator><name>i</name><operator>-</operator><literal type="number">1.0</literal><operator>)</operator><operator>/</operator><name>N</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>ci</name> <init>= <expr><call><name>cos</name><argument_list>(<argument><expr><name>M_PI</name><operator>*</operator><name>ui</name><operator>/</operator><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>si</name> <init>= <expr><call><name>sin</name><argument_list>(<argument><expr><name>M_PI</name><operator>*</operator><name>ui</name><operator>/</operator><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>Di</name> <init>= <expr><operator>(</operator><name>a</name><operator>*</operator><name>a</name> <operator>+</operator> <name>ci</name><operator>*</operator><name>ci</name><operator>)</operator><operator>*</operator><name>tetta_b</name><operator>*</operator><name>tetta_b</name> <operator>+</operator> <literal type="number">2.0</literal><operator>*</operator><name>a</name><operator>*</operator><name>si</name><operator>*</operator><name>tetta_b</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>chebyshev1_fo_section</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>section</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>ci</name></expr></argument>, <argument><expr><name>tetta_b</name></expr></argument>, <argument><expr><name>g0</name></expr></argument>, <argument><expr><name>si</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>Di</name></expr></argument>, <argument><expr><name>c0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>chebyshev2_fo_section</name><parameter_list>(<parameter><decl><type><name>FoSection</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>tetta_b</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>si</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>b</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>D</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>c0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c0</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>c0</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>b0</name></name> <operator>=</operator> <operator>(</operator><name>g</name><operator>*</operator><name>g</name><operator>*</operator><name>tetta_b</name><operator>*</operator><name>tetta_b</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>tetta_b</name><operator>*</operator><name>g</name><operator>*</operator><name>b</name><operator>*</operator><name>si</name> <operator>+</operator> <name>b</name><operator>*</operator><name>b</name> <operator>+</operator> <name>g</name><operator>*</operator><name>g</name><operator>*</operator><name>c</name><operator>*</operator><name>c</name><operator>)</operator><operator>/</operator><name>D</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>b1</name></name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>c0</name><operator>*</operator><operator>(</operator><name>g</name><operator>*</operator><name>g</name><operator>*</operator><name>tetta_b</name><operator>*</operator><name>tetta_b</name> <operator>-</operator> <name>b</name><operator>*</operator><name>b</name> <operator>-</operator> <name>g</name><operator>*</operator><name>g</name><operator>*</operator><name>c</name><operator>*</operator><name>c</name><operator>)</operator><operator>/</operator><name>D</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>b2</name></name> <operator>=</operator> <operator>(</operator><name>g</name><operator>*</operator><name>g</name><operator>*</operator><name>tetta_b</name><operator>*</operator><name>tetta_b</name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>tetta_b</name><operator>*</operator><name>g</name><operator>*</operator><name>b</name><operator>*</operator><name>si</name> <operator>+</operator> <name>b</name><operator>*</operator><name>b</name> <operator>+</operator> <name>g</name><operator>*</operator><name>g</name><operator>*</operator><name>c</name><operator>*</operator><name>c</name><operator>)</operator><operator>/</operator><name>D</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>b3</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>b4</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>a0</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>a1</name></name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>c0</name><operator>*</operator><operator>(</operator><name>tetta_b</name><operator>*</operator><name>tetta_b</name> <operator>-</operator> <name>a</name><operator>*</operator><name>a</name> <operator>-</operator> <name>c</name><operator>*</operator><name>c</name><operator>)</operator><operator>/</operator><name>D</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>a2</name></name> <operator>=</operator> <operator>(</operator><name>tetta_b</name><operator>*</operator><name>tetta_b</name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>tetta_b</name><operator>*</operator><name>a</name><operator>*</operator><name>si</name> <operator>+</operator> <name>a</name><operator>*</operator><name>a</name> <operator>+</operator> <name>c</name><operator>*</operator><name>c</name><operator>)</operator><operator>/</operator><name>D</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>a3</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>a4</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>b0</name></name> <operator>=</operator> <operator>(</operator><name>g</name><operator>*</operator><name>g</name><operator>*</operator><name>tetta_b</name><operator>*</operator><name>tetta_b</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>g</name><operator>*</operator><name>b</name><operator>*</operator><name>si</name><operator>*</operator><name>tetta_b</name> <operator>+</operator> <name>b</name><operator>*</operator><name>b</name> <operator>+</operator> <name>g</name><operator>*</operator><name>g</name><operator>*</operator><name>c</name><operator>*</operator><name>c</name><operator>)</operator><operator>/</operator><name>D</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>b1</name></name> <operator>=</operator> <operator>-</operator><literal type="number">4</literal><operator>*</operator><name>c0</name><operator>*</operator><operator>(</operator><name>b</name><operator>*</operator><name>b</name> <operator>+</operator> <name>g</name><operator>*</operator><name>g</name><operator>*</operator><name>c</name><operator>*</operator><name>c</name> <operator>+</operator> <name>g</name><operator>*</operator><name>b</name><operator>*</operator><name>si</name><operator>*</operator><name>tetta_b</name><operator>)</operator><operator>/</operator><name>D</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>b2</name></name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><operator>(</operator><name>b</name><operator>*</operator><name>b</name> <operator>+</operator> <name>g</name><operator>*</operator><name>g</name><operator>*</operator><name>c</name><operator>*</operator><name>c</name><operator>)</operator><operator>*</operator><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c0</name><operator>*</operator><name>c0</name><operator>)</operator> <operator>-</operator> <name>g</name><operator>*</operator><name>g</name><operator>*</operator><name>tetta_b</name><operator>*</operator><name>tetta_b</name><operator>)</operator><operator>/</operator><name>D</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>b3</name></name> <operator>=</operator> <operator>-</operator><literal type="number">4</literal><operator>*</operator><name>c0</name><operator>*</operator><operator>(</operator><name>b</name><operator>*</operator><name>b</name> <operator>+</operator> <name>g</name><operator>*</operator><name>g</name><operator>*</operator><name>c</name><operator>*</operator><name>c</name> <operator>-</operator> <name>g</name><operator>*</operator><name>b</name><operator>*</operator><name>si</name><operator>*</operator><name>tetta_b</name><operator>)</operator><operator>/</operator><name>D</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>b4</name></name> <operator>=</operator> <operator>(</operator><name>g</name><operator>*</operator><name>g</name><operator>*</operator><name>tetta_b</name><operator>*</operator><name>tetta_b</name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>g</name><operator>*</operator><name>b</name><operator>*</operator><name>si</name><operator>*</operator><name>tetta_b</name> <operator>+</operator> <name>b</name><operator>*</operator><name>b</name> <operator>+</operator> <name>g</name><operator>*</operator><name>g</name><operator>*</operator><name>c</name><operator>*</operator><name>c</name><operator>)</operator><operator>/</operator><name>D</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>a0</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>a1</name></name> <operator>=</operator> <operator>-</operator><literal type="number">4</literal><operator>*</operator><name>c0</name><operator>*</operator><operator>(</operator><name>a</name><operator>*</operator><name>a</name> <operator>+</operator> <name>c</name><operator>*</operator><name>c</name> <operator>+</operator> <name>a</name><operator>*</operator><name>si</name><operator>*</operator><name>tetta_b</name><operator>)</operator><operator>/</operator><name>D</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>a2</name></name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><operator>(</operator><name>a</name><operator>*</operator><name>a</name> <operator>+</operator> <name>c</name><operator>*</operator><name>c</name><operator>)</operator><operator>*</operator><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>c0</name><operator>*</operator><name>c0</name><operator>)</operator> <operator>-</operator> <name>tetta_b</name><operator>*</operator><name>tetta_b</name><operator>)</operator><operator>/</operator><name>D</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>a3</name></name> <operator>=</operator> <operator>-</operator><literal type="number">4</literal><operator>*</operator><name>c0</name><operator>*</operator><operator>(</operator><name>a</name><operator>*</operator><name>a</name> <operator>+</operator> <name>c</name><operator>*</operator><name>c</name> <operator>-</operator> <name>a</name><operator>*</operator><name>si</name><operator>*</operator><name>tetta_b</name><operator>)</operator><operator>/</operator><name>D</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>a4</name></name> <operator>=</operator> <operator>(</operator><name>tetta_b</name><operator>*</operator><name>tetta_b</name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>a</name><operator>*</operator><name>si</name><operator>*</operator><name>tetta_b</name> <operator>+</operator> <name>a</name><operator>*</operator><name>a</name> <operator>+</operator> <name>c</name><operator>*</operator><name>c</name><operator>)</operator><operator>/</operator><name>D</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>chebyshev2_bp_filter</name><parameter_list>(<parameter><decl><type><name>EqualizatorFilter</name> <modifier>*</modifier></type><name>f</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>w0</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>wb</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>G</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>Gb</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>G0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c0</name></decl>, <decl><type ref="prev"/><name>tetta_b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>epsilon</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>eu</name></decl>, <decl><type ref="prev"/><name>ew</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>N</name> <operator>%</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>L</name> <init>= <expr><operator>(</operator><name>N</name> <operator>-</operator> <name>r</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>G</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>G0</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>section</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>a0</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>section</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>b0</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>section</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>a0</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>section</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>b0</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>G</name> <operator>=</operator> <call><name>ff_exp10</name><argument_list>(<argument><expr><name>G</name><operator>/</operator><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Gb</name> <operator>=</operator> <call><name>ff_exp10</name><argument_list>(<argument><expr><name>Gb</name><operator>/</operator><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>G0</name> <operator>=</operator> <call><name>ff_exp10</name><argument_list>(<argument><expr><name>G0</name><operator>/</operator><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>epsilon</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><operator>(</operator><name>G</name><operator>*</operator><name>G</name> <operator>-</operator> <name>Gb</name><operator>*</operator><name>Gb</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>Gb</name><operator>*</operator><name>Gb</name> <operator>-</operator> <name>G0</name><operator>*</operator><name>G0</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><name>G</name></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>/</operator> <name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>eu</name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><name>epsilon</name> <operator>+</operator> <call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <name>epsilon</name><operator>*</operator><name>epsilon</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1.0</literal><operator>/</operator><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ew</name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><name>G0</name><operator>*</operator><name>epsilon</name> <operator>+</operator> <name>Gb</name><operator>*</operator><call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <name>epsilon</name><operator>*</operator><name>epsilon</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1.0</literal><operator>/</operator><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>eu</name> <operator>-</operator> <literal type="number">1.0</literal><operator>/</operator><name>eu</name><operator>)</operator><operator>/</operator><literal type="number">2.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>ew</name> <operator>-</operator> <name>g</name><operator>*</operator><name>g</name><operator>/</operator><name>ew</name><operator>)</operator><operator>/</operator><literal type="number">2.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tetta_b</name> <operator>=</operator> <call><name>tan</name><argument_list>(<argument><expr><name>wb</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c0</name> <operator>=</operator> <call><name>cos</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>L</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>ui</name> <init>= <expr><operator>(</operator><literal type="number">2.0</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">1.0</literal><operator>)</operator><operator>/</operator><name>N</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>ci</name> <init>= <expr><call><name>cos</name><argument_list>(<argument><expr><name>M_PI</name> <operator>*</operator> <name>ui</name> <operator>/</operator> <literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>si</name> <init>= <expr><call><name>sin</name><argument_list>(<argument><expr><name>M_PI</name> <operator>*</operator> <name>ui</name> <operator>/</operator> <literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>Di</name> <init>= <expr><name>tetta_b</name><operator>*</operator><name>tetta_b</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>a</name><operator>*</operator><name>si</name><operator>*</operator><name>tetta_b</name> <operator>+</operator> <name>a</name><operator>*</operator><name>a</name> <operator>+</operator> <name>ci</name><operator>*</operator><name>ci</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>chebyshev2_fo_section</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>section</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>ci</name></expr></argument>, <argument><expr><name>tetta_b</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>si</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>Di</name></expr></argument>, <argument><expr><name>c0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>butterworth_compute_bw_gain_db</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>gain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>bw_gain</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>gain</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bw_gain</name> <operator>=</operator> <name>gain</name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>gain</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">6</literal> <operator>&amp;&amp;</operator> <name>gain</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bw_gain</name> <operator>=</operator> <name>gain</name> <operator>*</operator> <literal type="number">0.5</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>gain</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bw_gain</name> <operator>=</operator> <name>gain</name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>bw_gain</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>chebyshev1_compute_bw_gain_db</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>gain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>bw_gain</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>gain</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bw_gain</name> <operator>=</operator> <name>gain</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>gain</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">6</literal> <operator>&amp;&amp;</operator> <name>gain</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bw_gain</name> <operator>=</operator> <name>gain</name> <operator>*</operator> <literal type="number">0.9</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>gain</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bw_gain</name> <operator>=</operator> <name>gain</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>bw_gain</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>chebyshev2_compute_bw_gain_db</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>gain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>bw_gain</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>gain</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bw_gain</name> <operator>=</operator> <operator>-</operator><literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>gain</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">6</literal> <operator>&amp;&amp;</operator> <name>gain</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bw_gain</name> <operator>=</operator> <name>gain</name> <operator>*</operator> <literal type="number">0.3</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>gain</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bw_gain</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>bw_gain</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type> <name>hz_2_rad</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>fs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">2</literal> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <name>x</name> <operator>/</operator> <name>fs</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>equalizer</name><parameter_list>(<parameter><decl><type><name>EqualizatorFilter</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sample_rate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>w0</name> <init>= <expr><call><name>hz_2_rad</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>freq</name></name></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>wb</name> <init>= <expr><call><name>hz_2_rad</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>bw_gain</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BUTTERWORTH</name></expr>:</case>
<expr_stmt><expr><name>bw_gain</name> <operator>=</operator> <call><name>butterworth_compute_bw_gain_db</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>gain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>butterworth_bp_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>FILTER_ORDER</name></expr></argument>, <argument><expr><name>w0</name></expr></argument>, <argument><expr><name>wb</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>gain</name></name></expr></argument>, <argument><expr><name>bw_gain</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CHEBYSHEV1</name></expr>:</case>
<expr_stmt><expr><name>bw_gain</name> <operator>=</operator> <call><name>chebyshev1_compute_bw_gain_db</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>gain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>chebyshev1_bp_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>FILTER_ORDER</name></expr></argument>, <argument><expr><name>w0</name></expr></argument>, <argument><expr><name>wb</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>gain</name></name></expr></argument>, <argument><expr><name>bw_gain</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CHEBYSHEV2</name></expr>:</case>
<expr_stmt><expr><name>bw_gain</name> <operator>=</operator> <call><name>chebyshev2_compute_bw_gain_db</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>gain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>chebyshev2_bp_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>FILTER_ORDER</name></expr></argument>, <argument><expr><name>w0</name></expr></argument>, <argument><expr><name>wb</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>gain</name></name></expr></argument>, <argument><expr><name>bw_gain</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>add_filter</name><parameter_list>(<parameter><decl><type><name>AudioNEqualizerContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>equalizer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nb_filters</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_filters</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_allocated</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>EqualizatorFilter</name> <modifier>*</modifier></type><name>filters</name></decl>;</decl_stmt>

<expr_stmt><expr><name>filters</name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_allocated</name></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filters</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>filters</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_allocated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filters</name></name> <operator>=</operator> <name>filters</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_allocated</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_filters</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_input</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AudioNEqualizerContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><call><name>av_strdup</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>saveptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>args</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_allocated</name></name> <operator>=</operator> <literal type="number">32</literal> <operator>*</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filters</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><literal type="number">32</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>filters</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_allocated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><call><name>av_strtok</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>nb_filters</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>args</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"|"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>saveptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>arg</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nb_filters</name></name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"c%d f=%lf w=%lf g=%lf t=%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nb_filters</name></name></expr>]</index></name><operator>.</operator><name>channel</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nb_filters</name></name></expr>]</index></name><operator>.</operator><name>freq</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nb_filters</name></name></expr>]</index></name><operator>.</operator><name>width</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nb_filters</name></name></expr>]</index></name><operator>.</operator><name>gain</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nb_filters</name></name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator>
<call><name>sscanf</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"c%d f=%lf w=%lf g=%lf"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nb_filters</name></name></expr>]</index></name><operator>.</operator><name>channel</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nb_filters</name></name></expr>]</index></name><operator>.</operator><name>freq</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nb_filters</name></name></expr>]</index></name><operator>.</operator><name>width</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nb_filters</name></name></expr>]</index></name><operator>.</operator><name>gain</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nb_filters</name></name></expr>]</index></name><operator>.</operator><name>freq</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nb_filters</name></name></expr>]</index></name><operator>.</operator><name>freq</name> <operator>&gt;</operator> <name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>/</operator> <literal type="number">2.0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nb_filters</name></name></expr>]</index></name><operator>.</operator><name>ignore</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nb_filters</name></name></expr>]</index></name><operator>.</operator><name>channel</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nb_filters</name></name></expr>]</index></name><operator>.</operator><name>channel</name> <operator>&gt;=</operator> <name><name>inlink</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nb_filters</name></name></expr>]</index></name><operator>.</operator><name>ignore</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nb_filters</name></name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nb_filters</name></name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NB_TYPES</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>add_filter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>inlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process_command</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>args</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>res_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AudioNEqualizerContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"change"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>freq</name></decl>, <decl><type ref="prev"/><name>width</name></decl>, <decl><type ref="prev"/><name>gain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>filter</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"%d|f=%lf|w=%lf|g=%lf"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>freq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gain</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>filter</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>filter</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_filters</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>freq</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>freq</name></expr></argument> &gt;</argument_list></name> <name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>/</operator> <literal type="number">2.0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name>filter</name></expr>]</index></name><operator>.</operator><name>freq</name> <operator>=</operator> <name>freq</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name>filter</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name>filter</name></expr>]</index></name><operator>.</operator><name>gain</name> <operator>=</operator> <name>gain</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>equalizer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name>filter</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>inlink</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>draw_curves</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>draw_curves</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>inlink</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>video</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type> <name>section_process</name><parameter_list>(<parameter><decl><type><name>FoSection</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>out</name></decl>;</decl_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name><name>S</name><operator>-&gt;</operator><name>b0</name></name> <operator>*</operator> <name>in</name></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name><operator>+=</operator> <name><name>S</name><operator>-&gt;</operator><name>b1</name></name> <operator>*</operator> <name><name>S</name><operator>-&gt;</operator><name>num</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>S</name><operator>-&gt;</operator><name>denum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>S</name><operator>-&gt;</operator><name>a1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name><operator>+=</operator> <name><name>S</name><operator>-&gt;</operator><name>b2</name></name> <operator>*</operator> <name><name>S</name><operator>-&gt;</operator><name>num</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>S</name><operator>-&gt;</operator><name>denum</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>S</name><operator>-&gt;</operator><name>a2</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name><operator>+=</operator> <name><name>S</name><operator>-&gt;</operator><name>b3</name></name> <operator>*</operator> <name><name>S</name><operator>-&gt;</operator><name>num</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>S</name><operator>-&gt;</operator><name>denum</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>S</name><operator>-&gt;</operator><name>a3</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name><operator>+=</operator> <name><name>S</name><operator>-&gt;</operator><name>b4</name></name> <operator>*</operator> <name><name>S</name><operator>-&gt;</operator><name>num</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>S</name><operator>-&gt;</operator><name>denum</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>S</name><operator>-&gt;</operator><name>a4</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>num</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>S</name><operator>-&gt;</operator><name>num</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>num</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>S</name><operator>-&gt;</operator><name>num</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>num</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>S</name><operator>-&gt;</operator><name>num</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>num</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>denum</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>S</name><operator>-&gt;</operator><name>denum</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>denum</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>S</name><operator>-&gt;</operator><name>denum</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>denum</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>S</name><operator>-&gt;</operator><name>denum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>denum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>

<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>process_sample</name><parameter_list>(<parameter><decl><type><name>FoSection</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>p0</name> <init>= <expr><name>in</name></expr></init></decl>, <decl><type ref="prev"/><name>p1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>FILTER_ORDER</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>p1</name> <operator>=</operator> <call><name>section_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>p0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p0</name> <operator>=</operator> <name>p1</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>p1</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>inlink</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AudioNEqualizerContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>bptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_filters</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>EqualizatorFilter</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>gain</name></name> <operator>==</operator> <literal type="number">0.</literal> <operator>||</operator> <name><name>f</name><operator>-&gt;</operator><name>ignore</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bptr</name> <operator>=</operator> <operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>channel</name></name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>sample</name> <init>= <expr><name><name>bptr</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sample</name> <operator>=</operator> <call><name>process_sample</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>section</name></name></expr></argument>, <argument><expr><name>sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bptr</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>sample</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>draw_curves</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>clone</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pts</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>pts</name></name> <operator>+</operator>
<macro><name>av_rescale_q</name><argument_list>(<argument>buf-&gt;nb_samples</argument>, <argument>(AVRational){ <literal type="number">1</literal></argument>, <argument>inlink-&gt;sample_rate }</argument>,
<argument>outlink-&gt;time_base</argument>)</argument_list></macro></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>video</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>pts</name></expr>;</expr_stmt>
<expr_stmt><expr><name>clone</name> <operator>=</operator> <call><name>av_frame_clone</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>video</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>clone</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_filter_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <name>config_input</name></expr>,
<expr><operator>.</operator><name>filter_frame</name> <operator>=</operator> <name>filter_frame</name></expr>,
<expr><operator>.</operator><name>needs_writable</name> <operator>=</operator> <literal type="number">1</literal></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_af_anequalizer</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"anequalizer"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Apply high-order audio parametric multi band equalizer."</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AudioNEqualizerContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>anequalizer_class</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>uninit</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <name>query_formats</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFILTER_FLAG_DYNAMIC_OUTPUTS</name></expr>,
<expr><operator>.</operator><name>process_command</name> <operator>=</operator> <name>process_command</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
