<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\yadif_common.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"yadif.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>return_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_second</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>YADIFContext</name> <modifier>*</modifier></type><name>yadif</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tff</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>yadif</name><operator>-&gt;</operator><name>parity</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tff</name> <operator>=</operator> <ternary><condition><expr><name><name>yadif</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>interlaced_frame</name></name></expr> ?</condition><then>
<expr><name><name>yadif</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>top_field_first</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>tff</name> <operator>=</operator> <name><name>yadif</name><operator>-&gt;</operator><name>parity</name></name> <operator>^</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_second</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>yadif</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>link</name></expr></argument>, <argument><expr><name><name>link</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>link</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>yadif</name><operator>-&gt;</operator><name>out</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name><name>yadif</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>yadif</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yadif</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>yadif</name><operator>-&gt;</operator><name>current_field</name></name> <operator>==</operator> <name>YADIF_FIELD_BACK_END</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>yadif</name><operator>-&gt;</operator><name>current_field</name></name> <operator>=</operator> <name>YADIF_FIELD_END</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>yadif</name><operator>-&gt;</operator><name>filter</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>yadif</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>tff</name> <operator>^</operator> <operator>!</operator><name>is_second</name></expr></argument>, <argument><expr><name>tff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_second</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>cur_pts</name> <init>= <expr><name><name>yadif</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>pts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>next_pts</name> <init>= <expr><name><name>yadif</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>pts</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>next_pts</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator> <name>cur_pts</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>yadif</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>cur_pts</name> <operator>+</operator> <name>next_pts</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>yadif</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_filter_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>yadif</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>yadif</name><operator>-&gt;</operator><name>frame_pending</name></name> <operator>=</operator> <operator>(</operator><name><name>yadif</name><operator>-&gt;</operator><name>mode</name></name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_second</name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>checkstride</name><parameter_list>(<parameter><decl><type><name>YADIFContext</name> <modifier>*</modifier></type><name>yadif</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>yadif</name><operator>-&gt;</operator><name>csp</name><operator>-&gt;</operator><name>nb_components</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fixstride</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><call><name>ff_default_get_video_buffer</name><argument_list>(<argument><expr><name>link</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>dst</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_image_copy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,
<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_move_ref</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_yadif_filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>link</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YADIFContext</name> <modifier>*</modifier></type><name>yadif</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>yadif</name><operator>-&gt;</operator><name>frame_pending</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>return_frame</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>yadif</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>yadif</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>yadif</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>yadif</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yadif</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <name><name>yadif</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yadif</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>frame</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>yadif</name><operator>-&gt;</operator><name>cur</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>yadif</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <call><name>av_frame_clone</name><argument_list>(<argument><expr><name><name>yadif</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>yadif</name><operator>-&gt;</operator><name>cur</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>yadif</name><operator>-&gt;</operator><name>current_field</name></name> <operator>=</operator> <name>YADIF_FIELD_END</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>checkstride</name><argument_list>(<argument><expr><name>yadif</name></expr></argument>, <argument><expr><name><name>yadif</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>yadif</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Reallocating frame due to differing stride\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fixstride</name><argument_list>(<argument><expr><name>link</name></expr></argument>, <argument><expr><name><name>yadif</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>checkstride</name><argument_list>(<argument><expr><name>yadif</name></expr></argument>, <argument><expr><name><name>yadif</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>yadif</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fixstride</name><argument_list>(<argument><expr><name>link</name></expr></argument>, <argument><expr><name><name>yadif</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>yadif</name><operator>-&gt;</operator><name>prev</name></name> <operator>&amp;&amp;</operator> <call><name>checkstride</name><argument_list>(<argument><expr><name>yadif</name></expr></argument>, <argument><expr><name><name>yadif</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>yadif</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fixstride</name><argument_list>(<argument><expr><name>link</name></expr></argument>, <argument><expr><name><name>yadif</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>checkstride</name><argument_list>(<argument><expr><name>yadif</name></expr></argument>, <argument><expr><name><name>yadif</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>yadif</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name><name>yadif</name><operator>-&gt;</operator><name>prev</name></name> <operator>&amp;&amp;</operator> <call><name>checkstride</name><argument_list>(<argument><expr><name>yadif</name></expr></argument>, <argument><expr><name><name>yadif</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>yadif</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to reallocate frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>yadif</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>yadif</name><operator>-&gt;</operator><name>deint</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>yadif</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>interlaced_frame</name></name><operator>)</operator> <operator>||</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>is_disabled</name></name> <operator>||</operator>
<operator>(</operator><name><name>yadif</name><operator>-&gt;</operator><name>deint</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>yadif</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>&amp;&amp;</operator> <name><name>yadif</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>repeat_pict</name></name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>yadif</name><operator>-&gt;</operator><name>deint</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>yadif</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>&amp;&amp;</operator> <name><name>yadif</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>repeat_pict</name></name><operator>)</operator></expr>
)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>yadif</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <call><name>av_frame_clone</name><argument_list>(<argument><expr><name><name>yadif</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>yadif</name><operator>-&gt;</operator><name>out</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>yadif</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>yadif</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>yadif</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>pts</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>yadif</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>yadif</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>link</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>link</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>yadif</name><operator>-&gt;</operator><name>out</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name><name>yadif</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>yadif</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yadif</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>yadif</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>yadif</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>pts</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>return_frame</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_yadif_request_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>link</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>YADIFContext</name> <modifier>*</modifier></type><name>yadif</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>yadif</name><operator>-&gt;</operator><name>frame_pending</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>return_frame</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>yadif</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_request_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AVERROR_EOF</name> <operator>&amp;&amp;</operator> <name><name>yadif</name><operator>-&gt;</operator><name>cur</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><call><name>av_frame_clone</name><argument_list>(<argument><expr><name><name>yadif</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>next</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>yadif</name><operator>-&gt;</operator><name>current_field</name></name> <operator>=</operator> <name>YADIF_FIELD_BACK_END</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>yadif</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>pts</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <name><name>yadif</name><operator>-&gt;</operator><name>cur</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_yadif_filter_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yadif</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(YADIFContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM|AV_OPT_FLAG_FILTERING_PARAM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONST</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>help</name></type></parameter>, <parameter><type><name>val</name></type></parameter>, <parameter><type><name>unit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ name, help, 0, AV_OPT_TYPE_CONST, {.i64=val}, INT_MIN, INT_MAX, FLAGS, unit }</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name></type> <name><name>ff_yadif_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"mode"</literal></expr>, <expr><literal type="string">"specify the interlacing mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>YADIF_MODE_SEND_FRAME</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"mode"</literal></expr>}</block></expr>,
<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"send_frame"</literal></expr></argument>, <argument><expr><literal type="string">"send one frame for each frame"</literal></expr></argument>, <argument><expr><name>YADIF_MODE_SEND_FRAME</name></expr></argument>, <argument><expr><literal type="string">"mode"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"send_field"</literal></expr></argument>, <argument><expr><literal type="string">"send one frame for each field"</literal></expr></argument>, <argument><expr><name>YADIF_MODE_SEND_FIELD</name></expr></argument>, <argument><expr><literal type="string">"mode"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"send_frame_nospatial"</literal></expr></argument>, <argument><expr><literal type="string">"send one frame for each frame, but skip spatial interlacing check"</literal></expr></argument>, <argument><expr><name>YADIF_MODE_SEND_FRAME_NOSPATIAL</name></expr></argument>, <argument><expr><literal type="string">"mode"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"send_field_nospatial"</literal></expr></argument>, <argument><expr><literal type="string">"send one frame for each field, but skip spatial interlacing check"</literal></expr></argument>, <argument><expr><name>YADIF_MODE_SEND_FIELD_NOSPATIAL</name></expr></argument>, <argument><expr><literal type="string">"mode"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"parity"</literal></expr>, <expr><literal type="string">"specify the assumed picture field parity"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>parity</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>YADIF_PARITY_AUTO</name></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"parity"</literal></expr> }</block></expr>,
<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"tff"</literal></expr></argument>, <argument><expr><literal type="string">"assume top field first"</literal></expr></argument>, <argument><expr><name>YADIF_PARITY_TFF</name></expr></argument>, <argument><expr><literal type="string">"parity"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"bff"</literal></expr></argument>, <argument><expr><literal type="string">"assume bottom field first"</literal></expr></argument>, <argument><expr><name>YADIF_PARITY_BFF</name></expr></argument>, <argument><expr><literal type="string">"parity"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"auto"</literal></expr></argument>, <argument><expr><literal type="string">"auto detect parity"</literal></expr></argument>, <argument><expr><name>YADIF_PARITY_AUTO</name></expr></argument>, <argument><expr><literal type="string">"parity"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"deint"</literal></expr>, <expr><literal type="string">"specify which frames to deinterlace"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>deint</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><name>YADIF_DEINT_ALL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"deint"</literal></expr> }</block></expr>,
<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>, <argument><expr><literal type="string">"deinterlace all frames"</literal></expr></argument>, <argument><expr><name>YADIF_DEINT_ALL</name></expr></argument>, <argument><expr><literal type="string">"deint"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST</name><argument_list>(<argument><expr><literal type="string">"interlaced"</literal></expr></argument>, <argument><expr><literal type="string">"only deinterlace frames marked as interlaced"</literal></expr></argument>, <argument><expr><name>YADIF_DEINT_INTERLACED</name></expr></argument>, <argument><expr><literal type="string">"deint"</literal></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
